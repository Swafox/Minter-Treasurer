"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FeePrice = FeePrice;

var _big = _interopRequireDefault(require("big.js"));

var _ethjsUtil = require("ethjs-util");

var _txTypes = require("./tx-types.js");

var _converter = require("./converter.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Accept current network fee values in pips.
 * Provide instance to calculate fee for particular transaction based on its params.
 *
 * @param {CommissionPriceData} commissionPriceData
 * @constructor
 */
function FeePrice(commissionPriceData) {
  var _this = this;

  var _mapApiData = mapApiData(commissionPriceData),
      baseFeeList = _mapApiData.baseFeeList,
      deltaFeeList = _mapApiData.deltaFeeList,
      tickerFeeList = _mapApiData.tickerFeeList,
      payloadByteFee = _mapApiData.payloadByteFee;

  this.baseFeeList = baseFeeList;
  this.deltaFeeList = deltaFeeList;
  this.tickerFeeList = tickerFeeList;
  this.payloadByteFee = payloadByteFee;
  /**
   * @param {TX_TYPE} txType
   * @param {FeePriceOptions} [options]
   * @return {number|string}
   */

  this.getFeeValue = function (txType) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        payload = _ref.payload,
        _ref$payloadLength = _ref.payloadLength,
        payloadLength = _ref$payloadLength === void 0 ? 0 : _ref$payloadLength,
        coinSymbol = _ref.coinSymbol,
        coinSymbolLength = _ref.coinSymbolLength,
        deltaItemCount = _ref.deltaItemCount;

    // txType to string
    txType = (0, _txTypes.normalizeTxType)(txType);
    var isDeltaType = txType === _txTypes.TX_TYPE.MULTISEND || txType === _txTypes.TX_TYPE.BUY_SWAP_POOL || txType === _txTypes.TX_TYPE.SELL_SWAP_POOL || txType === _txTypes.TX_TYPE.SELL_ALL_SWAP_POOL;

    if (isDeltaType && !(deltaItemCount >= 1)) {
      throw new Error("`deltaItemCount` should be positive integer when tx type is ".concat(txType, " (").concat(_txTypes.txTypeList[Number(txType)].name, ")"));
    }

    if (Buffer.isBuffer(payload)) {
      payloadLength = payload.length;
    } else if (payload) {
      payloadLength = (0, _ethjsUtil.getBinarySize)(payload.toString());
    }

    var baseFee = _this.baseFeeList[txType];

    if (isFeeInvalid(baseFee)) {
      // eslint-disable-next-line no-console
      console.warn("No base commission price specified for ".concat(txType, " tx type (").concat(_txTypes.txTypeList[Number(txType)].name, ")"));
      baseFee = 0;
    }

    var deltaFee = _this.deltaFeeList[txType];

    if (isDeltaType && isFeeInvalid(deltaFee)) {
      // eslint-disable-next-line no-console
      console.warn("No delta commission price specified for ".concat(txType, " tx type (").concat(_txTypes.txTypeList[Number(txType)].name, ")"));
      deltaFee = 0;
    } // extra fee based on count


    var deltaTotalFee = isDeltaType ? new _big["default"](deltaItemCount - 1).times(deltaFee) : 0; // coin symbol extra fee

    var tickerLengthFee = txType === _txTypes.TX_TYPE.CREATE_COIN || txType === _txTypes.TX_TYPE.CREATE_TOKEN ? _this.getCoinSymbolFee(coinSymbol, coinSymbolLength) : 0;
    var payloadFee = new _big["default"](_this.payloadByteFee).times(payloadLength);
    return (0, _converter.convertFromPip)(new _big["default"](baseFee).plus(payloadFee).plus(deltaTotalFee).plus(tickerLengthFee));
  };
  /**
   * @param {string} [ticker]
   * @param {number} [length]
   * @return {number|string} - value in pip
   */


  this.getCoinSymbolFee = function (ticker, length) {
    length = ticker ? ticker.length : length;

    if (!isValidLength(length)) {
      length = 7;
    }

    return _this.tickerFeeList[length]; // eslint-disable-next-line unicorn/consistent-function-scoping, no-shadow

    function isValidLength(length) {
      return length >= 3 && length <= 7;
    }
  };
}

function isFeeInvalid(fee) {
  return typeof fee !== 'number' && typeof fee !== 'string' || typeof fee === 'string' && fee.length === 0;
}
/**
 * @typedef {Object} FeePriceOptions
 * @param {string|Buffer} [payload]
 * @param {number} [payloadLength]
 * @param {string} [coinSymbol]
 * @param {number} [coinSymbolLength]
 * @param {number} [deltaItemCount]
 */

/**
 * @typedef {Object} TickerFeeList
 * @type {{'3': number|string, '4': number|string, '5': number|string, '6': number|string, '7': number|string}}
 */

/**
 * @typedef {Object} FeeList
 * @type {{TX_TYPE: number|string}}
 */

/**
 * @param {CommissionPriceData} data
 * @return {CommissionPriceMapped}
 */


function mapApiData(data) {
  var _baseFeeList, _deltaFeeList;

  var coin = data.coin;
  var payloadByteFee = data.payload_byte;
  var tickerFeeList = {
    3: data.create_ticker3,
    4: data.create_ticker4,
    5: data.create_ticker5,
    6: data.create_ticker6,
    7: data.create_ticker7_10
  };
  var baseFeeList = (_baseFeeList = {}, _defineProperty(_baseFeeList, _txTypes.TX_TYPE.SEND, data.send), _defineProperty(_baseFeeList, _txTypes.TX_TYPE.SELL, data.sell_bancor), _defineProperty(_baseFeeList, _txTypes.TX_TYPE.SELL_ALL, data.sell_all_bancor), _defineProperty(_baseFeeList, _txTypes.TX_TYPE.BUY, data.buy_bancor), _defineProperty(_baseFeeList, _txTypes.TX_TYPE.CREATE_COIN, data.create_coin), _defineProperty(_baseFeeList, _txTypes.TX_TYPE.DECLARE_CANDIDACY, data.declare_candidacy), _defineProperty(_baseFeeList, _txTypes.TX_TYPE.DELEGATE, data.delegate), _defineProperty(_baseFeeList, _txTypes.TX_TYPE.UNBOND, data.unbond), _defineProperty(_baseFeeList, _txTypes.TX_TYPE.REDEEM_CHECK, data.redeem_check), _defineProperty(_baseFeeList, _txTypes.TX_TYPE.SET_CANDIDATE_ON, data.set_candidate_on), _defineProperty(_baseFeeList, _txTypes.TX_TYPE.SET_CANDIDATE_OFF, data.set_candidate_off), _defineProperty(_baseFeeList, _txTypes.TX_TYPE.CREATE_MULTISIG, data.create_multisig), _defineProperty(_baseFeeList, _txTypes.TX_TYPE.MULTISEND, data.multisend_base), _defineProperty(_baseFeeList, _txTypes.TX_TYPE.EDIT_CANDIDATE, data.edit_candidate), _defineProperty(_baseFeeList, _txTypes.TX_TYPE.SET_HALT_BLOCK, data.set_halt_block), _defineProperty(_baseFeeList, _txTypes.TX_TYPE.RECREATE_COIN, data.recreate_coin), _defineProperty(_baseFeeList, _txTypes.TX_TYPE.EDIT_TICKER_OWNER, data.edit_ticker_owner), _defineProperty(_baseFeeList, _txTypes.TX_TYPE.EDIT_MULTISIG, data.edit_multisig), _defineProperty(_baseFeeList, _txTypes.TX_TYPE.PRICE_VOTE, data.price_vote), _defineProperty(_baseFeeList, _txTypes.TX_TYPE.EDIT_CANDIDATE_PUBLIC_KEY, data.edit_candidate_public_key), _defineProperty(_baseFeeList, _txTypes.TX_TYPE.ADD_LIQUIDITY, data.add_liquidity), _defineProperty(_baseFeeList, _txTypes.TX_TYPE.REMOVE_LIQUIDITY, data.remove_liquidity), _defineProperty(_baseFeeList, _txTypes.TX_TYPE.SELL_SWAP_POOL, data.sell_pool_base), _defineProperty(_baseFeeList, _txTypes.TX_TYPE.BUY_SWAP_POOL, data.buy_pool_base), _defineProperty(_baseFeeList, _txTypes.TX_TYPE.SELL_ALL_SWAP_POOL, data.sell_all_pool_base), _defineProperty(_baseFeeList, _txTypes.TX_TYPE.EDIT_CANDIDATE_COMMISSION, data.edit_candidate_commission), _defineProperty(_baseFeeList, _txTypes.TX_TYPE.MOVE_STAKE, data.move_stake), _defineProperty(_baseFeeList, _txTypes.TX_TYPE.MINT_TOKEN, data.mint_token), _defineProperty(_baseFeeList, _txTypes.TX_TYPE.BURN_TOKEN, data.burn_token), _defineProperty(_baseFeeList, _txTypes.TX_TYPE.CREATE_TOKEN, data.create_token), _defineProperty(_baseFeeList, _txTypes.TX_TYPE.RECREATE_TOKEN, data.recreate_token), _defineProperty(_baseFeeList, _txTypes.TX_TYPE.VOTE_COMMISSION, data.vote_commission), _defineProperty(_baseFeeList, _txTypes.TX_TYPE.VOTE_UPDATE, data.vote_update), _defineProperty(_baseFeeList, _txTypes.TX_TYPE.CREATE_SWAP_POOL, data.create_swap_pool), _defineProperty(_baseFeeList, _txTypes.TX_TYPE.ADD_LIMIT_ORDER, data.add_limit_order), _defineProperty(_baseFeeList, _txTypes.TX_TYPE.REMOVE_LIMIT_ORDER, data.remove_limit_order), _baseFeeList);
  var deltaFeeList = (_deltaFeeList = {}, _defineProperty(_deltaFeeList, _txTypes.TX_TYPE.MULTISEND, data.multisend_delta), _defineProperty(_deltaFeeList, _txTypes.TX_TYPE.SELL_SWAP_POOL, data.sell_pool_delta), _defineProperty(_deltaFeeList, _txTypes.TX_TYPE.BUY_SWAP_POOL, data.buy_pool_delta), _defineProperty(_deltaFeeList, _txTypes.TX_TYPE.SELL_ALL_SWAP_POOL, data.sell_all_pool_delta), _deltaFeeList);
  return {
    coin: coin,
    baseFeeList: baseFeeList,
    deltaFeeList: deltaFeeList,
    tickerFeeList: tickerFeeList,
    payloadByteFee: payloadByteFee
  };
}
/**
 * @typedef {Object} CommissionPriceMapped
 * @property {Coin} coin
 * @property {FeeList} baseFeeList
 * @property {FeeList} deltaFeeList
 * @property {TickerFeeList} tickerFeeList
 * @property {number|string} payloadByteFee
 */

/**
 * @typedef {Object} CommissionPriceData
 * @property {Coin} coin
 * @property {string|number} payload_byte
 * @property {string|number} send
 * @property {string|number} buy_bancor
 * @property {string|number} sell_bancor
 * @property {string|number} sell_all_bancor
 * @property {string|number} buy_pool_base
 * @property {string|number} buy_pool_delta
 * @property {string|number} sell_pool_base
 * @property {string|number} sell_pool_delta
 * @property {string|number} sell_all_pool_base
 * @property {string|number} sell_all_pool_delta
 * @property {string|number} create_ticker3
 * @property {string|number} create_ticker4
 * @property {string|number} create_ticker5
 * @property {string|number} create_ticker6
 * @property {string|number} create_ticker7_10
 * @property {string|number} create_coin
 * @property {string|number} create_token
 * @property {string|number} recreate_coin
 * @property {string|number} recreate_token
 * @property {string|number} declare_candidacy
 * @property {string|number} delegate
 * @property {string|number} unbond
 * @property {string|number} redeem_check
 * @property {string|number} set_candidate_on
 * @property {string|number} set_candidate_off
 * @property {string|number} create_multisig
 * @property {string|number} multisend_delta
 * @property {string|number} multisend_base
 * @property {string|number} edit_candidate
 * @property {string|number} set_halt_block
 * @property {string|number} edit_ticker_owner
 * @property {string|number} edit_multisig
 * @property {string|number} [price_vote]
 * @property {string|number} edit_candidate_public_key
 * @property {string|number} add_liquidity
 * @property {string|number} remove_liquidity
 * @property {string|number} edit_candidate_commission
 * @property {string|number} [move_stake]
 * @property {string|number} mint_token
 * @property {string|number} burn_token
 * @property {string|number} vote_commission
 * @property {string|number} vote_update
 * @property {string|number} create_swap_pool
 * @property {string|number} failed_tx
 * @property {string|number} add_limit_order
 * @property {string|number} remove_limit_order
 */