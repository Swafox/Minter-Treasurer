'use strict';

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var qs = require('qs');
var minterjsUtil = require('minterjs-util');
var utils = require('../utils.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
/**
 * @typedef {Object} EstimateBuyResult
 * @property {number|string} will_pay - amount of coinToSell
 * @property {number|string} commission - amount of coinToSell to pay fee
 * @property {"pool"|"bancor"} swap_from
 */

/**
 * @param {MinterApiInstance} apiInstance
 * @return {function({coinToBuy: (string|number), valueToBuy: (string|number), coinToSell: (string|number), swapFrom?: ESTIMATE_SWAP_TYPE, route?: Array<number>, gasCoin?: (string|number), coinCommission?: (string|number)}, axiosOptions: AxiosRequestConfig=): Promise<EstimateBuyResult>}
 */

function EstimateCoinBuy(apiInstance) {
  return estimateCoinBuy;
  /**
   * @param {Object} params
   * @param {string|number} params.coinToBuy - ID or symbol of the coin to buy
   * @param {string|number} params.valueToBuy
   * @param {string|number} params.coinToSell - ID or symbol of the coin to sell
   * @param {ESTIMATE_SWAP_TYPE} [params.swapFrom] - estimate from pool, bancor or optimal
   * @param {Array<string|number>} [params.route] - IDs of intermediate coins for pool swaps
   * @param {string|number} [params.gasCoin]
   * @param {string|number} [params.coinCommission] - gasCoin alias
   * @param {import('axios').AxiosRequestConfig} [axiosOptions]
   * @return {Promise<EstimateBuyResult>}
   */

  function estimateCoinBuy(params, axiosOptions) {
    if (params.coinIdToSell || params.coinIdToSell === 0) {
      params.coinToSell = params.coinIdToSell; // eslint-disable-next-line no-console

      console.warn('coinIdToSell is deprecated, use coinToSell instead');
    }

    if (params.coinIdToBuy || params.coinIdToBuy === 0) {
      params.coinToBuy = params.coinIdToBuy; // eslint-disable-next-line no-console

      console.warn('coinIdToSell is deprecated, use coinToSell instead');
    }

    if (!params.coinToBuy && params.coinToBuy !== 0) {
      return Promise.reject(new Error('Coin to buy not specified'));
    }

    if (!params.valueToBuy) {
      return Promise.reject(new Error('Value to buy not specified'));
    }

    if (!params.coinToSell && params.coinToSell !== 0) {
      return Promise.reject(new Error('Coin to sell not specified'));
    }

    var gasCoin = params.gasCoin || params.gasCoin === 0 ? params.gasCoin : params.coinCommission;
    params = {
      coin_id_to_buy: utils.isCoinId(params.coinToBuy) ? params.coinToBuy : undefined,
      coin_to_buy: !utils.isCoinId(params.coinToBuy) ? params.coinToBuy : undefined,
      value_to_buy: minterjsUtil.convertToPip(params.valueToBuy),
      coin_id_to_sell: utils.isCoinId(params.coinToSell) ? params.coinToSell : undefined,
      coin_to_sell: !utils.isCoinId(params.coinToSell) ? params.coinToSell : undefined,
      swap_from: params.swapFrom,
      route: params.route,
      coin_id_commission: utils.isCoinId(gasCoin) ? gasCoin : undefined,
      coin_commission: !utils.isCoinId(gasCoin) ? gasCoin : undefined
    };
    return apiInstance.get('estimate_coin_buy', _objectSpread(_objectSpread({}, axiosOptions), {}, {
      params: params,
      paramsSerializer: function paramsSerializer(query) {
        return qs.stringify(query, {
          arrayFormat: 'repeat'
        });
      }
    })).then(function (response) {
      var resData = response.data;

      if (!utils.isValidNumber(resData.will_pay)) {
        throw new Error('Invalid estimation data, `will_pay` not specified');
      }

      if (!utils.isValidNumber(resData.commission)) {
        throw new Error('Invalid estimation data, `commission` not specified');
      }

      return _objectSpread(_objectSpread({}, resData), {}, {
        // convert pips
        will_pay: minterjsUtil.convertFromPip(resData.will_pay),
        commission: minterjsUtil.convertFromPip(resData.commission)
      });
    });
  }
}

module.exports = EstimateCoinBuy;
