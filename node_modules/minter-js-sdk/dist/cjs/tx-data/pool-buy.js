'use strict';

var minterjsTx = require('minterjs-tx');
var minterjsUtil = require('minterjs-util');
var utils = require('../utils.js');

/**
 * @param {Array<number|string>} coins - list of coin id
 * @param {number|string} valueToBuy
 * @param {number|string} [maximumValueToSell]
 * @constructor
 */

function BuyPoolTxData(_ref) {
  var coins = _ref.coins,
      valueToBuy = _ref.valueToBuy,
      _ref$maximumValueToSe = _ref.maximumValueToSell,
      maximumValueToSell = _ref$maximumValueToSe === void 0 ? minterjsUtil.COIN_MAX_AMOUNT : _ref$maximumValueToSe;
  utils.validateUintArray(coins, 'coins');
  utils.validateAmount(valueToBuy, 'valueToBuy');
  utils.validateAmount(maximumValueToSell, 'maximumValueToSell');
  this.coins = coins;
  this.valueToBuy = valueToBuy;
  this.maximumValueToSell = maximumValueToSell;
  this.txData = new minterjsTx.TxDataBuySwapPool({
    coins: coins.map(function (coin) {
      return utils.integerToHexString(coin);
    }),
    valueToBuy: "0x".concat(minterjsUtil.convertToPip(valueToBuy, 'hex')),
    maximumValueToSell: "0x".concat(minterjsUtil.convertToPip(maximumValueToSell, 'hex'))
  });
  utils.proxyNestedTxData(this);
}
/**
 * @param {Array<Buffer>} coins
 * @param {Buffer|string} valueToBuy
 * @param {Buffer|string} maximumValueToSell
 * @return {BuyPoolTxData}
 */

BuyPoolTxData.fromBufferFields = function fromBufferFields(_ref2) {
  var coins = _ref2.coins,
      valueToBuy = _ref2.valueToBuy,
      maximumValueToSell = _ref2.maximumValueToSell;
  return new BuyPoolTxData({
    coins: coins.map(function (item) {
      return utils.bufferToInteger(item);
    }),
    valueToBuy: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(valueToBuy))),
    maximumValueToSell: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(maximumValueToSell)))
  });
};
/**
 * @param {Buffer|string} data
 * @return {BuyPoolTxData}
 */


BuyPoolTxData.fromRlp = function fromRlp(data) {
  return BuyPoolTxData.fromBufferFields(new minterjsTx.TxDataBuySwapPool(data));
};

module.exports = BuyPoolTxData;
