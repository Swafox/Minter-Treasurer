'use strict';

var minterjsTx = require('minterjs-tx');
var minterjsUtil = require('minterjs-util');
var utils = require('../utils.js');

/**
 * @param {number|string} coin0 - coin id
 * @param {number|string} coin1 - coin id
 * @param {number|string} volume0
 * @param {number|string} [maximumVolume1]
 * @constructor
 */

function AddLiquidityTxData(_ref) {
  var coin0 = _ref.coin0,
      coin1 = _ref.coin1,
      volume0 = _ref.volume0,
      _ref$maximumVolume = _ref.maximumVolume1,
      maximumVolume1 = _ref$maximumVolume === void 0 ? minterjsUtil.COIN_MAX_AMOUNT : _ref$maximumVolume;
  utils.validateUint(coin0, 'coin0');
  utils.validateUint(coin1, 'coin1');
  utils.validateAmount(volume0, 'volume0');
  utils.validateAmount(maximumVolume1, 'maximumVolume1');
  this.coin0 = coin0;
  this.coin1 = coin1;
  this.volume0 = volume0;
  this.maximumVolume1 = maximumVolume1;
  this.txData = new minterjsTx.TxDataAddLiquidity({
    coin0: utils.integerToHexString(coin0),
    coin1: utils.integerToHexString(coin1),
    volume0: "0x".concat(minterjsUtil.convertToPip(volume0, 'hex')),
    maximumVolume1: "0x".concat(minterjsUtil.convertToPip(maximumVolume1, 'hex'))
  });
  utils.proxyNestedTxData(this);
}
/**
 * @param {Buffer|string} coin0
 * @param {Buffer|string} volume0
 * @param {Buffer|string} coin1
 * @param {Buffer|string} maximumVolume1
 * @return {AddLiquidityTxData}
 */

AddLiquidityTxData.fromBufferFields = function fromBufferFields(_ref2) {
  var coin0 = _ref2.coin0,
      volume0 = _ref2.volume0,
      coin1 = _ref2.coin1,
      maximumVolume1 = _ref2.maximumVolume1;
  return new AddLiquidityTxData({
    coin0: utils.bufferToInteger(minterjsUtil.toBuffer(coin0)),
    coin1: utils.bufferToInteger(minterjsUtil.toBuffer(coin1)),
    volume0: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(volume0))),
    maximumVolume1: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(maximumVolume1)))
  });
};
/**
 * @param {Buffer|string} data
 * @return {AddLiquidityTxData}
 */


AddLiquidityTxData.fromRlp = function fromRlp(data) {
  return AddLiquidityTxData.fromBufferFields(new minterjsTx.TxDataAddLiquidity(data));
};

module.exports = AddLiquidityTxData;
