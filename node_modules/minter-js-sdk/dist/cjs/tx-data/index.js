'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var minterjsUtil = require('minterjs-util');
var send = require('./send.js');
var multisend = require('./multisend.js');
var convertSell = require('./convert-sell.js');
var convertBuy = require('./convert-buy.js');
var convertSellAll = require('./convert-sell-all.js');
var createCoin = require('./create-coin.js');
var candidacyDeclare = require('./candidacy-declare.js');
var candidateEdit = require('./candidate-edit.js');
var candidateSetOn = require('./candidate-set-on.js');
var stakeDelegate = require('./stake-delegate.js');
var stakeUnbond = require('./stake-unbond.js');
var redeemCheck = require('./redeem-check.js');
var createMultisig = require('./create-multisig.js');
var voteHaltBlock = require('./vote-halt-block.js');
var recreateCoin = require('./recreate-coin.js');
var editTickerOwner = require('./edit-ticker-owner.js');
var editMultisig = require('./edit-multisig.js');
var votePrice = require('./vote-price.js');
var candidateEditPublicKey = require('./candidate-edit-public-key.js');
var poolAddLiquidity = require('./pool-add-liquidity.js');
var poolRemoveLiquidity = require('./pool-remove-liquidity.js');
var poolBuy = require('./pool-buy.js');
var poolSell = require('./pool-sell.js');
var poolSellAll = require('./pool-sell-all.js');
var candidateEditCommission = require('./candidate-edit-commission.js');
var stakeMove = require('./stake-move.js');
var tokenMint = require('./token-mint.js');
var tokenBurn = require('./token-burn.js');
var tokenCreate = require('./token-create.js');
var tokenRecreate = require('./token-recreate.js');
var voteCommission = require('./vote-commission.js');
var voteUpdate = require('./vote-update.js');
var poolCreate = require('./pool-create.js');
var limitOrderAdd = require('./limit-order-add.js');
var limitOrderRemove = require('./limit-order-remove.js');
var check = require('../check.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

var _TX_DATA_CONSTRUCTOR;
var TX_DATA_CONSTRUCTOR = (_TX_DATA_CONSTRUCTOR = {}, _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.SEND, send), _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.MULTISEND, multisend), _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.SELL, convertSell), _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.BUY, convertBuy), _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.SELL_ALL, convertSellAll), _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.CREATE_COIN, createCoin), _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.DECLARE_CANDIDACY, candidacyDeclare), _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.EDIT_CANDIDATE, candidateEdit), _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.SET_CANDIDATE_ON, candidateSetOn), _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.SET_CANDIDATE_OFF, candidateSetOn), _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.DELEGATE, stakeDelegate), _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.UNBOND, stakeUnbond), _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.REDEEM_CHECK, redeemCheck), _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.CREATE_MULTISIG, createMultisig), _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.SET_HALT_BLOCK, voteHaltBlock), _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.RECREATE_COIN, recreateCoin), _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.EDIT_TICKER_OWNER, editTickerOwner), _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.EDIT_MULTISIG, editMultisig), _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.PRICE_VOTE, votePrice), _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.EDIT_CANDIDATE_PUBLIC_KEY, candidateEditPublicKey), _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.ADD_LIQUIDITY, poolAddLiquidity), _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.REMOVE_LIQUIDITY, poolRemoveLiquidity), _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.BUY_SWAP_POOL, poolBuy), _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.SELL_SWAP_POOL, poolSell), _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.SELL_ALL_SWAP_POOL, poolSellAll), _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.EDIT_CANDIDATE_COMMISSION, candidateEditCommission), _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.MOVE_STAKE, stakeMove), _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.MINT_TOKEN, tokenMint), _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.BURN_TOKEN, tokenBurn), _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.CREATE_TOKEN, tokenCreate), _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.RECREATE_TOKEN, tokenRecreate), _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.VOTE_COMMISSION, voteCommission), _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.VOTE_UPDATE, voteUpdate), _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.CREATE_SWAP_POOL, poolCreate), _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.ADD_LIMIT_ORDER, limitOrderAdd), _defineProperty__default["default"](_TX_DATA_CONSTRUCTOR, minterjsUtil.TX_TYPE.REMOVE_LIMIT_ORDER, limitOrderRemove), _TX_DATA_CONSTRUCTOR);
/**
 * @param {TX_TYPE|number|string|Buffer|Uint8Array} txType
 * @return {SendTxData|MultisendTxData|SellTxData|SellAllTxData|BuyTxData|CreateCoinTxData|DeclareCandidacyTxData|EditCandidateTxData|SetCandidateOnTxData|SetCandidateOffTxData|DelegateTxData|UnbondTxData|RedeemCheckTxData|CreateMultisigTxData|SetHaltBlockTxData|RecreateCoinTxData|EditTickerOwnerTxData|EditMultisigTxData|PriceVoteTxData|EditCandidatePublicKeyTxData|AddLiquidityTxData|RemoveLiquidityTxData|BuyPoolTxData|SellPoolTxData|SellAllPoolTxData|EditCandidateCommissionTxData|MintTokenTxData|BurnTokenTxData|CreateTokenTxData|RecreateTokenTxData|VoteCommissionTxData|VoteUpdateTxData|CreatePoolTxData|AddLimitOrderTxData|RemoveLimitOrderTxData}
 */

function getTxData(txType) {
  txType = minterjsUtil.normalizeTxType(txType);
  return TX_DATA_CONSTRUCTOR[txType];
}
/**
 * @param {Buffer|TxData|Object} txData
 * @param {TX_TYPE} txType
 * @param {TxOptions} [options] - options for RedeemCheckTxData
 * @return {Buffer}
 */

function ensureBufferData(txData, txType, options) {
  // serialize, if it TxData
  if (typeof txData.serialize === 'function') {
    txData = txData.serialize();
  } // make buffer from object


  if (typeof txData.length === 'undefined') {
    var TxData = getTxData(txType);
    txData = new TxData(txData, options);
    txData = txData.serialize();
  }

  return txData;
}
/**
 * Decode rlp txData into fields
 * @param {TX_TYPE} txType
 * @param {string|Buffer|Uint8Array} txData
 * @param {boolean} [decodeCheck]
 */

function decodeTxData(txType, txData) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      isDecodeCheck = _ref.decodeCheck;

  txType = minterjsUtil.normalizeTxType(txType);
  var txDataDecoded = getTxData(txType).fromRlp(txData);
  var fields = txDataDecoded.fields;

  if (isDecodeCheck && txType === minterjsUtil.TX_TYPE.REDEEM_CHECK) {
    fields.checkData = check.decodeCheck(fields.check);
  }

  return fields;
}

exports.decodeTxData = decodeTxData;
exports["default"] = getTxData;
exports.ensureBufferData = ensureBufferData;
