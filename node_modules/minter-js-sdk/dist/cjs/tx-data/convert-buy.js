'use strict';

var minterjsTx = require('minterjs-tx');
var minterjsUtil = require('minterjs-util');
var utils = require('../utils.js');

/**
 * @param {number|string} coinToSell - coin id
 * @param {number|string} coinToBuy - coin id
 * @param {number|string} valueToBuy
 * @param {number|string} [maximumValueToSell]
 * @constructor
 */

function BuyTxData(_ref) {
  var coinToSell = _ref.coinToSell,
      coinToBuy = _ref.coinToBuy,
      valueToBuy = _ref.valueToBuy,
      _ref$maximumValueToSe = _ref.maximumValueToSell,
      maximumValueToSell = _ref$maximumValueToSe === void 0 ? minterjsUtil.COIN_MAX_AMOUNT : _ref$maximumValueToSe;
  utils.validateUint(coinToSell, 'coinToSell');
  utils.validateUint(coinToBuy, 'coinToBuy');
  utils.validateAmount(valueToBuy, 'valueToBuy');
  utils.validateAmount(maximumValueToSell, 'maximumValueToSell');
  this.coinToSell = coinToSell;
  this.coinToBuy = coinToBuy;
  this.valueToBuy = valueToBuy;
  this.maximumValueToSell = maximumValueToSell;
  this.txData = new minterjsTx.TxDataBuy({
    coinToSell: utils.integerToHexString(coinToSell),
    coinToBuy: utils.integerToHexString(coinToBuy),
    valueToBuy: "0x".concat(minterjsUtil.convertToPip(valueToBuy, 'hex')),
    maximumValueToSell: "0x".concat(minterjsUtil.convertToPip(maximumValueToSell, 'hex'))
  });
  utils.proxyNestedTxData(this);
}
/**
 * @param {Buffer|string} coinToSell
 * @param {Buffer|string} valueToBuy
 * @param {Buffer|string} coinToBuy
 * @param {Buffer|string} maximumValueToSell
 * @return {BuyTxData}
 */

BuyTxData.fromBufferFields = function fromBufferFields(_ref2) {
  var coinToSell = _ref2.coinToSell,
      valueToBuy = _ref2.valueToBuy,
      coinToBuy = _ref2.coinToBuy,
      maximumValueToSell = _ref2.maximumValueToSell;
  return new BuyTxData({
    coinToSell: utils.bufferToInteger(minterjsUtil.toBuffer(coinToSell)),
    coinToBuy: utils.bufferToInteger(minterjsUtil.toBuffer(coinToBuy)),
    valueToBuy: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(valueToBuy))),
    maximumValueToSell: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(maximumValueToSell)))
  });
};
/**
 * @param {Buffer|string} data
 * @return {BuyTxData}
 */


BuyTxData.fromRlp = function fromRlp(data) {
  return BuyTxData.fromBufferFields(new minterjsTx.TxDataBuy(data));
};

module.exports = BuyTxData;
