'use strict';

var minterjsTx = require('minterjs-tx');
var minterjsUtil = require('minterjs-util');
var utils = require('../utils.js');

/**
 * @param {string} [name]
 * @param {string} symbol
 * @param {number|string} initialAmount
 * @param {number|string} initialReserve
 * @param {number|string} constantReserveRatio
 * @param {number|string} [maxSupply]
 * @constructor
 */

function CreateCoinTxData(_ref) {
  var _ref$name = _ref.name,
      name = _ref$name === void 0 ? '' : _ref$name,
      symbol = _ref.symbol,
      initialAmount = _ref.initialAmount,
      initialReserve = _ref.initialReserve,
      constantReserveRatio = _ref.constantReserveRatio,
      _ref$maxSupply = _ref.maxSupply,
      maxSupply = _ref$maxSupply === void 0 ? minterjsUtil.COIN_MAX_MAX_SUPPLY : _ref$maxSupply;
  utils.validateTicker(symbol, 'symbol');
  utils.validateAmount(initialAmount, 'initialAmount');
  utils.validateAmount(initialReserve, 'initialReserve');
  utils.validateMaxSupply(maxSupply, initialAmount);
  this.name = name;
  this.symbol = symbol;
  this.initialAmount = initialAmount;
  this.initialReserve = initialReserve;
  this.constantReserveRatio = constantReserveRatio;
  this.maxSupply = maxSupply;
  this.txData = new minterjsTx.TxDataCreateCoin({
    name: Buffer.from(name.toString(), 'utf-8'),
    symbol: minterjsUtil.coinToBuffer(symbol),
    initialAmount: "0x".concat(minterjsUtil.convertToPip(initialAmount, 'hex')),
    initialReserve: "0x".concat(minterjsUtil.convertToPip(initialReserve, 'hex')),
    constantReserveRatio: utils.integerToHexString(constantReserveRatio),
    maxSupply: "0x".concat(minterjsUtil.convertToPip(maxSupply, 'hex'))
  });
  utils.proxyNestedTxData(this);
}
/**
 *
 * @param {Buffer|string} name
 * @param {Buffer|string} symbol
 * @param {Buffer|string|number} initialAmount
 * @param {Buffer|string|number} initialReserve
 * @param {Buffer|string|number} constantReserveRatio
 * @param {number|string|number} maxSupply
 * @return {CreateCoinTxData}
 */

CreateCoinTxData.fromBufferFields = function fromBufferFields(_ref2) {
  var name = _ref2.name,
      symbol = _ref2.symbol,
      initialAmount = _ref2.initialAmount,
      initialReserve = _ref2.initialReserve,
      constantReserveRatio = _ref2.constantReserveRatio,
      maxSupply = _ref2.maxSupply;
  return new CreateCoinTxData({
    name: minterjsUtil.toBuffer(name).toString('utf-8'),
    symbol: minterjsUtil.bufferToCoin(minterjsUtil.toBuffer(symbol)),
    initialAmount: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(initialAmount))),
    initialReserve: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(initialReserve))),
    constantReserveRatio: utils.bufferToInteger(minterjsUtil.toBuffer(constantReserveRatio)),
    maxSupply: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(maxSupply)))
  });
};
/**
 * @param {Buffer|string} data
 * @return {CreateCoinTxData}
 */


CreateCoinTxData.fromRlp = function fromRlp(data) {
  return CreateCoinTxData.fromBufferFields(new minterjsTx.TxDataCreateCoin(data));
};

module.exports = CreateCoinTxData;
