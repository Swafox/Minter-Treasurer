'use strict';

var minterjsTx = require('minterjs-tx');
var minterjsUtil = require('minterjs-util');
var utils = require('../utils.js');

/**
 * @param {string} publicKey
 * @param {number|string} commission
 * @constructor
 */

function EditCandidateCommissionTxData(_ref) {
  var publicKey = _ref.publicKey,
      commission = _ref.commission;
  utils.validatePublicKey(publicKey, 'publicKey');
  utils.validateUint(commission, 'commission');
  this.publicKey = publicKey;
  this.commission = commission;
  this.txData = new minterjsTx.TxDataEditCandidateCommission({
    publicKey: minterjsUtil.toBuffer(publicKey),
    commission: utils.integerToHexString(commission)
  });
  utils.proxyNestedTxData(this);
}
/**
 * @param {Buffer|string} publicKey
 * @param {Buffer|string} commission
 * @return {EditCandidateCommissionTxData}
 */

EditCandidateCommissionTxData.fromBufferFields = function fromBufferFields(_ref2) {
  var publicKey = _ref2.publicKey,
      commission = _ref2.commission;
  return new EditCandidateCommissionTxData({
    publicKey: minterjsUtil.publicToString(publicKey),
    commission: utils.bufferToInteger(minterjsUtil.toBuffer(commission))
  });
};
/**
 * @param {Buffer|string} data
 * @return {EditCandidateCommissionTxData}
 */


EditCandidateCommissionTxData.fromRlp = function fromRlp(data) {
  return EditCandidateCommissionTxData.fromBufferFields(new minterjsTx.TxDataEditCandidateCommission(data));
};

module.exports = EditCandidateCommissionTxData;
