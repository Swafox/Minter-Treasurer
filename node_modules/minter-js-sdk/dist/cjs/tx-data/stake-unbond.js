'use strict';

var minterjsTx = require('minterjs-tx');
var minterjsUtil = require('minterjs-util');
var utils = require('../utils.js');

/**
 * @param {string} publicKey
 * @param {number|string} coin - coin id
 * @param {number|string} stake
 * @constructor
 */

function UnbondTxData(_ref) {
  var publicKey = _ref.publicKey,
      coin = _ref.coin,
      stake = _ref.stake;
  utils.validatePublicKey(publicKey, 'publicKey');
  utils.validateUint(coin, 'coin');
  utils.validateAmount(stake, 'stake');
  this.publicKey = publicKey;
  this.coin = coin;
  this.stake = stake;
  this.txData = new minterjsTx.TxDataUnbond({
    publicKey: minterjsUtil.toBuffer(publicKey),
    coin: utils.integerToHexString(coin),
    stake: "0x".concat(minterjsUtil.convertToPip(stake, 'hex'))
  });
  utils.proxyNestedTxData(this);
}
/**
 *
 * @param {Buffer|string} publicKey
 * @param {Buffer|string} stake
 * @param {Buffer|string} coin
 * @return {UnbondTxData}
 */

UnbondTxData.fromBufferFields = function fromBufferFields(_ref2) {
  var publicKey = _ref2.publicKey,
      coin = _ref2.coin,
      stake = _ref2.stake;
  return new UnbondTxData({
    publicKey: minterjsUtil.publicToString(publicKey),
    coin: utils.bufferToInteger(minterjsUtil.toBuffer(coin)),
    stake: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(stake)))
  });
};
/**
 * @param {Buffer|string} data
 * @return {UnbondTxData}
 */


UnbondTxData.fromRlp = function fromRlp(data) {
  return UnbondTxData.fromBufferFields(new minterjsTx.TxDataUnbond(data));
};

module.exports = UnbondTxData;
