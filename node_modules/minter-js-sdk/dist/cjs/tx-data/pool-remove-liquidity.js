'use strict';

var minterjsTx = require('minterjs-tx');
var minterjsUtil = require('minterjs-util');
var utils = require('../utils.js');

/**
 * @param {number|string} coin0 - coin id
 * @param {number|string} coin1 - coin id
 * @param {number|string} liquidity - volume of shares to be withdrawn from the pool
 * @param {number|string} [minimumVolume0]
 * @param {number|string} [minimumVolume1]
 * @constructor
 */

function RemoveLiquidityTxData(_ref) {
  var coin0 = _ref.coin0,
      coin1 = _ref.coin1,
      liquidity = _ref.liquidity,
      _ref$minimumVolume = _ref.minimumVolume0,
      minimumVolume0 = _ref$minimumVolume === void 0 ? 0 : _ref$minimumVolume,
      _ref$minimumVolume2 = _ref.minimumVolume1,
      minimumVolume1 = _ref$minimumVolume2 === void 0 ? 0 : _ref$minimumVolume2;
  utils.validateUint(coin0, 'coin0');
  utils.validateUint(coin1, 'coin1');
  utils.validateAmount(liquidity, 'liquidity');
  utils.validateAmount(minimumVolume0, 'minimumVolume0');
  utils.validateAmount(minimumVolume1, 'minimumVolume1');
  this.coin0 = coin0;
  this.coin1 = coin1;
  this.liquidity = liquidity;
  this.minimumVolume0 = minimumVolume0;
  this.minimumVolume1 = minimumVolume1;
  this.txData = new minterjsTx.TxDataRemoveLiquidity({
    coin0: utils.integerToHexString(coin0),
    coin1: utils.integerToHexString(coin1),
    liquidity: "0x".concat(minterjsUtil.convertToPip(liquidity, 'hex')),
    minimumVolume0: "0x".concat(minterjsUtil.convertToPip(minimumVolume0, 'hex')),
    minimumVolume1: "0x".concat(minterjsUtil.convertToPip(minimumVolume1, 'hex'))
  });
  utils.proxyNestedTxData(this);
}
/**
 * @param {Buffer|string} coin0
 * @param {Buffer|string} coin1
 * @param {Buffer|string} liquidity
 * @param {Buffer|string} minimumVolume0
 * @param {Buffer|string} minimumVolume1
 * @return {RemoveLiquidityTxData}
 */

RemoveLiquidityTxData.fromBufferFields = function fromBufferFields(_ref2) {
  var coin0 = _ref2.coin0,
      minimumVolume0 = _ref2.minimumVolume0,
      coin1 = _ref2.coin1,
      liquidity = _ref2.liquidity,
      minimumVolume1 = _ref2.minimumVolume1;
  return new RemoveLiquidityTxData({
    coin0: utils.bufferToInteger(minterjsUtil.toBuffer(coin0)),
    coin1: utils.bufferToInteger(minterjsUtil.toBuffer(coin1)),
    liquidity: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(liquidity))),
    minimumVolume0: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(minimumVolume0))),
    minimumVolume1: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(minimumVolume1)))
  });
};
/**
 * @param {Buffer|string} data
 * @return {RemoveLiquidityTxData}
 */


RemoveLiquidityTxData.fromRlp = function fromRlp(data) {
  return RemoveLiquidityTxData.fromBufferFields(new minterjsTx.TxDataRemoveLiquidity(data));
};

module.exports = RemoveLiquidityTxData;
