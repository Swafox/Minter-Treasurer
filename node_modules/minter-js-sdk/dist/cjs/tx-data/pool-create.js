'use strict';

var minterjsTx = require('minterjs-tx');
var minterjsUtil = require('minterjs-util');
var utils = require('../utils.js');

/**
 * @param {number|string} coin0 - coin id
 * @param {number|string} coin1 - coin id
 * @param {number|string} volume0
 * @param {number|string} volume1
 * @constructor
 */

function CreatePoolTxData(_ref) {
  var coin0 = _ref.coin0,
      coin1 = _ref.coin1,
      volume0 = _ref.volume0,
      volume1 = _ref.volume1;
  utils.validateUint(coin0, 'coin0');
  utils.validateUint(coin1, 'coin1');
  utils.validateAmount(volume0, 'volume0');
  utils.validateAmount(volume1, 'volume1'); // swap values to sort by id ascending (make tx hash independent of coin order)

  if (Number(coin0) > Number(coin1)) {
    var _ref2 = [coin1, coin0];
    coin0 = _ref2[0];
    coin1 = _ref2[1];
    var _ref3 = [volume1, volume0];
    volume0 = _ref3[0];
    volume1 = _ref3[1];
  }

  this.coin0 = coin0;
  this.coin1 = coin1;
  this.volume0 = volume0;
  this.volume1 = volume1;
  this.txData = new minterjsTx.TxDataCreateSwapPool({
    coin0: utils.integerToHexString(coin0),
    coin1: utils.integerToHexString(coin1),
    volume0: "0x".concat(minterjsUtil.convertToPip(volume0, 'hex')),
    volume1: "0x".concat(minterjsUtil.convertToPip(volume1, 'hex'))
  });
  utils.proxyNestedTxData(this);
}
/**
 * @param {Buffer|string} coin0
 * @param {Buffer|string} volume0
 * @param {Buffer|string} coin1
 * @param {Buffer|string} volume1
 * @return {CreatePoolTxData}
 */

CreatePoolTxData.fromBufferFields = function fromBufferFields(_ref4) {
  var coin0 = _ref4.coin0,
      volume0 = _ref4.volume0,
      coin1 = _ref4.coin1,
      volume1 = _ref4.volume1;
  return new CreatePoolTxData({
    coin0: utils.bufferToInteger(minterjsUtil.toBuffer(coin0)),
    coin1: utils.bufferToInteger(minterjsUtil.toBuffer(coin1)),
    volume0: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(volume0))),
    volume1: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(volume1)))
  });
};
/**
 * @param {Buffer|string} data
 * @return {CreatePoolTxData}
 */


CreatePoolTxData.fromRlp = function fromRlp(data) {
  return CreatePoolTxData.fromBufferFields(new minterjsTx.TxDataCreateSwapPool(data));
};

module.exports = CreatePoolTxData;
