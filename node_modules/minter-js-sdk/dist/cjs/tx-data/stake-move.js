'use strict';

var minterjsTx = require('minterjs-tx');
var minterjsUtil = require('minterjs-util');
var utils = require('../utils.js');

/**
 * @param {string} from
 * @param {string} to
 * @param {number|string} coin - coin id
 * @param {number|string} stake
 * @constructor
 */

function MoveStakeTxData(_ref) {
  var from = _ref.from,
      to = _ref.to,
      coin = _ref.coin,
      stake = _ref.stake;
  utils.validatePublicKey(from, 'from');
  utils.validatePublicKey(to, 'to');
  utils.validateUint(coin, 'coin');
  utils.validateAmount(stake, 'stake');
  this.from = from;
  this.to = to;
  this.coin = coin;
  this.stake = stake;
  this.txData = new minterjsTx.TxDataMoveStake({
    from: minterjsUtil.toBuffer(from),
    to: minterjsUtil.toBuffer(to),
    coin: utils.integerToHexString(coin),
    stake: "0x".concat(minterjsUtil.convertToPip(stake, 'hex'))
  });
  utils.proxyNestedTxData(this);
}
/**
 *
 * @param {Buffer|string} from
 * @param {Buffer|string} to
 * @param {Buffer|string} stake
 * @param {Buffer|string} coin
 * @return {MoveStakeTxData}
 */

MoveStakeTxData.fromBufferFields = function fromBufferFields(_ref2) {
  var from = _ref2.from,
      to = _ref2.to,
      coin = _ref2.coin,
      stake = _ref2.stake;
  return new MoveStakeTxData({
    from: minterjsUtil.publicToString(from),
    to: minterjsUtil.publicToString(to),
    coin: utils.bufferToInteger(minterjsUtil.toBuffer(coin)),
    stake: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(stake)))
  });
};
/**
 * @param {Buffer|string} data
 * @return {MoveStakeTxData}
 */


MoveStakeTxData.fromRlp = function fromRlp(data) {
  return MoveStakeTxData.fromBufferFields(new minterjsTx.TxDataMoveStake(data));
};

module.exports = MoveStakeTxData;
