'use strict';

var minterjsTx = require('minterjs-tx');
var minterjsUtil = require('minterjs-util');
var utils = require('../utils.js');

/**
 *
 * @param {string} publicKey
 * @param {number|string} height
 * @constructor
 */

function VoteHaltBlockTxData(_ref) {
  var publicKey = _ref.publicKey,
      height = _ref.height;
  utils.validatePublicKey(publicKey, 'publicKey');
  utils.validateUint(height, 'height');
  this.publicKey = publicKey;
  this.height = height;
  this.txData = new minterjsTx.TxDataSetHaltBlock({
    publicKey: minterjsUtil.toBuffer(publicKey),
    height: utils.integerToHexString(height)
  });
  utils.proxyNestedTxData(this);
}
/**
 * @param {Buffer|string} publicKey
 * @param {Buffer|string|number} height
 * @return {VoteHaltBlockTxData}
 */

VoteHaltBlockTxData.fromBufferFields = function fromBufferFields(_ref2) {
  var publicKey = _ref2.publicKey,
      height = _ref2.height;
  return new VoteHaltBlockTxData({
    publicKey: minterjsUtil.publicToString(publicKey),
    height: utils.bufferToInteger(minterjsUtil.toBuffer(height))
  });
};
/**
 * @param {Buffer|string} data
 * @return {VoteHaltBlockTxData}
 */


VoteHaltBlockTxData.fromRlp = function fromRlp(data) {
  return VoteHaltBlockTxData.fromBufferFields(new minterjsTx.TxDataSetHaltBlock(data));
};

module.exports = VoteHaltBlockTxData;
