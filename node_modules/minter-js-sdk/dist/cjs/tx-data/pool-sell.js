'use strict';

var minterjsTx = require('minterjs-tx');
var minterjsUtil = require('minterjs-util');
var utils = require('../utils.js');

/**
 * @param {Array<number|string>} coins - list of coin id
 * @param {number|string} valueToSell
 * @param {number|string} [minimumValueToBuy=0]
 * @constructor
 */

function SellPoolTxData(_ref) {
  var coins = _ref.coins,
      valueToSell = _ref.valueToSell,
      _ref$minimumValueToBu = _ref.minimumValueToBuy,
      minimumValueToBuy = _ref$minimumValueToBu === void 0 ? 0 : _ref$minimumValueToBu;
  utils.validateUintArray(coins, 'coins');
  utils.validateAmount(valueToSell, 'valueToSell');
  utils.validateAmount(minimumValueToBuy, 'minimumValueToBuy');
  this.coins = coins;
  this.valueToSell = valueToSell;
  this.minimumValueToBuy = minimumValueToBuy;
  this.txData = new minterjsTx.TxDataSellSwapPool({
    coins: coins.map(function (coin) {
      return utils.integerToHexString(coin);
    }),
    valueToSell: "0x".concat(minterjsUtil.convertToPip(valueToSell, 'hex')),
    minimumValueToBuy: "0x".concat(minterjsUtil.convertToPip(minimumValueToBuy, 'hex'))
  });
  utils.proxyNestedTxData(this);
}
/**
 * @param {Array<Buffer>} coins
 * @param {Buffer|string} valueToSell
 * @param {Buffer|string} minimumValueToBuy
 * @return {SellPoolTxData}
 */

SellPoolTxData.fromBufferFields = function fromBufferFields(_ref2) {
  var coins = _ref2.coins,
      valueToSell = _ref2.valueToSell,
      minimumValueToBuy = _ref2.minimumValueToBuy;

  if (!valueToSell && valueToSell !== 0) {
    throw new Error('Invalid valueToSell');
  }

  return new SellPoolTxData({
    coins: coins.map(function (item) {
      return utils.bufferToInteger(item);
    }),
    valueToSell: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(valueToSell))),
    minimumValueToBuy: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(minimumValueToBuy)))
  });
};
/**
 * @param {Buffer|string} data
 * @return {SellPoolTxData}
 */


SellPoolTxData.fromRlp = function fromRlp(data) {
  return SellPoolTxData.fromBufferFields(new minterjsTx.TxDataSellSwapPool(data));
};

module.exports = SellPoolTxData;
