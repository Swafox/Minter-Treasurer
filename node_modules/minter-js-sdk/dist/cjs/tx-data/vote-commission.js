'use strict';

var minterjsTx = require('minterjs-tx');
var minterjsUtil = require('minterjs-util');
var utils = require('../utils.js');

/**
 * @param {string} publicKey
 * @param {number|string} height
 * @param {number|string} coin
 * @param {number|string} payloadByte
 * @param {number|string} send
 * @param {number|string} buyBancor
 * @param {number|string} sellBancor
 * @param {number|string} sellAllBancor
 * @param {number|string} buyPoolBase
 * @param {number|string} buyPoolDelta
 * @param {number|string} sellPoolBase
 * @param {number|string} sellPoolDelta
 * @param {number|string} sellAllPoolBase
 * @param {number|string} sellAllPoolDelta
 * @param {number|string} createTicker3
 * @param {number|string} createTicker4
 * @param {number|string} createTicker5
 * @param {number|string} createTicker6
 * @param {number|string} createTicker7to10
 * @param {number|string} createCoin
 * @param {number|string} createToken
 * @param {number|string} recreateCoin
 * @param {number|string} recreateToken
 * @param {number|string} declareCandidacy
 * @param {number|string} delegate
 * @param {number|string} unbond
 * @param {number|string} redeemCheck
 * @param {number|string} setCandidateOn
 * @param {number|string} setCandidateOff
 * @param {number|string} createMultisig
 * @param {number|string} multisendBase
 * @param {number|string} multisendDelta
 * @param {number|string} editCandidate
 * @param {number|string} setHaltBlock
 * @param {number|string} editTickerOwner
 * @param {number|string} editMultisig
 * @param {number|string} [priceVote]
 * @param {number|string} editCandidatePublicKey
 * @param {number|string} addLiquidity
 * @param {number|string} removeLiquidity
 * @param {number|string} editCandidateCommission
 * @param {number|string} [moveStake]
 * @param {number|string} burnToken
 * @param {number|string} mintToken
 * @param {number|string} voteCommission
 * @param {number|string} voteUpdate
 * @param {number|string} createSwapPool
 * @param {number|string} failedTx
 * @param {number|string} addLimitOrder
 * @param {number|string} removeLimitOrder
 * @constructor
 */

function VoteCommissionTxData(_ref) {
  var publicKey = _ref.publicKey,
      height = _ref.height,
      coin = _ref.coin,
      payloadByte = _ref.payloadByte,
      send = _ref.send,
      buyBancor = _ref.buyBancor,
      sellBancor = _ref.sellBancor,
      sellAllBancor = _ref.sellAllBancor,
      buyPoolBase = _ref.buyPoolBase,
      buyPoolDelta = _ref.buyPoolDelta,
      sellPoolBase = _ref.sellPoolBase,
      sellPoolDelta = _ref.sellPoolDelta,
      sellAllPoolBase = _ref.sellAllPoolBase,
      sellAllPoolDelta = _ref.sellAllPoolDelta,
      createTicker3 = _ref.createTicker3,
      createTicker4 = _ref.createTicker4,
      createTicker5 = _ref.createTicker5,
      createTicker6 = _ref.createTicker6,
      createTicker7to10 = _ref.createTicker7to10,
      createCoin = _ref.createCoin,
      createToken = _ref.createToken,
      recreateCoin = _ref.recreateCoin,
      recreateToken = _ref.recreateToken,
      declareCandidacy = _ref.declareCandidacy,
      delegate = _ref.delegate,
      unbond = _ref.unbond,
      redeemCheck = _ref.redeemCheck,
      setCandidateOn = _ref.setCandidateOn,
      setCandidateOff = _ref.setCandidateOff,
      createMultisig = _ref.createMultisig,
      multisendBase = _ref.multisendBase,
      multisendDelta = _ref.multisendDelta,
      editCandidate = _ref.editCandidate,
      setHaltBlock = _ref.setHaltBlock,
      editTickerOwner = _ref.editTickerOwner,
      editMultisig = _ref.editMultisig,
      editCandidatePublicKey = _ref.editCandidatePublicKey,
      addLiquidity = _ref.addLiquidity,
      removeLiquidity = _ref.removeLiquidity,
      editCandidateCommission = _ref.editCandidateCommission,
      burnToken = _ref.burnToken,
      mintToken = _ref.mintToken,
      voteCommission = _ref.voteCommission,
      voteUpdate = _ref.voteUpdate,
      createSwapPool = _ref.createSwapPool,
      failedTx = _ref.failedTx,
      addLimitOrder = _ref.addLimitOrder,
      removeLimitOrder = _ref.removeLimitOrder;
  utils.validatePublicKey(publicKey, 'publicKey');
  utils.validateUint(height, 'height');
  utils.validateUint(coin, 'coin');
  utils.validateAmount(payloadByte, 'payloadByte');
  utils.validateAmount(send, 'send');
  utils.validateAmount(buyBancor, 'buyBancor');
  utils.validateAmount(sellBancor, 'sellBancor');
  utils.validateAmount(sellAllBancor, 'sellAllBancor');
  utils.validateAmount(buyPoolBase, 'buyPoolBase');
  utils.validateAmount(buyPoolDelta, 'buyPoolDelta');
  utils.validateAmount(sellPoolBase, 'sellPoolBase');
  utils.validateAmount(sellPoolDelta, 'sellPoolDelta');
  utils.validateAmount(sellAllPoolBase, 'sellAllPoolBase');
  utils.validateAmount(sellAllPoolDelta, 'sellAllPoolDelta');
  utils.validateAmount(createTicker3, 'createTicker3');
  utils.validateAmount(createTicker4, 'createTicker4');
  utils.validateAmount(createTicker5, 'createTicker5');
  utils.validateAmount(createTicker6, 'createTicker6');
  utils.validateAmount(createTicker7to10, 'createTicker7to10');
  utils.validateAmount(createCoin, 'createCoin');
  utils.validateAmount(createToken, 'createToken');
  utils.validateAmount(recreateCoin, 'recreateCoin');
  utils.validateAmount(recreateToken, 'recreateToken');
  utils.validateAmount(declareCandidacy, 'declareCandidacy');
  utils.validateAmount(delegate, 'delegate');
  utils.validateAmount(unbond, 'unbond');
  utils.validateAmount(redeemCheck, 'redeemCheck');
  utils.validateAmount(setCandidateOn, 'setCandidateOn');
  utils.validateAmount(setCandidateOff, 'setCandidateOff');
  utils.validateAmount(createMultisig, 'createMultisig');
  utils.validateAmount(multisendBase, 'multisendBase');
  utils.validateAmount(multisendDelta, 'multisendDelta');
  utils.validateAmount(editCandidate, 'editCandidate');
  utils.validateAmount(setHaltBlock, 'setHaltBlock');
  utils.validateAmount(editTickerOwner, 'editTickerOwner');
  utils.validateAmount(editMultisig, 'editMultisig'); // validateAmount(priceVote, 'priceVote');

  utils.validateAmount(editCandidatePublicKey, 'editCandidatePublicKey');
  utils.validateAmount(addLiquidity, 'addLiquidity');
  utils.validateAmount(removeLiquidity, 'removeLiquidity');
  utils.validateAmount(editCandidateCommission, 'editCandidateCommission'); // validateAmount(moveStake, 'moveStake');

  utils.validateAmount(burnToken, 'burnToken');
  utils.validateAmount(mintToken, 'mintToken');
  utils.validateAmount(voteCommission, 'voteCommission');
  utils.validateAmount(voteUpdate, 'voteUpdate');
  utils.validateAmount(createSwapPool, 'createSwapPool');
  utils.validateAmount(createSwapPool, 'failedTx');
  utils.validateAmount(createSwapPool, 'addLimitOrder');
  utils.validateAmount(createSwapPool, 'removeLimitOrder');
  this.publicKey = publicKey;
  this.height = height;
  this.coin = coin;
  this.payloadByte = payloadByte;
  this.send = send;
  this.buyBancor = buyBancor;
  this.sellBancor = sellBancor;
  this.sellAllBancor = sellAllBancor;
  this.buyPoolBase = buyPoolBase;
  this.buyPoolDelta = buyPoolDelta;
  this.sellPoolBase = sellPoolBase;
  this.sellPoolDelta = sellPoolDelta;
  this.sellAllPoolBase = sellAllPoolBase;
  this.sellAllPoolDelta = sellAllPoolDelta;
  this.createTicker3 = createTicker3;
  this.createTicker4 = createTicker4;
  this.createTicker5 = createTicker5;
  this.createTicker6 = createTicker6;
  this.createTicker7to10 = createTicker7to10;
  this.createCoin = createCoin;
  this.createToken = createToken;
  this.recreateCoin = recreateCoin;
  this.recreateToken = recreateToken;
  this.declareCandidacy = declareCandidacy;
  this.delegate = delegate;
  this.unbond = unbond;
  this.redeemCheck = redeemCheck;
  this.setCandidateOn = setCandidateOn;
  this.setCandidateOff = setCandidateOff;
  this.createMultisig = createMultisig;
  this.multisendBase = multisendBase;
  this.multisendDelta = multisendDelta;
  this.editCandidate = editCandidate;
  this.setHaltBlock = setHaltBlock;
  this.editTickerOwner = editTickerOwner;
  this.editMultisig = editMultisig; // this.priceVote = priceVote;

  this.editCandidatePublicKey = editCandidatePublicKey;
  this.addLiquidity = addLiquidity;
  this.removeLiquidity = removeLiquidity;
  this.editCandidateCommission = editCandidateCommission; // this.moveStake = moveStake;

  this.burnToken = burnToken;
  this.mintToken = mintToken;
  this.voteCommission = voteCommission;
  this.voteUpdate = voteUpdate;
  this.createSwapPool = createSwapPool;
  this.failedTx = failedTx;
  this.addLimitOrder = addLimitOrder;
  this.removeLimitOrder = removeLimitOrder;
  this.txData = new minterjsTx.TxDataVoteCommission({
    publicKey: minterjsUtil.toBuffer(publicKey),
    height: utils.integerToHexString(height),
    coin: utils.integerToHexString(coin),
    payloadByte: "0x".concat(minterjsUtil.convertToPip(payloadByte, 'hex')),
    send: "0x".concat(minterjsUtil.convertToPip(send, 'hex')),
    buyBancor: "0x".concat(minterjsUtil.convertToPip(buyBancor, 'hex')),
    sellBancor: "0x".concat(minterjsUtil.convertToPip(sellBancor, 'hex')),
    sellAllBancor: "0x".concat(minterjsUtil.convertToPip(sellAllBancor, 'hex')),
    buyPoolBase: "0x".concat(minterjsUtil.convertToPip(buyPoolBase, 'hex')),
    buyPoolDelta: "0x".concat(minterjsUtil.convertToPip(buyPoolDelta, 'hex')),
    sellPoolBase: "0x".concat(minterjsUtil.convertToPip(sellPoolBase, 'hex')),
    sellPoolDelta: "0x".concat(minterjsUtil.convertToPip(sellPoolDelta, 'hex')),
    sellAllPoolBase: "0x".concat(minterjsUtil.convertToPip(sellAllPoolBase, 'hex')),
    sellAllPoolDelta: "0x".concat(minterjsUtil.convertToPip(sellAllPoolDelta, 'hex')),
    createTicker3: "0x".concat(minterjsUtil.convertToPip(createTicker3, 'hex')),
    createTicker4: "0x".concat(minterjsUtil.convertToPip(createTicker4, 'hex')),
    createTicker5: "0x".concat(minterjsUtil.convertToPip(createTicker5, 'hex')),
    createTicker6: "0x".concat(minterjsUtil.convertToPip(createTicker6, 'hex')),
    createTicker7to10: "0x".concat(minterjsUtil.convertToPip(createTicker7to10, 'hex')),
    createCoin: "0x".concat(minterjsUtil.convertToPip(createCoin, 'hex')),
    createToken: "0x".concat(minterjsUtil.convertToPip(createToken, 'hex')),
    recreateCoin: "0x".concat(minterjsUtil.convertToPip(recreateCoin, 'hex')),
    recreateToken: "0x".concat(minterjsUtil.convertToPip(recreateToken, 'hex')),
    declareCandidacy: "0x".concat(minterjsUtil.convertToPip(declareCandidacy, 'hex')),
    delegate: "0x".concat(minterjsUtil.convertToPip(delegate, 'hex')),
    unbond: "0x".concat(minterjsUtil.convertToPip(unbond, 'hex')),
    redeemCheck: "0x".concat(minterjsUtil.convertToPip(redeemCheck, 'hex')),
    setCandidateOn: "0x".concat(minterjsUtil.convertToPip(setCandidateOn, 'hex')),
    setCandidateOff: "0x".concat(minterjsUtil.convertToPip(setCandidateOff, 'hex')),
    createMultisig: "0x".concat(minterjsUtil.convertToPip(createMultisig, 'hex')),
    multisendBase: "0x".concat(minterjsUtil.convertToPip(multisendBase, 'hex')),
    multisendDelta: "0x".concat(minterjsUtil.convertToPip(multisendDelta, 'hex')),
    editCandidate: "0x".concat(minterjsUtil.convertToPip(editCandidate, 'hex')),
    setHaltBlock: "0x".concat(minterjsUtil.convertToPip(setHaltBlock, 'hex')),
    editTickerOwner: "0x".concat(minterjsUtil.convertToPip(editTickerOwner, 'hex')),
    editMultisig: "0x".concat(minterjsUtil.convertToPip(editMultisig, 'hex')),
    // priceVote: `0x${convertToPip(priceVote, 'hex')}`,
    editCandidatePublicKey: "0x".concat(minterjsUtil.convertToPip(editCandidatePublicKey, 'hex')),
    addLiquidity: "0x".concat(minterjsUtil.convertToPip(addLiquidity, 'hex')),
    removeLiquidity: "0x".concat(minterjsUtil.convertToPip(removeLiquidity, 'hex')),
    editCandidateCommission: "0x".concat(minterjsUtil.convertToPip(editCandidateCommission, 'hex')),
    // moveStake: `0x${convertToPip(moveStake, 'hex')}`,
    burnToken: "0x".concat(minterjsUtil.convertToPip(burnToken, 'hex')),
    mintToken: "0x".concat(minterjsUtil.convertToPip(mintToken, 'hex')),
    voteCommission: "0x".concat(minterjsUtil.convertToPip(voteCommission, 'hex')),
    voteUpdate: "0x".concat(minterjsUtil.convertToPip(voteUpdate, 'hex')),
    createSwapPool: "0x".concat(minterjsUtil.convertToPip(createSwapPool, 'hex')),
    failedTx: "0x".concat(minterjsUtil.convertToPip(failedTx, 'hex')),
    addLimitOrder: "0x".concat(minterjsUtil.convertToPip(addLimitOrder, 'hex')),
    removeLimitOrder: "0x".concat(minterjsUtil.convertToPip(removeLimitOrder, 'hex'))
  });
  utils.proxyNestedTxData(this);
}
/**
 * @param {Buffer|string} publicKey
 * @param {Buffer|string|number} height
 * @param {Buffer|string|number} coin
 * @param {Buffer|string|number} payloadByte
 * @param {Buffer|string|number} send
 * @param {Buffer|string|number} buyBancor
 * @param {Buffer|string|number} sellBancor
 * @param {Buffer|string|number} sellAllBancor
 * @param {Buffer|string|number} buyPoolBase
 * @param {Buffer|string|number} buyPoolDelta
 * @param {Buffer|string|number} sellPoolBase
 * @param {Buffer|string|number} sellPoolDelta
 * @param {Buffer|string|number} sellAllPoolBase
 * @param {Buffer|string|number} sellAllPoolDelta
 * @param {Buffer|string|number} createTicker3
 * @param {Buffer|string|number} createTicker4
 * @param {Buffer|string|number} createTicker5
 * @param {Buffer|string|number} createTicker6
 * @param {Buffer|string|number} createTicker7to10
 * @param {Buffer|string|number} createCoin
 * @param {Buffer|string|number} createToken
 * @param {Buffer|string|number} recreateCoin
 * @param {Buffer|string|number} recreateToken
 * @param {Buffer|string|number} declareCandidacy
 * @param {Buffer|string|number} delegate
 * @param {Buffer|string|number} unbond
 * @param {Buffer|string|number} redeemCheck
 * @param {Buffer|string|number} setCandidateOn
 * @param {Buffer|string|number} setCandidateOff
 * @param {Buffer|string|number} createMultisig
 * @param {Buffer|string|number} multisendBase
 * @param {Buffer|string|number} multisendDelta
 * @param {Buffer|string|number} editCandidate
 * @param {Buffer|string|number} setHaltBlock
 * @param {Buffer|string|number} editTickerOwner
 * @param {Buffer|string|number} editMultisig
 * @param {Buffer|string|number} [priceVote]
 * @param {Buffer|string|number} editCandidatePublicKey
 * @param {Buffer|string|number} addLiquidity
 * @param {Buffer|string|number} removeLiquidity
 * @param {Buffer|string|number} editCandidateCommission
 * @param {Buffer|string|number} [moveStake]
 * @param {Buffer|string|number} burnToken
 * @param {Buffer|string|number} mintToken
 * @param {Buffer|string|number} voteCommission
 * @param {Buffer|string|number} voteUpdate
 * @param {Buffer|string|number} createSwapPool
 * @param {Buffer|string|number} failedTx
 * @param {Buffer|string|number} addLimitOrder
 * @param {Buffer|string|number} removeLimitOrder
 * @return {VoteCommissionTxData}
 */

VoteCommissionTxData.fromBufferFields = function fromBufferFields(_ref2) {
  var publicKey = _ref2.publicKey,
      height = _ref2.height,
      coin = _ref2.coin,
      payloadByte = _ref2.payloadByte,
      send = _ref2.send,
      buyBancor = _ref2.buyBancor,
      sellBancor = _ref2.sellBancor,
      sellAllBancor = _ref2.sellAllBancor,
      buyPoolBase = _ref2.buyPoolBase,
      buyPoolDelta = _ref2.buyPoolDelta,
      sellPoolBase = _ref2.sellPoolBase,
      sellPoolDelta = _ref2.sellPoolDelta,
      sellAllPoolBase = _ref2.sellAllPoolBase,
      sellAllPoolDelta = _ref2.sellAllPoolDelta,
      createTicker3 = _ref2.createTicker3,
      createTicker4 = _ref2.createTicker4,
      createTicker5 = _ref2.createTicker5,
      createTicker6 = _ref2.createTicker6,
      createTicker7to10 = _ref2.createTicker7to10,
      createCoin = _ref2.createCoin,
      createToken = _ref2.createToken,
      recreateCoin = _ref2.recreateCoin,
      recreateToken = _ref2.recreateToken,
      declareCandidacy = _ref2.declareCandidacy,
      delegate = _ref2.delegate,
      unbond = _ref2.unbond,
      redeemCheck = _ref2.redeemCheck,
      setCandidateOn = _ref2.setCandidateOn,
      setCandidateOff = _ref2.setCandidateOff,
      createMultisig = _ref2.createMultisig,
      multisendBase = _ref2.multisendBase,
      multisendDelta = _ref2.multisendDelta,
      editCandidate = _ref2.editCandidate,
      setHaltBlock = _ref2.setHaltBlock,
      editTickerOwner = _ref2.editTickerOwner,
      editMultisig = _ref2.editMultisig;
      _ref2.priceVote;
      var editCandidatePublicKey = _ref2.editCandidatePublicKey,
      addLiquidity = _ref2.addLiquidity,
      removeLiquidity = _ref2.removeLiquidity,
      editCandidateCommission = _ref2.editCandidateCommission;
      _ref2.moveStake;
      var burnToken = _ref2.burnToken,
      mintToken = _ref2.mintToken,
      voteCommission = _ref2.voteCommission,
      voteUpdate = _ref2.voteUpdate,
      createSwapPool = _ref2.createSwapPool,
      failedTx = _ref2.failedTx,
      addLimitOrder = _ref2.addLimitOrder,
      removeLimitOrder = _ref2.removeLimitOrder;
  return new VoteCommissionTxData({
    publicKey: minterjsUtil.publicToString(publicKey),
    height: utils.bufferToInteger(minterjsUtil.toBuffer(height)),
    coin: utils.bufferToInteger(minterjsUtil.toBuffer(coin)),
    payloadByte: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(payloadByte))),
    send: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(send))),
    buyBancor: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(buyBancor))),
    sellBancor: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(sellBancor))),
    sellAllBancor: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(sellAllBancor))),
    buyPoolBase: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(buyPoolBase))),
    buyPoolDelta: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(buyPoolDelta))),
    sellPoolBase: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(sellPoolBase))),
    sellPoolDelta: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(sellPoolDelta))),
    sellAllPoolBase: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(sellAllPoolBase))),
    sellAllPoolDelta: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(sellAllPoolDelta))),
    createTicker3: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(createTicker3))),
    createTicker4: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(createTicker4))),
    createTicker5: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(createTicker5))),
    createTicker6: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(createTicker6))),
    createTicker7to10: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(createTicker7to10))),
    createCoin: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(createCoin))),
    createToken: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(createToken))),
    recreateCoin: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(recreateCoin))),
    recreateToken: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(recreateToken))),
    declareCandidacy: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(declareCandidacy))),
    delegate: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(delegate))),
    unbond: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(unbond))),
    redeemCheck: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(redeemCheck))),
    setCandidateOn: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(setCandidateOn))),
    setCandidateOff: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(setCandidateOff))),
    createMultisig: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(createMultisig))),
    multisendBase: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(multisendBase))),
    multisendDelta: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(multisendDelta))),
    editCandidate: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(editCandidate))),
    setHaltBlock: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(setHaltBlock))),
    editTickerOwner: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(editTickerOwner))),
    editMultisig: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(editMultisig))),
    // priceVote: convertFromPip(bufferToInteger(toBuffer(priceVote))),
    editCandidatePublicKey: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(editCandidatePublicKey))),
    addLiquidity: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(addLiquidity))),
    removeLiquidity: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(removeLiquidity))),
    editCandidateCommission: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(editCandidateCommission))),
    // moveStake: convertFromPip(bufferToInteger(toBuffer(moveStake))),
    burnToken: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(burnToken))),
    mintToken: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(mintToken))),
    voteCommission: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(voteCommission))),
    voteUpdate: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(voteUpdate))),
    createSwapPool: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(createSwapPool))),
    failedTx: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(failedTx))),
    addLimitOrder: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(addLimitOrder))),
    removeLimitOrder: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(removeLimitOrder)))
  });
};
/**
 * @param {Buffer|string} data
 * @return {VoteCommissionTxData}
 */


VoteCommissionTxData.fromRlp = function fromRlp(data) {
  return VoteCommissionTxData.fromBufferFields(new minterjsTx.TxDataVoteCommission(data));
};

module.exports = VoteCommissionTxData;
