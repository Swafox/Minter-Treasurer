'use strict';

var minterjsTx = require('minterjs-tx');
var minterjsUtil = require('minterjs-util');
var utils = require('../utils.js');

/**
 * @param {number|string} coinToSell - coin id
 * @param {number|string} coinToBuy - coin id
 * @param {number|string} valueToSell
 * @param {number|string} valueToBuy
 * @constructor
 */

function AddLimitOrderTxData(_ref) {
  var coinToSell = _ref.coinToSell,
      coinToBuy = _ref.coinToBuy,
      valueToSell = _ref.valueToSell,
      _ref$valueToBuy = _ref.valueToBuy,
      valueToBuy = _ref$valueToBuy === void 0 ? 0 : _ref$valueToBuy;
  utils.validateUint(coinToSell, 'coinToSell');
  utils.validateUint(coinToBuy, 'coinToBuy');
  utils.validateAmount(valueToSell, 'valueToSell');
  utils.validateAmount(valueToBuy, 'valueToBuy');
  this.coinToSell = coinToSell;
  this.coinToBuy = coinToBuy;
  this.valueToSell = valueToSell;
  this.valueToBuy = valueToBuy;
  this.txData = new minterjsTx.TxDataAddLimitOrder({
    coinToSell: utils.integerToHexString(coinToSell),
    coinToBuy: utils.integerToHexString(coinToBuy),
    valueToSell: "0x".concat(minterjsUtil.convertToPip(valueToSell, 'hex')),
    valueToBuy: "0x".concat(minterjsUtil.convertToPip(valueToBuy, 'hex'))
  });
  utils.proxyNestedTxData(this);
}
/**
 * @param {Buffer|string} coinToSell
 * @param {Buffer|string} valueToSell
 * @param {Buffer|string} coinToBuy
 * @param {Buffer|string} valueToBuy
 * @return {AddLimitOrderTxData}
 */

AddLimitOrderTxData.fromBufferFields = function fromBufferFields(_ref2) {
  var coinToSell = _ref2.coinToSell,
      valueToSell = _ref2.valueToSell,
      coinToBuy = _ref2.coinToBuy,
      valueToBuy = _ref2.valueToBuy;

  if (!valueToSell && valueToSell !== 0) {
    throw new Error('Invalid valueToSell');
  }

  if (!valueToBuy && valueToBuy !== 0) {
    throw new Error('Invalid valueToBuy');
  }

  return new AddLimitOrderTxData({
    coinToSell: utils.bufferToInteger(minterjsUtil.toBuffer(coinToSell)),
    coinToBuy: utils.bufferToInteger(minterjsUtil.toBuffer(coinToBuy)),
    valueToSell: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(valueToSell))),
    valueToBuy: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(valueToBuy)))
  });
};
/**
 * @param {Buffer|string} data
 * @return {AddLimitOrderTxData}
 */


AddLimitOrderTxData.fromRlp = function fromRlp(data) {
  return AddLimitOrderTxData.fromBufferFields(new minterjsTx.TxDataAddLimitOrder(data));
};

module.exports = AddLimitOrderTxData;
