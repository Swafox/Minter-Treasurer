'use strict';

var minterjsTx = require('minterjs-tx');
var minterjsUtil = require('minterjs-util');
var utils = require('../utils.js');

/**
 * @param {number|string} coinToSell - coin id
 * @param {number|string} coinToBuy - coin id
 * @param {number|string} [minimumValueToBuy=0]
 * @constructor
 */

function SellAllTxData(_ref) {
  var coinToSell = _ref.coinToSell,
      coinToBuy = _ref.coinToBuy,
      _ref$minimumValueToBu = _ref.minimumValueToBuy,
      minimumValueToBuy = _ref$minimumValueToBu === void 0 ? 0 : _ref$minimumValueToBu;
  utils.validateUint(coinToSell, 'coinToSell');
  utils.validateUint(coinToBuy, 'coinToBuy');
  utils.validateAmount(minimumValueToBuy, 'minimumValueToBuy');
  this.coinToSell = coinToSell;
  this.coinToBuy = coinToBuy;
  this.minimumValueToBuy = minimumValueToBuy;
  this.txData = new minterjsTx.TxDataSellAll({
    coinToSell: utils.integerToHexString(coinToSell),
    coinToBuy: utils.integerToHexString(coinToBuy),
    minimumValueToBuy: "0x".concat(minterjsUtil.convertToPip(minimumValueToBuy, 'hex'))
  });
  utils.proxyNestedTxData(this);
}
/**
 * @param {Buffer|string} coinToSell
 * @param {Buffer|string} coinToBuy
 * @param {Buffer|string} minimumValueToBuy
 * @return {SellAllTxData}
 */

SellAllTxData.fromBufferFields = function fromBufferFields(_ref2) {
  var coinToSell = _ref2.coinToSell,
      coinToBuy = _ref2.coinToBuy,
      minimumValueToBuy = _ref2.minimumValueToBuy;
  return new SellAllTxData({
    coinToSell: utils.bufferToInteger(minterjsUtil.toBuffer(coinToSell)),
    coinToBuy: utils.bufferToInteger(minterjsUtil.toBuffer(coinToBuy)),
    minimumValueToBuy: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(minimumValueToBuy)))
  });
};
/**
 * @param {Buffer|string} data
 * @return {SellAllTxData}
 */


SellAllTxData.fromRlp = function fromRlp(data) {
  return SellAllTxData.fromBufferFields(new minterjsTx.TxDataSellAll(data));
};

module.exports = SellAllTxData;
