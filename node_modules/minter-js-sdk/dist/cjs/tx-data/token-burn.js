'use strict';

var minterjsTx = require('minterjs-tx');
var minterjsUtil = require('minterjs-util');
var utils = require('../utils.js');

/**
 *
 * @param {number|string} value
 * @param {number|string} coin - coin id
 * @constructor
 */

function BurnTokenTxData(_ref) {
  var _ref$value = _ref.value,
      value = _ref$value === void 0 ? 0 : _ref$value,
      coin = _ref.coin;
  utils.validateUint(coin, 'coin');
  utils.validateAmount(value, 'value');
  this.value = value;
  this.coin = coin;
  this.txData = new minterjsTx.TxDataBurnToken({
    coin: utils.integerToHexString(coin),
    value: "0x".concat(minterjsUtil.convertToPip(value, 'hex'))
  });
  utils.proxyNestedTxData(this);
}
/**
 * @param {Buffer|string|number} value
 * @param {Buffer|string|number} coin
 * @return {BurnTokenTxData}
 */

BurnTokenTxData.fromBufferFields = function fromBufferFields(_ref2) {
  var value = _ref2.value,
      coin = _ref2.coin;
  return new BurnTokenTxData({
    coin: utils.bufferToInteger(minterjsUtil.toBuffer(coin)),
    value: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(value)))
  });
};
/**
 * @param {Buffer|string} data
 * @return {BurnTokenTxData}
 */


BurnTokenTxData.fromRlp = function fromRlp(data) {
  return BurnTokenTxData.fromBufferFields(new minterjsTx.TxDataBurnToken(data));
};

module.exports = BurnTokenTxData;
