'use strict';

var minterjsTx = require('minterjs-tx');
var minterjsUtil = require('minterjs-util');
var utils = require('../utils.js');

/**
 * @param {string} address
 * @param {string} publicKey
 * @param {number|string} commission
 * @param {number|string} coin - coin id
 * @param {number|string} stake
 * @constructor
 */

function DeclareCandidacyTxData(_ref) {
  var address = _ref.address,
      publicKey = _ref.publicKey,
      commission = _ref.commission,
      coin = _ref.coin,
      stake = _ref.stake;
  utils.validateAddress(address, 'address');
  utils.validatePublicKey(publicKey, 'publicKey');
  utils.validateUint(commission, 'commission');
  utils.validateUint(coin, 'coin');
  utils.validateAmount(stake, 'stake');
  this.address = address;
  this.publicKey = publicKey;
  this.commission = commission;
  this.coin = coin;
  this.stake = stake;
  this.txData = new minterjsTx.TxDataDeclareCandidacy({
    address: minterjsUtil.toBuffer(address),
    publicKey: minterjsUtil.toBuffer(publicKey),
    commission: utils.integerToHexString(commission),
    coin: utils.integerToHexString(coin),
    stake: "0x".concat(minterjsUtil.convertToPip(stake, 'hex'))
  });
  utils.proxyNestedTxData(this);
}
/**
 * @param {Buffer|string} address
 * @param {Buffer|string} publicKey
 * @param {Buffer|string} commission
 * @param {Buffer|string} coin
 * @param {Buffer|string} stake
 * @return {DeclareCandidacyTxData}
 */

DeclareCandidacyTxData.fromBufferFields = function fromBufferFields(_ref2) {
  var address = _ref2.address,
      publicKey = _ref2.publicKey,
      commission = _ref2.commission,
      coin = _ref2.coin,
      stake = _ref2.stake;
  return new DeclareCandidacyTxData({
    address: minterjsUtil.addressToString(address),
    publicKey: minterjsUtil.publicToString(publicKey),
    commission: utils.bufferToInteger(minterjsUtil.toBuffer(commission)),
    coin: utils.bufferToInteger(minterjsUtil.toBuffer(coin)),
    stake: minterjsUtil.convertFromPip(utils.bufferToInteger(minterjsUtil.toBuffer(stake)))
  });
};
/**
 * @param {Buffer|string} data
 * @return {DeclareCandidacyTxData}
 */


DeclareCandidacyTxData.fromRlp = function fromRlp(data) {
  return DeclareCandidacyTxData.fromBufferFields(new minterjsTx.TxDataDeclareCandidacy(data));
};

module.exports = DeclareCandidacyTxData;
