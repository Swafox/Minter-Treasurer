'use strict';

var minterjsTx = require('minterjs-tx');
var minterjsUtil = require('minterjs-util');
var utils = require('../utils.js');

/**
 * @param {string} publicKey
 * @param {string} rewardAddress
 * @param {string} ownerAddress
 * @param {string} controlAddress
 * @constructor
 */

function EditCandidateTxData(_ref) {
  var publicKey = _ref.publicKey,
      rewardAddress = _ref.rewardAddress,
      ownerAddress = _ref.ownerAddress,
      controlAddress = _ref.controlAddress;
  utils.validatePublicKey(publicKey, 'publicKey');
  utils.validateAddress(rewardAddress, 'rewardAddress');
  utils.validateAddress(ownerAddress, 'ownerAddress');
  utils.validateAddress(controlAddress, 'controlAddress');
  this.publicKey = publicKey;
  this.rewardAddress = rewardAddress;
  this.ownerAddress = ownerAddress;
  this.controlAddress = controlAddress;
  this.txData = new minterjsTx.TxDataEditCandidate({
    publicKey: minterjsUtil.toBuffer(publicKey),
    rewardAddress: minterjsUtil.toBuffer(rewardAddress),
    ownerAddress: minterjsUtil.toBuffer(ownerAddress),
    controlAddress: minterjsUtil.toBuffer(controlAddress)
  });
  utils.proxyNestedTxData(this);
}
/**
 * @param {Buffer|string} publicKey
 * @param {Buffer|string} rewardAddress
 * @param {Buffer|string} ownerAddress
 * @param {Buffer|string} controlAddress
 * @return {EditCandidateTxData}
 */

EditCandidateTxData.fromBufferFields = function fromBufferFields(_ref2) {
  var publicKey = _ref2.publicKey,
      rewardAddress = _ref2.rewardAddress,
      ownerAddress = _ref2.ownerAddress,
      controlAddress = _ref2.controlAddress;
  return new EditCandidateTxData({
    publicKey: minterjsUtil.publicToString(publicKey),
    rewardAddress: minterjsUtil.addressToString(rewardAddress),
    ownerAddress: minterjsUtil.addressToString(ownerAddress),
    controlAddress: minterjsUtil.addressToString(controlAddress)
  });
};
/**
 * @param {Buffer|string} data
 * @return {EditCandidateTxData}
 */


EditCandidateTxData.fromRlp = function fromRlp(data) {
  return EditCandidateTxData.fromBufferFields(new minterjsTx.TxDataEditCandidate(data));
};

module.exports = EditCandidateTxData;
