(function (global, factory) {
            typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
            typeof define === 'function' && define.amd ? define(['exports'], factory) :
            (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.minterSDK = {}));
})(this, (function (exports) { 'use strict';

            var global$1 = typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};

            var lookup = [];
            var revLookup = [];
            var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
            var inited = false;

            function init() {
              inited = true;
              var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

              for (var i = 0, len = code.length; i < len; ++i) {
                lookup[i] = code[i];
                revLookup[code.charCodeAt(i)] = i;
              }

              revLookup['-'.charCodeAt(0)] = 62;
              revLookup['_'.charCodeAt(0)] = 63;
            }

            function toByteArray(b64) {
              if (!inited) {
                init();
              }

              var i, j, l, tmp, placeHolders, arr;
              var len = b64.length;

              if (len % 4 > 0) {
                throw new Error('Invalid string. Length must be a multiple of 4');
              } // the number of equal signs (place holders)
              // if there are two placeholders, than the two characters before it
              // represent one byte
              // if there is only one, then the three characters before it represent 2 bytes
              // this is just a cheap hack to not do indexOf twice


              placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0; // base64 is 4/3 + up to two characters of the original data

              arr = new Arr(len * 3 / 4 - placeHolders); // if there are placeholders, only get up to the last complete 4 chars

              l = placeHolders > 0 ? len - 4 : len;
              var L = 0;

              for (i = 0, j = 0; i < l; i += 4, j += 3) {
                tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
                arr[L++] = tmp >> 16 & 0xFF;
                arr[L++] = tmp >> 8 & 0xFF;
                arr[L++] = tmp & 0xFF;
              }

              if (placeHolders === 2) {
                tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
                arr[L++] = tmp & 0xFF;
              } else if (placeHolders === 1) {
                tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
                arr[L++] = tmp >> 8 & 0xFF;
                arr[L++] = tmp & 0xFF;
              }

              return arr;
            }

            function tripletToBase64(num) {
              return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
            }

            function encodeChunk(uint8, start, end) {
              var tmp;
              var output = [];

              for (var i = start; i < end; i += 3) {
                tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
                output.push(tripletToBase64(tmp));
              }

              return output.join('');
            }

            function fromByteArray(uint8) {
              if (!inited) {
                init();
              }

              var tmp;
              var len = uint8.length;
              var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

              var output = '';
              var parts = [];
              var maxChunkLength = 16383; // must be multiple of 3
              // go through the array every three bytes, we'll deal with trailing stuff later

              for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
                parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
              } // pad the end with zeros, but make sure to not forget the extra bytes


              if (extraBytes === 1) {
                tmp = uint8[len - 1];
                output += lookup[tmp >> 2];
                output += lookup[tmp << 4 & 0x3F];
                output += '==';
              } else if (extraBytes === 2) {
                tmp = (uint8[len - 2] << 8) + uint8[len - 1];
                output += lookup[tmp >> 10];
                output += lookup[tmp >> 4 & 0x3F];
                output += lookup[tmp << 2 & 0x3F];
                output += '=';
              }

              parts.push(output);
              return parts.join('');
            }

            function read(buffer, offset, isLE, mLen, nBytes) {
              var e, m;
              var eLen = nBytes * 8 - mLen - 1;
              var eMax = (1 << eLen) - 1;
              var eBias = eMax >> 1;
              var nBits = -7;
              var i = isLE ? nBytes - 1 : 0;
              var d = isLE ? -1 : 1;
              var s = buffer[offset + i];
              i += d;
              e = s & (1 << -nBits) - 1;
              s >>= -nBits;
              nBits += eLen;

              for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

              m = e & (1 << -nBits) - 1;
              e >>= -nBits;
              nBits += mLen;

              for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

              if (e === 0) {
                e = 1 - eBias;
              } else if (e === eMax) {
                return m ? NaN : (s ? -1 : 1) * Infinity;
              } else {
                m = m + Math.pow(2, mLen);
                e = e - eBias;
              }

              return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
            }
            function write(buffer, value, offset, isLE, mLen, nBytes) {
              var e, m, c;
              var eLen = nBytes * 8 - mLen - 1;
              var eMax = (1 << eLen) - 1;
              var eBias = eMax >> 1;
              var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
              var i = isLE ? 0 : nBytes - 1;
              var d = isLE ? 1 : -1;
              var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
              value = Math.abs(value);

              if (isNaN(value) || value === Infinity) {
                m = isNaN(value) ? 1 : 0;
                e = eMax;
              } else {
                e = Math.floor(Math.log(value) / Math.LN2);

                if (value * (c = Math.pow(2, -e)) < 1) {
                  e--;
                  c *= 2;
                }

                if (e + eBias >= 1) {
                  value += rt / c;
                } else {
                  value += rt * Math.pow(2, 1 - eBias);
                }

                if (value * c >= 2) {
                  e++;
                  c /= 2;
                }

                if (e + eBias >= eMax) {
                  m = 0;
                  e = eMax;
                } else if (e + eBias >= 1) {
                  m = (value * c - 1) * Math.pow(2, mLen);
                  e = e + eBias;
                } else {
                  m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                  e = 0;
                }
              }

              for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

              e = e << mLen | m;
              eLen += mLen;

              for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

              buffer[offset + i - d] |= s * 128;
            }

            var toString$2 = {}.toString;
            var isArray$8 = Array.isArray || function (arr) {
              return toString$2.call(arr) == '[object Array]';
            };

            var INSPECT_MAX_BYTES = 50;
            /**
             * If `Buffer.TYPED_ARRAY_SUPPORT`:
             *   === true    Use Uint8Array implementation (fastest)
             *   === false   Use Object implementation (most compatible, even IE6)
             *
             * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
             * Opera 11.6+, iOS 4.2+.
             *
             * Due to various browser bugs, sometimes the Object implementation will be used even
             * when the browser supports typed arrays.
             *
             * Note:
             *
             *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
             *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
             *
             *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
             *
             *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
             *     incorrect length in some situations.

             * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
             * get the Object implementation, which is slower but behaves correctly.
             */

            Buffer$i.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined ? global$1.TYPED_ARRAY_SUPPORT : true;
            /*
             * Export kMaxLength after typed array support is determined.
             */

            var _kMaxLength = kMaxLength();

            function kMaxLength() {
              return Buffer$i.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
            }

            function createBuffer(that, length) {
              if (kMaxLength() < length) {
                throw new RangeError('Invalid typed array length');
              }

              if (Buffer$i.TYPED_ARRAY_SUPPORT) {
                // Return an augmented `Uint8Array` instance, for best performance
                that = new Uint8Array(length);
                that.__proto__ = Buffer$i.prototype;
              } else {
                // Fallback: Return an object instance of the Buffer class
                if (that === null) {
                  that = new Buffer$i(length);
                }

                that.length = length;
              }

              return that;
            }
            /**
             * The Buffer constructor returns instances of `Uint8Array` that have their
             * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
             * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
             * and the `Uint8Array` methods. Square bracket notation works as expected -- it
             * returns a single octet.
             *
             * The `Uint8Array` prototype remains unmodified.
             */


            function Buffer$i(arg, encodingOrOffset, length) {
              if (!Buffer$i.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer$i)) {
                return new Buffer$i(arg, encodingOrOffset, length);
              } // Common case.


              if (typeof arg === 'number') {
                if (typeof encodingOrOffset === 'string') {
                  throw new Error('If encoding is specified then the first argument must be a string');
                }

                return allocUnsafe(this, arg);
              }

              return from(this, arg, encodingOrOffset, length);
            }
            Buffer$i.poolSize = 8192; // not used by this implementation
            // TODO: Legacy, not needed anymore. Remove in next major version.

            Buffer$i._augment = function (arr) {
              arr.__proto__ = Buffer$i.prototype;
              return arr;
            };

            function from(that, value, encodingOrOffset, length) {
              if (typeof value === 'number') {
                throw new TypeError('"value" argument must not be a number');
              }

              if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
                return fromArrayBuffer(that, value, encodingOrOffset, length);
              }

              if (typeof value === 'string') {
                return fromString(that, value, encodingOrOffset);
              }

              return fromObject(that, value);
            }
            /**
             * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
             * if value is a number.
             * Buffer.from(str[, encoding])
             * Buffer.from(array)
             * Buffer.from(buffer)
             * Buffer.from(arrayBuffer[, byteOffset[, length]])
             **/


            Buffer$i.from = function (value, encodingOrOffset, length) {
              return from(null, value, encodingOrOffset, length);
            };

            if (Buffer$i.TYPED_ARRAY_SUPPORT) {
              Buffer$i.prototype.__proto__ = Uint8Array.prototype;
              Buffer$i.__proto__ = Uint8Array;
            }

            function assertSize(size) {
              if (typeof size !== 'number') {
                throw new TypeError('"size" argument must be a number');
              } else if (size < 0) {
                throw new RangeError('"size" argument must not be negative');
              }
            }

            function alloc(that, size, fill, encoding) {
              assertSize(size);

              if (size <= 0) {
                return createBuffer(that, size);
              }

              if (fill !== undefined) {
                // Only pay attention to encoding if it's a string. This
                // prevents accidentally sending in a number that would
                // be interpretted as a start offset.
                return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
              }

              return createBuffer(that, size);
            }
            /**
             * Creates a new filled Buffer instance.
             * alloc(size[, fill[, encoding]])
             **/


            Buffer$i.alloc = function (size, fill, encoding) {
              return alloc(null, size, fill, encoding);
            };

            function allocUnsafe(that, size) {
              assertSize(size);
              that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);

              if (!Buffer$i.TYPED_ARRAY_SUPPORT) {
                for (var i = 0; i < size; ++i) {
                  that[i] = 0;
                }
              }

              return that;
            }
            /**
             * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
             * */


            Buffer$i.allocUnsafe = function (size) {
              return allocUnsafe(null, size);
            };
            /**
             * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
             */


            Buffer$i.allocUnsafeSlow = function (size) {
              return allocUnsafe(null, size);
            };

            function fromString(that, string, encoding) {
              if (typeof encoding !== 'string' || encoding === '') {
                encoding = 'utf8';
              }

              if (!Buffer$i.isEncoding(encoding)) {
                throw new TypeError('"encoding" must be a valid string encoding');
              }

              var length = byteLength(string, encoding) | 0;
              that = createBuffer(that, length);
              var actual = that.write(string, encoding);

              if (actual !== length) {
                // Writing a hex string, for example, that contains invalid characters will
                // cause everything after the first invalid character to be ignored. (e.g.
                // 'abxxcd' will be treated as 'ab')
                that = that.slice(0, actual);
              }

              return that;
            }

            function fromArrayLike(that, array) {
              var length = array.length < 0 ? 0 : checked(array.length) | 0;
              that = createBuffer(that, length);

              for (var i = 0; i < length; i += 1) {
                that[i] = array[i] & 255;
              }

              return that;
            }

            function fromArrayBuffer(that, array, byteOffset, length) {
              array.byteLength; // this throws if `array` is not a valid ArrayBuffer

              if (byteOffset < 0 || array.byteLength < byteOffset) {
                throw new RangeError('\'offset\' is out of bounds');
              }

              if (array.byteLength < byteOffset + (length || 0)) {
                throw new RangeError('\'length\' is out of bounds');
              }

              if (byteOffset === undefined && length === undefined) {
                array = new Uint8Array(array);
              } else if (length === undefined) {
                array = new Uint8Array(array, byteOffset);
              } else {
                array = new Uint8Array(array, byteOffset, length);
              }

              if (Buffer$i.TYPED_ARRAY_SUPPORT) {
                // Return an augmented `Uint8Array` instance, for best performance
                that = array;
                that.__proto__ = Buffer$i.prototype;
              } else {
                // Fallback: Return an object instance of the Buffer class
                that = fromArrayLike(that, array);
              }

              return that;
            }

            function fromObject(that, obj) {
              if (internalIsBuffer(obj)) {
                var len = checked(obj.length) | 0;
                that = createBuffer(that, len);

                if (that.length === 0) {
                  return that;
                }

                obj.copy(that, 0, 0, len);
                return that;
              }

              if (obj) {
                if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
                  if (typeof obj.length !== 'number' || isnan(obj.length)) {
                    return createBuffer(that, 0);
                  }

                  return fromArrayLike(that, obj);
                }

                if (obj.type === 'Buffer' && isArray$8(obj.data)) {
                  return fromArrayLike(that, obj.data);
                }
              }

              throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
            }

            function checked(length) {
              // Note: cannot use `length < kMaxLength()` here because that fails when
              // length is NaN (which is otherwise coerced to zero.)
              if (length >= kMaxLength()) {
                throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
              }

              return length | 0;
            }

            function SlowBuffer(length) {
              if (+length != length) {
                // eslint-disable-line eqeqeq
                length = 0;
              }

              return Buffer$i.alloc(+length);
            }
            Buffer$i.isBuffer = isBuffer$2;

            function internalIsBuffer(b) {
              return isBuffer$2(b);
            }

            Buffer$i.compare = function compare(a, b) {
              if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
                throw new TypeError('Arguments must be Buffers');
              }

              if (a === b) return 0;
              var x = a.length;
              var y = b.length;

              for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                if (a[i] !== b[i]) {
                  x = a[i];
                  y = b[i];
                  break;
                }
              }

              if (x < y) return -1;
              if (y < x) return 1;
              return 0;
            };

            Buffer$i.isEncoding = function isEncoding(encoding) {
              switch (String(encoding).toLowerCase()) {
                case 'hex':
                case 'utf8':
                case 'utf-8':
                case 'ascii':
                case 'latin1':
                case 'binary':
                case 'base64':
                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                  return true;

                default:
                  return false;
              }
            };

            Buffer$i.concat = function concat(list, length) {
              if (!isArray$8(list)) {
                throw new TypeError('"list" argument must be an Array of Buffers');
              }

              if (list.length === 0) {
                return Buffer$i.alloc(0);
              }

              var i;

              if (length === undefined) {
                length = 0;

                for (i = 0; i < list.length; ++i) {
                  length += list[i].length;
                }
              }

              var buffer = Buffer$i.allocUnsafe(length);
              var pos = 0;

              for (i = 0; i < list.length; ++i) {
                var buf = list[i];

                if (!internalIsBuffer(buf)) {
                  throw new TypeError('"list" argument must be an Array of Buffers');
                }

                buf.copy(buffer, pos);
                pos += buf.length;
              }

              return buffer;
            };

            function byteLength(string, encoding) {
              if (internalIsBuffer(string)) {
                return string.length;
              }

              if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
                return string.byteLength;
              }

              if (typeof string !== 'string') {
                string = '' + string;
              }

              var len = string.length;
              if (len === 0) return 0; // Use a for loop to avoid recursion

              var loweredCase = false;

              for (;;) {
                switch (encoding) {
                  case 'ascii':
                  case 'latin1':
                  case 'binary':
                    return len;

                  case 'utf8':
                  case 'utf-8':
                  case undefined:
                    return utf8ToBytes(string).length;

                  case 'ucs2':
                  case 'ucs-2':
                  case 'utf16le':
                  case 'utf-16le':
                    return len * 2;

                  case 'hex':
                    return len >>> 1;

                  case 'base64':
                    return base64ToBytes(string).length;

                  default:
                    if (loweredCase) return utf8ToBytes(string).length; // assume utf8

                    encoding = ('' + encoding).toLowerCase();
                    loweredCase = true;
                }
              }
            }

            Buffer$i.byteLength = byteLength;

            function slowToString(encoding, start, end) {
              var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
              // property of a typed array.
              // This behaves neither like String nor Uint8Array in that we set start/end
              // to their upper/lower bounds if the value passed is out of range.
              // undefined is handled specially as per ECMA-262 6th Edition,
              // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

              if (start === undefined || start < 0) {
                start = 0;
              } // Return early if start > this.length. Done here to prevent potential uint32
              // coercion fail below.


              if (start > this.length) {
                return '';
              }

              if (end === undefined || end > this.length) {
                end = this.length;
              }

              if (end <= 0) {
                return '';
              } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.


              end >>>= 0;
              start >>>= 0;

              if (end <= start) {
                return '';
              }

              if (!encoding) encoding = 'utf8';

              while (true) {
                switch (encoding) {
                  case 'hex':
                    return hexSlice(this, start, end);

                  case 'utf8':
                  case 'utf-8':
                    return utf8Slice(this, start, end);

                  case 'ascii':
                    return asciiSlice(this, start, end);

                  case 'latin1':
                  case 'binary':
                    return latin1Slice(this, start, end);

                  case 'base64':
                    return base64Slice(this, start, end);

                  case 'ucs2':
                  case 'ucs-2':
                  case 'utf16le':
                  case 'utf-16le':
                    return utf16leSlice(this, start, end);

                  default:
                    if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
                    encoding = (encoding + '').toLowerCase();
                    loweredCase = true;
                }
              }
            } // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
            // Buffer instances.


            Buffer$i.prototype._isBuffer = true;

            function swap(b, n, m) {
              var i = b[n];
              b[n] = b[m];
              b[m] = i;
            }

            Buffer$i.prototype.swap16 = function swap16() {
              var len = this.length;

              if (len % 2 !== 0) {
                throw new RangeError('Buffer size must be a multiple of 16-bits');
              }

              for (var i = 0; i < len; i += 2) {
                swap(this, i, i + 1);
              }

              return this;
            };

            Buffer$i.prototype.swap32 = function swap32() {
              var len = this.length;

              if (len % 4 !== 0) {
                throw new RangeError('Buffer size must be a multiple of 32-bits');
              }

              for (var i = 0; i < len; i += 4) {
                swap(this, i, i + 3);
                swap(this, i + 1, i + 2);
              }

              return this;
            };

            Buffer$i.prototype.swap64 = function swap64() {
              var len = this.length;

              if (len % 8 !== 0) {
                throw new RangeError('Buffer size must be a multiple of 64-bits');
              }

              for (var i = 0; i < len; i += 8) {
                swap(this, i, i + 7);
                swap(this, i + 1, i + 6);
                swap(this, i + 2, i + 5);
                swap(this, i + 3, i + 4);
              }

              return this;
            };

            Buffer$i.prototype.toString = function toString() {
              var length = this.length | 0;
              if (length === 0) return '';
              if (arguments.length === 0) return utf8Slice(this, 0, length);
              return slowToString.apply(this, arguments);
            };

            Buffer$i.prototype.equals = function equals(b) {
              if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer');
              if (this === b) return true;
              return Buffer$i.compare(this, b) === 0;
            };

            Buffer$i.prototype.inspect = function inspect() {
              var str = '';
              var max = INSPECT_MAX_BYTES;

              if (this.length > 0) {
                str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
                if (this.length > max) str += ' ... ';
              }

              return '<Buffer ' + str + '>';
            };

            Buffer$i.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
              if (!internalIsBuffer(target)) {
                throw new TypeError('Argument must be a Buffer');
              }

              if (start === undefined) {
                start = 0;
              }

              if (end === undefined) {
                end = target ? target.length : 0;
              }

              if (thisStart === undefined) {
                thisStart = 0;
              }

              if (thisEnd === undefined) {
                thisEnd = this.length;
              }

              if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
                throw new RangeError('out of range index');
              }

              if (thisStart >= thisEnd && start >= end) {
                return 0;
              }

              if (thisStart >= thisEnd) {
                return -1;
              }

              if (start >= end) {
                return 1;
              }

              start >>>= 0;
              end >>>= 0;
              thisStart >>>= 0;
              thisEnd >>>= 0;
              if (this === target) return 0;
              var x = thisEnd - thisStart;
              var y = end - start;
              var len = Math.min(x, y);
              var thisCopy = this.slice(thisStart, thisEnd);
              var targetCopy = target.slice(start, end);

              for (var i = 0; i < len; ++i) {
                if (thisCopy[i] !== targetCopy[i]) {
                  x = thisCopy[i];
                  y = targetCopy[i];
                  break;
                }
              }

              if (x < y) return -1;
              if (y < x) return 1;
              return 0;
            }; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
            // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
            //
            // Arguments:
            // - buffer - a Buffer to search
            // - val - a string, Buffer, or number
            // - byteOffset - an index into `buffer`; will be clamped to an int32
            // - encoding - an optional encoding, relevant is val is a string
            // - dir - true for indexOf, false for lastIndexOf


            function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
              // Empty buffer means no match
              if (buffer.length === 0) return -1; // Normalize byteOffset

              if (typeof byteOffset === 'string') {
                encoding = byteOffset;
                byteOffset = 0;
              } else if (byteOffset > 0x7fffffff) {
                byteOffset = 0x7fffffff;
              } else if (byteOffset < -0x80000000) {
                byteOffset = -0x80000000;
              }

              byteOffset = +byteOffset; // Coerce to Number.

              if (isNaN(byteOffset)) {
                // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
                byteOffset = dir ? 0 : buffer.length - 1;
              } // Normalize byteOffset: negative offsets start from the end of the buffer


              if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

              if (byteOffset >= buffer.length) {
                if (dir) return -1;else byteOffset = buffer.length - 1;
              } else if (byteOffset < 0) {
                if (dir) byteOffset = 0;else return -1;
              } // Normalize val


              if (typeof val === 'string') {
                val = Buffer$i.from(val, encoding);
              } // Finally, search either indexOf (if dir is true) or lastIndexOf


              if (internalIsBuffer(val)) {
                // Special case: looking for empty string/buffer always fails
                if (val.length === 0) {
                  return -1;
                }

                return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
              } else if (typeof val === 'number') {
                val = val & 0xFF; // Search for a byte value [0-255]

                if (Buffer$i.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
                  if (dir) {
                    return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
                  } else {
                    return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
                  }
                }

                return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
              }

              throw new TypeError('val must be string, number or Buffer');
            }

            function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
              var indexSize = 1;
              var arrLength = arr.length;
              var valLength = val.length;

              if (encoding !== undefined) {
                encoding = String(encoding).toLowerCase();

                if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
                  if (arr.length < 2 || val.length < 2) {
                    return -1;
                  }

                  indexSize = 2;
                  arrLength /= 2;
                  valLength /= 2;
                  byteOffset /= 2;
                }
              }

              function read(buf, i) {
                if (indexSize === 1) {
                  return buf[i];
                } else {
                  return buf.readUInt16BE(i * indexSize);
                }
              }

              var i;

              if (dir) {
                var foundIndex = -1;

                for (i = byteOffset; i < arrLength; i++) {
                  if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                    if (foundIndex === -1) foundIndex = i;
                    if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
                  } else {
                    if (foundIndex !== -1) i -= i - foundIndex;
                    foundIndex = -1;
                  }
                }
              } else {
                if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

                for (i = byteOffset; i >= 0; i--) {
                  var found = true;

                  for (var j = 0; j < valLength; j++) {
                    if (read(arr, i + j) !== read(val, j)) {
                      found = false;
                      break;
                    }
                  }

                  if (found) return i;
                }
              }

              return -1;
            }

            Buffer$i.prototype.includes = function includes(val, byteOffset, encoding) {
              return this.indexOf(val, byteOffset, encoding) !== -1;
            };

            Buffer$i.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
              return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
            };

            Buffer$i.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
              return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
            };

            function hexWrite(buf, string, offset, length) {
              offset = Number(offset) || 0;
              var remaining = buf.length - offset;

              if (!length) {
                length = remaining;
              } else {
                length = Number(length);

                if (length > remaining) {
                  length = remaining;
                }
              } // must be an even number of digits


              var strLen = string.length;
              if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

              if (length > strLen / 2) {
                length = strLen / 2;
              }

              for (var i = 0; i < length; ++i) {
                var parsed = parseInt(string.substr(i * 2, 2), 16);
                if (isNaN(parsed)) return i;
                buf[offset + i] = parsed;
              }

              return i;
            }

            function utf8Write(buf, string, offset, length) {
              return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
            }

            function asciiWrite(buf, string, offset, length) {
              return blitBuffer(asciiToBytes(string), buf, offset, length);
            }

            function latin1Write(buf, string, offset, length) {
              return asciiWrite(buf, string, offset, length);
            }

            function base64Write(buf, string, offset, length) {
              return blitBuffer(base64ToBytes(string), buf, offset, length);
            }

            function ucs2Write(buf, string, offset, length) {
              return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
            }

            Buffer$i.prototype.write = function write(string, offset, length, encoding) {
              // Buffer#write(string)
              if (offset === undefined) {
                encoding = 'utf8';
                length = this.length;
                offset = 0; // Buffer#write(string, encoding)
              } else if (length === undefined && typeof offset === 'string') {
                encoding = offset;
                length = this.length;
                offset = 0; // Buffer#write(string, offset[, length][, encoding])
              } else if (isFinite(offset)) {
                offset = offset | 0;

                if (isFinite(length)) {
                  length = length | 0;
                  if (encoding === undefined) encoding = 'utf8';
                } else {
                  encoding = length;
                  length = undefined;
                } // legacy write(string, encoding, offset, length) - remove in v0.13

              } else {
                throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
              }

              var remaining = this.length - offset;
              if (length === undefined || length > remaining) length = remaining;

              if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
                throw new RangeError('Attempt to write outside buffer bounds');
              }

              if (!encoding) encoding = 'utf8';
              var loweredCase = false;

              for (;;) {
                switch (encoding) {
                  case 'hex':
                    return hexWrite(this, string, offset, length);

                  case 'utf8':
                  case 'utf-8':
                    return utf8Write(this, string, offset, length);

                  case 'ascii':
                    return asciiWrite(this, string, offset, length);

                  case 'latin1':
                  case 'binary':
                    return latin1Write(this, string, offset, length);

                  case 'base64':
                    // Warning: maxLength not taken into account in base64Write
                    return base64Write(this, string, offset, length);

                  case 'ucs2':
                  case 'ucs-2':
                  case 'utf16le':
                  case 'utf-16le':
                    return ucs2Write(this, string, offset, length);

                  default:
                    if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
                    encoding = ('' + encoding).toLowerCase();
                    loweredCase = true;
                }
              }
            };

            Buffer$i.prototype.toJSON = function toJSON() {
              return {
                type: 'Buffer',
                data: Array.prototype.slice.call(this._arr || this, 0)
              };
            };

            function base64Slice(buf, start, end) {
              if (start === 0 && end === buf.length) {
                return fromByteArray(buf);
              } else {
                return fromByteArray(buf.slice(start, end));
              }
            }

            function utf8Slice(buf, start, end) {
              end = Math.min(buf.length, end);
              var res = [];
              var i = start;

              while (i < end) {
                var firstByte = buf[i];
                var codePoint = null;
                var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

                if (i + bytesPerSequence <= end) {
                  var secondByte, thirdByte, fourthByte, tempCodePoint;

                  switch (bytesPerSequence) {
                    case 1:
                      if (firstByte < 0x80) {
                        codePoint = firstByte;
                      }

                      break;

                    case 2:
                      secondByte = buf[i + 1];

                      if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

                        if (tempCodePoint > 0x7F) {
                          codePoint = tempCodePoint;
                        }
                      }

                      break;

                    case 3:
                      secondByte = buf[i + 1];
                      thirdByte = buf[i + 2];

                      if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                          codePoint = tempCodePoint;
                        }
                      }

                      break;

                    case 4:
                      secondByte = buf[i + 1];
                      thirdByte = buf[i + 2];
                      fourthByte = buf[i + 3];

                      if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                          codePoint = tempCodePoint;
                        }
                      }

                  }
                }

                if (codePoint === null) {
                  // we did not generate a valid codePoint so insert a
                  // replacement char (U+FFFD) and advance only 1 byte
                  codePoint = 0xFFFD;
                  bytesPerSequence = 1;
                } else if (codePoint > 0xFFFF) {
                  // encode to utf16 (surrogate pair dance)
                  codePoint -= 0x10000;
                  res.push(codePoint >>> 10 & 0x3FF | 0xD800);
                  codePoint = 0xDC00 | codePoint & 0x3FF;
                }

                res.push(codePoint);
                i += bytesPerSequence;
              }

              return decodeCodePointsArray(res);
            } // Based on http://stackoverflow.com/a/22747272/680742, the browser with
            // the lowest limit is Chrome, with 0x10000 args.
            // We go 1 magnitude less, for safety


            var MAX_ARGUMENTS_LENGTH = 0x1000;

            function decodeCodePointsArray(codePoints) {
              var len = codePoints.length;

              if (len <= MAX_ARGUMENTS_LENGTH) {
                return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
              } // Decode in chunks to avoid "call stack size exceeded".


              var res = '';
              var i = 0;

              while (i < len) {
                res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
              }

              return res;
            }

            function asciiSlice(buf, start, end) {
              var ret = '';
              end = Math.min(buf.length, end);

              for (var i = start; i < end; ++i) {
                ret += String.fromCharCode(buf[i] & 0x7F);
              }

              return ret;
            }

            function latin1Slice(buf, start, end) {
              var ret = '';
              end = Math.min(buf.length, end);

              for (var i = start; i < end; ++i) {
                ret += String.fromCharCode(buf[i]);
              }

              return ret;
            }

            function hexSlice(buf, start, end) {
              var len = buf.length;
              if (!start || start < 0) start = 0;
              if (!end || end < 0 || end > len) end = len;
              var out = '';

              for (var i = start; i < end; ++i) {
                out += toHex$1(buf[i]);
              }

              return out;
            }

            function utf16leSlice(buf, start, end) {
              var bytes = buf.slice(start, end);
              var res = '';

              for (var i = 0; i < bytes.length; i += 2) {
                res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
              }

              return res;
            }

            Buffer$i.prototype.slice = function slice(start, end) {
              var len = this.length;
              start = ~~start;
              end = end === undefined ? len : ~~end;

              if (start < 0) {
                start += len;
                if (start < 0) start = 0;
              } else if (start > len) {
                start = len;
              }

              if (end < 0) {
                end += len;
                if (end < 0) end = 0;
              } else if (end > len) {
                end = len;
              }

              if (end < start) end = start;
              var newBuf;

              if (Buffer$i.TYPED_ARRAY_SUPPORT) {
                newBuf = this.subarray(start, end);
                newBuf.__proto__ = Buffer$i.prototype;
              } else {
                var sliceLen = end - start;
                newBuf = new Buffer$i(sliceLen, undefined);

                for (var i = 0; i < sliceLen; ++i) {
                  newBuf[i] = this[i + start];
                }
              }

              return newBuf;
            };
            /*
             * Need to make sure that buffer isn't trying to write out of bounds.
             */


            function checkOffset(offset, ext, length) {
              if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
              if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
            }

            Buffer$i.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
              offset = offset | 0;
              byteLength = byteLength | 0;
              if (!noAssert) checkOffset(offset, byteLength, this.length);
              var val = this[offset];
              var mul = 1;
              var i = 0;

              while (++i < byteLength && (mul *= 0x100)) {
                val += this[offset + i] * mul;
              }

              return val;
            };

            Buffer$i.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
              offset = offset | 0;
              byteLength = byteLength | 0;

              if (!noAssert) {
                checkOffset(offset, byteLength, this.length);
              }

              var val = this[offset + --byteLength];
              var mul = 1;

              while (byteLength > 0 && (mul *= 0x100)) {
                val += this[offset + --byteLength] * mul;
              }

              return val;
            };

            Buffer$i.prototype.readUInt8 = function readUInt8(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 1, this.length);
              return this[offset];
            };

            Buffer$i.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 2, this.length);
              return this[offset] | this[offset + 1] << 8;
            };

            Buffer$i.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 2, this.length);
              return this[offset] << 8 | this[offset + 1];
            };

            Buffer$i.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 4, this.length);
              return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
            };

            Buffer$i.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 4, this.length);
              return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
            };

            Buffer$i.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
              offset = offset | 0;
              byteLength = byteLength | 0;
              if (!noAssert) checkOffset(offset, byteLength, this.length);
              var val = this[offset];
              var mul = 1;
              var i = 0;

              while (++i < byteLength && (mul *= 0x100)) {
                val += this[offset + i] * mul;
              }

              mul *= 0x80;
              if (val >= mul) val -= Math.pow(2, 8 * byteLength);
              return val;
            };

            Buffer$i.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
              offset = offset | 0;
              byteLength = byteLength | 0;
              if (!noAssert) checkOffset(offset, byteLength, this.length);
              var i = byteLength;
              var mul = 1;
              var val = this[offset + --i];

              while (i > 0 && (mul *= 0x100)) {
                val += this[offset + --i] * mul;
              }

              mul *= 0x80;
              if (val >= mul) val -= Math.pow(2, 8 * byteLength);
              return val;
            };

            Buffer$i.prototype.readInt8 = function readInt8(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 1, this.length);
              if (!(this[offset] & 0x80)) return this[offset];
              return (0xff - this[offset] + 1) * -1;
            };

            Buffer$i.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 2, this.length);
              var val = this[offset] | this[offset + 1] << 8;
              return val & 0x8000 ? val | 0xFFFF0000 : val;
            };

            Buffer$i.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 2, this.length);
              var val = this[offset + 1] | this[offset] << 8;
              return val & 0x8000 ? val | 0xFFFF0000 : val;
            };

            Buffer$i.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 4, this.length);
              return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
            };

            Buffer$i.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 4, this.length);
              return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
            };

            Buffer$i.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 4, this.length);
              return read(this, offset, true, 23, 4);
            };

            Buffer$i.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 4, this.length);
              return read(this, offset, false, 23, 4);
            };

            Buffer$i.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 8, this.length);
              return read(this, offset, true, 52, 8);
            };

            Buffer$i.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
              if (!noAssert) checkOffset(offset, 8, this.length);
              return read(this, offset, false, 52, 8);
            };

            function checkInt(buf, value, offset, ext, max, min) {
              if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
              if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
              if (offset + ext > buf.length) throw new RangeError('Index out of range');
            }

            Buffer$i.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
              value = +value;
              offset = offset | 0;
              byteLength = byteLength | 0;

              if (!noAssert) {
                var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                checkInt(this, value, offset, byteLength, maxBytes, 0);
              }

              var mul = 1;
              var i = 0;
              this[offset] = value & 0xFF;

              while (++i < byteLength && (mul *= 0x100)) {
                this[offset + i] = value / mul & 0xFF;
              }

              return offset + byteLength;
            };

            Buffer$i.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
              value = +value;
              offset = offset | 0;
              byteLength = byteLength | 0;

              if (!noAssert) {
                var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                checkInt(this, value, offset, byteLength, maxBytes, 0);
              }

              var i = byteLength - 1;
              var mul = 1;
              this[offset + i] = value & 0xFF;

              while (--i >= 0 && (mul *= 0x100)) {
                this[offset + i] = value / mul & 0xFF;
              }

              return offset + byteLength;
            };

            Buffer$i.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
              if (!Buffer$i.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
              this[offset] = value & 0xff;
              return offset + 1;
            };

            function objectWriteUInt16(buf, value, offset, littleEndian) {
              if (value < 0) value = 0xffff + value + 1;

              for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
                buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
              }
            }

            Buffer$i.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

              if (Buffer$i.TYPED_ARRAY_SUPPORT) {
                this[offset] = value & 0xff;
                this[offset + 1] = value >>> 8;
              } else {
                objectWriteUInt16(this, value, offset, true);
              }

              return offset + 2;
            };

            Buffer$i.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

              if (Buffer$i.TYPED_ARRAY_SUPPORT) {
                this[offset] = value >>> 8;
                this[offset + 1] = value & 0xff;
              } else {
                objectWriteUInt16(this, value, offset, false);
              }

              return offset + 2;
            };

            function objectWriteUInt32(buf, value, offset, littleEndian) {
              if (value < 0) value = 0xffffffff + value + 1;

              for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
                buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
              }
            }

            Buffer$i.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

              if (Buffer$i.TYPED_ARRAY_SUPPORT) {
                this[offset + 3] = value >>> 24;
                this[offset + 2] = value >>> 16;
                this[offset + 1] = value >>> 8;
                this[offset] = value & 0xff;
              } else {
                objectWriteUInt32(this, value, offset, true);
              }

              return offset + 4;
            };

            Buffer$i.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

              if (Buffer$i.TYPED_ARRAY_SUPPORT) {
                this[offset] = value >>> 24;
                this[offset + 1] = value >>> 16;
                this[offset + 2] = value >>> 8;
                this[offset + 3] = value & 0xff;
              } else {
                objectWriteUInt32(this, value, offset, false);
              }

              return offset + 4;
            };

            Buffer$i.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
              value = +value;
              offset = offset | 0;

              if (!noAssert) {
                var limit = Math.pow(2, 8 * byteLength - 1);
                checkInt(this, value, offset, byteLength, limit - 1, -limit);
              }

              var i = 0;
              var mul = 1;
              var sub = 0;
              this[offset] = value & 0xFF;

              while (++i < byteLength && (mul *= 0x100)) {
                if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                  sub = 1;
                }

                this[offset + i] = (value / mul >> 0) - sub & 0xFF;
              }

              return offset + byteLength;
            };

            Buffer$i.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
              value = +value;
              offset = offset | 0;

              if (!noAssert) {
                var limit = Math.pow(2, 8 * byteLength - 1);
                checkInt(this, value, offset, byteLength, limit - 1, -limit);
              }

              var i = byteLength - 1;
              var mul = 1;
              var sub = 0;
              this[offset + i] = value & 0xFF;

              while (--i >= 0 && (mul *= 0x100)) {
                if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                  sub = 1;
                }

                this[offset + i] = (value / mul >> 0) - sub & 0xFF;
              }

              return offset + byteLength;
            };

            Buffer$i.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
              if (!Buffer$i.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
              if (value < 0) value = 0xff + value + 1;
              this[offset] = value & 0xff;
              return offset + 1;
            };

            Buffer$i.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

              if (Buffer$i.TYPED_ARRAY_SUPPORT) {
                this[offset] = value & 0xff;
                this[offset + 1] = value >>> 8;
              } else {
                objectWriteUInt16(this, value, offset, true);
              }

              return offset + 2;
            };

            Buffer$i.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

              if (Buffer$i.TYPED_ARRAY_SUPPORT) {
                this[offset] = value >>> 8;
                this[offset + 1] = value & 0xff;
              } else {
                objectWriteUInt16(this, value, offset, false);
              }

              return offset + 2;
            };

            Buffer$i.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);

              if (Buffer$i.TYPED_ARRAY_SUPPORT) {
                this[offset] = value & 0xff;
                this[offset + 1] = value >>> 8;
                this[offset + 2] = value >>> 16;
                this[offset + 3] = value >>> 24;
              } else {
                objectWriteUInt32(this, value, offset, true);
              }

              return offset + 4;
            };

            Buffer$i.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
              if (value < 0) value = 0xffffffff + value + 1;

              if (Buffer$i.TYPED_ARRAY_SUPPORT) {
                this[offset] = value >>> 24;
                this[offset + 1] = value >>> 16;
                this[offset + 2] = value >>> 8;
                this[offset + 3] = value & 0xff;
              } else {
                objectWriteUInt32(this, value, offset, false);
              }

              return offset + 4;
            };

            function checkIEEE754(buf, value, offset, ext, max, min) {
              if (offset + ext > buf.length) throw new RangeError('Index out of range');
              if (offset < 0) throw new RangeError('Index out of range');
            }

            function writeFloat(buf, value, offset, littleEndian, noAssert) {
              if (!noAssert) {
                checkIEEE754(buf, value, offset, 4);
              }

              write(buf, value, offset, littleEndian, 23, 4);
              return offset + 4;
            }

            Buffer$i.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
              return writeFloat(this, value, offset, true, noAssert);
            };

            Buffer$i.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
              return writeFloat(this, value, offset, false, noAssert);
            };

            function writeDouble(buf, value, offset, littleEndian, noAssert) {
              if (!noAssert) {
                checkIEEE754(buf, value, offset, 8);
              }

              write(buf, value, offset, littleEndian, 52, 8);
              return offset + 8;
            }

            Buffer$i.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
              return writeDouble(this, value, offset, true, noAssert);
            };

            Buffer$i.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
              return writeDouble(this, value, offset, false, noAssert);
            }; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


            Buffer$i.prototype.copy = function copy(target, targetStart, start, end) {
              if (!start) start = 0;
              if (!end && end !== 0) end = this.length;
              if (targetStart >= target.length) targetStart = target.length;
              if (!targetStart) targetStart = 0;
              if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

              if (end === start) return 0;
              if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

              if (targetStart < 0) {
                throw new RangeError('targetStart out of bounds');
              }

              if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
              if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

              if (end > this.length) end = this.length;

              if (target.length - targetStart < end - start) {
                end = target.length - targetStart + start;
              }

              var len = end - start;
              var i;

              if (this === target && start < targetStart && targetStart < end) {
                // descending copy from end
                for (i = len - 1; i >= 0; --i) {
                  target[i + targetStart] = this[i + start];
                }
              } else if (len < 1000 || !Buffer$i.TYPED_ARRAY_SUPPORT) {
                // ascending copy from start
                for (i = 0; i < len; ++i) {
                  target[i + targetStart] = this[i + start];
                }
              } else {
                Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
              }

              return len;
            }; // Usage:
            //    buffer.fill(number[, offset[, end]])
            //    buffer.fill(buffer[, offset[, end]])
            //    buffer.fill(string[, offset[, end]][, encoding])


            Buffer$i.prototype.fill = function fill(val, start, end, encoding) {
              // Handle string cases:
              if (typeof val === 'string') {
                if (typeof start === 'string') {
                  encoding = start;
                  start = 0;
                  end = this.length;
                } else if (typeof end === 'string') {
                  encoding = end;
                  end = this.length;
                }

                if (val.length === 1) {
                  var code = val.charCodeAt(0);

                  if (code < 256) {
                    val = code;
                  }
                }

                if (encoding !== undefined && typeof encoding !== 'string') {
                  throw new TypeError('encoding must be a string');
                }

                if (typeof encoding === 'string' && !Buffer$i.isEncoding(encoding)) {
                  throw new TypeError('Unknown encoding: ' + encoding);
                }
              } else if (typeof val === 'number') {
                val = val & 255;
              } // Invalid ranges are not set to a default, so can range check early.


              if (start < 0 || this.length < start || this.length < end) {
                throw new RangeError('Out of range index');
              }

              if (end <= start) {
                return this;
              }

              start = start >>> 0;
              end = end === undefined ? this.length : end >>> 0;
              if (!val) val = 0;
              var i;

              if (typeof val === 'number') {
                for (i = start; i < end; ++i) {
                  this[i] = val;
                }
              } else {
                var bytes = internalIsBuffer(val) ? val : utf8ToBytes(new Buffer$i(val, encoding).toString());
                var len = bytes.length;

                for (i = 0; i < end - start; ++i) {
                  this[i + start] = bytes[i % len];
                }
              }

              return this;
            }; // HELPER FUNCTIONS
            // ================


            var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

            function base64clean(str) {
              // Node strips out invalid characters like \n and \t from the string, base64-js does not
              str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

              if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

              while (str.length % 4 !== 0) {
                str = str + '=';
              }

              return str;
            }

            function stringtrim(str) {
              if (str.trim) return str.trim();
              return str.replace(/^\s+|\s+$/g, '');
            }

            function toHex$1(n) {
              if (n < 16) return '0' + n.toString(16);
              return n.toString(16);
            }

            function utf8ToBytes(string, units) {
              units = units || Infinity;
              var codePoint;
              var length = string.length;
              var leadSurrogate = null;
              var bytes = [];

              for (var i = 0; i < length; ++i) {
                codePoint = string.charCodeAt(i); // is surrogate component

                if (codePoint > 0xD7FF && codePoint < 0xE000) {
                  // last char was a lead
                  if (!leadSurrogate) {
                    // no lead yet
                    if (codePoint > 0xDBFF) {
                      // unexpected trail
                      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                      continue;
                    } else if (i + 1 === length) {
                      // unpaired lead
                      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                      continue;
                    } // valid lead


                    leadSurrogate = codePoint;
                    continue;
                  } // 2 leads in a row


                  if (codePoint < 0xDC00) {
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    leadSurrogate = codePoint;
                    continue;
                  } // valid surrogate pair


                  codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
                } else if (leadSurrogate) {
                  // valid bmp char, but last char was a lead
                  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                }

                leadSurrogate = null; // encode utf8

                if (codePoint < 0x80) {
                  if ((units -= 1) < 0) break;
                  bytes.push(codePoint);
                } else if (codePoint < 0x800) {
                  if ((units -= 2) < 0) break;
                  bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
                } else if (codePoint < 0x10000) {
                  if ((units -= 3) < 0) break;
                  bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
                } else if (codePoint < 0x110000) {
                  if ((units -= 4) < 0) break;
                  bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
                } else {
                  throw new Error('Invalid code point');
                }
              }

              return bytes;
            }

            function asciiToBytes(str) {
              var byteArray = [];

              for (var i = 0; i < str.length; ++i) {
                // Node's code seems to be doing this and not & 0x7F..
                byteArray.push(str.charCodeAt(i) & 0xFF);
              }

              return byteArray;
            }

            function utf16leToBytes(str, units) {
              var c, hi, lo;
              var byteArray = [];

              for (var i = 0; i < str.length; ++i) {
                if ((units -= 2) < 0) break;
                c = str.charCodeAt(i);
                hi = c >> 8;
                lo = c % 256;
                byteArray.push(lo);
                byteArray.push(hi);
              }

              return byteArray;
            }

            function base64ToBytes(str) {
              return toByteArray(base64clean(str));
            }

            function blitBuffer(src, dst, offset, length) {
              for (var i = 0; i < length; ++i) {
                if (i + offset >= dst.length || i >= src.length) break;
                dst[i + offset] = src[i];
              }

              return i;
            }

            function isnan(val) {
              return val !== val; // eslint-disable-line no-self-compare
            } // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
            // The _isBuffer check is for Safari 5-7 support, because it's missing
            // Object.prototype.constructor. Remove this eventually


            function isBuffer$2(obj) {
              return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj));
            }

            function isFastBuffer(obj) {
              return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
            } // For Node v0.10 support. Remove this eventually.


            function isSlowBuffer(obj) {
              return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0));
            }

            var bufferEs6 = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        INSPECT_MAX_BYTES: INSPECT_MAX_BYTES,
                        kMaxLength: _kMaxLength,
                        Buffer: Buffer$i,
                        SlowBuffer: SlowBuffer,
                        isBuffer: isBuffer$2
            });

            var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

            function getAugmentedNamespace(n) {
            	if (n.__esModule) return n;
            	var a = Object.defineProperty({}, '__esModule', {value: true});
            	Object.keys(n).forEach(function (k) {
            		var d = Object.getOwnPropertyDescriptor(n, k);
            		Object.defineProperty(a, k, d.get ? d : {
            			enumerable: true,
            			get: function () {
            				return n[k];
            			}
            		});
            	});
            	return a;
            }

            function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

            function _unsupportedIterableToArray$1(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }

            function _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
            var errors = {
              IMPOSSIBLE_CASE: 'Impossible case. Please create issue.',
              TWEAK_ADD: 'The tweak was out of range or the resulted private key is invalid',
              TWEAK_MUL: 'The tweak was out of range or equal to zero',
              CONTEXT_RANDOMIZE_UNKNOW: 'Unknow error on context randomization',
              SECKEY_INVALID: 'Private Key is invalid',
              PUBKEY_PARSE: 'Public Key could not be parsed',
              PUBKEY_SERIALIZE: 'Public Key serialization error',
              PUBKEY_COMBINE: 'The sum of the public keys is not valid',
              SIG_PARSE: 'Signature could not be parsed',
              SIGN: 'The nonce generation function failed, or the private key was invalid',
              RECOVER: 'Public key could not be recover',
              ECDH: 'Scalar was invalid (zero or overflow)'
            };

            function assert$k(cond, msg) {
              if (!cond) throw new Error(msg);
            }

            function isUint8Array(name, value, length) {
              assert$k(value instanceof Uint8Array, "Expected ".concat(name, " to be an Uint8Array"));

              if (length !== undefined) {
                if (Array.isArray(length)) {
                  var numbers = length.join(', ');
                  var msg = "Expected ".concat(name, " to be an Uint8Array with length [").concat(numbers, "]");
                  assert$k(length.includes(value.length), msg);
                } else {
                  var _msg = "Expected ".concat(name, " to be an Uint8Array with length ").concat(length);

                  assert$k(value.length === length, _msg);
                }
              }
            }

            function isCompressed(value) {
              assert$k(toTypeString(value) === 'Boolean', 'Expected compressed to be a Boolean');
            }

            function getAssertedOutput() {
              var output = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (len) {
                return new Uint8Array(len);
              };
              var length = arguments.length > 1 ? arguments[1] : undefined;
              if (typeof output === 'function') output = output(length);
              isUint8Array('output', output, length);
              return output;
            }

            function toTypeString(value) {
              return Object.prototype.toString.call(value).slice(8, -1);
            }

            var lib$2 = function lib(secp256k1) {
              return {
                contextRandomize: function contextRandomize(seed) {
                  assert$k(seed === null || seed instanceof Uint8Array, 'Expected seed to be an Uint8Array or null');
                  if (seed !== null) isUint8Array('seed', seed, 32);

                  switch (secp256k1.contextRandomize(seed)) {
                    case 1:
                      throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW);
                  }
                },
                privateKeyVerify: function privateKeyVerify(seckey) {
                  isUint8Array('private key', seckey, 32);
                  return secp256k1.privateKeyVerify(seckey) === 0;
                },
                privateKeyNegate: function privateKeyNegate(seckey) {
                  isUint8Array('private key', seckey, 32);

                  switch (secp256k1.privateKeyNegate(seckey)) {
                    case 0:
                      return seckey;

                    case 1:
                      throw new Error(errors.IMPOSSIBLE_CASE);
                  }
                },
                privateKeyTweakAdd: function privateKeyTweakAdd(seckey, tweak) {
                  isUint8Array('private key', seckey, 32);
                  isUint8Array('tweak', tweak, 32);

                  switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {
                    case 0:
                      return seckey;

                    case 1:
                      throw new Error(errors.TWEAK_ADD);
                  }
                },
                privateKeyTweakMul: function privateKeyTweakMul(seckey, tweak) {
                  isUint8Array('private key', seckey, 32);
                  isUint8Array('tweak', tweak, 32);

                  switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {
                    case 0:
                      return seckey;

                    case 1:
                      throw new Error(errors.TWEAK_MUL);
                  }
                },
                publicKeyVerify: function publicKeyVerify(pubkey) {
                  isUint8Array('public key', pubkey, [33, 65]);
                  return secp256k1.publicKeyVerify(pubkey) === 0;
                },
                publicKeyCreate: function publicKeyCreate(seckey) {
                  var compressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
                  var output = arguments.length > 2 ? arguments[2] : undefined;
                  isUint8Array('private key', seckey, 32);
                  isCompressed(compressed);
                  output = getAssertedOutput(output, compressed ? 33 : 65);

                  switch (secp256k1.publicKeyCreate(output, seckey)) {
                    case 0:
                      return output;

                    case 1:
                      throw new Error(errors.SECKEY_INVALID);

                    case 2:
                      throw new Error(errors.PUBKEY_SERIALIZE);
                  }
                },
                publicKeyConvert: function publicKeyConvert(pubkey) {
                  var compressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
                  var output = arguments.length > 2 ? arguments[2] : undefined;
                  isUint8Array('public key', pubkey, [33, 65]);
                  isCompressed(compressed);
                  output = getAssertedOutput(output, compressed ? 33 : 65);

                  switch (secp256k1.publicKeyConvert(output, pubkey)) {
                    case 0:
                      return output;

                    case 1:
                      throw new Error(errors.PUBKEY_PARSE);

                    case 2:
                      throw new Error(errors.PUBKEY_SERIALIZE);
                  }
                },
                publicKeyNegate: function publicKeyNegate(pubkey) {
                  var compressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
                  var output = arguments.length > 2 ? arguments[2] : undefined;
                  isUint8Array('public key', pubkey, [33, 65]);
                  isCompressed(compressed);
                  output = getAssertedOutput(output, compressed ? 33 : 65);

                  switch (secp256k1.publicKeyNegate(output, pubkey)) {
                    case 0:
                      return output;

                    case 1:
                      throw new Error(errors.PUBKEY_PARSE);

                    case 2:
                      throw new Error(errors.IMPOSSIBLE_CASE);

                    case 3:
                      throw new Error(errors.PUBKEY_SERIALIZE);
                  }
                },
                publicKeyCombine: function publicKeyCombine(pubkeys) {
                  var compressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
                  var output = arguments.length > 2 ? arguments[2] : undefined;
                  assert$k(Array.isArray(pubkeys), 'Expected public keys to be an Array');
                  assert$k(pubkeys.length > 0, 'Expected public keys array will have more than zero items');

                  var _iterator = _createForOfIteratorHelper(pubkeys),
                      _step;

                  try {
                    for (_iterator.s(); !(_step = _iterator.n()).done;) {
                      var pubkey = _step.value;
                      isUint8Array('public key', pubkey, [33, 65]);
                    }
                  } catch (err) {
                    _iterator.e(err);
                  } finally {
                    _iterator.f();
                  }

                  isCompressed(compressed);
                  output = getAssertedOutput(output, compressed ? 33 : 65);

                  switch (secp256k1.publicKeyCombine(output, pubkeys)) {
                    case 0:
                      return output;

                    case 1:
                      throw new Error(errors.PUBKEY_PARSE);

                    case 2:
                      throw new Error(errors.PUBKEY_COMBINE);

                    case 3:
                      throw new Error(errors.PUBKEY_SERIALIZE);
                  }
                },
                publicKeyTweakAdd: function publicKeyTweakAdd(pubkey, tweak) {
                  var compressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
                  var output = arguments.length > 3 ? arguments[3] : undefined;
                  isUint8Array('public key', pubkey, [33, 65]);
                  isUint8Array('tweak', tweak, 32);
                  isCompressed(compressed);
                  output = getAssertedOutput(output, compressed ? 33 : 65);

                  switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {
                    case 0:
                      return output;

                    case 1:
                      throw new Error(errors.PUBKEY_PARSE);

                    case 2:
                      throw new Error(errors.TWEAK_ADD);
                  }
                },
                publicKeyTweakMul: function publicKeyTweakMul(pubkey, tweak) {
                  var compressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
                  var output = arguments.length > 3 ? arguments[3] : undefined;
                  isUint8Array('public key', pubkey, [33, 65]);
                  isUint8Array('tweak', tweak, 32);
                  isCompressed(compressed);
                  output = getAssertedOutput(output, compressed ? 33 : 65);

                  switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {
                    case 0:
                      return output;

                    case 1:
                      throw new Error(errors.PUBKEY_PARSE);

                    case 2:
                      throw new Error(errors.TWEAK_MUL);
                  }
                },
                signatureNormalize: function signatureNormalize(sig) {
                  isUint8Array('signature', sig, 64);

                  switch (secp256k1.signatureNormalize(sig)) {
                    case 0:
                      return sig;

                    case 1:
                      throw new Error(errors.SIG_PARSE);
                  }
                },
                signatureExport: function signatureExport(sig, output) {
                  isUint8Array('signature', sig, 64);
                  output = getAssertedOutput(output, 72);
                  var obj = {
                    output: output,
                    outputlen: 72
                  };

                  switch (secp256k1.signatureExport(obj, sig)) {
                    case 0:
                      return output.slice(0, obj.outputlen);

                    case 1:
                      throw new Error(errors.SIG_PARSE);

                    case 2:
                      throw new Error(errors.IMPOSSIBLE_CASE);
                  }
                },
                signatureImport: function signatureImport(sig, output) {
                  isUint8Array('signature', sig);
                  output = getAssertedOutput(output, 64);

                  switch (secp256k1.signatureImport(output, sig)) {
                    case 0:
                      return output;

                    case 1:
                      throw new Error(errors.SIG_PARSE);

                    case 2:
                      throw new Error(errors.IMPOSSIBLE_CASE);
                  }
                },
                ecdsaSign: function ecdsaSign(msg32, seckey) {
                  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                  var output = arguments.length > 3 ? arguments[3] : undefined;
                  isUint8Array('message', msg32, 32);
                  isUint8Array('private key', seckey, 32);
                  assert$k(toTypeString(options) === 'Object', 'Expected options to be an Object');
                  if (options.data !== undefined) isUint8Array('options.data', options.data);
                  if (options.noncefn !== undefined) assert$k(toTypeString(options.noncefn) === 'Function', 'Expected options.noncefn to be a Function');
                  output = getAssertedOutput(output, 64);
                  var obj = {
                    signature: output,
                    recid: null
                  };

                  switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {
                    case 0:
                      return obj;

                    case 1:
                      throw new Error(errors.SIGN);

                    case 2:
                      throw new Error(errors.IMPOSSIBLE_CASE);
                  }
                },
                ecdsaVerify: function ecdsaVerify(sig, msg32, pubkey) {
                  isUint8Array('signature', sig, 64);
                  isUint8Array('message', msg32, 32);
                  isUint8Array('public key', pubkey, [33, 65]);

                  switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {
                    case 0:
                      return true;

                    case 3:
                      return false;

                    case 1:
                      throw new Error(errors.SIG_PARSE);

                    case 2:
                      throw new Error(errors.PUBKEY_PARSE);
                  }
                },
                ecdsaRecover: function ecdsaRecover(sig, recid, msg32) {
                  var compressed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
                  var output = arguments.length > 4 ? arguments[4] : undefined;
                  isUint8Array('signature', sig, 64);
                  assert$k(toTypeString(recid) === 'Number' && recid >= 0 && recid <= 3, 'Expected recovery id to be a Number within interval [0, 3]');
                  isUint8Array('message', msg32, 32);
                  isCompressed(compressed);
                  output = getAssertedOutput(output, compressed ? 33 : 65);

                  switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {
                    case 0:
                      return output;

                    case 1:
                      throw new Error(errors.SIG_PARSE);

                    case 2:
                      throw new Error(errors.RECOVER);

                    case 3:
                      throw new Error(errors.IMPOSSIBLE_CASE);
                  }
                },
                ecdh: function ecdh(pubkey, seckey) {
                  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                  var output = arguments.length > 3 ? arguments[3] : undefined;
                  isUint8Array('public key', pubkey, [33, 65]);
                  isUint8Array('private key', seckey, 32);
                  assert$k(toTypeString(options) === 'Object', 'Expected options to be an Object');
                  if (options.data !== undefined) isUint8Array('options.data', options.data);

                  if (options.hashfn !== undefined) {
                    assert$k(toTypeString(options.hashfn) === 'Function', 'Expected options.hashfn to be a Function');
                    if (options.xbuf !== undefined) isUint8Array('options.xbuf', options.xbuf, 32);
                    if (options.ybuf !== undefined) isUint8Array('options.ybuf', options.ybuf, 32);
                    isUint8Array('output', output);
                  } else {
                    output = getAssertedOutput(output, 32);
                  }

                  switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {
                    case 0:
                      return output;

                    case 1:
                      throw new Error(errors.PUBKEY_PARSE);

                    case 2:
                      throw new Error(errors.ECDH);
                  }
                }
              };
            };

            var elliptic$2 = {};

            var name = "elliptic";
            var version$1 = "6.5.3";
            var description = "EC cryptography";
            var main = "lib/elliptic.js";
            var files = [
            	"lib"
            ];
            var scripts = {
            	jscs: "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
            	jshint: "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
            	lint: "npm run jscs && npm run jshint",
            	unit: "istanbul test _mocha --reporter=spec test/index.js",
            	test: "npm run lint && npm run unit",
            	version: "grunt dist && git add dist/"
            };
            var repository = {
            	type: "git",
            	url: "git@github.com:indutny/elliptic"
            };
            var keywords = [
            	"EC",
            	"Elliptic",
            	"curve",
            	"Cryptography"
            ];
            var author = "Fedor Indutny <fedor@indutny.com>";
            var license = "MIT";
            var bugs = {
            	url: "https://github.com/indutny/elliptic/issues"
            };
            var homepage = "https://github.com/indutny/elliptic";
            var devDependencies = {
            	brfs: "^1.4.3",
            	coveralls: "^3.0.8",
            	grunt: "^1.0.4",
            	"grunt-browserify": "^5.0.0",
            	"grunt-cli": "^1.2.0",
            	"grunt-contrib-connect": "^1.0.0",
            	"grunt-contrib-copy": "^1.0.0",
            	"grunt-contrib-uglify": "^1.0.1",
            	"grunt-mocha-istanbul": "^3.0.1",
            	"grunt-saucelabs": "^9.0.1",
            	istanbul: "^0.4.2",
            	jscs: "^3.0.7",
            	jshint: "^2.10.3",
            	mocha: "^6.2.2"
            };
            var dependencies = {
            	"bn.js": "^4.4.0",
            	brorand: "^1.0.1",
            	"hash.js": "^1.0.0",
            	"hmac-drbg": "^1.0.0",
            	inherits: "^2.0.1",
            	"minimalistic-assert": "^1.0.0",
            	"minimalistic-crypto-utils": "^1.0.0"
            };
            var _resolved = "https://registry.npmjs.org/elliptic/-/elliptic-6.5.3.tgz";
            var _integrity = "sha512-IMqzv5wNQf+E6aHeIqATs0tOLeOTwj1QKbRcS3jBbYkl5oLAserA8yJTT7/VyHUYG91PRmPyeQDObKLPpeS4dw==";
            var _from = "elliptic@6.5.3";
            var require$$0$5 = {
            	name: name,
            	version: version$1,
            	description: description,
            	main: main,
            	files: files,
            	scripts: scripts,
            	repository: repository,
            	keywords: keywords,
            	author: author,
            	license: license,
            	bugs: bugs,
            	homepage: homepage,
            	devDependencies: devDependencies,
            	dependencies: dependencies,
            	_resolved: _resolved,
            	_integrity: _integrity,
            	_from: _from
            };

            var utils$D = {};

            function _typeof$1(obj) {
              "@babel/helpers - typeof";

              return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
                return typeof obj;
              } : function (obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
              }, _typeof$1(obj);
            }

            var bn$1 = {exports: {}};

            var require$$0$4 = /*@__PURE__*/getAugmentedNamespace(bufferEs6);

            (function (module) {
              (function (module, exports) {

                function assert(val, msg) {
                  if (!val) throw new Error(msg || 'Assertion failed');
                } // Could use `inherits` module, but don't want to move from single file
                // architecture yet.


                function inherits(ctor, superCtor) {
                  ctor.super_ = superCtor;

                  var TempCtor = function TempCtor() {};

                  TempCtor.prototype = superCtor.prototype;
                  ctor.prototype = new TempCtor();
                  ctor.prototype.constructor = ctor;
                } // BN


                function BN(number, base, endian) {
                  if (BN.isBN(number)) {
                    return number;
                  }

                  this.negative = 0;
                  this.words = null;
                  this.length = 0; // Reduction context

                  this.red = null;

                  if (number !== null) {
                    if (base === 'le' || base === 'be') {
                      endian = base;
                      base = 10;
                    }

                    this._init(number || 0, base || 10, endian || 'be');
                  }
                }

                if (_typeof$1(module) === 'object') {
                  module.exports = BN;
                } else {
                  exports.BN = BN;
                }

                BN.BN = BN;
                BN.wordSize = 26;
                var Buffer;

                try {
                  Buffer = require$$0$4.Buffer;
                } catch (e) {}

                BN.isBN = function isBN(num) {
                  if (num instanceof BN) {
                    return true;
                  }

                  return num !== null && _typeof$1(num) === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
                };

                BN.max = function max(left, right) {
                  if (left.cmp(right) > 0) return left;
                  return right;
                };

                BN.min = function min(left, right) {
                  if (left.cmp(right) < 0) return left;
                  return right;
                };

                BN.prototype._init = function init(number, base, endian) {
                  if (typeof number === 'number') {
                    return this._initNumber(number, base, endian);
                  }

                  if (_typeof$1(number) === 'object') {
                    return this._initArray(number, base, endian);
                  }

                  if (base === 'hex') {
                    base = 16;
                  }

                  assert(base === (base | 0) && base >= 2 && base <= 36);
                  number = number.toString().replace(/\s+/g, '');
                  var start = 0;

                  if (number[0] === '-') {
                    start++;
                  }

                  if (base === 16) {
                    this._parseHex(number, start);
                  } else {
                    this._parseBase(number, base, start);
                  }

                  if (number[0] === '-') {
                    this.negative = 1;
                  }

                  this.strip();
                  if (endian !== 'le') return;

                  this._initArray(this.toArray(), base, endian);
                };

                BN.prototype._initNumber = function _initNumber(number, base, endian) {
                  if (number < 0) {
                    this.negative = 1;
                    number = -number;
                  }

                  if (number < 0x4000000) {
                    this.words = [number & 0x3ffffff];
                    this.length = 1;
                  } else if (number < 0x10000000000000) {
                    this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];
                    this.length = 2;
                  } else {
                    assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)

                    this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];
                    this.length = 3;
                  }

                  if (endian !== 'le') return; // Reverse the bytes

                  this._initArray(this.toArray(), base, endian);
                };

                BN.prototype._initArray = function _initArray(number, base, endian) {
                  // Perhaps a Uint8Array
                  assert(typeof number.length === 'number');

                  if (number.length <= 0) {
                    this.words = [0];
                    this.length = 1;
                    return this;
                  }

                  this.length = Math.ceil(number.length / 3);
                  this.words = new Array(this.length);

                  for (var i = 0; i < this.length; i++) {
                    this.words[i] = 0;
                  }

                  var j, w;
                  var off = 0;

                  if (endian === 'be') {
                    for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
                      w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
                      this.words[j] |= w << off & 0x3ffffff;
                      this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
                      off += 24;

                      if (off >= 26) {
                        off -= 26;
                        j++;
                      }
                    }
                  } else if (endian === 'le') {
                    for (i = 0, j = 0; i < number.length; i += 3) {
                      w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
                      this.words[j] |= w << off & 0x3ffffff;
                      this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
                      off += 24;

                      if (off >= 26) {
                        off -= 26;
                        j++;
                      }
                    }
                  }

                  return this.strip();
                };

                function parseHex(str, start, end) {
                  var r = 0;
                  var len = Math.min(str.length, end);

                  for (var i = start; i < len; i++) {
                    var c = str.charCodeAt(i) - 48;
                    r <<= 4; // 'a' - 'f'

                    if (c >= 49 && c <= 54) {
                      r |= c - 49 + 0xa; // 'A' - 'F'
                    } else if (c >= 17 && c <= 22) {
                      r |= c - 17 + 0xa; // '0' - '9'
                    } else {
                      r |= c & 0xf;
                    }
                  }

                  return r;
                }

                BN.prototype._parseHex = function _parseHex(number, start) {
                  // Create possibly bigger array to ensure that it fits the number
                  this.length = Math.ceil((number.length - start) / 6);
                  this.words = new Array(this.length);

                  for (var i = 0; i < this.length; i++) {
                    this.words[i] = 0;
                  }

                  var j, w; // Scan 24-bit chunks and add them to the number

                  var off = 0;

                  for (i = number.length - 6, j = 0; i >= start; i -= 6) {
                    w = parseHex(number, i, i + 6);
                    this.words[j] |= w << off & 0x3ffffff; // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb

                    this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
                    off += 24;

                    if (off >= 26) {
                      off -= 26;
                      j++;
                    }
                  }

                  if (i + 6 !== start) {
                    w = parseHex(number, start, i + 6);
                    this.words[j] |= w << off & 0x3ffffff;
                    this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
                  }

                  this.strip();
                };

                function parseBase(str, start, end, mul) {
                  var r = 0;
                  var len = Math.min(str.length, end);

                  for (var i = start; i < len; i++) {
                    var c = str.charCodeAt(i) - 48;
                    r *= mul; // 'a'

                    if (c >= 49) {
                      r += c - 49 + 0xa; // 'A'
                    } else if (c >= 17) {
                      r += c - 17 + 0xa; // '0' - '9'
                    } else {
                      r += c;
                    }
                  }

                  return r;
                }

                BN.prototype._parseBase = function _parseBase(number, base, start) {
                  // Initialize as zero
                  this.words = [0];
                  this.length = 1; // Find length of limb in base

                  for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
                    limbLen++;
                  }

                  limbLen--;
                  limbPow = limbPow / base | 0;
                  var total = number.length - start;
                  var mod = total % limbLen;
                  var end = Math.min(total, total - mod) + start;
                  var word = 0;

                  for (var i = start; i < end; i += limbLen) {
                    word = parseBase(number, i, i + limbLen, base);
                    this.imuln(limbPow);

                    if (this.words[0] + word < 0x4000000) {
                      this.words[0] += word;
                    } else {
                      this._iaddn(word);
                    }
                  }

                  if (mod !== 0) {
                    var pow = 1;
                    word = parseBase(number, i, number.length, base);

                    for (i = 0; i < mod; i++) {
                      pow *= base;
                    }

                    this.imuln(pow);

                    if (this.words[0] + word < 0x4000000) {
                      this.words[0] += word;
                    } else {
                      this._iaddn(word);
                    }
                  }
                };

                BN.prototype.copy = function copy(dest) {
                  dest.words = new Array(this.length);

                  for (var i = 0; i < this.length; i++) {
                    dest.words[i] = this.words[i];
                  }

                  dest.length = this.length;
                  dest.negative = this.negative;
                  dest.red = this.red;
                };

                BN.prototype.clone = function clone() {
                  var r = new BN(null);
                  this.copy(r);
                  return r;
                };

                BN.prototype._expand = function _expand(size) {
                  while (this.length < size) {
                    this.words[this.length++] = 0;
                  }

                  return this;
                }; // Remove leading `0` from `this`


                BN.prototype.strip = function strip() {
                  while (this.length > 1 && this.words[this.length - 1] === 0) {
                    this.length--;
                  }

                  return this._normSign();
                };

                BN.prototype._normSign = function _normSign() {
                  // -0 = 0
                  if (this.length === 1 && this.words[0] === 0) {
                    this.negative = 0;
                  }

                  return this;
                };

                BN.prototype.inspect = function inspect() {
                  return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
                };
                /*
                 var zeros = [];
                var groupSizes = [];
                var groupBases = [];
                 var s = '';
                var i = -1;
                while (++i < BN.wordSize) {
                  zeros[i] = s;
                  s += '0';
                }
                groupSizes[0] = 0;
                groupSizes[1] = 0;
                groupBases[0] = 0;
                groupBases[1] = 0;
                var base = 2 - 1;
                while (++base < 36 + 1) {
                  var groupSize = 0;
                  var groupBase = 1;
                  while (groupBase < (1 << BN.wordSize) / base) {
                    groupBase *= base;
                    groupSize += 1;
                  }
                  groupSizes[base] = groupSize;
                  groupBases[base] = groupBase;
                }
                 */


                var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];
                var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
                var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];

                BN.prototype.toString = function toString(base, padding) {
                  base = base || 10;
                  padding = padding | 0 || 1;
                  var out;

                  if (base === 16 || base === 'hex') {
                    out = '';
                    var off = 0;
                    var carry = 0;

                    for (var i = 0; i < this.length; i++) {
                      var w = this.words[i];
                      var word = ((w << off | carry) & 0xffffff).toString(16);
                      carry = w >>> 24 - off & 0xffffff;

                      if (carry !== 0 || i !== this.length - 1) {
                        out = zeros[6 - word.length] + word + out;
                      } else {
                        out = word + out;
                      }

                      off += 2;

                      if (off >= 26) {
                        off -= 26;
                        i--;
                      }
                    }

                    if (carry !== 0) {
                      out = carry.toString(16) + out;
                    }

                    while (out.length % padding !== 0) {
                      out = '0' + out;
                    }

                    if (this.negative !== 0) {
                      out = '-' + out;
                    }

                    return out;
                  }

                  if (base === (base | 0) && base >= 2 && base <= 36) {
                    // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
                    var groupSize = groupSizes[base]; // var groupBase = Math.pow(base, groupSize);

                    var groupBase = groupBases[base];
                    out = '';
                    var c = this.clone();
                    c.negative = 0;

                    while (!c.isZero()) {
                      var r = c.modn(groupBase).toString(base);
                      c = c.idivn(groupBase);

                      if (!c.isZero()) {
                        out = zeros[groupSize - r.length] + r + out;
                      } else {
                        out = r + out;
                      }
                    }

                    if (this.isZero()) {
                      out = '0' + out;
                    }

                    while (out.length % padding !== 0) {
                      out = '0' + out;
                    }

                    if (this.negative !== 0) {
                      out = '-' + out;
                    }

                    return out;
                  }

                  assert(false, 'Base should be between 2 and 36');
                };

                BN.prototype.toNumber = function toNumber() {
                  var ret = this.words[0];

                  if (this.length === 2) {
                    ret += this.words[1] * 0x4000000;
                  } else if (this.length === 3 && this.words[2] === 0x01) {
                    // NOTE: at this stage it is known that the top bit is set
                    ret += 0x10000000000000 + this.words[1] * 0x4000000;
                  } else if (this.length > 2) {
                    assert(false, 'Number can only safely store up to 53 bits');
                  }

                  return this.negative !== 0 ? -ret : ret;
                };

                BN.prototype.toJSON = function toJSON() {
                  return this.toString(16);
                };

                BN.prototype.toBuffer = function toBuffer(endian, length) {
                  assert(typeof Buffer !== 'undefined');
                  return this.toArrayLike(Buffer, endian, length);
                };

                BN.prototype.toArray = function toArray(endian, length) {
                  return this.toArrayLike(Array, endian, length);
                };

                BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
                  var byteLength = this.byteLength();
                  var reqLength = length || Math.max(1, byteLength);
                  assert(byteLength <= reqLength, 'byte array longer than desired length');
                  assert(reqLength > 0, 'Requested array length <= 0');
                  this.strip();
                  var littleEndian = endian === 'le';
                  var res = new ArrayType(reqLength);
                  var b, i;
                  var q = this.clone();

                  if (!littleEndian) {
                    // Assume big-endian
                    for (i = 0; i < reqLength - byteLength; i++) {
                      res[i] = 0;
                    }

                    for (i = 0; !q.isZero(); i++) {
                      b = q.andln(0xff);
                      q.iushrn(8);
                      res[reqLength - i - 1] = b;
                    }
                  } else {
                    for (i = 0; !q.isZero(); i++) {
                      b = q.andln(0xff);
                      q.iushrn(8);
                      res[i] = b;
                    }

                    for (; i < reqLength; i++) {
                      res[i] = 0;
                    }
                  }

                  return res;
                };

                if (Math.clz32) {
                  BN.prototype._countBits = function _countBits(w) {
                    return 32 - Math.clz32(w);
                  };
                } else {
                  BN.prototype._countBits = function _countBits(w) {
                    var t = w;
                    var r = 0;

                    if (t >= 0x1000) {
                      r += 13;
                      t >>>= 13;
                    }

                    if (t >= 0x40) {
                      r += 7;
                      t >>>= 7;
                    }

                    if (t >= 0x8) {
                      r += 4;
                      t >>>= 4;
                    }

                    if (t >= 0x02) {
                      r += 2;
                      t >>>= 2;
                    }

                    return r + t;
                  };
                }

                BN.prototype._zeroBits = function _zeroBits(w) {
                  // Short-cut
                  if (w === 0) return 26;
                  var t = w;
                  var r = 0;

                  if ((t & 0x1fff) === 0) {
                    r += 13;
                    t >>>= 13;
                  }

                  if ((t & 0x7f) === 0) {
                    r += 7;
                    t >>>= 7;
                  }

                  if ((t & 0xf) === 0) {
                    r += 4;
                    t >>>= 4;
                  }

                  if ((t & 0x3) === 0) {
                    r += 2;
                    t >>>= 2;
                  }

                  if ((t & 0x1) === 0) {
                    r++;
                  }

                  return r;
                }; // Return number of used bits in a BN


                BN.prototype.bitLength = function bitLength() {
                  var w = this.words[this.length - 1];

                  var hi = this._countBits(w);

                  return (this.length - 1) * 26 + hi;
                };

                function toBitArray(num) {
                  var w = new Array(num.bitLength());

                  for (var bit = 0; bit < w.length; bit++) {
                    var off = bit / 26 | 0;
                    var wbit = bit % 26;
                    w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
                  }

                  return w;
                } // Number of trailing zero bits


                BN.prototype.zeroBits = function zeroBits() {
                  if (this.isZero()) return 0;
                  var r = 0;

                  for (var i = 0; i < this.length; i++) {
                    var b = this._zeroBits(this.words[i]);

                    r += b;
                    if (b !== 26) break;
                  }

                  return r;
                };

                BN.prototype.byteLength = function byteLength() {
                  return Math.ceil(this.bitLength() / 8);
                };

                BN.prototype.toTwos = function toTwos(width) {
                  if (this.negative !== 0) {
                    return this.abs().inotn(width).iaddn(1);
                  }

                  return this.clone();
                };

                BN.prototype.fromTwos = function fromTwos(width) {
                  if (this.testn(width - 1)) {
                    return this.notn(width).iaddn(1).ineg();
                  }

                  return this.clone();
                };

                BN.prototype.isNeg = function isNeg() {
                  return this.negative !== 0;
                }; // Return negative clone of `this`


                BN.prototype.neg = function neg() {
                  return this.clone().ineg();
                };

                BN.prototype.ineg = function ineg() {
                  if (!this.isZero()) {
                    this.negative ^= 1;
                  }

                  return this;
                }; // Or `num` with `this` in-place


                BN.prototype.iuor = function iuor(num) {
                  while (this.length < num.length) {
                    this.words[this.length++] = 0;
                  }

                  for (var i = 0; i < num.length; i++) {
                    this.words[i] = this.words[i] | num.words[i];
                  }

                  return this.strip();
                };

                BN.prototype.ior = function ior(num) {
                  assert((this.negative | num.negative) === 0);
                  return this.iuor(num);
                }; // Or `num` with `this`


                BN.prototype.or = function or(num) {
                  if (this.length > num.length) return this.clone().ior(num);
                  return num.clone().ior(this);
                };

                BN.prototype.uor = function uor(num) {
                  if (this.length > num.length) return this.clone().iuor(num);
                  return num.clone().iuor(this);
                }; // And `num` with `this` in-place


                BN.prototype.iuand = function iuand(num) {
                  // b = min-length(num, this)
                  var b;

                  if (this.length > num.length) {
                    b = num;
                  } else {
                    b = this;
                  }

                  for (var i = 0; i < b.length; i++) {
                    this.words[i] = this.words[i] & num.words[i];
                  }

                  this.length = b.length;
                  return this.strip();
                };

                BN.prototype.iand = function iand(num) {
                  assert((this.negative | num.negative) === 0);
                  return this.iuand(num);
                }; // And `num` with `this`


                BN.prototype.and = function and(num) {
                  if (this.length > num.length) return this.clone().iand(num);
                  return num.clone().iand(this);
                };

                BN.prototype.uand = function uand(num) {
                  if (this.length > num.length) return this.clone().iuand(num);
                  return num.clone().iuand(this);
                }; // Xor `num` with `this` in-place


                BN.prototype.iuxor = function iuxor(num) {
                  // a.length > b.length
                  var a;
                  var b;

                  if (this.length > num.length) {
                    a = this;
                    b = num;
                  } else {
                    a = num;
                    b = this;
                  }

                  for (var i = 0; i < b.length; i++) {
                    this.words[i] = a.words[i] ^ b.words[i];
                  }

                  if (this !== a) {
                    for (; i < a.length; i++) {
                      this.words[i] = a.words[i];
                    }
                  }

                  this.length = a.length;
                  return this.strip();
                };

                BN.prototype.ixor = function ixor(num) {
                  assert((this.negative | num.negative) === 0);
                  return this.iuxor(num);
                }; // Xor `num` with `this`


                BN.prototype.xor = function xor(num) {
                  if (this.length > num.length) return this.clone().ixor(num);
                  return num.clone().ixor(this);
                };

                BN.prototype.uxor = function uxor(num) {
                  if (this.length > num.length) return this.clone().iuxor(num);
                  return num.clone().iuxor(this);
                }; // Not ``this`` with ``width`` bitwidth


                BN.prototype.inotn = function inotn(width) {
                  assert(typeof width === 'number' && width >= 0);
                  var bytesNeeded = Math.ceil(width / 26) | 0;
                  var bitsLeft = width % 26; // Extend the buffer with leading zeroes

                  this._expand(bytesNeeded);

                  if (bitsLeft > 0) {
                    bytesNeeded--;
                  } // Handle complete words


                  for (var i = 0; i < bytesNeeded; i++) {
                    this.words[i] = ~this.words[i] & 0x3ffffff;
                  } // Handle the residue


                  if (bitsLeft > 0) {
                    this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
                  } // And remove leading zeroes


                  return this.strip();
                };

                BN.prototype.notn = function notn(width) {
                  return this.clone().inotn(width);
                }; // Set `bit` of `this`


                BN.prototype.setn = function setn(bit, val) {
                  assert(typeof bit === 'number' && bit >= 0);
                  var off = bit / 26 | 0;
                  var wbit = bit % 26;

                  this._expand(off + 1);

                  if (val) {
                    this.words[off] = this.words[off] | 1 << wbit;
                  } else {
                    this.words[off] = this.words[off] & ~(1 << wbit);
                  }

                  return this.strip();
                }; // Add `num` to `this` in-place


                BN.prototype.iadd = function iadd(num) {
                  var r; // negative + positive

                  if (this.negative !== 0 && num.negative === 0) {
                    this.negative = 0;
                    r = this.isub(num);
                    this.negative ^= 1;
                    return this._normSign(); // positive + negative
                  } else if (this.negative === 0 && num.negative !== 0) {
                    num.negative = 0;
                    r = this.isub(num);
                    num.negative = 1;
                    return r._normSign();
                  } // a.length > b.length


                  var a, b;

                  if (this.length > num.length) {
                    a = this;
                    b = num;
                  } else {
                    a = num;
                    b = this;
                  }

                  var carry = 0;

                  for (var i = 0; i < b.length; i++) {
                    r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
                    this.words[i] = r & 0x3ffffff;
                    carry = r >>> 26;
                  }

                  for (; carry !== 0 && i < a.length; i++) {
                    r = (a.words[i] | 0) + carry;
                    this.words[i] = r & 0x3ffffff;
                    carry = r >>> 26;
                  }

                  this.length = a.length;

                  if (carry !== 0) {
                    this.words[this.length] = carry;
                    this.length++; // Copy the rest of the words
                  } else if (a !== this) {
                    for (; i < a.length; i++) {
                      this.words[i] = a.words[i];
                    }
                  }

                  return this;
                }; // Add `num` to `this`


                BN.prototype.add = function add(num) {
                  var res;

                  if (num.negative !== 0 && this.negative === 0) {
                    num.negative = 0;
                    res = this.sub(num);
                    num.negative ^= 1;
                    return res;
                  } else if (num.negative === 0 && this.negative !== 0) {
                    this.negative = 0;
                    res = num.sub(this);
                    this.negative = 1;
                    return res;
                  }

                  if (this.length > num.length) return this.clone().iadd(num);
                  return num.clone().iadd(this);
                }; // Subtract `num` from `this` in-place


                BN.prototype.isub = function isub(num) {
                  // this - (-num) = this + num
                  if (num.negative !== 0) {
                    num.negative = 0;
                    var r = this.iadd(num);
                    num.negative = 1;
                    return r._normSign(); // -this - num = -(this + num)
                  } else if (this.negative !== 0) {
                    this.negative = 0;
                    this.iadd(num);
                    this.negative = 1;
                    return this._normSign();
                  } // At this point both numbers are positive


                  var cmp = this.cmp(num); // Optimization - zeroify

                  if (cmp === 0) {
                    this.negative = 0;
                    this.length = 1;
                    this.words[0] = 0;
                    return this;
                  } // a > b


                  var a, b;

                  if (cmp > 0) {
                    a = this;
                    b = num;
                  } else {
                    a = num;
                    b = this;
                  }

                  var carry = 0;

                  for (var i = 0; i < b.length; i++) {
                    r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
                    carry = r >> 26;
                    this.words[i] = r & 0x3ffffff;
                  }

                  for (; carry !== 0 && i < a.length; i++) {
                    r = (a.words[i] | 0) + carry;
                    carry = r >> 26;
                    this.words[i] = r & 0x3ffffff;
                  } // Copy rest of the words


                  if (carry === 0 && i < a.length && a !== this) {
                    for (; i < a.length; i++) {
                      this.words[i] = a.words[i];
                    }
                  }

                  this.length = Math.max(this.length, i);

                  if (a !== this) {
                    this.negative = 1;
                  }

                  return this.strip();
                }; // Subtract `num` from `this`


                BN.prototype.sub = function sub(num) {
                  return this.clone().isub(num);
                };

                function smallMulTo(self, num, out) {
                  out.negative = num.negative ^ self.negative;
                  var len = self.length + num.length | 0;
                  out.length = len;
                  len = len - 1 | 0; // Peel one iteration (compiler can't do it, because of code complexity)

                  var a = self.words[0] | 0;
                  var b = num.words[0] | 0;
                  var r = a * b;
                  var lo = r & 0x3ffffff;
                  var carry = r / 0x4000000 | 0;
                  out.words[0] = lo;

                  for (var k = 1; k < len; k++) {
                    // Sum all words with the same `i + j = k` and accumulate `ncarry`,
                    // note that ncarry could be >= 0x3ffffff
                    var ncarry = carry >>> 26;
                    var rword = carry & 0x3ffffff;
                    var maxJ = Math.min(k, num.length - 1);

                    for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                      var i = k - j | 0;
                      a = self.words[i] | 0;
                      b = num.words[j] | 0;
                      r = a * b + rword;
                      ncarry += r / 0x4000000 | 0;
                      rword = r & 0x3ffffff;
                    }

                    out.words[k] = rword | 0;
                    carry = ncarry | 0;
                  }

                  if (carry !== 0) {
                    out.words[k] = carry | 0;
                  } else {
                    out.length--;
                  }

                  return out.strip();
                } // TODO(indutny): it may be reasonable to omit it for users who don't need
                // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
                // multiplication (like elliptic secp256k1).


                var comb10MulTo = function comb10MulTo(self, num, out) {
                  var a = self.words;
                  var b = num.words;
                  var o = out.words;
                  var c = 0;
                  var lo;
                  var mid;
                  var hi;
                  var a0 = a[0] | 0;
                  var al0 = a0 & 0x1fff;
                  var ah0 = a0 >>> 13;
                  var a1 = a[1] | 0;
                  var al1 = a1 & 0x1fff;
                  var ah1 = a1 >>> 13;
                  var a2 = a[2] | 0;
                  var al2 = a2 & 0x1fff;
                  var ah2 = a2 >>> 13;
                  var a3 = a[3] | 0;
                  var al3 = a3 & 0x1fff;
                  var ah3 = a3 >>> 13;
                  var a4 = a[4] | 0;
                  var al4 = a4 & 0x1fff;
                  var ah4 = a4 >>> 13;
                  var a5 = a[5] | 0;
                  var al5 = a5 & 0x1fff;
                  var ah5 = a5 >>> 13;
                  var a6 = a[6] | 0;
                  var al6 = a6 & 0x1fff;
                  var ah6 = a6 >>> 13;
                  var a7 = a[7] | 0;
                  var al7 = a7 & 0x1fff;
                  var ah7 = a7 >>> 13;
                  var a8 = a[8] | 0;
                  var al8 = a8 & 0x1fff;
                  var ah8 = a8 >>> 13;
                  var a9 = a[9] | 0;
                  var al9 = a9 & 0x1fff;
                  var ah9 = a9 >>> 13;
                  var b0 = b[0] | 0;
                  var bl0 = b0 & 0x1fff;
                  var bh0 = b0 >>> 13;
                  var b1 = b[1] | 0;
                  var bl1 = b1 & 0x1fff;
                  var bh1 = b1 >>> 13;
                  var b2 = b[2] | 0;
                  var bl2 = b2 & 0x1fff;
                  var bh2 = b2 >>> 13;
                  var b3 = b[3] | 0;
                  var bl3 = b3 & 0x1fff;
                  var bh3 = b3 >>> 13;
                  var b4 = b[4] | 0;
                  var bl4 = b4 & 0x1fff;
                  var bh4 = b4 >>> 13;
                  var b5 = b[5] | 0;
                  var bl5 = b5 & 0x1fff;
                  var bh5 = b5 >>> 13;
                  var b6 = b[6] | 0;
                  var bl6 = b6 & 0x1fff;
                  var bh6 = b6 >>> 13;
                  var b7 = b[7] | 0;
                  var bl7 = b7 & 0x1fff;
                  var bh7 = b7 >>> 13;
                  var b8 = b[8] | 0;
                  var bl8 = b8 & 0x1fff;
                  var bh8 = b8 >>> 13;
                  var b9 = b[9] | 0;
                  var bl9 = b9 & 0x1fff;
                  var bh9 = b9 >>> 13;
                  out.negative = self.negative ^ num.negative;
                  out.length = 19;
                  /* k = 0 */

                  lo = Math.imul(al0, bl0);
                  mid = Math.imul(al0, bh0);
                  mid = mid + Math.imul(ah0, bl0) | 0;
                  hi = Math.imul(ah0, bh0);
                  var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
                  w0 &= 0x3ffffff;
                  /* k = 1 */

                  lo = Math.imul(al1, bl0);
                  mid = Math.imul(al1, bh0);
                  mid = mid + Math.imul(ah1, bl0) | 0;
                  hi = Math.imul(ah1, bh0);
                  lo = lo + Math.imul(al0, bl1) | 0;
                  mid = mid + Math.imul(al0, bh1) | 0;
                  mid = mid + Math.imul(ah0, bl1) | 0;
                  hi = hi + Math.imul(ah0, bh1) | 0;
                  var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
                  w1 &= 0x3ffffff;
                  /* k = 2 */

                  lo = Math.imul(al2, bl0);
                  mid = Math.imul(al2, bh0);
                  mid = mid + Math.imul(ah2, bl0) | 0;
                  hi = Math.imul(ah2, bh0);
                  lo = lo + Math.imul(al1, bl1) | 0;
                  mid = mid + Math.imul(al1, bh1) | 0;
                  mid = mid + Math.imul(ah1, bl1) | 0;
                  hi = hi + Math.imul(ah1, bh1) | 0;
                  lo = lo + Math.imul(al0, bl2) | 0;
                  mid = mid + Math.imul(al0, bh2) | 0;
                  mid = mid + Math.imul(ah0, bl2) | 0;
                  hi = hi + Math.imul(ah0, bh2) | 0;
                  var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
                  w2 &= 0x3ffffff;
                  /* k = 3 */

                  lo = Math.imul(al3, bl0);
                  mid = Math.imul(al3, bh0);
                  mid = mid + Math.imul(ah3, bl0) | 0;
                  hi = Math.imul(ah3, bh0);
                  lo = lo + Math.imul(al2, bl1) | 0;
                  mid = mid + Math.imul(al2, bh1) | 0;
                  mid = mid + Math.imul(ah2, bl1) | 0;
                  hi = hi + Math.imul(ah2, bh1) | 0;
                  lo = lo + Math.imul(al1, bl2) | 0;
                  mid = mid + Math.imul(al1, bh2) | 0;
                  mid = mid + Math.imul(ah1, bl2) | 0;
                  hi = hi + Math.imul(ah1, bh2) | 0;
                  lo = lo + Math.imul(al0, bl3) | 0;
                  mid = mid + Math.imul(al0, bh3) | 0;
                  mid = mid + Math.imul(ah0, bl3) | 0;
                  hi = hi + Math.imul(ah0, bh3) | 0;
                  var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
                  w3 &= 0x3ffffff;
                  /* k = 4 */

                  lo = Math.imul(al4, bl0);
                  mid = Math.imul(al4, bh0);
                  mid = mid + Math.imul(ah4, bl0) | 0;
                  hi = Math.imul(ah4, bh0);
                  lo = lo + Math.imul(al3, bl1) | 0;
                  mid = mid + Math.imul(al3, bh1) | 0;
                  mid = mid + Math.imul(ah3, bl1) | 0;
                  hi = hi + Math.imul(ah3, bh1) | 0;
                  lo = lo + Math.imul(al2, bl2) | 0;
                  mid = mid + Math.imul(al2, bh2) | 0;
                  mid = mid + Math.imul(ah2, bl2) | 0;
                  hi = hi + Math.imul(ah2, bh2) | 0;
                  lo = lo + Math.imul(al1, bl3) | 0;
                  mid = mid + Math.imul(al1, bh3) | 0;
                  mid = mid + Math.imul(ah1, bl3) | 0;
                  hi = hi + Math.imul(ah1, bh3) | 0;
                  lo = lo + Math.imul(al0, bl4) | 0;
                  mid = mid + Math.imul(al0, bh4) | 0;
                  mid = mid + Math.imul(ah0, bl4) | 0;
                  hi = hi + Math.imul(ah0, bh4) | 0;
                  var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
                  w4 &= 0x3ffffff;
                  /* k = 5 */

                  lo = Math.imul(al5, bl0);
                  mid = Math.imul(al5, bh0);
                  mid = mid + Math.imul(ah5, bl0) | 0;
                  hi = Math.imul(ah5, bh0);
                  lo = lo + Math.imul(al4, bl1) | 0;
                  mid = mid + Math.imul(al4, bh1) | 0;
                  mid = mid + Math.imul(ah4, bl1) | 0;
                  hi = hi + Math.imul(ah4, bh1) | 0;
                  lo = lo + Math.imul(al3, bl2) | 0;
                  mid = mid + Math.imul(al3, bh2) | 0;
                  mid = mid + Math.imul(ah3, bl2) | 0;
                  hi = hi + Math.imul(ah3, bh2) | 0;
                  lo = lo + Math.imul(al2, bl3) | 0;
                  mid = mid + Math.imul(al2, bh3) | 0;
                  mid = mid + Math.imul(ah2, bl3) | 0;
                  hi = hi + Math.imul(ah2, bh3) | 0;
                  lo = lo + Math.imul(al1, bl4) | 0;
                  mid = mid + Math.imul(al1, bh4) | 0;
                  mid = mid + Math.imul(ah1, bl4) | 0;
                  hi = hi + Math.imul(ah1, bh4) | 0;
                  lo = lo + Math.imul(al0, bl5) | 0;
                  mid = mid + Math.imul(al0, bh5) | 0;
                  mid = mid + Math.imul(ah0, bl5) | 0;
                  hi = hi + Math.imul(ah0, bh5) | 0;
                  var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
                  w5 &= 0x3ffffff;
                  /* k = 6 */

                  lo = Math.imul(al6, bl0);
                  mid = Math.imul(al6, bh0);
                  mid = mid + Math.imul(ah6, bl0) | 0;
                  hi = Math.imul(ah6, bh0);
                  lo = lo + Math.imul(al5, bl1) | 0;
                  mid = mid + Math.imul(al5, bh1) | 0;
                  mid = mid + Math.imul(ah5, bl1) | 0;
                  hi = hi + Math.imul(ah5, bh1) | 0;
                  lo = lo + Math.imul(al4, bl2) | 0;
                  mid = mid + Math.imul(al4, bh2) | 0;
                  mid = mid + Math.imul(ah4, bl2) | 0;
                  hi = hi + Math.imul(ah4, bh2) | 0;
                  lo = lo + Math.imul(al3, bl3) | 0;
                  mid = mid + Math.imul(al3, bh3) | 0;
                  mid = mid + Math.imul(ah3, bl3) | 0;
                  hi = hi + Math.imul(ah3, bh3) | 0;
                  lo = lo + Math.imul(al2, bl4) | 0;
                  mid = mid + Math.imul(al2, bh4) | 0;
                  mid = mid + Math.imul(ah2, bl4) | 0;
                  hi = hi + Math.imul(ah2, bh4) | 0;
                  lo = lo + Math.imul(al1, bl5) | 0;
                  mid = mid + Math.imul(al1, bh5) | 0;
                  mid = mid + Math.imul(ah1, bl5) | 0;
                  hi = hi + Math.imul(ah1, bh5) | 0;
                  lo = lo + Math.imul(al0, bl6) | 0;
                  mid = mid + Math.imul(al0, bh6) | 0;
                  mid = mid + Math.imul(ah0, bl6) | 0;
                  hi = hi + Math.imul(ah0, bh6) | 0;
                  var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
                  w6 &= 0x3ffffff;
                  /* k = 7 */

                  lo = Math.imul(al7, bl0);
                  mid = Math.imul(al7, bh0);
                  mid = mid + Math.imul(ah7, bl0) | 0;
                  hi = Math.imul(ah7, bh0);
                  lo = lo + Math.imul(al6, bl1) | 0;
                  mid = mid + Math.imul(al6, bh1) | 0;
                  mid = mid + Math.imul(ah6, bl1) | 0;
                  hi = hi + Math.imul(ah6, bh1) | 0;
                  lo = lo + Math.imul(al5, bl2) | 0;
                  mid = mid + Math.imul(al5, bh2) | 0;
                  mid = mid + Math.imul(ah5, bl2) | 0;
                  hi = hi + Math.imul(ah5, bh2) | 0;
                  lo = lo + Math.imul(al4, bl3) | 0;
                  mid = mid + Math.imul(al4, bh3) | 0;
                  mid = mid + Math.imul(ah4, bl3) | 0;
                  hi = hi + Math.imul(ah4, bh3) | 0;
                  lo = lo + Math.imul(al3, bl4) | 0;
                  mid = mid + Math.imul(al3, bh4) | 0;
                  mid = mid + Math.imul(ah3, bl4) | 0;
                  hi = hi + Math.imul(ah3, bh4) | 0;
                  lo = lo + Math.imul(al2, bl5) | 0;
                  mid = mid + Math.imul(al2, bh5) | 0;
                  mid = mid + Math.imul(ah2, bl5) | 0;
                  hi = hi + Math.imul(ah2, bh5) | 0;
                  lo = lo + Math.imul(al1, bl6) | 0;
                  mid = mid + Math.imul(al1, bh6) | 0;
                  mid = mid + Math.imul(ah1, bl6) | 0;
                  hi = hi + Math.imul(ah1, bh6) | 0;
                  lo = lo + Math.imul(al0, bl7) | 0;
                  mid = mid + Math.imul(al0, bh7) | 0;
                  mid = mid + Math.imul(ah0, bl7) | 0;
                  hi = hi + Math.imul(ah0, bh7) | 0;
                  var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
                  w7 &= 0x3ffffff;
                  /* k = 8 */

                  lo = Math.imul(al8, bl0);
                  mid = Math.imul(al8, bh0);
                  mid = mid + Math.imul(ah8, bl0) | 0;
                  hi = Math.imul(ah8, bh0);
                  lo = lo + Math.imul(al7, bl1) | 0;
                  mid = mid + Math.imul(al7, bh1) | 0;
                  mid = mid + Math.imul(ah7, bl1) | 0;
                  hi = hi + Math.imul(ah7, bh1) | 0;
                  lo = lo + Math.imul(al6, bl2) | 0;
                  mid = mid + Math.imul(al6, bh2) | 0;
                  mid = mid + Math.imul(ah6, bl2) | 0;
                  hi = hi + Math.imul(ah6, bh2) | 0;
                  lo = lo + Math.imul(al5, bl3) | 0;
                  mid = mid + Math.imul(al5, bh3) | 0;
                  mid = mid + Math.imul(ah5, bl3) | 0;
                  hi = hi + Math.imul(ah5, bh3) | 0;
                  lo = lo + Math.imul(al4, bl4) | 0;
                  mid = mid + Math.imul(al4, bh4) | 0;
                  mid = mid + Math.imul(ah4, bl4) | 0;
                  hi = hi + Math.imul(ah4, bh4) | 0;
                  lo = lo + Math.imul(al3, bl5) | 0;
                  mid = mid + Math.imul(al3, bh5) | 0;
                  mid = mid + Math.imul(ah3, bl5) | 0;
                  hi = hi + Math.imul(ah3, bh5) | 0;
                  lo = lo + Math.imul(al2, bl6) | 0;
                  mid = mid + Math.imul(al2, bh6) | 0;
                  mid = mid + Math.imul(ah2, bl6) | 0;
                  hi = hi + Math.imul(ah2, bh6) | 0;
                  lo = lo + Math.imul(al1, bl7) | 0;
                  mid = mid + Math.imul(al1, bh7) | 0;
                  mid = mid + Math.imul(ah1, bl7) | 0;
                  hi = hi + Math.imul(ah1, bh7) | 0;
                  lo = lo + Math.imul(al0, bl8) | 0;
                  mid = mid + Math.imul(al0, bh8) | 0;
                  mid = mid + Math.imul(ah0, bl8) | 0;
                  hi = hi + Math.imul(ah0, bh8) | 0;
                  var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
                  w8 &= 0x3ffffff;
                  /* k = 9 */

                  lo = Math.imul(al9, bl0);
                  mid = Math.imul(al9, bh0);
                  mid = mid + Math.imul(ah9, bl0) | 0;
                  hi = Math.imul(ah9, bh0);
                  lo = lo + Math.imul(al8, bl1) | 0;
                  mid = mid + Math.imul(al8, bh1) | 0;
                  mid = mid + Math.imul(ah8, bl1) | 0;
                  hi = hi + Math.imul(ah8, bh1) | 0;
                  lo = lo + Math.imul(al7, bl2) | 0;
                  mid = mid + Math.imul(al7, bh2) | 0;
                  mid = mid + Math.imul(ah7, bl2) | 0;
                  hi = hi + Math.imul(ah7, bh2) | 0;
                  lo = lo + Math.imul(al6, bl3) | 0;
                  mid = mid + Math.imul(al6, bh3) | 0;
                  mid = mid + Math.imul(ah6, bl3) | 0;
                  hi = hi + Math.imul(ah6, bh3) | 0;
                  lo = lo + Math.imul(al5, bl4) | 0;
                  mid = mid + Math.imul(al5, bh4) | 0;
                  mid = mid + Math.imul(ah5, bl4) | 0;
                  hi = hi + Math.imul(ah5, bh4) | 0;
                  lo = lo + Math.imul(al4, bl5) | 0;
                  mid = mid + Math.imul(al4, bh5) | 0;
                  mid = mid + Math.imul(ah4, bl5) | 0;
                  hi = hi + Math.imul(ah4, bh5) | 0;
                  lo = lo + Math.imul(al3, bl6) | 0;
                  mid = mid + Math.imul(al3, bh6) | 0;
                  mid = mid + Math.imul(ah3, bl6) | 0;
                  hi = hi + Math.imul(ah3, bh6) | 0;
                  lo = lo + Math.imul(al2, bl7) | 0;
                  mid = mid + Math.imul(al2, bh7) | 0;
                  mid = mid + Math.imul(ah2, bl7) | 0;
                  hi = hi + Math.imul(ah2, bh7) | 0;
                  lo = lo + Math.imul(al1, bl8) | 0;
                  mid = mid + Math.imul(al1, bh8) | 0;
                  mid = mid + Math.imul(ah1, bl8) | 0;
                  hi = hi + Math.imul(ah1, bh8) | 0;
                  lo = lo + Math.imul(al0, bl9) | 0;
                  mid = mid + Math.imul(al0, bh9) | 0;
                  mid = mid + Math.imul(ah0, bl9) | 0;
                  hi = hi + Math.imul(ah0, bh9) | 0;
                  var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
                  w9 &= 0x3ffffff;
                  /* k = 10 */

                  lo = Math.imul(al9, bl1);
                  mid = Math.imul(al9, bh1);
                  mid = mid + Math.imul(ah9, bl1) | 0;
                  hi = Math.imul(ah9, bh1);
                  lo = lo + Math.imul(al8, bl2) | 0;
                  mid = mid + Math.imul(al8, bh2) | 0;
                  mid = mid + Math.imul(ah8, bl2) | 0;
                  hi = hi + Math.imul(ah8, bh2) | 0;
                  lo = lo + Math.imul(al7, bl3) | 0;
                  mid = mid + Math.imul(al7, bh3) | 0;
                  mid = mid + Math.imul(ah7, bl3) | 0;
                  hi = hi + Math.imul(ah7, bh3) | 0;
                  lo = lo + Math.imul(al6, bl4) | 0;
                  mid = mid + Math.imul(al6, bh4) | 0;
                  mid = mid + Math.imul(ah6, bl4) | 0;
                  hi = hi + Math.imul(ah6, bh4) | 0;
                  lo = lo + Math.imul(al5, bl5) | 0;
                  mid = mid + Math.imul(al5, bh5) | 0;
                  mid = mid + Math.imul(ah5, bl5) | 0;
                  hi = hi + Math.imul(ah5, bh5) | 0;
                  lo = lo + Math.imul(al4, bl6) | 0;
                  mid = mid + Math.imul(al4, bh6) | 0;
                  mid = mid + Math.imul(ah4, bl6) | 0;
                  hi = hi + Math.imul(ah4, bh6) | 0;
                  lo = lo + Math.imul(al3, bl7) | 0;
                  mid = mid + Math.imul(al3, bh7) | 0;
                  mid = mid + Math.imul(ah3, bl7) | 0;
                  hi = hi + Math.imul(ah3, bh7) | 0;
                  lo = lo + Math.imul(al2, bl8) | 0;
                  mid = mid + Math.imul(al2, bh8) | 0;
                  mid = mid + Math.imul(ah2, bl8) | 0;
                  hi = hi + Math.imul(ah2, bh8) | 0;
                  lo = lo + Math.imul(al1, bl9) | 0;
                  mid = mid + Math.imul(al1, bh9) | 0;
                  mid = mid + Math.imul(ah1, bl9) | 0;
                  hi = hi + Math.imul(ah1, bh9) | 0;
                  var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
                  w10 &= 0x3ffffff;
                  /* k = 11 */

                  lo = Math.imul(al9, bl2);
                  mid = Math.imul(al9, bh2);
                  mid = mid + Math.imul(ah9, bl2) | 0;
                  hi = Math.imul(ah9, bh2);
                  lo = lo + Math.imul(al8, bl3) | 0;
                  mid = mid + Math.imul(al8, bh3) | 0;
                  mid = mid + Math.imul(ah8, bl3) | 0;
                  hi = hi + Math.imul(ah8, bh3) | 0;
                  lo = lo + Math.imul(al7, bl4) | 0;
                  mid = mid + Math.imul(al7, bh4) | 0;
                  mid = mid + Math.imul(ah7, bl4) | 0;
                  hi = hi + Math.imul(ah7, bh4) | 0;
                  lo = lo + Math.imul(al6, bl5) | 0;
                  mid = mid + Math.imul(al6, bh5) | 0;
                  mid = mid + Math.imul(ah6, bl5) | 0;
                  hi = hi + Math.imul(ah6, bh5) | 0;
                  lo = lo + Math.imul(al5, bl6) | 0;
                  mid = mid + Math.imul(al5, bh6) | 0;
                  mid = mid + Math.imul(ah5, bl6) | 0;
                  hi = hi + Math.imul(ah5, bh6) | 0;
                  lo = lo + Math.imul(al4, bl7) | 0;
                  mid = mid + Math.imul(al4, bh7) | 0;
                  mid = mid + Math.imul(ah4, bl7) | 0;
                  hi = hi + Math.imul(ah4, bh7) | 0;
                  lo = lo + Math.imul(al3, bl8) | 0;
                  mid = mid + Math.imul(al3, bh8) | 0;
                  mid = mid + Math.imul(ah3, bl8) | 0;
                  hi = hi + Math.imul(ah3, bh8) | 0;
                  lo = lo + Math.imul(al2, bl9) | 0;
                  mid = mid + Math.imul(al2, bh9) | 0;
                  mid = mid + Math.imul(ah2, bl9) | 0;
                  hi = hi + Math.imul(ah2, bh9) | 0;
                  var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
                  w11 &= 0x3ffffff;
                  /* k = 12 */

                  lo = Math.imul(al9, bl3);
                  mid = Math.imul(al9, bh3);
                  mid = mid + Math.imul(ah9, bl3) | 0;
                  hi = Math.imul(ah9, bh3);
                  lo = lo + Math.imul(al8, bl4) | 0;
                  mid = mid + Math.imul(al8, bh4) | 0;
                  mid = mid + Math.imul(ah8, bl4) | 0;
                  hi = hi + Math.imul(ah8, bh4) | 0;
                  lo = lo + Math.imul(al7, bl5) | 0;
                  mid = mid + Math.imul(al7, bh5) | 0;
                  mid = mid + Math.imul(ah7, bl5) | 0;
                  hi = hi + Math.imul(ah7, bh5) | 0;
                  lo = lo + Math.imul(al6, bl6) | 0;
                  mid = mid + Math.imul(al6, bh6) | 0;
                  mid = mid + Math.imul(ah6, bl6) | 0;
                  hi = hi + Math.imul(ah6, bh6) | 0;
                  lo = lo + Math.imul(al5, bl7) | 0;
                  mid = mid + Math.imul(al5, bh7) | 0;
                  mid = mid + Math.imul(ah5, bl7) | 0;
                  hi = hi + Math.imul(ah5, bh7) | 0;
                  lo = lo + Math.imul(al4, bl8) | 0;
                  mid = mid + Math.imul(al4, bh8) | 0;
                  mid = mid + Math.imul(ah4, bl8) | 0;
                  hi = hi + Math.imul(ah4, bh8) | 0;
                  lo = lo + Math.imul(al3, bl9) | 0;
                  mid = mid + Math.imul(al3, bh9) | 0;
                  mid = mid + Math.imul(ah3, bl9) | 0;
                  hi = hi + Math.imul(ah3, bh9) | 0;
                  var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
                  w12 &= 0x3ffffff;
                  /* k = 13 */

                  lo = Math.imul(al9, bl4);
                  mid = Math.imul(al9, bh4);
                  mid = mid + Math.imul(ah9, bl4) | 0;
                  hi = Math.imul(ah9, bh4);
                  lo = lo + Math.imul(al8, bl5) | 0;
                  mid = mid + Math.imul(al8, bh5) | 0;
                  mid = mid + Math.imul(ah8, bl5) | 0;
                  hi = hi + Math.imul(ah8, bh5) | 0;
                  lo = lo + Math.imul(al7, bl6) | 0;
                  mid = mid + Math.imul(al7, bh6) | 0;
                  mid = mid + Math.imul(ah7, bl6) | 0;
                  hi = hi + Math.imul(ah7, bh6) | 0;
                  lo = lo + Math.imul(al6, bl7) | 0;
                  mid = mid + Math.imul(al6, bh7) | 0;
                  mid = mid + Math.imul(ah6, bl7) | 0;
                  hi = hi + Math.imul(ah6, bh7) | 0;
                  lo = lo + Math.imul(al5, bl8) | 0;
                  mid = mid + Math.imul(al5, bh8) | 0;
                  mid = mid + Math.imul(ah5, bl8) | 0;
                  hi = hi + Math.imul(ah5, bh8) | 0;
                  lo = lo + Math.imul(al4, bl9) | 0;
                  mid = mid + Math.imul(al4, bh9) | 0;
                  mid = mid + Math.imul(ah4, bl9) | 0;
                  hi = hi + Math.imul(ah4, bh9) | 0;
                  var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
                  w13 &= 0x3ffffff;
                  /* k = 14 */

                  lo = Math.imul(al9, bl5);
                  mid = Math.imul(al9, bh5);
                  mid = mid + Math.imul(ah9, bl5) | 0;
                  hi = Math.imul(ah9, bh5);
                  lo = lo + Math.imul(al8, bl6) | 0;
                  mid = mid + Math.imul(al8, bh6) | 0;
                  mid = mid + Math.imul(ah8, bl6) | 0;
                  hi = hi + Math.imul(ah8, bh6) | 0;
                  lo = lo + Math.imul(al7, bl7) | 0;
                  mid = mid + Math.imul(al7, bh7) | 0;
                  mid = mid + Math.imul(ah7, bl7) | 0;
                  hi = hi + Math.imul(ah7, bh7) | 0;
                  lo = lo + Math.imul(al6, bl8) | 0;
                  mid = mid + Math.imul(al6, bh8) | 0;
                  mid = mid + Math.imul(ah6, bl8) | 0;
                  hi = hi + Math.imul(ah6, bh8) | 0;
                  lo = lo + Math.imul(al5, bl9) | 0;
                  mid = mid + Math.imul(al5, bh9) | 0;
                  mid = mid + Math.imul(ah5, bl9) | 0;
                  hi = hi + Math.imul(ah5, bh9) | 0;
                  var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
                  w14 &= 0x3ffffff;
                  /* k = 15 */

                  lo = Math.imul(al9, bl6);
                  mid = Math.imul(al9, bh6);
                  mid = mid + Math.imul(ah9, bl6) | 0;
                  hi = Math.imul(ah9, bh6);
                  lo = lo + Math.imul(al8, bl7) | 0;
                  mid = mid + Math.imul(al8, bh7) | 0;
                  mid = mid + Math.imul(ah8, bl7) | 0;
                  hi = hi + Math.imul(ah8, bh7) | 0;
                  lo = lo + Math.imul(al7, bl8) | 0;
                  mid = mid + Math.imul(al7, bh8) | 0;
                  mid = mid + Math.imul(ah7, bl8) | 0;
                  hi = hi + Math.imul(ah7, bh8) | 0;
                  lo = lo + Math.imul(al6, bl9) | 0;
                  mid = mid + Math.imul(al6, bh9) | 0;
                  mid = mid + Math.imul(ah6, bl9) | 0;
                  hi = hi + Math.imul(ah6, bh9) | 0;
                  var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
                  w15 &= 0x3ffffff;
                  /* k = 16 */

                  lo = Math.imul(al9, bl7);
                  mid = Math.imul(al9, bh7);
                  mid = mid + Math.imul(ah9, bl7) | 0;
                  hi = Math.imul(ah9, bh7);
                  lo = lo + Math.imul(al8, bl8) | 0;
                  mid = mid + Math.imul(al8, bh8) | 0;
                  mid = mid + Math.imul(ah8, bl8) | 0;
                  hi = hi + Math.imul(ah8, bh8) | 0;
                  lo = lo + Math.imul(al7, bl9) | 0;
                  mid = mid + Math.imul(al7, bh9) | 0;
                  mid = mid + Math.imul(ah7, bl9) | 0;
                  hi = hi + Math.imul(ah7, bh9) | 0;
                  var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
                  w16 &= 0x3ffffff;
                  /* k = 17 */

                  lo = Math.imul(al9, bl8);
                  mid = Math.imul(al9, bh8);
                  mid = mid + Math.imul(ah9, bl8) | 0;
                  hi = Math.imul(ah9, bh8);
                  lo = lo + Math.imul(al8, bl9) | 0;
                  mid = mid + Math.imul(al8, bh9) | 0;
                  mid = mid + Math.imul(ah8, bl9) | 0;
                  hi = hi + Math.imul(ah8, bh9) | 0;
                  var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
                  w17 &= 0x3ffffff;
                  /* k = 18 */

                  lo = Math.imul(al9, bl9);
                  mid = Math.imul(al9, bh9);
                  mid = mid + Math.imul(ah9, bl9) | 0;
                  hi = Math.imul(ah9, bh9);
                  var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
                  w18 &= 0x3ffffff;
                  o[0] = w0;
                  o[1] = w1;
                  o[2] = w2;
                  o[3] = w3;
                  o[4] = w4;
                  o[5] = w5;
                  o[6] = w6;
                  o[7] = w7;
                  o[8] = w8;
                  o[9] = w9;
                  o[10] = w10;
                  o[11] = w11;
                  o[12] = w12;
                  o[13] = w13;
                  o[14] = w14;
                  o[15] = w15;
                  o[16] = w16;
                  o[17] = w17;
                  o[18] = w18;

                  if (c !== 0) {
                    o[19] = c;
                    out.length++;
                  }

                  return out;
                }; // Polyfill comb


                if (!Math.imul) {
                  comb10MulTo = smallMulTo;
                }

                function bigMulTo(self, num, out) {
                  out.negative = num.negative ^ self.negative;
                  out.length = self.length + num.length;
                  var carry = 0;
                  var hncarry = 0;

                  for (var k = 0; k < out.length - 1; k++) {
                    // Sum all words with the same `i + j = k` and accumulate `ncarry`,
                    // note that ncarry could be >= 0x3ffffff
                    var ncarry = hncarry;
                    hncarry = 0;
                    var rword = carry & 0x3ffffff;
                    var maxJ = Math.min(k, num.length - 1);

                    for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                      var i = k - j;
                      var a = self.words[i] | 0;
                      var b = num.words[j] | 0;
                      var r = a * b;
                      var lo = r & 0x3ffffff;
                      ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                      lo = lo + rword | 0;
                      rword = lo & 0x3ffffff;
                      ncarry = ncarry + (lo >>> 26) | 0;
                      hncarry += ncarry >>> 26;
                      ncarry &= 0x3ffffff;
                    }

                    out.words[k] = rword;
                    carry = ncarry;
                    ncarry = hncarry;
                  }

                  if (carry !== 0) {
                    out.words[k] = carry;
                  } else {
                    out.length--;
                  }

                  return out.strip();
                }

                function jumboMulTo(self, num, out) {
                  var fftm = new FFTM();
                  return fftm.mulp(self, num, out);
                }

                BN.prototype.mulTo = function mulTo(num, out) {
                  var res;
                  var len = this.length + num.length;

                  if (this.length === 10 && num.length === 10) {
                    res = comb10MulTo(this, num, out);
                  } else if (len < 63) {
                    res = smallMulTo(this, num, out);
                  } else if (len < 1024) {
                    res = bigMulTo(this, num, out);
                  } else {
                    res = jumboMulTo(this, num, out);
                  }

                  return res;
                }; // Cooley-Tukey algorithm for FFT
                // slightly revisited to rely on looping instead of recursion


                function FFTM(x, y) {
                  this.x = x;
                  this.y = y;
                }

                FFTM.prototype.makeRBT = function makeRBT(N) {
                  var t = new Array(N);
                  var l = BN.prototype._countBits(N) - 1;

                  for (var i = 0; i < N; i++) {
                    t[i] = this.revBin(i, l, N);
                  }

                  return t;
                }; // Returns binary-reversed representation of `x`


                FFTM.prototype.revBin = function revBin(x, l, N) {
                  if (x === 0 || x === N - 1) return x;
                  var rb = 0;

                  for (var i = 0; i < l; i++) {
                    rb |= (x & 1) << l - i - 1;
                    x >>= 1;
                  }

                  return rb;
                }; // Performs "tweedling" phase, therefore 'emulating'
                // behaviour of the recursive algorithm


                FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
                  for (var i = 0; i < N; i++) {
                    rtws[i] = rws[rbt[i]];
                    itws[i] = iws[rbt[i]];
                  }
                };

                FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
                  this.permute(rbt, rws, iws, rtws, itws, N);

                  for (var s = 1; s < N; s <<= 1) {
                    var l = s << 1;
                    var rtwdf = Math.cos(2 * Math.PI / l);
                    var itwdf = Math.sin(2 * Math.PI / l);

                    for (var p = 0; p < N; p += l) {
                      var rtwdf_ = rtwdf;
                      var itwdf_ = itwdf;

                      for (var j = 0; j < s; j++) {
                        var re = rtws[p + j];
                        var ie = itws[p + j];
                        var ro = rtws[p + j + s];
                        var io = itws[p + j + s];
                        var rx = rtwdf_ * ro - itwdf_ * io;
                        io = rtwdf_ * io + itwdf_ * ro;
                        ro = rx;
                        rtws[p + j] = re + ro;
                        itws[p + j] = ie + io;
                        rtws[p + j + s] = re - ro;
                        itws[p + j + s] = ie - io;
                        /* jshint maxdepth : false */

                        if (j !== l) {
                          rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                          itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                          rtwdf_ = rx;
                        }
                      }
                    }
                  }
                };

                FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
                  var N = Math.max(m, n) | 1;
                  var odd = N & 1;
                  var i = 0;

                  for (N = N / 2 | 0; N; N = N >>> 1) {
                    i++;
                  }

                  return 1 << i + 1 + odd;
                };

                FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
                  if (N <= 1) return;

                  for (var i = 0; i < N / 2; i++) {
                    var t = rws[i];
                    rws[i] = rws[N - i - 1];
                    rws[N - i - 1] = t;
                    t = iws[i];
                    iws[i] = -iws[N - i - 1];
                    iws[N - i - 1] = -t;
                  }
                };

                FFTM.prototype.normalize13b = function normalize13b(ws, N) {
                  var carry = 0;

                  for (var i = 0; i < N / 2; i++) {
                    var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
                    ws[i] = w & 0x3ffffff;

                    if (w < 0x4000000) {
                      carry = 0;
                    } else {
                      carry = w / 0x4000000 | 0;
                    }
                  }

                  return ws;
                };

                FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
                  var carry = 0;

                  for (var i = 0; i < len; i++) {
                    carry = carry + (ws[i] | 0);
                    rws[2 * i] = carry & 0x1fff;
                    carry = carry >>> 13;
                    rws[2 * i + 1] = carry & 0x1fff;
                    carry = carry >>> 13;
                  } // Pad with zeroes


                  for (i = 2 * len; i < N; ++i) {
                    rws[i] = 0;
                  }

                  assert(carry === 0);
                  assert((carry & ~0x1fff) === 0);
                };

                FFTM.prototype.stub = function stub(N) {
                  var ph = new Array(N);

                  for (var i = 0; i < N; i++) {
                    ph[i] = 0;
                  }

                  return ph;
                };

                FFTM.prototype.mulp = function mulp(x, y, out) {
                  var N = 2 * this.guessLen13b(x.length, y.length);
                  var rbt = this.makeRBT(N);

                  var _ = this.stub(N);

                  var rws = new Array(N);
                  var rwst = new Array(N);
                  var iwst = new Array(N);
                  var nrws = new Array(N);
                  var nrwst = new Array(N);
                  var niwst = new Array(N);
                  var rmws = out.words;
                  rmws.length = N;
                  this.convert13b(x.words, x.length, rws, N);
                  this.convert13b(y.words, y.length, nrws, N);
                  this.transform(rws, _, rwst, iwst, N, rbt);
                  this.transform(nrws, _, nrwst, niwst, N, rbt);

                  for (var i = 0; i < N; i++) {
                    var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
                    iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
                    rwst[i] = rx;
                  }

                  this.conjugate(rwst, iwst, N);
                  this.transform(rwst, iwst, rmws, _, N, rbt);
                  this.conjugate(rmws, _, N);
                  this.normalize13b(rmws, N);
                  out.negative = x.negative ^ y.negative;
                  out.length = x.length + y.length;
                  return out.strip();
                }; // Multiply `this` by `num`


                BN.prototype.mul = function mul(num) {
                  var out = new BN(null);
                  out.words = new Array(this.length + num.length);
                  return this.mulTo(num, out);
                }; // Multiply employing FFT


                BN.prototype.mulf = function mulf(num) {
                  var out = new BN(null);
                  out.words = new Array(this.length + num.length);
                  return jumboMulTo(this, num, out);
                }; // In-place Multiplication


                BN.prototype.imul = function imul(num) {
                  return this.clone().mulTo(num, this);
                };

                BN.prototype.imuln = function imuln(num) {
                  assert(typeof num === 'number');
                  assert(num < 0x4000000); // Carry

                  var carry = 0;

                  for (var i = 0; i < this.length; i++) {
                    var w = (this.words[i] | 0) * num;
                    var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
                    carry >>= 26;
                    carry += w / 0x4000000 | 0; // NOTE: lo is 27bit maximum

                    carry += lo >>> 26;
                    this.words[i] = lo & 0x3ffffff;
                  }

                  if (carry !== 0) {
                    this.words[i] = carry;
                    this.length++;
                  }

                  return this;
                };

                BN.prototype.muln = function muln(num) {
                  return this.clone().imuln(num);
                }; // `this` * `this`


                BN.prototype.sqr = function sqr() {
                  return this.mul(this);
                }; // `this` * `this` in-place


                BN.prototype.isqr = function isqr() {
                  return this.imul(this.clone());
                }; // Math.pow(`this`, `num`)


                BN.prototype.pow = function pow(num) {
                  var w = toBitArray(num);
                  if (w.length === 0) return new BN(1); // Skip leading zeroes

                  var res = this;

                  for (var i = 0; i < w.length; i++, res = res.sqr()) {
                    if (w[i] !== 0) break;
                  }

                  if (++i < w.length) {
                    for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
                      if (w[i] === 0) continue;
                      res = res.mul(q);
                    }
                  }

                  return res;
                }; // Shift-left in-place


                BN.prototype.iushln = function iushln(bits) {
                  assert(typeof bits === 'number' && bits >= 0);
                  var r = bits % 26;
                  var s = (bits - r) / 26;
                  var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
                  var i;

                  if (r !== 0) {
                    var carry = 0;

                    for (i = 0; i < this.length; i++) {
                      var newCarry = this.words[i] & carryMask;
                      var c = (this.words[i] | 0) - newCarry << r;
                      this.words[i] = c | carry;
                      carry = newCarry >>> 26 - r;
                    }

                    if (carry) {
                      this.words[i] = carry;
                      this.length++;
                    }
                  }

                  if (s !== 0) {
                    for (i = this.length - 1; i >= 0; i--) {
                      this.words[i + s] = this.words[i];
                    }

                    for (i = 0; i < s; i++) {
                      this.words[i] = 0;
                    }

                    this.length += s;
                  }

                  return this.strip();
                };

                BN.prototype.ishln = function ishln(bits) {
                  // TODO(indutny): implement me
                  assert(this.negative === 0);
                  return this.iushln(bits);
                }; // Shift-right in-place
                // NOTE: `hint` is a lowest bit before trailing zeroes
                // NOTE: if `extended` is present - it will be filled with destroyed bits


                BN.prototype.iushrn = function iushrn(bits, hint, extended) {
                  assert(typeof bits === 'number' && bits >= 0);
                  var h;

                  if (hint) {
                    h = (hint - hint % 26) / 26;
                  } else {
                    h = 0;
                  }

                  var r = bits % 26;
                  var s = Math.min((bits - r) / 26, this.length);
                  var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
                  var maskedWords = extended;
                  h -= s;
                  h = Math.max(0, h); // Extended mode, copy masked part

                  if (maskedWords) {
                    for (var i = 0; i < s; i++) {
                      maskedWords.words[i] = this.words[i];
                    }

                    maskedWords.length = s;
                  }

                  if (s === 0) ; else if (this.length > s) {
                    this.length -= s;

                    for (i = 0; i < this.length; i++) {
                      this.words[i] = this.words[i + s];
                    }
                  } else {
                    this.words[0] = 0;
                    this.length = 1;
                  }

                  var carry = 0;

                  for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
                    var word = this.words[i] | 0;
                    this.words[i] = carry << 26 - r | word >>> r;
                    carry = word & mask;
                  } // Push carried bits as a mask


                  if (maskedWords && carry !== 0) {
                    maskedWords.words[maskedWords.length++] = carry;
                  }

                  if (this.length === 0) {
                    this.words[0] = 0;
                    this.length = 1;
                  }

                  return this.strip();
                };

                BN.prototype.ishrn = function ishrn(bits, hint, extended) {
                  // TODO(indutny): implement me
                  assert(this.negative === 0);
                  return this.iushrn(bits, hint, extended);
                }; // Shift-left


                BN.prototype.shln = function shln(bits) {
                  return this.clone().ishln(bits);
                };

                BN.prototype.ushln = function ushln(bits) {
                  return this.clone().iushln(bits);
                }; // Shift-right


                BN.prototype.shrn = function shrn(bits) {
                  return this.clone().ishrn(bits);
                };

                BN.prototype.ushrn = function ushrn(bits) {
                  return this.clone().iushrn(bits);
                }; // Test if n bit is set


                BN.prototype.testn = function testn(bit) {
                  assert(typeof bit === 'number' && bit >= 0);
                  var r = bit % 26;
                  var s = (bit - r) / 26;
                  var q = 1 << r; // Fast case: bit is much higher than all existing words

                  if (this.length <= s) return false; // Check bit and return

                  var w = this.words[s];
                  return !!(w & q);
                }; // Return only lowers bits of number (in-place)


                BN.prototype.imaskn = function imaskn(bits) {
                  assert(typeof bits === 'number' && bits >= 0);
                  var r = bits % 26;
                  var s = (bits - r) / 26;
                  assert(this.negative === 0, 'imaskn works only with positive numbers');

                  if (this.length <= s) {
                    return this;
                  }

                  if (r !== 0) {
                    s++;
                  }

                  this.length = Math.min(s, this.length);

                  if (r !== 0) {
                    var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
                    this.words[this.length - 1] &= mask;
                  }

                  return this.strip();
                }; // Return only lowers bits of number


                BN.prototype.maskn = function maskn(bits) {
                  return this.clone().imaskn(bits);
                }; // Add plain number `num` to `this`


                BN.prototype.iaddn = function iaddn(num) {
                  assert(typeof num === 'number');
                  assert(num < 0x4000000);
                  if (num < 0) return this.isubn(-num); // Possible sign change

                  if (this.negative !== 0) {
                    if (this.length === 1 && (this.words[0] | 0) < num) {
                      this.words[0] = num - (this.words[0] | 0);
                      this.negative = 0;
                      return this;
                    }

                    this.negative = 0;
                    this.isubn(num);
                    this.negative = 1;
                    return this;
                  } // Add without checks


                  return this._iaddn(num);
                };

                BN.prototype._iaddn = function _iaddn(num) {
                  this.words[0] += num; // Carry

                  for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
                    this.words[i] -= 0x4000000;

                    if (i === this.length - 1) {
                      this.words[i + 1] = 1;
                    } else {
                      this.words[i + 1]++;
                    }
                  }

                  this.length = Math.max(this.length, i + 1);
                  return this;
                }; // Subtract plain number `num` from `this`


                BN.prototype.isubn = function isubn(num) {
                  assert(typeof num === 'number');
                  assert(num < 0x4000000);
                  if (num < 0) return this.iaddn(-num);

                  if (this.negative !== 0) {
                    this.negative = 0;
                    this.iaddn(num);
                    this.negative = 1;
                    return this;
                  }

                  this.words[0] -= num;

                  if (this.length === 1 && this.words[0] < 0) {
                    this.words[0] = -this.words[0];
                    this.negative = 1;
                  } else {
                    // Carry
                    for (var i = 0; i < this.length && this.words[i] < 0; i++) {
                      this.words[i] += 0x4000000;
                      this.words[i + 1] -= 1;
                    }
                  }

                  return this.strip();
                };

                BN.prototype.addn = function addn(num) {
                  return this.clone().iaddn(num);
                };

                BN.prototype.subn = function subn(num) {
                  return this.clone().isubn(num);
                };

                BN.prototype.iabs = function iabs() {
                  this.negative = 0;
                  return this;
                };

                BN.prototype.abs = function abs() {
                  return this.clone().iabs();
                };

                BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
                  var len = num.length + shift;
                  var i;

                  this._expand(len);

                  var w;
                  var carry = 0;

                  for (i = 0; i < num.length; i++) {
                    w = (this.words[i + shift] | 0) + carry;
                    var right = (num.words[i] | 0) * mul;
                    w -= right & 0x3ffffff;
                    carry = (w >> 26) - (right / 0x4000000 | 0);
                    this.words[i + shift] = w & 0x3ffffff;
                  }

                  for (; i < this.length - shift; i++) {
                    w = (this.words[i + shift] | 0) + carry;
                    carry = w >> 26;
                    this.words[i + shift] = w & 0x3ffffff;
                  }

                  if (carry === 0) return this.strip(); // Subtraction overflow

                  assert(carry === -1);
                  carry = 0;

                  for (i = 0; i < this.length; i++) {
                    w = -(this.words[i] | 0) + carry;
                    carry = w >> 26;
                    this.words[i] = w & 0x3ffffff;
                  }

                  this.negative = 1;
                  return this.strip();
                };

                BN.prototype._wordDiv = function _wordDiv(num, mode) {
                  var shift = this.length - num.length;
                  var a = this.clone();
                  var b = num; // Normalize

                  var bhi = b.words[b.length - 1] | 0;

                  var bhiBits = this._countBits(bhi);

                  shift = 26 - bhiBits;

                  if (shift !== 0) {
                    b = b.ushln(shift);
                    a.iushln(shift);
                    bhi = b.words[b.length - 1] | 0;
                  } // Initialize quotient


                  var m = a.length - b.length;
                  var q;

                  if (mode !== 'mod') {
                    q = new BN(null);
                    q.length = m + 1;
                    q.words = new Array(q.length);

                    for (var i = 0; i < q.length; i++) {
                      q.words[i] = 0;
                    }
                  }

                  var diff = a.clone()._ishlnsubmul(b, 1, m);

                  if (diff.negative === 0) {
                    a = diff;

                    if (q) {
                      q.words[m] = 1;
                    }
                  }

                  for (var j = m - 1; j >= 0; j--) {
                    var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0); // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
                    // (0x7ffffff)

                    qj = Math.min(qj / bhi | 0, 0x3ffffff);

                    a._ishlnsubmul(b, qj, j);

                    while (a.negative !== 0) {
                      qj--;
                      a.negative = 0;

                      a._ishlnsubmul(b, 1, j);

                      if (!a.isZero()) {
                        a.negative ^= 1;
                      }
                    }

                    if (q) {
                      q.words[j] = qj;
                    }
                  }

                  if (q) {
                    q.strip();
                  }

                  a.strip(); // Denormalize

                  if (mode !== 'div' && shift !== 0) {
                    a.iushrn(shift);
                  }

                  return {
                    div: q || null,
                    mod: a
                  };
                }; // NOTE: 1) `mode` can be set to `mod` to request mod only,
                //       to `div` to request div only, or be absent to
                //       request both div & mod
                //       2) `positive` is true if unsigned mod is requested


                BN.prototype.divmod = function divmod(num, mode, positive) {
                  assert(!num.isZero());

                  if (this.isZero()) {
                    return {
                      div: new BN(0),
                      mod: new BN(0)
                    };
                  }

                  var div, mod, res;

                  if (this.negative !== 0 && num.negative === 0) {
                    res = this.neg().divmod(num, mode);

                    if (mode !== 'mod') {
                      div = res.div.neg();
                    }

                    if (mode !== 'div') {
                      mod = res.mod.neg();

                      if (positive && mod.negative !== 0) {
                        mod.iadd(num);
                      }
                    }

                    return {
                      div: div,
                      mod: mod
                    };
                  }

                  if (this.negative === 0 && num.negative !== 0) {
                    res = this.divmod(num.neg(), mode);

                    if (mode !== 'mod') {
                      div = res.div.neg();
                    }

                    return {
                      div: div,
                      mod: res.mod
                    };
                  }

                  if ((this.negative & num.negative) !== 0) {
                    res = this.neg().divmod(num.neg(), mode);

                    if (mode !== 'div') {
                      mod = res.mod.neg();

                      if (positive && mod.negative !== 0) {
                        mod.isub(num);
                      }
                    }

                    return {
                      div: res.div,
                      mod: mod
                    };
                  } // Both numbers are positive at this point
                  // Strip both numbers to approximate shift value


                  if (num.length > this.length || this.cmp(num) < 0) {
                    return {
                      div: new BN(0),
                      mod: this
                    };
                  } // Very short reduction


                  if (num.length === 1) {
                    if (mode === 'div') {
                      return {
                        div: this.divn(num.words[0]),
                        mod: null
                      };
                    }

                    if (mode === 'mod') {
                      return {
                        div: null,
                        mod: new BN(this.modn(num.words[0]))
                      };
                    }

                    return {
                      div: this.divn(num.words[0]),
                      mod: new BN(this.modn(num.words[0]))
                    };
                  }

                  return this._wordDiv(num, mode);
                }; // Find `this` / `num`


                BN.prototype.div = function div(num) {
                  return this.divmod(num, 'div', false).div;
                }; // Find `this` % `num`


                BN.prototype.mod = function mod(num) {
                  return this.divmod(num, 'mod', false).mod;
                };

                BN.prototype.umod = function umod(num) {
                  return this.divmod(num, 'mod', true).mod;
                }; // Find Round(`this` / `num`)


                BN.prototype.divRound = function divRound(num) {
                  var dm = this.divmod(num); // Fast case - exact division

                  if (dm.mod.isZero()) return dm.div;
                  var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
                  var half = num.ushrn(1);
                  var r2 = num.andln(1);
                  var cmp = mod.cmp(half); // Round down

                  if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div; // Round up

                  return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
                };

                BN.prototype.modn = function modn(num) {
                  assert(num <= 0x3ffffff);
                  var p = (1 << 26) % num;
                  var acc = 0;

                  for (var i = this.length - 1; i >= 0; i--) {
                    acc = (p * acc + (this.words[i] | 0)) % num;
                  }

                  return acc;
                }; // In-place division by number


                BN.prototype.idivn = function idivn(num) {
                  assert(num <= 0x3ffffff);
                  var carry = 0;

                  for (var i = this.length - 1; i >= 0; i--) {
                    var w = (this.words[i] | 0) + carry * 0x4000000;
                    this.words[i] = w / num | 0;
                    carry = w % num;
                  }

                  return this.strip();
                };

                BN.prototype.divn = function divn(num) {
                  return this.clone().idivn(num);
                };

                BN.prototype.egcd = function egcd(p) {
                  assert(p.negative === 0);
                  assert(!p.isZero());
                  var x = this;
                  var y = p.clone();

                  if (x.negative !== 0) {
                    x = x.umod(p);
                  } else {
                    x = x.clone();
                  } // A * x + B * y = x


                  var A = new BN(1);
                  var B = new BN(0); // C * x + D * y = y

                  var C = new BN(0);
                  var D = new BN(1);
                  var g = 0;

                  while (x.isEven() && y.isEven()) {
                    x.iushrn(1);
                    y.iushrn(1);
                    ++g;
                  }

                  var yp = y.clone();
                  var xp = x.clone();

                  while (!x.isZero()) {
                    for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) {
                    }

                    if (i > 0) {
                      x.iushrn(i);

                      while (i-- > 0) {
                        if (A.isOdd() || B.isOdd()) {
                          A.iadd(yp);
                          B.isub(xp);
                        }

                        A.iushrn(1);
                        B.iushrn(1);
                      }
                    }

                    for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) {
                    }

                    if (j > 0) {
                      y.iushrn(j);

                      while (j-- > 0) {
                        if (C.isOdd() || D.isOdd()) {
                          C.iadd(yp);
                          D.isub(xp);
                        }

                        C.iushrn(1);
                        D.iushrn(1);
                      }
                    }

                    if (x.cmp(y) >= 0) {
                      x.isub(y);
                      A.isub(C);
                      B.isub(D);
                    } else {
                      y.isub(x);
                      C.isub(A);
                      D.isub(B);
                    }
                  }

                  return {
                    a: C,
                    b: D,
                    gcd: y.iushln(g)
                  };
                }; // This is reduced incarnation of the binary EEA
                // above, designated to invert members of the
                // _prime_ fields F(p) at a maximal speed


                BN.prototype._invmp = function _invmp(p) {
                  assert(p.negative === 0);
                  assert(!p.isZero());
                  var a = this;
                  var b = p.clone();

                  if (a.negative !== 0) {
                    a = a.umod(p);
                  } else {
                    a = a.clone();
                  }

                  var x1 = new BN(1);
                  var x2 = new BN(0);
                  var delta = b.clone();

                  while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
                    for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) {
                    }

                    if (i > 0) {
                      a.iushrn(i);

                      while (i-- > 0) {
                        if (x1.isOdd()) {
                          x1.iadd(delta);
                        }

                        x1.iushrn(1);
                      }
                    }

                    for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) {
                    }

                    if (j > 0) {
                      b.iushrn(j);

                      while (j-- > 0) {
                        if (x2.isOdd()) {
                          x2.iadd(delta);
                        }

                        x2.iushrn(1);
                      }
                    }

                    if (a.cmp(b) >= 0) {
                      a.isub(b);
                      x1.isub(x2);
                    } else {
                      b.isub(a);
                      x2.isub(x1);
                    }
                  }

                  var res;

                  if (a.cmpn(1) === 0) {
                    res = x1;
                  } else {
                    res = x2;
                  }

                  if (res.cmpn(0) < 0) {
                    res.iadd(p);
                  }

                  return res;
                };

                BN.prototype.gcd = function gcd(num) {
                  if (this.isZero()) return num.abs();
                  if (num.isZero()) return this.abs();
                  var a = this.clone();
                  var b = num.clone();
                  a.negative = 0;
                  b.negative = 0; // Remove common factor of two

                  for (var shift = 0; a.isEven() && b.isEven(); shift++) {
                    a.iushrn(1);
                    b.iushrn(1);
                  }

                  do {
                    while (a.isEven()) {
                      a.iushrn(1);
                    }

                    while (b.isEven()) {
                      b.iushrn(1);
                    }

                    var r = a.cmp(b);

                    if (r < 0) {
                      // Swap `a` and `b` to make `a` always bigger than `b`
                      var t = a;
                      a = b;
                      b = t;
                    } else if (r === 0 || b.cmpn(1) === 0) {
                      break;
                    }

                    a.isub(b);
                  } while (true);

                  return b.iushln(shift);
                }; // Invert number in the field F(num)


                BN.prototype.invm = function invm(num) {
                  return this.egcd(num).a.umod(num);
                };

                BN.prototype.isEven = function isEven() {
                  return (this.words[0] & 1) === 0;
                };

                BN.prototype.isOdd = function isOdd() {
                  return (this.words[0] & 1) === 1;
                }; // And first word and num


                BN.prototype.andln = function andln(num) {
                  return this.words[0] & num;
                }; // Increment at the bit position in-line


                BN.prototype.bincn = function bincn(bit) {
                  assert(typeof bit === 'number');
                  var r = bit % 26;
                  var s = (bit - r) / 26;
                  var q = 1 << r; // Fast case: bit is much higher than all existing words

                  if (this.length <= s) {
                    this._expand(s + 1);

                    this.words[s] |= q;
                    return this;
                  } // Add bit and propagate, if needed


                  var carry = q;

                  for (var i = s; carry !== 0 && i < this.length; i++) {
                    var w = this.words[i] | 0;
                    w += carry;
                    carry = w >>> 26;
                    w &= 0x3ffffff;
                    this.words[i] = w;
                  }

                  if (carry !== 0) {
                    this.words[i] = carry;
                    this.length++;
                  }

                  return this;
                };

                BN.prototype.isZero = function isZero() {
                  return this.length === 1 && this.words[0] === 0;
                };

                BN.prototype.cmpn = function cmpn(num) {
                  var negative = num < 0;
                  if (this.negative !== 0 && !negative) return -1;
                  if (this.negative === 0 && negative) return 1;
                  this.strip();
                  var res;

                  if (this.length > 1) {
                    res = 1;
                  } else {
                    if (negative) {
                      num = -num;
                    }

                    assert(num <= 0x3ffffff, 'Number is too big');
                    var w = this.words[0] | 0;
                    res = w === num ? 0 : w < num ? -1 : 1;
                  }

                  if (this.negative !== 0) return -res | 0;
                  return res;
                }; // Compare two numbers and return:
                // 1 - if `this` > `num`
                // 0 - if `this` == `num`
                // -1 - if `this` < `num`


                BN.prototype.cmp = function cmp(num) {
                  if (this.negative !== 0 && num.negative === 0) return -1;
                  if (this.negative === 0 && num.negative !== 0) return 1;
                  var res = this.ucmp(num);
                  if (this.negative !== 0) return -res | 0;
                  return res;
                }; // Unsigned comparison


                BN.prototype.ucmp = function ucmp(num) {
                  // At this point both numbers have the same sign
                  if (this.length > num.length) return 1;
                  if (this.length < num.length) return -1;
                  var res = 0;

                  for (var i = this.length - 1; i >= 0; i--) {
                    var a = this.words[i] | 0;
                    var b = num.words[i] | 0;
                    if (a === b) continue;

                    if (a < b) {
                      res = -1;
                    } else if (a > b) {
                      res = 1;
                    }

                    break;
                  }

                  return res;
                };

                BN.prototype.gtn = function gtn(num) {
                  return this.cmpn(num) === 1;
                };

                BN.prototype.gt = function gt(num) {
                  return this.cmp(num) === 1;
                };

                BN.prototype.gten = function gten(num) {
                  return this.cmpn(num) >= 0;
                };

                BN.prototype.gte = function gte(num) {
                  return this.cmp(num) >= 0;
                };

                BN.prototype.ltn = function ltn(num) {
                  return this.cmpn(num) === -1;
                };

                BN.prototype.lt = function lt(num) {
                  return this.cmp(num) === -1;
                };

                BN.prototype.lten = function lten(num) {
                  return this.cmpn(num) <= 0;
                };

                BN.prototype.lte = function lte(num) {
                  return this.cmp(num) <= 0;
                };

                BN.prototype.eqn = function eqn(num) {
                  return this.cmpn(num) === 0;
                };

                BN.prototype.eq = function eq(num) {
                  return this.cmp(num) === 0;
                }; //
                // A reduce context, could be using montgomery or something better, depending
                // on the `m` itself.
                //


                BN.red = function red(num) {
                  return new Red(num);
                };

                BN.prototype.toRed = function toRed(ctx) {
                  assert(!this.red, 'Already a number in reduction context');
                  assert(this.negative === 0, 'red works only with positives');
                  return ctx.convertTo(this)._forceRed(ctx);
                };

                BN.prototype.fromRed = function fromRed() {
                  assert(this.red, 'fromRed works only with numbers in reduction context');
                  return this.red.convertFrom(this);
                };

                BN.prototype._forceRed = function _forceRed(ctx) {
                  this.red = ctx;
                  return this;
                };

                BN.prototype.forceRed = function forceRed(ctx) {
                  assert(!this.red, 'Already a number in reduction context');
                  return this._forceRed(ctx);
                };

                BN.prototype.redAdd = function redAdd(num) {
                  assert(this.red, 'redAdd works only with red numbers');
                  return this.red.add(this, num);
                };

                BN.prototype.redIAdd = function redIAdd(num) {
                  assert(this.red, 'redIAdd works only with red numbers');
                  return this.red.iadd(this, num);
                };

                BN.prototype.redSub = function redSub(num) {
                  assert(this.red, 'redSub works only with red numbers');
                  return this.red.sub(this, num);
                };

                BN.prototype.redISub = function redISub(num) {
                  assert(this.red, 'redISub works only with red numbers');
                  return this.red.isub(this, num);
                };

                BN.prototype.redShl = function redShl(num) {
                  assert(this.red, 'redShl works only with red numbers');
                  return this.red.shl(this, num);
                };

                BN.prototype.redMul = function redMul(num) {
                  assert(this.red, 'redMul works only with red numbers');

                  this.red._verify2(this, num);

                  return this.red.mul(this, num);
                };

                BN.prototype.redIMul = function redIMul(num) {
                  assert(this.red, 'redMul works only with red numbers');

                  this.red._verify2(this, num);

                  return this.red.imul(this, num);
                };

                BN.prototype.redSqr = function redSqr() {
                  assert(this.red, 'redSqr works only with red numbers');

                  this.red._verify1(this);

                  return this.red.sqr(this);
                };

                BN.prototype.redISqr = function redISqr() {
                  assert(this.red, 'redISqr works only with red numbers');

                  this.red._verify1(this);

                  return this.red.isqr(this);
                }; // Square root over p


                BN.prototype.redSqrt = function redSqrt() {
                  assert(this.red, 'redSqrt works only with red numbers');

                  this.red._verify1(this);

                  return this.red.sqrt(this);
                };

                BN.prototype.redInvm = function redInvm() {
                  assert(this.red, 'redInvm works only with red numbers');

                  this.red._verify1(this);

                  return this.red.invm(this);
                }; // Return negative clone of `this` % `red modulo`


                BN.prototype.redNeg = function redNeg() {
                  assert(this.red, 'redNeg works only with red numbers');

                  this.red._verify1(this);

                  return this.red.neg(this);
                };

                BN.prototype.redPow = function redPow(num) {
                  assert(this.red && !num.red, 'redPow(normalNum)');

                  this.red._verify1(this);

                  return this.red.pow(this, num);
                }; // Prime numbers with efficient reduction


                var primes = {
                  k256: null,
                  p224: null,
                  p192: null,
                  p25519: null
                }; // Pseudo-Mersenne prime

                function MPrime(name, p) {
                  // P = 2 ^ N - K
                  this.name = name;
                  this.p = new BN(p, 16);
                  this.n = this.p.bitLength();
                  this.k = new BN(1).iushln(this.n).isub(this.p);
                  this.tmp = this._tmp();
                }

                MPrime.prototype._tmp = function _tmp() {
                  var tmp = new BN(null);
                  tmp.words = new Array(Math.ceil(this.n / 13));
                  return tmp;
                };

                MPrime.prototype.ireduce = function ireduce(num) {
                  // Assumes that `num` is less than `P^2`
                  // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
                  var r = num;
                  var rlen;

                  do {
                    this.split(r, this.tmp);
                    r = this.imulK(r);
                    r = r.iadd(this.tmp);
                    rlen = r.bitLength();
                  } while (rlen > this.n);

                  var cmp = rlen < this.n ? -1 : r.ucmp(this.p);

                  if (cmp === 0) {
                    r.words[0] = 0;
                    r.length = 1;
                  } else if (cmp > 0) {
                    r.isub(this.p);
                  } else {
                    if (r.strip !== undefined) {
                      // r is BN v4 instance
                      r.strip();
                    } else {
                      // r is BN v5 instance
                      r._strip();
                    }
                  }

                  return r;
                };

                MPrime.prototype.split = function split(input, out) {
                  input.iushrn(this.n, 0, out);
                };

                MPrime.prototype.imulK = function imulK(num) {
                  return num.imul(this.k);
                };

                function K256() {
                  MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
                }

                inherits(K256, MPrime);

                K256.prototype.split = function split(input, output) {
                  // 256 = 9 * 26 + 22
                  var mask = 0x3fffff;
                  var outLen = Math.min(input.length, 9);

                  for (var i = 0; i < outLen; i++) {
                    output.words[i] = input.words[i];
                  }

                  output.length = outLen;

                  if (input.length <= 9) {
                    input.words[0] = 0;
                    input.length = 1;
                    return;
                  } // Shift by 9 limbs


                  var prev = input.words[9];
                  output.words[output.length++] = prev & mask;

                  for (i = 10; i < input.length; i++) {
                    var next = input.words[i] | 0;
                    input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
                    prev = next;
                  }

                  prev >>>= 22;
                  input.words[i - 10] = prev;

                  if (prev === 0 && input.length > 10) {
                    input.length -= 10;
                  } else {
                    input.length -= 9;
                  }
                };

                K256.prototype.imulK = function imulK(num) {
                  // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
                  num.words[num.length] = 0;
                  num.words[num.length + 1] = 0;
                  num.length += 2; // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390

                  var lo = 0;

                  for (var i = 0; i < num.length; i++) {
                    var w = num.words[i] | 0;
                    lo += w * 0x3d1;
                    num.words[i] = lo & 0x3ffffff;
                    lo = w * 0x40 + (lo / 0x4000000 | 0);
                  } // Fast length reduction


                  if (num.words[num.length - 1] === 0) {
                    num.length--;

                    if (num.words[num.length - 1] === 0) {
                      num.length--;
                    }
                  }

                  return num;
                };

                function P224() {
                  MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
                }

                inherits(P224, MPrime);

                function P192() {
                  MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
                }

                inherits(P192, MPrime);

                function P25519() {
                  // 2 ^ 255 - 19
                  MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
                }

                inherits(P25519, MPrime);

                P25519.prototype.imulK = function imulK(num) {
                  // K = 0x13
                  var carry = 0;

                  for (var i = 0; i < num.length; i++) {
                    var hi = (num.words[i] | 0) * 0x13 + carry;
                    var lo = hi & 0x3ffffff;
                    hi >>>= 26;
                    num.words[i] = lo;
                    carry = hi;
                  }

                  if (carry !== 0) {
                    num.words[num.length++] = carry;
                  }

                  return num;
                }; // Exported mostly for testing purposes, use plain name instead


                BN._prime = function prime(name) {
                  // Cached version of prime
                  if (primes[name]) return primes[name];
                  var prime;

                  if (name === 'k256') {
                    prime = new K256();
                  } else if (name === 'p224') {
                    prime = new P224();
                  } else if (name === 'p192') {
                    prime = new P192();
                  } else if (name === 'p25519') {
                    prime = new P25519();
                  } else {
                    throw new Error('Unknown prime ' + name);
                  }

                  primes[name] = prime;
                  return prime;
                }; //
                // Base reduction engine
                //


                function Red(m) {
                  if (typeof m === 'string') {
                    var prime = BN._prime(m);

                    this.m = prime.p;
                    this.prime = prime;
                  } else {
                    assert(m.gtn(1), 'modulus must be greater than 1');
                    this.m = m;
                    this.prime = null;
                  }
                }

                Red.prototype._verify1 = function _verify1(a) {
                  assert(a.negative === 0, 'red works only with positives');
                  assert(a.red, 'red works only with red numbers');
                };

                Red.prototype._verify2 = function _verify2(a, b) {
                  assert((a.negative | b.negative) === 0, 'red works only with positives');
                  assert(a.red && a.red === b.red, 'red works only with red numbers');
                };

                Red.prototype.imod = function imod(a) {
                  if (this.prime) return this.prime.ireduce(a)._forceRed(this);
                  return a.umod(this.m)._forceRed(this);
                };

                Red.prototype.neg = function neg(a) {
                  if (a.isZero()) {
                    return a.clone();
                  }

                  return this.m.sub(a)._forceRed(this);
                };

                Red.prototype.add = function add(a, b) {
                  this._verify2(a, b);

                  var res = a.add(b);

                  if (res.cmp(this.m) >= 0) {
                    res.isub(this.m);
                  }

                  return res._forceRed(this);
                };

                Red.prototype.iadd = function iadd(a, b) {
                  this._verify2(a, b);

                  var res = a.iadd(b);

                  if (res.cmp(this.m) >= 0) {
                    res.isub(this.m);
                  }

                  return res;
                };

                Red.prototype.sub = function sub(a, b) {
                  this._verify2(a, b);

                  var res = a.sub(b);

                  if (res.cmpn(0) < 0) {
                    res.iadd(this.m);
                  }

                  return res._forceRed(this);
                };

                Red.prototype.isub = function isub(a, b) {
                  this._verify2(a, b);

                  var res = a.isub(b);

                  if (res.cmpn(0) < 0) {
                    res.iadd(this.m);
                  }

                  return res;
                };

                Red.prototype.shl = function shl(a, num) {
                  this._verify1(a);

                  return this.imod(a.ushln(num));
                };

                Red.prototype.imul = function imul(a, b) {
                  this._verify2(a, b);

                  return this.imod(a.imul(b));
                };

                Red.prototype.mul = function mul(a, b) {
                  this._verify2(a, b);

                  return this.imod(a.mul(b));
                };

                Red.prototype.isqr = function isqr(a) {
                  return this.imul(a, a.clone());
                };

                Red.prototype.sqr = function sqr(a) {
                  return this.mul(a, a);
                };

                Red.prototype.sqrt = function sqrt(a) {
                  if (a.isZero()) return a.clone();
                  var mod3 = this.m.andln(3);
                  assert(mod3 % 2 === 1); // Fast case

                  if (mod3 === 3) {
                    var pow = this.m.add(new BN(1)).iushrn(2);
                    return this.pow(a, pow);
                  } // Tonelli-Shanks algorithm (Totally unoptimized and slow)
                  //
                  // Find Q and S, that Q * 2 ^ S = (P - 1)


                  var q = this.m.subn(1);
                  var s = 0;

                  while (!q.isZero() && q.andln(1) === 0) {
                    s++;
                    q.iushrn(1);
                  }

                  assert(!q.isZero());
                  var one = new BN(1).toRed(this);
                  var nOne = one.redNeg(); // Find quadratic non-residue
                  // NOTE: Max is such because of generalized Riemann hypothesis.

                  var lpow = this.m.subn(1).iushrn(1);
                  var z = this.m.bitLength();
                  z = new BN(2 * z * z).toRed(this);

                  while (this.pow(z, lpow).cmp(nOne) !== 0) {
                    z.redIAdd(nOne);
                  }

                  var c = this.pow(z, q);
                  var r = this.pow(a, q.addn(1).iushrn(1));
                  var t = this.pow(a, q);
                  var m = s;

                  while (t.cmp(one) !== 0) {
                    var tmp = t;

                    for (var i = 0; tmp.cmp(one) !== 0; i++) {
                      tmp = tmp.redSqr();
                    }

                    assert(i < m);
                    var b = this.pow(c, new BN(1).iushln(m - i - 1));
                    r = r.redMul(b);
                    c = b.redSqr();
                    t = t.redMul(c);
                    m = i;
                  }

                  return r;
                };

                Red.prototype.invm = function invm(a) {
                  var inv = a._invmp(this.m);

                  if (inv.negative !== 0) {
                    inv.negative = 0;
                    return this.imod(inv).redNeg();
                  } else {
                    return this.imod(inv);
                  }
                };

                Red.prototype.pow = function pow(a, num) {
                  if (num.isZero()) return new BN(1).toRed(this);
                  if (num.cmpn(1) === 0) return a.clone();
                  var windowSize = 4;
                  var wnd = new Array(1 << windowSize);
                  wnd[0] = new BN(1).toRed(this);
                  wnd[1] = a;

                  for (var i = 2; i < wnd.length; i++) {
                    wnd[i] = this.mul(wnd[i - 1], a);
                  }

                  var res = wnd[0];
                  var current = 0;
                  var currentLen = 0;
                  var start = num.bitLength() % 26;

                  if (start === 0) {
                    start = 26;
                  }

                  for (i = num.length - 1; i >= 0; i--) {
                    var word = num.words[i];

                    for (var j = start - 1; j >= 0; j--) {
                      var bit = word >> j & 1;

                      if (res !== wnd[0]) {
                        res = this.sqr(res);
                      }

                      if (bit === 0 && current === 0) {
                        currentLen = 0;
                        continue;
                      }

                      current <<= 1;
                      current |= bit;
                      currentLen++;
                      if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                      res = this.mul(res, wnd[current]);
                      currentLen = 0;
                      current = 0;
                    }

                    start = 26;
                  }

                  return res;
                };

                Red.prototype.convertTo = function convertTo(num) {
                  var r = num.umod(this.m);
                  return r === num ? r.clone() : r;
                };

                Red.prototype.convertFrom = function convertFrom(num) {
                  var res = num.clone();
                  res.red = null;
                  return res;
                }; //
                // Montgomery method engine
                //


                BN.mont = function mont(num) {
                  return new Mont(num);
                };

                function Mont(m) {
                  Red.call(this, m);
                  this.shift = this.m.bitLength();

                  if (this.shift % 26 !== 0) {
                    this.shift += 26 - this.shift % 26;
                  }

                  this.r = new BN(1).iushln(this.shift);
                  this.r2 = this.imod(this.r.sqr());
                  this.rinv = this.r._invmp(this.m);
                  this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
                  this.minv = this.minv.umod(this.r);
                  this.minv = this.r.sub(this.minv);
                }

                inherits(Mont, Red);

                Mont.prototype.convertTo = function convertTo(num) {
                  return this.imod(num.ushln(this.shift));
                };

                Mont.prototype.convertFrom = function convertFrom(num) {
                  var r = this.imod(num.mul(this.rinv));
                  r.red = null;
                  return r;
                };

                Mont.prototype.imul = function imul(a, b) {
                  if (a.isZero() || b.isZero()) {
                    a.words[0] = 0;
                    a.length = 1;
                    return a;
                  }

                  var t = a.imul(b);
                  var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
                  var u = t.isub(c).iushrn(this.shift);
                  var res = u;

                  if (u.cmp(this.m) >= 0) {
                    res = u.isub(this.m);
                  } else if (u.cmpn(0) < 0) {
                    res = u.iadd(this.m);
                  }

                  return res._forceRed(this);
                };

                Mont.prototype.mul = function mul(a, b) {
                  if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
                  var t = a.mul(b);
                  var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
                  var u = t.isub(c).iushrn(this.shift);
                  var res = u;

                  if (u.cmp(this.m) >= 0) {
                    res = u.isub(this.m);
                  } else if (u.cmpn(0) < 0) {
                    res = u.iadd(this.m);
                  }

                  return res._forceRed(this);
                };

                Mont.prototype.invm = function invm(a) {
                  // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
                  var res = this.imod(a._invmp(this.m).mul(this.r2));
                  return res._forceRed(this);
                };
              })(module, commonjsGlobal);
            })(bn$1);

            var minimalisticAssert = assert$j;

            function assert$j(val, msg) {
              if (!val) throw new Error(msg || 'Assertion failed');
            }

            assert$j.equal = function assertEqual(l, r, msg) {
              if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);
            };

            var utils$C = {};

            (function (exports) {

              var utils = exports;

              function toArray(msg, enc) {
                if (Array.isArray(msg)) return msg.slice();
                if (!msg) return [];
                var res = [];

                if (typeof msg !== 'string') {
                  for (var i = 0; i < msg.length; i++) {
                    res[i] = msg[i] | 0;
                  }

                  return res;
                }

                if (enc === 'hex') {
                  msg = msg.replace(/[^a-z0-9]+/ig, '');
                  if (msg.length % 2 !== 0) msg = '0' + msg;

                  for (var i = 0; i < msg.length; i += 2) {
                    res.push(parseInt(msg[i] + msg[i + 1], 16));
                  }
                } else {
                  for (var i = 0; i < msg.length; i++) {
                    var c = msg.charCodeAt(i);
                    var hi = c >> 8;
                    var lo = c & 0xff;
                    if (hi) res.push(hi, lo);else res.push(lo);
                  }
                }

                return res;
              }

              utils.toArray = toArray;

              function zero2(word) {
                if (word.length === 1) return '0' + word;else return word;
              }

              utils.zero2 = zero2;

              function toHex(msg) {
                var res = '';

                for (var i = 0; i < msg.length; i++) {
                  res += zero2(msg[i].toString(16));
                }

                return res;
              }

              utils.toHex = toHex;

              utils.encode = function encode(arr, enc) {
                if (enc === 'hex') return toHex(arr);else return arr;
              };
            })(utils$C);

            (function (exports) {

              var utils = exports;
              var BN = bn$1.exports;
              var minAssert = minimalisticAssert;
              var minUtils = utils$C;
              utils.assert = minAssert;
              utils.toArray = minUtils.toArray;
              utils.zero2 = minUtils.zero2;
              utils.toHex = minUtils.toHex;
              utils.encode = minUtils.encode; // Represent num in a w-NAF form

              function getNAF(num, w, bits) {
                var naf = new Array(Math.max(num.bitLength(), bits) + 1);
                naf.fill(0);
                var ws = 1 << w + 1;
                var k = num.clone();

                for (var i = 0; i < naf.length; i++) {
                  var z;
                  var mod = k.andln(ws - 1);

                  if (k.isOdd()) {
                    if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;else z = mod;
                    k.isubn(z);
                  } else {
                    z = 0;
                  }

                  naf[i] = z;
                  k.iushrn(1);
                }

                return naf;
              }

              utils.getNAF = getNAF; // Represent k1, k2 in a Joint Sparse Form

              function getJSF(k1, k2) {
                var jsf = [[], []];
                k1 = k1.clone();
                k2 = k2.clone();
                var d1 = 0;
                var d2 = 0;

                while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
                  // First phase
                  var m14 = k1.andln(3) + d1 & 3;
                  var m24 = k2.andln(3) + d2 & 3;
                  if (m14 === 3) m14 = -1;
                  if (m24 === 3) m24 = -1;
                  var u1;

                  if ((m14 & 1) === 0) {
                    u1 = 0;
                  } else {
                    var m8 = k1.andln(7) + d1 & 7;
                    if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;else u1 = m14;
                  }

                  jsf[0].push(u1);
                  var u2;

                  if ((m24 & 1) === 0) {
                    u2 = 0;
                  } else {
                    var m8 = k2.andln(7) + d2 & 7;
                    if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;else u2 = m24;
                  }

                  jsf[1].push(u2); // Second phase

                  if (2 * d1 === u1 + 1) d1 = 1 - d1;
                  if (2 * d2 === u2 + 1) d2 = 1 - d2;
                  k1.iushrn(1);
                  k2.iushrn(1);
                }

                return jsf;
              }

              utils.getJSF = getJSF;

              function cachedProperty(obj, name, computer) {
                var key = '_' + name;

                obj.prototype[name] = function cachedProperty() {
                  return this[key] !== undefined ? this[key] : this[key] = computer.call(this);
                };
              }

              utils.cachedProperty = cachedProperty;

              function parseBytes(bytes) {
                return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') : bytes;
              }

              utils.parseBytes = parseBytes;

              function intFromLE(bytes) {
                return new BN(bytes, 'hex', 'le');
              }

              utils.intFromLE = intFromLE;
            })(utils$D);

            var brorand = {exports: {}};

            var empty = {};

            var empty$1 = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        'default': empty
            });

            var require$$0$3 = /*@__PURE__*/getAugmentedNamespace(empty$1);

            var r$1;

            brorand.exports = function rand(len) {
              if (!r$1) r$1 = new Rand(null);
              return r$1.generate(len);
            };

            function Rand(rand) {
              this.rand = rand;
            }

            brorand.exports.Rand = Rand;

            Rand.prototype.generate = function generate(len) {
              return this._rand(len);
            }; // Emulate crypto API using randy


            Rand.prototype._rand = function _rand(n) {
              if (this.rand.getBytes) return this.rand.getBytes(n);
              var res = new Uint8Array(n);

              for (var i = 0; i < res.length; i++) {
                res[i] = this.rand.getByte();
              }

              return res;
            };

            if ((typeof self === "undefined" ? "undefined" : _typeof$1(self)) === 'object') {
              if (self.crypto && self.crypto.getRandomValues) {
                // Modern browsers
                Rand.prototype._rand = function _rand(n) {
                  var arr = new Uint8Array(n);
                  self.crypto.getRandomValues(arr);
                  return arr;
                };
              } else if (self.msCrypto && self.msCrypto.getRandomValues) {
                // IE
                Rand.prototype._rand = function _rand(n) {
                  var arr = new Uint8Array(n);
                  self.msCrypto.getRandomValues(arr);
                  return arr;
                }; // Safari's WebWorkers do not have `crypto`

              } else if ((typeof window === "undefined" ? "undefined" : _typeof$1(window)) === 'object') {
                // Old junk
                Rand.prototype._rand = function () {
                  throw new Error('Not implemented yet');
                };
              }
            } else {
              // Node.js or Web worker with no crypto support
              try {
                var crypto$1 = require$$0$3;
                if (typeof crypto$1.randomBytes !== 'function') throw new Error('Not supported');

                Rand.prototype._rand = function _rand(n) {
                  return crypto$1.randomBytes(n);
                };
              } catch (e) {}
            }

            var curve = {};

            var BN$9 = bn$1.exports;
            var utils$B = utils$D;
            var getNAF = utils$B.getNAF;
            var getJSF = utils$B.getJSF;
            var assert$i = utils$B.assert;

            function BaseCurve(type, conf) {
              this.type = type;
              this.p = new BN$9(conf.p, 16); // Use Montgomery, when there is no fast reduction for the prime

              this.red = conf.prime ? BN$9.red(conf.prime) : BN$9.mont(this.p); // Useful for many curves

              this.zero = new BN$9(0).toRed(this.red);
              this.one = new BN$9(1).toRed(this.red);
              this.two = new BN$9(2).toRed(this.red); // Curve configuration, optional

              this.n = conf.n && new BN$9(conf.n, 16);
              this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed); // Temporary arrays

              this._wnafT1 = new Array(4);
              this._wnafT2 = new Array(4);
              this._wnafT3 = new Array(4);
              this._wnafT4 = new Array(4);
              this._bitLength = this.n ? this.n.bitLength() : 0; // Generalized Greg Maxwell's trick

              var adjustCount = this.n && this.p.div(this.n);

              if (!adjustCount || adjustCount.cmpn(100) > 0) {
                this.redN = null;
              } else {
                this._maxwellTrick = true;
                this.redN = this.n.toRed(this.red);
              }
            }

            var base$2 = BaseCurve;

            BaseCurve.prototype.point = function point() {
              throw new Error('Not implemented');
            };

            BaseCurve.prototype.validate = function validate() {
              throw new Error('Not implemented');
            };

            BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
              assert$i(p.precomputed);

              var doubles = p._getDoubles();

              var naf = getNAF(k, 1, this._bitLength);
              var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
              I /= 3; // Translate into more windowed form

              var repr = [];

              for (var j = 0; j < naf.length; j += doubles.step) {
                var nafW = 0;

                for (var k = j + doubles.step - 1; k >= j; k--) {
                  nafW = (nafW << 1) + naf[k];
                }

                repr.push(nafW);
              }

              var a = this.jpoint(null, null, null);
              var b = this.jpoint(null, null, null);

              for (var i = I; i > 0; i--) {
                for (var j = 0; j < repr.length; j++) {
                  var nafW = repr[j];
                  if (nafW === i) b = b.mixedAdd(doubles.points[j]);else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
                }

                a = a.add(b);
              }

              return a.toP();
            };

            BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
              var w = 4; // Precompute window

              var nafPoints = p._getNAFPoints(w);

              w = nafPoints.wnd;
              var wnd = nafPoints.points; // Get NAF form

              var naf = getNAF(k, w, this._bitLength); // Add `this`*(N+1) for every w-NAF index

              var acc = this.jpoint(null, null, null);

              for (var i = naf.length - 1; i >= 0; i--) {
                // Count zeroes
                for (var k = 0; i >= 0 && naf[i] === 0; i--) {
                  k++;
                }

                if (i >= 0) k++;
                acc = acc.dblp(k);
                if (i < 0) break;
                var z = naf[i];
                assert$i(z !== 0);

                if (p.type === 'affine') {
                  // J +- P
                  if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
                } else {
                  // J +- J
                  if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);else acc = acc.add(wnd[-z - 1 >> 1].neg());
                }
              }

              return p.type === 'affine' ? acc.toP() : acc;
            };

            BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
              var wndWidth = this._wnafT1;
              var wnd = this._wnafT2;
              var naf = this._wnafT3; // Fill all arrays

              var max = 0;

              for (var i = 0; i < len; i++) {
                var p = points[i];

                var nafPoints = p._getNAFPoints(defW);

                wndWidth[i] = nafPoints.wnd;
                wnd[i] = nafPoints.points;
              } // Comb small window NAFs


              for (var i = len - 1; i >= 1; i -= 2) {
                var a = i - 1;
                var b = i;

                if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
                  naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
                  naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
                  max = Math.max(naf[a].length, max);
                  max = Math.max(naf[b].length, max);
                  continue;
                }

                var comb = [points[a],
                /* 1 */
                null,
                /* 3 */
                null,
                /* 5 */
                points[b]
                /* 7 */
                ]; // Try to avoid Projective points, if possible

                if (points[a].y.cmp(points[b].y) === 0) {
                  comb[1] = points[a].add(points[b]);
                  comb[2] = points[a].toJ().mixedAdd(points[b].neg());
                } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
                  comb[1] = points[a].toJ().mixedAdd(points[b]);
                  comb[2] = points[a].add(points[b].neg());
                } else {
                  comb[1] = points[a].toJ().mixedAdd(points[b]);
                  comb[2] = points[a].toJ().mixedAdd(points[b].neg());
                }

                var index = [-3,
                /* -1 -1 */
                -1,
                /* -1 0 */
                -5,
                /* -1 1 */
                -7,
                /* 0 -1 */
                0,
                /* 0 0 */
                7,
                /* 0 1 */
                5,
                /* 1 -1 */
                1,
                /* 1 0 */
                3
                /* 1 1 */
                ];
                var jsf = getJSF(coeffs[a], coeffs[b]);
                max = Math.max(jsf[0].length, max);
                naf[a] = new Array(max);
                naf[b] = new Array(max);

                for (var j = 0; j < max; j++) {
                  var ja = jsf[0][j] | 0;
                  var jb = jsf[1][j] | 0;
                  naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
                  naf[b][j] = 0;
                  wnd[a] = comb;
                }
              }

              var acc = this.jpoint(null, null, null);
              var tmp = this._wnafT4;

              for (var i = max; i >= 0; i--) {
                var k = 0;

                while (i >= 0) {
                  var zero = true;

                  for (var j = 0; j < len; j++) {
                    tmp[j] = naf[j][i] | 0;
                    if (tmp[j] !== 0) zero = false;
                  }

                  if (!zero) break;
                  k++;
                  i--;
                }

                if (i >= 0) k++;
                acc = acc.dblp(k);
                if (i < 0) break;

                for (var j = 0; j < len; j++) {
                  var z = tmp[j];
                  var p;
                  if (z === 0) continue;else if (z > 0) p = wnd[j][z - 1 >> 1];else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();
                  if (p.type === 'affine') acc = acc.mixedAdd(p);else acc = acc.add(p);
                }
              } // Zeroify references


              for (var i = 0; i < len; i++) {
                wnd[i] = null;
              }

              if (jacobianResult) return acc;else return acc.toP();
            };

            function BasePoint(curve, type) {
              this.curve = curve;
              this.type = type;
              this.precomputed = null;
            }

            BaseCurve.BasePoint = BasePoint;

            BasePoint.prototype.eq = function
            /*other*/
            eq() {
              throw new Error('Not implemented');
            };

            BasePoint.prototype.validate = function validate() {
              return this.curve.validate(this);
            };

            BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
              bytes = utils$B.toArray(bytes, enc);
              var len = this.p.byteLength(); // uncompressed, hybrid-odd, hybrid-even

              if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {
                if (bytes[0] === 0x06) assert$i(bytes[bytes.length - 1] % 2 === 0);else if (bytes[0] === 0x07) assert$i(bytes[bytes.length - 1] % 2 === 1);
                var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
                return res;
              } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) {
                return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
              }

              throw new Error('Unknown point format');
            };

            BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
              return this.encode(enc, true);
            };

            BasePoint.prototype._encode = function _encode(compact) {
              var len = this.curve.p.byteLength();
              var x = this.getX().toArray('be', len);
              if (compact) return [this.getY().isEven() ? 0x02 : 0x03].concat(x);
              return [0x04].concat(x, this.getY().toArray('be', len));
            };

            BasePoint.prototype.encode = function encode(enc, compact) {
              return utils$B.encode(this._encode(compact), enc);
            };

            BasePoint.prototype.precompute = function precompute(power) {
              if (this.precomputed) return this;
              var precomputed = {
                doubles: null,
                naf: null,
                beta: null
              };
              precomputed.naf = this._getNAFPoints(8);
              precomputed.doubles = this._getDoubles(4, power);
              precomputed.beta = this._getBeta();
              this.precomputed = precomputed;
              return this;
            };

            BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
              if (!this.precomputed) return false;
              var doubles = this.precomputed.doubles;
              if (!doubles) return false;
              return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
            };

            BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
              if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
              var doubles = [this];
              var acc = this;

              for (var i = 0; i < power; i += step) {
                for (var j = 0; j < step; j++) {
                  acc = acc.dbl();
                }

                doubles.push(acc);
              }

              return {
                step: step,
                points: doubles
              };
            };

            BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
              if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
              var res = [this];
              var max = (1 << wnd) - 1;
              var dbl = max === 1 ? null : this.dbl();

              for (var i = 1; i < max; i++) {
                res[i] = res[i - 1].add(dbl);
              }

              return {
                wnd: wnd,
                points: res
              };
            };

            BasePoint.prototype._getBeta = function _getBeta() {
              return null;
            };

            BasePoint.prototype.dblp = function dblp(k) {
              var r = this;

              for (var i = 0; i < k; i++) {
                r = r.dbl();
              }

              return r;
            };

            var inherits_browser = {exports: {}};

            if (typeof Object.create === 'function') {
              // implementation from standard node.js 'util' module
              inherits_browser.exports = function inherits(ctor, superCtor) {
                if (superCtor) {
                  ctor.super_ = superCtor;
                  ctor.prototype = Object.create(superCtor.prototype, {
                    constructor: {
                      value: ctor,
                      enumerable: false,
                      writable: true,
                      configurable: true
                    }
                  });
                }
              };
            } else {
              // old school shim for old browsers
              inherits_browser.exports = function inherits(ctor, superCtor) {
                if (superCtor) {
                  ctor.super_ = superCtor;

                  var TempCtor = function TempCtor() {};

                  TempCtor.prototype = superCtor.prototype;
                  ctor.prototype = new TempCtor();
                  ctor.prototype.constructor = ctor;
                }
              };
            }

            var utils$A = utils$D;
            var BN$8 = bn$1.exports;
            var inherits$i = inherits_browser.exports;
            var Base$5 = base$2;
            var assert$h = utils$A.assert;

            function ShortCurve(conf) {
              Base$5.call(this, 'short', conf);
              this.a = new BN$8(conf.a, 16).toRed(this.red);
              this.b = new BN$8(conf.b, 16).toRed(this.red);
              this.tinv = this.two.redInvm();
              this.zeroA = this.a.fromRed().cmpn(0) === 0;
              this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0; // If the curve is endomorphic, precalculate beta and lambda

              this.endo = this._getEndomorphism(conf);
              this._endoWnafT1 = new Array(4);
              this._endoWnafT2 = new Array(4);
            }

            inherits$i(ShortCurve, Base$5);
            var _short = ShortCurve;

            ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
              // No efficient endomorphism
              if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return; // Compute beta and lambda, that lambda * P = (beta * Px; Py)

              var beta;
              var lambda;

              if (conf.beta) {
                beta = new BN$8(conf.beta, 16).toRed(this.red);
              } else {
                var betas = this._getEndoRoots(this.p); // Choose the smallest beta


                beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
                beta = beta.toRed(this.red);
              }

              if (conf.lambda) {
                lambda = new BN$8(conf.lambda, 16);
              } else {
                // Choose the lambda that is matching selected beta
                var lambdas = this._getEndoRoots(this.n);

                if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
                  lambda = lambdas[0];
                } else {
                  lambda = lambdas[1];
                  assert$h(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
                }
              } // Get basis vectors, used for balanced length-two representation


              var basis;

              if (conf.basis) {
                basis = conf.basis.map(function (vec) {
                  return {
                    a: new BN$8(vec.a, 16),
                    b: new BN$8(vec.b, 16)
                  };
                });
              } else {
                basis = this._getEndoBasis(lambda);
              }

              return {
                beta: beta,
                lambda: lambda,
                basis: basis
              };
            };

            ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
              // Find roots of for x^2 + x + 1 in F
              // Root = (-1 +- Sqrt(-3)) / 2
              //
              var red = num === this.p ? this.red : BN$8.mont(num);
              var tinv = new BN$8(2).toRed(red).redInvm();
              var ntinv = tinv.redNeg();
              var s = new BN$8(3).toRed(red).redNeg().redSqrt().redMul(tinv);
              var l1 = ntinv.redAdd(s).fromRed();
              var l2 = ntinv.redSub(s).fromRed();
              return [l1, l2];
            };

            ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
              // aprxSqrt >= sqrt(this.n)
              var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2)); // 3.74
              // Run EGCD, until r(L + 1) < aprxSqrt

              var u = lambda;
              var v = this.n.clone();
              var x1 = new BN$8(1);
              var y1 = new BN$8(0);
              var x2 = new BN$8(0);
              var y2 = new BN$8(1); // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)

              var a0;
              var b0; // First vector

              var a1;
              var b1; // Second vector

              var a2;
              var b2;
              var prevR;
              var i = 0;
              var r;
              var x;

              while (u.cmpn(0) !== 0) {
                var q = v.div(u);
                r = v.sub(q.mul(u));
                x = x2.sub(q.mul(x1));
                var y = y2.sub(q.mul(y1));

                if (!a1 && r.cmp(aprxSqrt) < 0) {
                  a0 = prevR.neg();
                  b0 = x1;
                  a1 = r.neg();
                  b1 = x;
                } else if (a1 && ++i === 2) {
                  break;
                }

                prevR = r;
                v = u;
                u = r;
                x2 = x1;
                x1 = x;
                y2 = y1;
                y1 = y;
              }

              a2 = r.neg();
              b2 = x;
              var len1 = a1.sqr().add(b1.sqr());
              var len2 = a2.sqr().add(b2.sqr());

              if (len2.cmp(len1) >= 0) {
                a2 = a0;
                b2 = b0;
              } // Normalize signs


              if (a1.negative) {
                a1 = a1.neg();
                b1 = b1.neg();
              }

              if (a2.negative) {
                a2 = a2.neg();
                b2 = b2.neg();
              }

              return [{
                a: a1,
                b: b1
              }, {
                a: a2,
                b: b2
              }];
            };

            ShortCurve.prototype._endoSplit = function _endoSplit(k) {
              var basis = this.endo.basis;
              var v1 = basis[0];
              var v2 = basis[1];
              var c1 = v2.b.mul(k).divRound(this.n);
              var c2 = v1.b.neg().mul(k).divRound(this.n);
              var p1 = c1.mul(v1.a);
              var p2 = c2.mul(v2.a);
              var q1 = c1.mul(v1.b);
              var q2 = c2.mul(v2.b); // Calculate answer

              var k1 = k.sub(p1).sub(p2);
              var k2 = q1.add(q2).neg();
              return {
                k1: k1,
                k2: k2
              };
            };

            ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
              x = new BN$8(x, 16);
              if (!x.red) x = x.toRed(this.red);
              var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
              var y = y2.redSqrt();
              if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point'); // XXX Is there any way to tell if the number is odd without converting it
              // to non-red form?

              var isOdd = y.fromRed().isOdd();
              if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
              return this.point(x, y);
            };

            ShortCurve.prototype.validate = function validate(point) {
              if (point.inf) return true;
              var x = point.x;
              var y = point.y;
              var ax = this.a.redMul(x);
              var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
              return y.redSqr().redISub(rhs).cmpn(0) === 0;
            };

            ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
              var npoints = this._endoWnafT1;
              var ncoeffs = this._endoWnafT2;

              for (var i = 0; i < points.length; i++) {
                var split = this._endoSplit(coeffs[i]);

                var p = points[i];

                var beta = p._getBeta();

                if (split.k1.negative) {
                  split.k1.ineg();
                  p = p.neg(true);
                }

                if (split.k2.negative) {
                  split.k2.ineg();
                  beta = beta.neg(true);
                }

                npoints[i * 2] = p;
                npoints[i * 2 + 1] = beta;
                ncoeffs[i * 2] = split.k1;
                ncoeffs[i * 2 + 1] = split.k2;
              }

              var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult); // Clean-up references to points and coefficients


              for (var j = 0; j < i * 2; j++) {
                npoints[j] = null;
                ncoeffs[j] = null;
              }

              return res;
            };

            function Point$2(curve, x, y, isRed) {
              Base$5.BasePoint.call(this, curve, 'affine');

              if (x === null && y === null) {
                this.x = null;
                this.y = null;
                this.inf = true;
              } else {
                this.x = new BN$8(x, 16);
                this.y = new BN$8(y, 16); // Force redgomery representation when loading from JSON

                if (isRed) {
                  this.x.forceRed(this.curve.red);
                  this.y.forceRed(this.curve.red);
                }

                if (!this.x.red) this.x = this.x.toRed(this.curve.red);
                if (!this.y.red) this.y = this.y.toRed(this.curve.red);
                this.inf = false;
              }
            }

            inherits$i(Point$2, Base$5.BasePoint);

            ShortCurve.prototype.point = function point(x, y, isRed) {
              return new Point$2(this, x, y, isRed);
            };

            ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
              return Point$2.fromJSON(this, obj, red);
            };

            Point$2.prototype._getBeta = function _getBeta() {
              if (!this.curve.endo) return;
              var pre = this.precomputed;
              if (pre && pre.beta) return pre.beta;
              var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);

              if (pre) {
                var curve = this.curve;

                var endoMul = function endoMul(p) {
                  return curve.point(p.x.redMul(curve.endo.beta), p.y);
                };

                pre.beta = beta;
                beta.precomputed = {
                  beta: null,
                  naf: pre.naf && {
                    wnd: pre.naf.wnd,
                    points: pre.naf.points.map(endoMul)
                  },
                  doubles: pre.doubles && {
                    step: pre.doubles.step,
                    points: pre.doubles.points.map(endoMul)
                  }
                };
              }

              return beta;
            };

            Point$2.prototype.toJSON = function toJSON() {
              if (!this.precomputed) return [this.x, this.y];
              return [this.x, this.y, this.precomputed && {
                doubles: this.precomputed.doubles && {
                  step: this.precomputed.doubles.step,
                  points: this.precomputed.doubles.points.slice(1)
                },
                naf: this.precomputed.naf && {
                  wnd: this.precomputed.naf.wnd,
                  points: this.precomputed.naf.points.slice(1)
                }
              }];
            };

            Point$2.fromJSON = function fromJSON(curve, obj, red) {
              if (typeof obj === 'string') obj = JSON.parse(obj);
              var res = curve.point(obj[0], obj[1], red);
              if (!obj[2]) return res;

              function obj2point(obj) {
                return curve.point(obj[0], obj[1], red);
              }

              var pre = obj[2];
              res.precomputed = {
                beta: null,
                doubles: pre.doubles && {
                  step: pre.doubles.step,
                  points: [res].concat(pre.doubles.points.map(obj2point))
                },
                naf: pre.naf && {
                  wnd: pre.naf.wnd,
                  points: [res].concat(pre.naf.points.map(obj2point))
                }
              };
              return res;
            };

            Point$2.prototype.inspect = function inspect() {
              if (this.isInfinity()) return '<EC Point Infinity>';
              return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + '>';
            };

            Point$2.prototype.isInfinity = function isInfinity() {
              return this.inf;
            };

            Point$2.prototype.add = function add(p) {
              // O + P = P
              if (this.inf) return p; // P + O = P

              if (p.inf) return this; // P + P = 2P

              if (this.eq(p)) return this.dbl(); // P + (-P) = O

              if (this.neg().eq(p)) return this.curve.point(null, null); // P + Q = O

              if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);
              var c = this.y.redSub(p.y);
              if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
              var nx = c.redSqr().redISub(this.x).redISub(p.x);
              var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
              return this.curve.point(nx, ny);
            };

            Point$2.prototype.dbl = function dbl() {
              if (this.inf) return this; // 2P = O

              var ys1 = this.y.redAdd(this.y);
              if (ys1.cmpn(0) === 0) return this.curve.point(null, null);
              var a = this.curve.a;
              var x2 = this.x.redSqr();
              var dyinv = ys1.redInvm();
              var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
              var nx = c.redSqr().redISub(this.x.redAdd(this.x));
              var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
              return this.curve.point(nx, ny);
            };

            Point$2.prototype.getX = function getX() {
              return this.x.fromRed();
            };

            Point$2.prototype.getY = function getY() {
              return this.y.fromRed();
            };

            Point$2.prototype.mul = function mul(k) {
              k = new BN$8(k, 16);
              if (this.isInfinity()) return this;else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);else if (this.curve.endo) return this.curve._endoWnafMulAdd([this], [k]);else return this.curve._wnafMul(this, k);
            };

            Point$2.prototype.mulAdd = function mulAdd(k1, p2, k2) {
              var points = [this, p2];
              var coeffs = [k1, k2];
              if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);else return this.curve._wnafMulAdd(1, points, coeffs, 2);
            };

            Point$2.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
              var points = [this, p2];
              var coeffs = [k1, k2];
              if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
            };

            Point$2.prototype.eq = function eq(p) {
              return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
            };

            Point$2.prototype.neg = function neg(_precompute) {
              if (this.inf) return this;
              var res = this.curve.point(this.x, this.y.redNeg());

              if (_precompute && this.precomputed) {
                var pre = this.precomputed;

                var negate = function negate(p) {
                  return p.neg();
                };

                res.precomputed = {
                  naf: pre.naf && {
                    wnd: pre.naf.wnd,
                    points: pre.naf.points.map(negate)
                  },
                  doubles: pre.doubles && {
                    step: pre.doubles.step,
                    points: pre.doubles.points.map(negate)
                  }
                };
              }

              return res;
            };

            Point$2.prototype.toJ = function toJ() {
              if (this.inf) return this.curve.jpoint(null, null, null);
              var res = this.curve.jpoint(this.x, this.y, this.curve.one);
              return res;
            };

            function JPoint(curve, x, y, z) {
              Base$5.BasePoint.call(this, curve, 'jacobian');

              if (x === null && y === null && z === null) {
                this.x = this.curve.one;
                this.y = this.curve.one;
                this.z = new BN$8(0);
              } else {
                this.x = new BN$8(x, 16);
                this.y = new BN$8(y, 16);
                this.z = new BN$8(z, 16);
              }

              if (!this.x.red) this.x = this.x.toRed(this.curve.red);
              if (!this.y.red) this.y = this.y.toRed(this.curve.red);
              if (!this.z.red) this.z = this.z.toRed(this.curve.red);
              this.zOne = this.z === this.curve.one;
            }

            inherits$i(JPoint, Base$5.BasePoint);

            ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
              return new JPoint(this, x, y, z);
            };

            JPoint.prototype.toP = function toP() {
              if (this.isInfinity()) return this.curve.point(null, null);
              var zinv = this.z.redInvm();
              var zinv2 = zinv.redSqr();
              var ax = this.x.redMul(zinv2);
              var ay = this.y.redMul(zinv2).redMul(zinv);
              return this.curve.point(ax, ay);
            };

            JPoint.prototype.neg = function neg() {
              return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
            };

            JPoint.prototype.add = function add(p) {
              // O + P = P
              if (this.isInfinity()) return p; // P + O = P

              if (p.isInfinity()) return this; // 12M + 4S + 7A

              var pz2 = p.z.redSqr();
              var z2 = this.z.redSqr();
              var u1 = this.x.redMul(pz2);
              var u2 = p.x.redMul(z2);
              var s1 = this.y.redMul(pz2.redMul(p.z));
              var s2 = p.y.redMul(z2.redMul(this.z));
              var h = u1.redSub(u2);
              var r = s1.redSub(s2);

              if (h.cmpn(0) === 0) {
                if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();
              }

              var h2 = h.redSqr();
              var h3 = h2.redMul(h);
              var v = u1.redMul(h2);
              var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
              var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
              var nz = this.z.redMul(p.z).redMul(h);
              return this.curve.jpoint(nx, ny, nz);
            };

            JPoint.prototype.mixedAdd = function mixedAdd(p) {
              // O + P = P
              if (this.isInfinity()) return p.toJ(); // P + O = P

              if (p.isInfinity()) return this; // 8M + 3S + 7A

              var z2 = this.z.redSqr();
              var u1 = this.x;
              var u2 = p.x.redMul(z2);
              var s1 = this.y;
              var s2 = p.y.redMul(z2).redMul(this.z);
              var h = u1.redSub(u2);
              var r = s1.redSub(s2);

              if (h.cmpn(0) === 0) {
                if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();
              }

              var h2 = h.redSqr();
              var h3 = h2.redMul(h);
              var v = u1.redMul(h2);
              var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
              var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
              var nz = this.z.redMul(h);
              return this.curve.jpoint(nx, ny, nz);
            };

            JPoint.prototype.dblp = function dblp(pow) {
              if (pow === 0) return this;
              if (this.isInfinity()) return this;
              if (!pow) return this.dbl();

              if (this.curve.zeroA || this.curve.threeA) {
                var r = this;

                for (var i = 0; i < pow; i++) {
                  r = r.dbl();
                }

                return r;
              } // 1M + 2S + 1A + N * (4S + 5M + 8A)
              // N = 1 => 6M + 6S + 9A


              var a = this.curve.a;
              var tinv = this.curve.tinv;
              var jx = this.x;
              var jy = this.y;
              var jz = this.z;
              var jz4 = jz.redSqr().redSqr(); // Reuse results

              var jyd = jy.redAdd(jy);

              for (var i = 0; i < pow; i++) {
                var jx2 = jx.redSqr();
                var jyd2 = jyd.redSqr();
                var jyd4 = jyd2.redSqr();
                var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
                var t1 = jx.redMul(jyd2);
                var nx = c.redSqr().redISub(t1.redAdd(t1));
                var t2 = t1.redISub(nx);
                var dny = c.redMul(t2);
                dny = dny.redIAdd(dny).redISub(jyd4);
                var nz = jyd.redMul(jz);
                if (i + 1 < pow) jz4 = jz4.redMul(jyd4);
                jx = nx;
                jz = nz;
                jyd = dny;
              }

              return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
            };

            JPoint.prototype.dbl = function dbl() {
              if (this.isInfinity()) return this;
              if (this.curve.zeroA) return this._zeroDbl();else if (this.curve.threeA) return this._threeDbl();else return this._dbl();
            };

            JPoint.prototype._zeroDbl = function _zeroDbl() {
              var nx;
              var ny;
              var nz; // Z = 1

              if (this.zOne) {
                // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
                //     #doubling-mdbl-2007-bl
                // 1M + 5S + 14A
                // XX = X1^2
                var xx = this.x.redSqr(); // YY = Y1^2

                var yy = this.y.redSqr(); // YYYY = YY^2

                var yyyy = yy.redSqr(); // S = 2 * ((X1 + YY)^2 - XX - YYYY)

                var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
                s = s.redIAdd(s); // M = 3 * XX + a; a = 0

                var m = xx.redAdd(xx).redIAdd(xx); // T = M ^ 2 - 2*S

                var t = m.redSqr().redISub(s).redISub(s); // 8 * YYYY

                var yyyy8 = yyyy.redIAdd(yyyy);
                yyyy8 = yyyy8.redIAdd(yyyy8);
                yyyy8 = yyyy8.redIAdd(yyyy8); // X3 = T

                nx = t; // Y3 = M * (S - T) - 8 * YYYY

                ny = m.redMul(s.redISub(t)).redISub(yyyy8); // Z3 = 2*Y1

                nz = this.y.redAdd(this.y);
              } else {
                // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
                //     #doubling-dbl-2009-l
                // 2M + 5S + 13A
                // A = X1^2
                var a = this.x.redSqr(); // B = Y1^2

                var b = this.y.redSqr(); // C = B^2

                var c = b.redSqr(); // D = 2 * ((X1 + B)^2 - A - C)

                var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
                d = d.redIAdd(d); // E = 3 * A

                var e = a.redAdd(a).redIAdd(a); // F = E^2

                var f = e.redSqr(); // 8 * C

                var c8 = c.redIAdd(c);
                c8 = c8.redIAdd(c8);
                c8 = c8.redIAdd(c8); // X3 = F - 2 * D

                nx = f.redISub(d).redISub(d); // Y3 = E * (D - X3) - 8 * C

                ny = e.redMul(d.redISub(nx)).redISub(c8); // Z3 = 2 * Y1 * Z1

                nz = this.y.redMul(this.z);
                nz = nz.redIAdd(nz);
              }

              return this.curve.jpoint(nx, ny, nz);
            };

            JPoint.prototype._threeDbl = function _threeDbl() {
              var nx;
              var ny;
              var nz; // Z = 1

              if (this.zOne) {
                // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
                //     #doubling-mdbl-2007-bl
                // 1M + 5S + 15A
                // XX = X1^2
                var xx = this.x.redSqr(); // YY = Y1^2

                var yy = this.y.redSqr(); // YYYY = YY^2

                var yyyy = yy.redSqr(); // S = 2 * ((X1 + YY)^2 - XX - YYYY)

                var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
                s = s.redIAdd(s); // M = 3 * XX + a

                var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a); // T = M^2 - 2 * S

                var t = m.redSqr().redISub(s).redISub(s); // X3 = T

                nx = t; // Y3 = M * (S - T) - 8 * YYYY

                var yyyy8 = yyyy.redIAdd(yyyy);
                yyyy8 = yyyy8.redIAdd(yyyy8);
                yyyy8 = yyyy8.redIAdd(yyyy8);
                ny = m.redMul(s.redISub(t)).redISub(yyyy8); // Z3 = 2 * Y1

                nz = this.y.redAdd(this.y);
              } else {
                // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
                // 3M + 5S
                // delta = Z1^2
                var delta = this.z.redSqr(); // gamma = Y1^2

                var gamma = this.y.redSqr(); // beta = X1 * gamma

                var beta = this.x.redMul(gamma); // alpha = 3 * (X1 - delta) * (X1 + delta)

                var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
                alpha = alpha.redAdd(alpha).redIAdd(alpha); // X3 = alpha^2 - 8 * beta

                var beta4 = beta.redIAdd(beta);
                beta4 = beta4.redIAdd(beta4);
                var beta8 = beta4.redAdd(beta4);
                nx = alpha.redSqr().redISub(beta8); // Z3 = (Y1 + Z1)^2 - gamma - delta

                nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta); // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2

                var ggamma8 = gamma.redSqr();
                ggamma8 = ggamma8.redIAdd(ggamma8);
                ggamma8 = ggamma8.redIAdd(ggamma8);
                ggamma8 = ggamma8.redIAdd(ggamma8);
                ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
              }

              return this.curve.jpoint(nx, ny, nz);
            };

            JPoint.prototype._dbl = function _dbl() {
              var a = this.curve.a; // 4M + 6S + 10A

              var jx = this.x;
              var jy = this.y;
              var jz = this.z;
              var jz4 = jz.redSqr().redSqr();
              var jx2 = jx.redSqr();
              var jy2 = jy.redSqr();
              var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
              var jxd4 = jx.redAdd(jx);
              jxd4 = jxd4.redIAdd(jxd4);
              var t1 = jxd4.redMul(jy2);
              var nx = c.redSqr().redISub(t1.redAdd(t1));
              var t2 = t1.redISub(nx);
              var jyd8 = jy2.redSqr();
              jyd8 = jyd8.redIAdd(jyd8);
              jyd8 = jyd8.redIAdd(jyd8);
              jyd8 = jyd8.redIAdd(jyd8);
              var ny = c.redMul(t2).redISub(jyd8);
              var nz = jy.redAdd(jy).redMul(jz);
              return this.curve.jpoint(nx, ny, nz);
            };

            JPoint.prototype.trpl = function trpl() {
              if (!this.curve.zeroA) return this.dbl().add(this); // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
              // 5M + 10S + ...
              // XX = X1^2

              var xx = this.x.redSqr(); // YY = Y1^2

              var yy = this.y.redSqr(); // ZZ = Z1^2

              var zz = this.z.redSqr(); // YYYY = YY^2

              var yyyy = yy.redSqr(); // M = 3 * XX + a * ZZ2; a = 0

              var m = xx.redAdd(xx).redIAdd(xx); // MM = M^2

              var mm = m.redSqr(); // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM

              var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
              e = e.redIAdd(e);
              e = e.redAdd(e).redIAdd(e);
              e = e.redISub(mm); // EE = E^2

              var ee = e.redSqr(); // T = 16*YYYY

              var t = yyyy.redIAdd(yyyy);
              t = t.redIAdd(t);
              t = t.redIAdd(t);
              t = t.redIAdd(t); // U = (M + E)^2 - MM - EE - T

              var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t); // X3 = 4 * (X1 * EE - 4 * YY * U)

              var yyu4 = yy.redMul(u);
              yyu4 = yyu4.redIAdd(yyu4);
              yyu4 = yyu4.redIAdd(yyu4);
              var nx = this.x.redMul(ee).redISub(yyu4);
              nx = nx.redIAdd(nx);
              nx = nx.redIAdd(nx); // Y3 = 8 * Y1 * (U * (T - U) - E * EE)

              var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
              ny = ny.redIAdd(ny);
              ny = ny.redIAdd(ny);
              ny = ny.redIAdd(ny); // Z3 = (Z1 + E)^2 - ZZ - EE

              var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
              return this.curve.jpoint(nx, ny, nz);
            };

            JPoint.prototype.mul = function mul(k, kbase) {
              k = new BN$8(k, kbase);
              return this.curve._wnafMul(this, k);
            };

            JPoint.prototype.eq = function eq(p) {
              if (p.type === 'affine') return this.eq(p.toJ());
              if (this === p) return true; // x1 * z2^2 == x2 * z1^2

              var z2 = this.z.redSqr();
              var pz2 = p.z.redSqr();
              if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false; // y1 * z2^3 == y2 * z1^3

              var z3 = z2.redMul(this.z);
              var pz3 = pz2.redMul(p.z);
              return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
            };

            JPoint.prototype.eqXToP = function eqXToP(x) {
              var zs = this.z.redSqr();
              var rx = x.toRed(this.curve.red).redMul(zs);
              if (this.x.cmp(rx) === 0) return true;
              var xc = x.clone();
              var t = this.curve.redN.redMul(zs);

              for (;;) {
                xc.iadd(this.curve.n);
                if (xc.cmp(this.curve.p) >= 0) return false;
                rx.redIAdd(t);
                if (this.x.cmp(rx) === 0) return true;
              }
            };

            JPoint.prototype.inspect = function inspect() {
              if (this.isInfinity()) return '<EC JPoint Infinity>';
              return '<EC JPoint x: ' + this.x.toString(16, 2) + ' y: ' + this.y.toString(16, 2) + ' z: ' + this.z.toString(16, 2) + '>';
            };

            JPoint.prototype.isInfinity = function isInfinity() {
              // XXX This code assumes that zero is always zero in red
              return this.z.cmpn(0) === 0;
            };

            var BN$7 = bn$1.exports;
            var inherits$h = inherits_browser.exports;
            var Base$4 = base$2;
            var utils$z = utils$D;

            function MontCurve(conf) {
              Base$4.call(this, 'mont', conf);
              this.a = new BN$7(conf.a, 16).toRed(this.red);
              this.b = new BN$7(conf.b, 16).toRed(this.red);
              this.i4 = new BN$7(4).toRed(this.red).redInvm();
              this.two = new BN$7(2).toRed(this.red);
              this.a24 = this.i4.redMul(this.a.redAdd(this.two));
            }

            inherits$h(MontCurve, Base$4);
            var mont = MontCurve;

            MontCurve.prototype.validate = function validate(point) {
              var x = point.normalize().x;
              var x2 = x.redSqr();
              var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
              var y = rhs.redSqrt();
              return y.redSqr().cmp(rhs) === 0;
            };

            function Point$1(curve, x, z) {
              Base$4.BasePoint.call(this, curve, 'projective');

              if (x === null && z === null) {
                this.x = this.curve.one;
                this.z = this.curve.zero;
              } else {
                this.x = new BN$7(x, 16);
                this.z = new BN$7(z, 16);
                if (!this.x.red) this.x = this.x.toRed(this.curve.red);
                if (!this.z.red) this.z = this.z.toRed(this.curve.red);
              }
            }

            inherits$h(Point$1, Base$4.BasePoint);

            MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
              return this.point(utils$z.toArray(bytes, enc), 1);
            };

            MontCurve.prototype.point = function point(x, z) {
              return new Point$1(this, x, z);
            };

            MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
              return Point$1.fromJSON(this, obj);
            };

            Point$1.prototype.precompute = function precompute() {// No-op
            };

            Point$1.prototype._encode = function _encode() {
              return this.getX().toArray('be', this.curve.p.byteLength());
            };

            Point$1.fromJSON = function fromJSON(curve, obj) {
              return new Point$1(curve, obj[0], obj[1] || curve.one);
            };

            Point$1.prototype.inspect = function inspect() {
              if (this.isInfinity()) return '<EC Point Infinity>';
              return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
            };

            Point$1.prototype.isInfinity = function isInfinity() {
              // XXX This code assumes that zero is always zero in red
              return this.z.cmpn(0) === 0;
            };

            Point$1.prototype.dbl = function dbl() {
              // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
              // 2M + 2S + 4A
              // A = X1 + Z1
              var a = this.x.redAdd(this.z); // AA = A^2

              var aa = a.redSqr(); // B = X1 - Z1

              var b = this.x.redSub(this.z); // BB = B^2

              var bb = b.redSqr(); // C = AA - BB

              var c = aa.redSub(bb); // X3 = AA * BB

              var nx = aa.redMul(bb); // Z3 = C * (BB + A24 * C)

              var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
              return this.curve.point(nx, nz);
            };

            Point$1.prototype.add = function add() {
              throw new Error('Not supported on Montgomery curve');
            };

            Point$1.prototype.diffAdd = function diffAdd(p, diff) {
              // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
              // 4M + 2S + 6A
              // A = X2 + Z2
              var a = this.x.redAdd(this.z); // B = X2 - Z2

              var b = this.x.redSub(this.z); // C = X3 + Z3

              var c = p.x.redAdd(p.z); // D = X3 - Z3

              var d = p.x.redSub(p.z); // DA = D * A

              var da = d.redMul(a); // CB = C * B

              var cb = c.redMul(b); // X5 = Z1 * (DA + CB)^2

              var nx = diff.z.redMul(da.redAdd(cb).redSqr()); // Z5 = X1 * (DA - CB)^2

              var nz = diff.x.redMul(da.redISub(cb).redSqr());
              return this.curve.point(nx, nz);
            };

            Point$1.prototype.mul = function mul(k) {
              var t = k.clone();
              var a = this; // (N / 2) * Q + Q

              var b = this.curve.point(null, null); // (N / 2) * Q

              var c = this; // Q

              for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1)) {
                bits.push(t.andln(1));
              }

              for (var i = bits.length - 1; i >= 0; i--) {
                if (bits[i] === 0) {
                  // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
                  a = a.diffAdd(b, c); // N * Q = 2 * ((N / 2) * Q + Q))

                  b = b.dbl();
                } else {
                  // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
                  b = a.diffAdd(b, c); // N * Q + Q = 2 * ((N / 2) * Q + Q)

                  a = a.dbl();
                }
              }

              return b;
            };

            Point$1.prototype.mulAdd = function mulAdd() {
              throw new Error('Not supported on Montgomery curve');
            };

            Point$1.prototype.jumlAdd = function jumlAdd() {
              throw new Error('Not supported on Montgomery curve');
            };

            Point$1.prototype.eq = function eq(other) {
              return this.getX().cmp(other.getX()) === 0;
            };

            Point$1.prototype.normalize = function normalize() {
              this.x = this.x.redMul(this.z.redInvm());
              this.z = this.curve.one;
              return this;
            };

            Point$1.prototype.getX = function getX() {
              // Normalize coordinates
              this.normalize();
              return this.x.fromRed();
            };

            var utils$y = utils$D;
            var BN$6 = bn$1.exports;
            var inherits$g = inherits_browser.exports;
            var Base$3 = base$2;
            var assert$g = utils$y.assert;

            function EdwardsCurve(conf) {
              // NOTE: Important as we are creating point in Base.call()
              this.twisted = (conf.a | 0) !== 1;
              this.mOneA = this.twisted && (conf.a | 0) === -1;
              this.extended = this.mOneA;
              Base$3.call(this, 'edwards', conf);
              this.a = new BN$6(conf.a, 16).umod(this.red.m);
              this.a = this.a.toRed(this.red);
              this.c = new BN$6(conf.c, 16).toRed(this.red);
              this.c2 = this.c.redSqr();
              this.d = new BN$6(conf.d, 16).toRed(this.red);
              this.dd = this.d.redAdd(this.d);
              assert$g(!this.twisted || this.c.fromRed().cmpn(1) === 0);
              this.oneC = (conf.c | 0) === 1;
            }

            inherits$g(EdwardsCurve, Base$3);
            var edwards = EdwardsCurve;

            EdwardsCurve.prototype._mulA = function _mulA(num) {
              if (this.mOneA) return num.redNeg();else return this.a.redMul(num);
            };

            EdwardsCurve.prototype._mulC = function _mulC(num) {
              if (this.oneC) return num;else return this.c.redMul(num);
            }; // Just for compatibility with Short curve


            EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
              return this.point(x, y, z, t);
            };

            EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
              x = new BN$6(x, 16);
              if (!x.red) x = x.toRed(this.red);
              var x2 = x.redSqr();
              var rhs = this.c2.redSub(this.a.redMul(x2));
              var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
              var y2 = rhs.redMul(lhs.redInvm());
              var y = y2.redSqrt();
              if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');
              var isOdd = y.fromRed().isOdd();
              if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
              return this.point(x, y);
            };

            EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
              y = new BN$6(y, 16);
              if (!y.red) y = y.toRed(this.red); // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)

              var y2 = y.redSqr();
              var lhs = y2.redSub(this.c2);
              var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
              var x2 = lhs.redMul(rhs.redInvm());

              if (x2.cmp(this.zero) === 0) {
                if (odd) throw new Error('invalid point');else return this.point(this.zero, y);
              }

              var x = x2.redSqrt();
              if (x.redSqr().redSub(x2).cmp(this.zero) !== 0) throw new Error('invalid point');
              if (x.fromRed().isOdd() !== odd) x = x.redNeg();
              return this.point(x, y);
            };

            EdwardsCurve.prototype.validate = function validate(point) {
              if (point.isInfinity()) return true; // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)

              point.normalize();
              var x2 = point.x.redSqr();
              var y2 = point.y.redSqr();
              var lhs = x2.redMul(this.a).redAdd(y2);
              var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
              return lhs.cmp(rhs) === 0;
            };

            function Point(curve, x, y, z, t) {
              Base$3.BasePoint.call(this, curve, 'projective');

              if (x === null && y === null && z === null) {
                this.x = this.curve.zero;
                this.y = this.curve.one;
                this.z = this.curve.one;
                this.t = this.curve.zero;
                this.zOne = true;
              } else {
                this.x = new BN$6(x, 16);
                this.y = new BN$6(y, 16);
                this.z = z ? new BN$6(z, 16) : this.curve.one;
                this.t = t && new BN$6(t, 16);
                if (!this.x.red) this.x = this.x.toRed(this.curve.red);
                if (!this.y.red) this.y = this.y.toRed(this.curve.red);
                if (!this.z.red) this.z = this.z.toRed(this.curve.red);
                if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);
                this.zOne = this.z === this.curve.one; // Use extended coordinates

                if (this.curve.extended && !this.t) {
                  this.t = this.x.redMul(this.y);
                  if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());
                }
              }
            }

            inherits$g(Point, Base$3.BasePoint);

            EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
              return Point.fromJSON(this, obj);
            };

            EdwardsCurve.prototype.point = function point(x, y, z, t) {
              return new Point(this, x, y, z, t);
            };

            Point.fromJSON = function fromJSON(curve, obj) {
              return new Point(curve, obj[0], obj[1], obj[2]);
            };

            Point.prototype.inspect = function inspect() {
              if (this.isInfinity()) return '<EC Point Infinity>';
              return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
            };

            Point.prototype.isInfinity = function isInfinity() {
              // XXX This code assumes that zero is always zero in red
              return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
            };

            Point.prototype._extDbl = function _extDbl() {
              // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
              //     #doubling-dbl-2008-hwcd
              // 4M + 4S
              // A = X1^2
              var a = this.x.redSqr(); // B = Y1^2

              var b = this.y.redSqr(); // C = 2 * Z1^2

              var c = this.z.redSqr();
              c = c.redIAdd(c); // D = a * A

              var d = this.curve._mulA(a); // E = (X1 + Y1)^2 - A - B


              var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b); // G = D + B

              var g = d.redAdd(b); // F = G - C

              var f = g.redSub(c); // H = D - B

              var h = d.redSub(b); // X3 = E * F

              var nx = e.redMul(f); // Y3 = G * H

              var ny = g.redMul(h); // T3 = E * H

              var nt = e.redMul(h); // Z3 = F * G

              var nz = f.redMul(g);
              return this.curve.point(nx, ny, nz, nt);
            };

            Point.prototype._projDbl = function _projDbl() {
              // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
              //     #doubling-dbl-2008-bbjlp
              //     #doubling-dbl-2007-bl
              // and others
              // Generally 3M + 4S or 2M + 4S
              // B = (X1 + Y1)^2
              var b = this.x.redAdd(this.y).redSqr(); // C = X1^2

              var c = this.x.redSqr(); // D = Y1^2

              var d = this.y.redSqr();
              var nx;
              var ny;
              var nz;

              if (this.curve.twisted) {
                // E = a * C
                var e = this.curve._mulA(c); // F = E + D


                var f = e.redAdd(d);

                if (this.zOne) {
                  // X3 = (B - C - D) * (F - 2)
                  nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two)); // Y3 = F * (E - D)

                  ny = f.redMul(e.redSub(d)); // Z3 = F^2 - 2 * F

                  nz = f.redSqr().redSub(f).redSub(f);
                } else {
                  // H = Z1^2
                  var h = this.z.redSqr(); // J = F - 2 * H

                  var j = f.redSub(h).redISub(h); // X3 = (B-C-D)*J

                  nx = b.redSub(c).redISub(d).redMul(j); // Y3 = F * (E - D)

                  ny = f.redMul(e.redSub(d)); // Z3 = F * J

                  nz = f.redMul(j);
                }
              } else {
                // E = C + D
                var e = c.redAdd(d); // H = (c * Z1)^2

                var h = this.curve._mulC(this.z).redSqr(); // J = E - 2 * H


                var j = e.redSub(h).redSub(h); // X3 = c * (B - E) * J

                nx = this.curve._mulC(b.redISub(e)).redMul(j); // Y3 = c * E * (C - D)

                ny = this.curve._mulC(e).redMul(c.redISub(d)); // Z3 = E * J

                nz = e.redMul(j);
              }

              return this.curve.point(nx, ny, nz);
            };

            Point.prototype.dbl = function dbl() {
              if (this.isInfinity()) return this; // Double in extended coordinates

              if (this.curve.extended) return this._extDbl();else return this._projDbl();
            };

            Point.prototype._extAdd = function _extAdd(p) {
              // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
              //     #addition-add-2008-hwcd-3
              // 8M
              // A = (Y1 - X1) * (Y2 - X2)
              var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x)); // B = (Y1 + X1) * (Y2 + X2)

              var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x)); // C = T1 * k * T2

              var c = this.t.redMul(this.curve.dd).redMul(p.t); // D = Z1 * 2 * Z2

              var d = this.z.redMul(p.z.redAdd(p.z)); // E = B - A

              var e = b.redSub(a); // F = D - C

              var f = d.redSub(c); // G = D + C

              var g = d.redAdd(c); // H = B + A

              var h = b.redAdd(a); // X3 = E * F

              var nx = e.redMul(f); // Y3 = G * H

              var ny = g.redMul(h); // T3 = E * H

              var nt = e.redMul(h); // Z3 = F * G

              var nz = f.redMul(g);
              return this.curve.point(nx, ny, nz, nt);
            };

            Point.prototype._projAdd = function _projAdd(p) {
              // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
              //     #addition-add-2008-bbjlp
              //     #addition-add-2007-bl
              // 10M + 1S
              // A = Z1 * Z2
              var a = this.z.redMul(p.z); // B = A^2

              var b = a.redSqr(); // C = X1 * X2

              var c = this.x.redMul(p.x); // D = Y1 * Y2

              var d = this.y.redMul(p.y); // E = d * C * D

              var e = this.curve.d.redMul(c).redMul(d); // F = B - E

              var f = b.redSub(e); // G = B + E

              var g = b.redAdd(e); // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)

              var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
              var nx = a.redMul(f).redMul(tmp);
              var ny;
              var nz;

              if (this.curve.twisted) {
                // Y3 = A * G * (D - a * C)
                ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c))); // Z3 = F * G

                nz = f.redMul(g);
              } else {
                // Y3 = A * G * (D - C)
                ny = a.redMul(g).redMul(d.redSub(c)); // Z3 = c * F * G

                nz = this.curve._mulC(f).redMul(g);
              }

              return this.curve.point(nx, ny, nz);
            };

            Point.prototype.add = function add(p) {
              if (this.isInfinity()) return p;
              if (p.isInfinity()) return this;
              if (this.curve.extended) return this._extAdd(p);else return this._projAdd(p);
            };

            Point.prototype.mul = function mul(k) {
              if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);else return this.curve._wnafMul(this, k);
            };

            Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
              return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
            };

            Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
              return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
            };

            Point.prototype.normalize = function normalize() {
              if (this.zOne) return this; // Normalize coordinates

              var zi = this.z.redInvm();
              this.x = this.x.redMul(zi);
              this.y = this.y.redMul(zi);
              if (this.t) this.t = this.t.redMul(zi);
              this.z = this.curve.one;
              this.zOne = true;
              return this;
            };

            Point.prototype.neg = function neg() {
              return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
            };

            Point.prototype.getX = function getX() {
              this.normalize();
              return this.x.fromRed();
            };

            Point.prototype.getY = function getY() {
              this.normalize();
              return this.y.fromRed();
            };

            Point.prototype.eq = function eq(other) {
              return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
            };

            Point.prototype.eqXToP = function eqXToP(x) {
              var rx = x.toRed(this.curve.red).redMul(this.z);
              if (this.x.cmp(rx) === 0) return true;
              var xc = x.clone();
              var t = this.curve.redN.redMul(this.z);

              for (;;) {
                xc.iadd(this.curve.n);
                if (xc.cmp(this.curve.p) >= 0) return false;
                rx.redIAdd(t);
                if (this.x.cmp(rx) === 0) return true;
              }
            }; // Compatibility with BaseCurve


            Point.prototype.toP = Point.prototype.normalize;
            Point.prototype.mixedAdd = Point.prototype.add;

            (function (exports) {

              var curve = exports;
              curve.base = base$2;
              curve["short"] = _short;
              curve.mont = mont;
              curve.edwards = edwards;
            })(curve);

            var curves$2 = {};

            var hash$4 = {};

            var utils$x = {};

            var assert$f = minimalisticAssert;
            var inherits$f = inherits_browser.exports;
            utils$x.inherits = inherits$f;

            function isSurrogatePair(msg, i) {
              if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
                return false;
              }

              if (i < 0 || i + 1 >= msg.length) {
                return false;
              }

              return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
            }

            function toArray(msg, enc) {
              if (Array.isArray(msg)) return msg.slice();
              if (!msg) return [];
              var res = [];

              if (typeof msg === 'string') {
                if (!enc) {
                  // Inspired by stringToUtf8ByteArray() in closure-library by Google
                  // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
                  // Apache License 2.0
                  // https://github.com/google/closure-library/blob/master/LICENSE
                  var p = 0;

                  for (var i = 0; i < msg.length; i++) {
                    var c = msg.charCodeAt(i);

                    if (c < 128) {
                      res[p++] = c;
                    } else if (c < 2048) {
                      res[p++] = c >> 6 | 192;
                      res[p++] = c & 63 | 128;
                    } else if (isSurrogatePair(msg, i)) {
                      c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
                      res[p++] = c >> 18 | 240;
                      res[p++] = c >> 12 & 63 | 128;
                      res[p++] = c >> 6 & 63 | 128;
                      res[p++] = c & 63 | 128;
                    } else {
                      res[p++] = c >> 12 | 224;
                      res[p++] = c >> 6 & 63 | 128;
                      res[p++] = c & 63 | 128;
                    }
                  }
                } else if (enc === 'hex') {
                  msg = msg.replace(/[^a-z0-9]+/ig, '');
                  if (msg.length % 2 !== 0) msg = '0' + msg;

                  for (i = 0; i < msg.length; i += 2) {
                    res.push(parseInt(msg[i] + msg[i + 1], 16));
                  }
                }
              } else {
                for (i = 0; i < msg.length; i++) {
                  res[i] = msg[i] | 0;
                }
              }

              return res;
            }

            utils$x.toArray = toArray;

            function toHex(msg) {
              var res = '';

              for (var i = 0; i < msg.length; i++) {
                res += zero2(msg[i].toString(16));
              }

              return res;
            }

            utils$x.toHex = toHex;

            function htonl(w) {
              var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;
              return res >>> 0;
            }

            utils$x.htonl = htonl;

            function toHex32(msg, endian) {
              var res = '';

              for (var i = 0; i < msg.length; i++) {
                var w = msg[i];
                if (endian === 'little') w = htonl(w);
                res += zero8(w.toString(16));
              }

              return res;
            }

            utils$x.toHex32 = toHex32;

            function zero2(word) {
              if (word.length === 1) return '0' + word;else return word;
            }

            utils$x.zero2 = zero2;

            function zero8(word) {
              if (word.length === 7) return '0' + word;else if (word.length === 6) return '00' + word;else if (word.length === 5) return '000' + word;else if (word.length === 4) return '0000' + word;else if (word.length === 3) return '00000' + word;else if (word.length === 2) return '000000' + word;else if (word.length === 1) return '0000000' + word;else return word;
            }

            utils$x.zero8 = zero8;

            function join32(msg, start, end, endian) {
              var len = end - start;
              assert$f(len % 4 === 0);
              var res = new Array(len / 4);

              for (var i = 0, k = start; i < res.length; i++, k += 4) {
                var w;
                if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
                res[i] = w >>> 0;
              }

              return res;
            }

            utils$x.join32 = join32;

            function split32(msg, endian) {
              var res = new Array(msg.length * 4);

              for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
                var m = msg[i];

                if (endian === 'big') {
                  res[k] = m >>> 24;
                  res[k + 1] = m >>> 16 & 0xff;
                  res[k + 2] = m >>> 8 & 0xff;
                  res[k + 3] = m & 0xff;
                } else {
                  res[k + 3] = m >>> 24;
                  res[k + 2] = m >>> 16 & 0xff;
                  res[k + 1] = m >>> 8 & 0xff;
                  res[k] = m & 0xff;
                }
              }

              return res;
            }

            utils$x.split32 = split32;

            function rotr32$1(w, b) {
              return w >>> b | w << 32 - b;
            }

            utils$x.rotr32 = rotr32$1;

            function rotl32$2(w, b) {
              return w << b | w >>> 32 - b;
            }

            utils$x.rotl32 = rotl32$2;

            function sum32$3(a, b) {
              return a + b >>> 0;
            }

            utils$x.sum32 = sum32$3;

            function sum32_3$1(a, b, c) {
              return a + b + c >>> 0;
            }

            utils$x.sum32_3 = sum32_3$1;

            function sum32_4$2(a, b, c, d) {
              return a + b + c + d >>> 0;
            }

            utils$x.sum32_4 = sum32_4$2;

            function sum32_5$2(a, b, c, d, e) {
              return a + b + c + d + e >>> 0;
            }

            utils$x.sum32_5 = sum32_5$2;

            function sum64$1(buf, pos, ah, al) {
              var bh = buf[pos];
              var bl = buf[pos + 1];
              var lo = al + bl >>> 0;
              var hi = (lo < al ? 1 : 0) + ah + bh;
              buf[pos] = hi >>> 0;
              buf[pos + 1] = lo;
            }

            utils$x.sum64 = sum64$1;

            function sum64_hi$1(ah, al, bh, bl) {
              var lo = al + bl >>> 0;
              var hi = (lo < al ? 1 : 0) + ah + bh;
              return hi >>> 0;
            }

            utils$x.sum64_hi = sum64_hi$1;

            function sum64_lo$1(ah, al, bh, bl) {
              var lo = al + bl;
              return lo >>> 0;
            }

            utils$x.sum64_lo = sum64_lo$1;

            function sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {
              var carry = 0;
              var lo = al;
              lo = lo + bl >>> 0;
              carry += lo < al ? 1 : 0;
              lo = lo + cl >>> 0;
              carry += lo < cl ? 1 : 0;
              lo = lo + dl >>> 0;
              carry += lo < dl ? 1 : 0;
              var hi = ah + bh + ch + dh + carry;
              return hi >>> 0;
            }

            utils$x.sum64_4_hi = sum64_4_hi$1;

            function sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {
              var lo = al + bl + cl + dl;
              return lo >>> 0;
            }

            utils$x.sum64_4_lo = sum64_4_lo$1;

            function sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
              var carry = 0;
              var lo = al;
              lo = lo + bl >>> 0;
              carry += lo < al ? 1 : 0;
              lo = lo + cl >>> 0;
              carry += lo < cl ? 1 : 0;
              lo = lo + dl >>> 0;
              carry += lo < dl ? 1 : 0;
              lo = lo + el >>> 0;
              carry += lo < el ? 1 : 0;
              var hi = ah + bh + ch + dh + eh + carry;
              return hi >>> 0;
            }

            utils$x.sum64_5_hi = sum64_5_hi$1;

            function sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
              var lo = al + bl + cl + dl + el;
              return lo >>> 0;
            }

            utils$x.sum64_5_lo = sum64_5_lo$1;

            function rotr64_hi$1(ah, al, num) {
              var r = al << 32 - num | ah >>> num;
              return r >>> 0;
            }

            utils$x.rotr64_hi = rotr64_hi$1;

            function rotr64_lo$1(ah, al, num) {
              var r = ah << 32 - num | al >>> num;
              return r >>> 0;
            }

            utils$x.rotr64_lo = rotr64_lo$1;

            function shr64_hi$1(ah, al, num) {
              return ah >>> num;
            }

            utils$x.shr64_hi = shr64_hi$1;

            function shr64_lo$1(ah, al, num) {
              var r = ah << 32 - num | al >>> num;
              return r >>> 0;
            }

            utils$x.shr64_lo = shr64_lo$1;

            var common$5 = {};

            var utils$w = utils$x;
            var assert$e = minimalisticAssert;

            function BlockHash$4() {
              this.pending = null;
              this.pendingTotal = 0;
              this.blockSize = this.constructor.blockSize;
              this.outSize = this.constructor.outSize;
              this.hmacStrength = this.constructor.hmacStrength;
              this.padLength = this.constructor.padLength / 8;
              this.endian = 'big';
              this._delta8 = this.blockSize / 8;
              this._delta32 = this.blockSize / 32;
            }

            common$5.BlockHash = BlockHash$4;

            BlockHash$4.prototype.update = function update(msg, enc) {
              // Convert message to array, pad it, and join into 32bit blocks
              msg = utils$w.toArray(msg, enc);
              if (!this.pending) this.pending = msg;else this.pending = this.pending.concat(msg);
              this.pendingTotal += msg.length; // Enough data, try updating

              if (this.pending.length >= this._delta8) {
                msg = this.pending; // Process pending data in blocks

                var r = msg.length % this._delta8;
                this.pending = msg.slice(msg.length - r, msg.length);
                if (this.pending.length === 0) this.pending = null;
                msg = utils$w.join32(msg, 0, msg.length - r, this.endian);

                for (var i = 0; i < msg.length; i += this._delta32) {
                  this._update(msg, i, i + this._delta32);
                }
              }

              return this;
            };

            BlockHash$4.prototype.digest = function digest(enc) {
              this.update(this._pad());
              assert$e(this.pending === null);
              return this._digest(enc);
            };

            BlockHash$4.prototype._pad = function pad() {
              var len = this.pendingTotal;
              var bytes = this._delta8;
              var k = bytes - (len + this.padLength) % bytes;
              var res = new Array(k + this.padLength);
              res[0] = 0x80;

              for (var i = 1; i < k; i++) {
                res[i] = 0;
              } // Append length


              len <<= 3;

              if (this.endian === 'big') {
                for (var t = 8; t < this.padLength; t++) {
                  res[i++] = 0;
                }

                res[i++] = 0;
                res[i++] = 0;
                res[i++] = 0;
                res[i++] = 0;
                res[i++] = len >>> 24 & 0xff;
                res[i++] = len >>> 16 & 0xff;
                res[i++] = len >>> 8 & 0xff;
                res[i++] = len & 0xff;
              } else {
                res[i++] = len & 0xff;
                res[i++] = len >>> 8 & 0xff;
                res[i++] = len >>> 16 & 0xff;
                res[i++] = len >>> 24 & 0xff;
                res[i++] = 0;
                res[i++] = 0;
                res[i++] = 0;
                res[i++] = 0;

                for (t = 8; t < this.padLength; t++) {
                  res[i++] = 0;
                }
              }

              return res;
            };

            var sha$4 = {};

            var common$4 = {};

            var utils$v = utils$x;
            var rotr32 = utils$v.rotr32;

            function ft_1$1(s, x, y, z) {
              if (s === 0) return ch32$1(x, y, z);
              if (s === 1 || s === 3) return p32(x, y, z);
              if (s === 2) return maj32$1(x, y, z);
            }

            common$4.ft_1 = ft_1$1;

            function ch32$1(x, y, z) {
              return x & y ^ ~x & z;
            }

            common$4.ch32 = ch32$1;

            function maj32$1(x, y, z) {
              return x & y ^ x & z ^ y & z;
            }

            common$4.maj32 = maj32$1;

            function p32(x, y, z) {
              return x ^ y ^ z;
            }

            common$4.p32 = p32;

            function s0_256$1(x) {
              return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
            }

            common$4.s0_256 = s0_256$1;

            function s1_256$1(x) {
              return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
            }

            common$4.s1_256 = s1_256$1;

            function g0_256$1(x) {
              return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
            }

            common$4.g0_256 = g0_256$1;

            function g1_256$1(x) {
              return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
            }

            common$4.g1_256 = g1_256$1;

            var utils$u = utils$x;
            var common$3 = common$5;
            var shaCommon$1 = common$4;
            var rotl32$1 = utils$u.rotl32;
            var sum32$2 = utils$u.sum32;
            var sum32_5$1 = utils$u.sum32_5;
            var ft_1 = shaCommon$1.ft_1;
            var BlockHash$3 = common$3.BlockHash;
            var sha1_K = [0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6];

            function SHA1() {
              if (!(this instanceof SHA1)) return new SHA1();
              BlockHash$3.call(this);
              this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
              this.W = new Array(80);
            }

            utils$u.inherits(SHA1, BlockHash$3);
            var _1 = SHA1;
            SHA1.blockSize = 512;
            SHA1.outSize = 160;
            SHA1.hmacStrength = 80;
            SHA1.padLength = 64;

            SHA1.prototype._update = function _update(msg, start) {
              var W = this.W;

              for (var i = 0; i < 16; i++) {
                W[i] = msg[start + i];
              }

              for (; i < W.length; i++) {
                W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
              }

              var a = this.h[0];
              var b = this.h[1];
              var c = this.h[2];
              var d = this.h[3];
              var e = this.h[4];

              for (i = 0; i < W.length; i++) {
                var s = ~~(i / 20);
                var t = sum32_5$1(rotl32$1(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
                e = d;
                d = c;
                c = rotl32$1(b, 30);
                b = a;
                a = t;
              }

              this.h[0] = sum32$2(this.h[0], a);
              this.h[1] = sum32$2(this.h[1], b);
              this.h[2] = sum32$2(this.h[2], c);
              this.h[3] = sum32$2(this.h[3], d);
              this.h[4] = sum32$2(this.h[4], e);
            };

            SHA1.prototype._digest = function digest(enc) {
              if (enc === 'hex') return utils$u.toHex32(this.h, 'big');else return utils$u.split32(this.h, 'big');
            };

            var utils$t = utils$x;
            var common$2 = common$5;
            var shaCommon = common$4;
            var assert$d = minimalisticAssert;
            var sum32$1 = utils$t.sum32;
            var sum32_4$1 = utils$t.sum32_4;
            var sum32_5 = utils$t.sum32_5;
            var ch32 = shaCommon.ch32;
            var maj32 = shaCommon.maj32;
            var s0_256 = shaCommon.s0_256;
            var s1_256 = shaCommon.s1_256;
            var g0_256 = shaCommon.g0_256;
            var g1_256 = shaCommon.g1_256;
            var BlockHash$2 = common$2.BlockHash;
            var sha256_K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];

            function SHA256$1() {
              if (!(this instanceof SHA256$1)) return new SHA256$1();
              BlockHash$2.call(this);
              this.h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];
              this.k = sha256_K;
              this.W = new Array(64);
            }

            utils$t.inherits(SHA256$1, BlockHash$2);
            var _256 = SHA256$1;
            SHA256$1.blockSize = 512;
            SHA256$1.outSize = 256;
            SHA256$1.hmacStrength = 192;
            SHA256$1.padLength = 64;

            SHA256$1.prototype._update = function _update(msg, start) {
              var W = this.W;

              for (var i = 0; i < 16; i++) {
                W[i] = msg[start + i];
              }

              for (; i < W.length; i++) {
                W[i] = sum32_4$1(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
              }

              var a = this.h[0];
              var b = this.h[1];
              var c = this.h[2];
              var d = this.h[3];
              var e = this.h[4];
              var f = this.h[5];
              var g = this.h[6];
              var h = this.h[7];
              assert$d(this.k.length === W.length);

              for (i = 0; i < W.length; i++) {
                var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
                var T2 = sum32$1(s0_256(a), maj32(a, b, c));
                h = g;
                g = f;
                f = e;
                e = sum32$1(d, T1);
                d = c;
                c = b;
                b = a;
                a = sum32$1(T1, T2);
              }

              this.h[0] = sum32$1(this.h[0], a);
              this.h[1] = sum32$1(this.h[1], b);
              this.h[2] = sum32$1(this.h[2], c);
              this.h[3] = sum32$1(this.h[3], d);
              this.h[4] = sum32$1(this.h[4], e);
              this.h[5] = sum32$1(this.h[5], f);
              this.h[6] = sum32$1(this.h[6], g);
              this.h[7] = sum32$1(this.h[7], h);
            };

            SHA256$1.prototype._digest = function digest(enc) {
              if (enc === 'hex') return utils$t.toHex32(this.h, 'big');else return utils$t.split32(this.h, 'big');
            };

            var utils$s = utils$x;
            var SHA256 = _256;

            function SHA224() {
              if (!(this instanceof SHA224)) return new SHA224();
              SHA256.call(this);
              this.h = [0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];
            }

            utils$s.inherits(SHA224, SHA256);
            var _224 = SHA224;
            SHA224.blockSize = 512;
            SHA224.outSize = 224;
            SHA224.hmacStrength = 192;
            SHA224.padLength = 64;

            SHA224.prototype._digest = function digest(enc) {
              // Just truncate output
              if (enc === 'hex') return utils$s.toHex32(this.h.slice(0, 7), 'big');else return utils$s.split32(this.h.slice(0, 7), 'big');
            };

            var utils$r = utils$x;
            var common$1 = common$5;
            var assert$c = minimalisticAssert;
            var rotr64_hi = utils$r.rotr64_hi;
            var rotr64_lo = utils$r.rotr64_lo;
            var shr64_hi = utils$r.shr64_hi;
            var shr64_lo = utils$r.shr64_lo;
            var sum64 = utils$r.sum64;
            var sum64_hi = utils$r.sum64_hi;
            var sum64_lo = utils$r.sum64_lo;
            var sum64_4_hi = utils$r.sum64_4_hi;
            var sum64_4_lo = utils$r.sum64_4_lo;
            var sum64_5_hi = utils$r.sum64_5_hi;
            var sum64_5_lo = utils$r.sum64_5_lo;
            var BlockHash$1 = common$1.BlockHash;
            var sha512_K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];

            function SHA512$2() {
              if (!(this instanceof SHA512$2)) return new SHA512$2();
              BlockHash$1.call(this);
              this.h = [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1, 0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179];
              this.k = sha512_K;
              this.W = new Array(160);
            }

            utils$r.inherits(SHA512$2, BlockHash$1);
            var _512 = SHA512$2;
            SHA512$2.blockSize = 1024;
            SHA512$2.outSize = 512;
            SHA512$2.hmacStrength = 192;
            SHA512$2.padLength = 128;

            SHA512$2.prototype._prepareBlock = function _prepareBlock(msg, start) {
              var W = this.W; // 32 x 32bit words

              for (var i = 0; i < 32; i++) {
                W[i] = msg[start + i];
              }

              for (; i < W.length; i += 2) {
                var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2

                var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
                var c1_hi = W[i - 14]; // i - 7

                var c1_lo = W[i - 13];
                var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15

                var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
                var c3_hi = W[i - 32]; // i - 16

                var c3_lo = W[i - 31];
                W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
                W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
              }
            };

            SHA512$2.prototype._update = function _update(msg, start) {
              this._prepareBlock(msg, start);

              var W = this.W;
              var ah = this.h[0];
              var al = this.h[1];
              var bh = this.h[2];
              var bl = this.h[3];
              var ch = this.h[4];
              var cl = this.h[5];
              var dh = this.h[6];
              var dl = this.h[7];
              var eh = this.h[8];
              var el = this.h[9];
              var fh = this.h[10];
              var fl = this.h[11];
              var gh = this.h[12];
              var gl = this.h[13];
              var hh = this.h[14];
              var hl = this.h[15];
              assert$c(this.k.length === W.length);

              for (var i = 0; i < W.length; i += 2) {
                var c0_hi = hh;
                var c0_lo = hl;
                var c1_hi = s1_512_hi(eh, el);
                var c1_lo = s1_512_lo(eh, el);
                var c2_hi = ch64_hi(eh, el, fh, fl, gh);
                var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
                var c3_hi = this.k[i];
                var c3_lo = this.k[i + 1];
                var c4_hi = W[i];
                var c4_lo = W[i + 1];
                var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
                var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
                c0_hi = s0_512_hi(ah, al);
                c0_lo = s0_512_lo(ah, al);
                c1_hi = maj64_hi(ah, al, bh, bl, ch);
                c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
                var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
                var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
                hh = gh;
                hl = gl;
                gh = fh;
                gl = fl;
                fh = eh;
                fl = el;
                eh = sum64_hi(dh, dl, T1_hi, T1_lo);
                el = sum64_lo(dl, dl, T1_hi, T1_lo);
                dh = ch;
                dl = cl;
                ch = bh;
                cl = bl;
                bh = ah;
                bl = al;
                ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
                al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
              }

              sum64(this.h, 0, ah, al);
              sum64(this.h, 2, bh, bl);
              sum64(this.h, 4, ch, cl);
              sum64(this.h, 6, dh, dl);
              sum64(this.h, 8, eh, el);
              sum64(this.h, 10, fh, fl);
              sum64(this.h, 12, gh, gl);
              sum64(this.h, 14, hh, hl);
            };

            SHA512$2.prototype._digest = function digest(enc) {
              if (enc === 'hex') return utils$r.toHex32(this.h, 'big');else return utils$r.split32(this.h, 'big');
            };

            function ch64_hi(xh, xl, yh, yl, zh) {
              var r = xh & yh ^ ~xh & zh;
              if (r < 0) r += 0x100000000;
              return r;
            }

            function ch64_lo(xh, xl, yh, yl, zh, zl) {
              var r = xl & yl ^ ~xl & zl;
              if (r < 0) r += 0x100000000;
              return r;
            }

            function maj64_hi(xh, xl, yh, yl, zh) {
              var r = xh & yh ^ xh & zh ^ yh & zh;
              if (r < 0) r += 0x100000000;
              return r;
            }

            function maj64_lo(xh, xl, yh, yl, zh, zl) {
              var r = xl & yl ^ xl & zl ^ yl & zl;
              if (r < 0) r += 0x100000000;
              return r;
            }

            function s0_512_hi(xh, xl) {
              var c0_hi = rotr64_hi(xh, xl, 28);
              var c1_hi = rotr64_hi(xl, xh, 2); // 34

              var c2_hi = rotr64_hi(xl, xh, 7); // 39

              var r = c0_hi ^ c1_hi ^ c2_hi;
              if (r < 0) r += 0x100000000;
              return r;
            }

            function s0_512_lo(xh, xl) {
              var c0_lo = rotr64_lo(xh, xl, 28);
              var c1_lo = rotr64_lo(xl, xh, 2); // 34

              var c2_lo = rotr64_lo(xl, xh, 7); // 39

              var r = c0_lo ^ c1_lo ^ c2_lo;
              if (r < 0) r += 0x100000000;
              return r;
            }

            function s1_512_hi(xh, xl) {
              var c0_hi = rotr64_hi(xh, xl, 14);
              var c1_hi = rotr64_hi(xh, xl, 18);
              var c2_hi = rotr64_hi(xl, xh, 9); // 41

              var r = c0_hi ^ c1_hi ^ c2_hi;
              if (r < 0) r += 0x100000000;
              return r;
            }

            function s1_512_lo(xh, xl) {
              var c0_lo = rotr64_lo(xh, xl, 14);
              var c1_lo = rotr64_lo(xh, xl, 18);
              var c2_lo = rotr64_lo(xl, xh, 9); // 41

              var r = c0_lo ^ c1_lo ^ c2_lo;
              if (r < 0) r += 0x100000000;
              return r;
            }

            function g0_512_hi(xh, xl) {
              var c0_hi = rotr64_hi(xh, xl, 1);
              var c1_hi = rotr64_hi(xh, xl, 8);
              var c2_hi = shr64_hi(xh, xl, 7);
              var r = c0_hi ^ c1_hi ^ c2_hi;
              if (r < 0) r += 0x100000000;
              return r;
            }

            function g0_512_lo(xh, xl) {
              var c0_lo = rotr64_lo(xh, xl, 1);
              var c1_lo = rotr64_lo(xh, xl, 8);
              var c2_lo = shr64_lo(xh, xl, 7);
              var r = c0_lo ^ c1_lo ^ c2_lo;
              if (r < 0) r += 0x100000000;
              return r;
            }

            function g1_512_hi(xh, xl) {
              var c0_hi = rotr64_hi(xh, xl, 19);
              var c1_hi = rotr64_hi(xl, xh, 29); // 61

              var c2_hi = shr64_hi(xh, xl, 6);
              var r = c0_hi ^ c1_hi ^ c2_hi;
              if (r < 0) r += 0x100000000;
              return r;
            }

            function g1_512_lo(xh, xl) {
              var c0_lo = rotr64_lo(xh, xl, 19);
              var c1_lo = rotr64_lo(xl, xh, 29); // 61

              var c2_lo = shr64_lo(xh, xl, 6);
              var r = c0_lo ^ c1_lo ^ c2_lo;
              if (r < 0) r += 0x100000000;
              return r;
            }

            var utils$q = utils$x;
            var SHA512$1 = _512;

            function SHA384() {
              if (!(this instanceof SHA384)) return new SHA384();
              SHA512$1.call(this);
              this.h = [0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939, 0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4];
            }

            utils$q.inherits(SHA384, SHA512$1);
            var _384 = SHA384;
            SHA384.blockSize = 1024;
            SHA384.outSize = 384;
            SHA384.hmacStrength = 192;
            SHA384.padLength = 128;

            SHA384.prototype._digest = function digest(enc) {
              if (enc === 'hex') return utils$q.toHex32(this.h.slice(0, 12), 'big');else return utils$q.split32(this.h.slice(0, 12), 'big');
            };

            sha$4.sha1 = _1;
            sha$4.sha224 = _224;
            sha$4.sha256 = _256;
            sha$4.sha384 = _384;
            sha$4.sha512 = _512;

            var ripemd = {};

            var utils$p = utils$x;
            var common = common$5;
            var rotl32 = utils$p.rotl32;
            var sum32 = utils$p.sum32;
            var sum32_3 = utils$p.sum32_3;
            var sum32_4 = utils$p.sum32_4;
            var BlockHash = common.BlockHash;

            function RIPEMD160$4() {
              if (!(this instanceof RIPEMD160$4)) return new RIPEMD160$4();
              BlockHash.call(this);
              this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
              this.endian = 'little';
            }

            utils$p.inherits(RIPEMD160$4, BlockHash);
            ripemd.ripemd160 = RIPEMD160$4;
            RIPEMD160$4.blockSize = 512;
            RIPEMD160$4.outSize = 160;
            RIPEMD160$4.hmacStrength = 192;
            RIPEMD160$4.padLength = 64;

            RIPEMD160$4.prototype._update = function update(msg, start) {
              var A = this.h[0];
              var B = this.h[1];
              var C = this.h[2];
              var D = this.h[3];
              var E = this.h[4];
              var Ah = A;
              var Bh = B;
              var Ch = C;
              var Dh = D;
              var Eh = E;

              for (var j = 0; j < 80; j++) {
                var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K$4(j)), s[j]), E);
                A = E;
                E = D;
                D = rotl32(C, 10);
                C = B;
                B = T;
                T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);
                Ah = Eh;
                Eh = Dh;
                Dh = rotl32(Ch, 10);
                Ch = Bh;
                Bh = T;
              }

              T = sum32_3(this.h[1], C, Dh);
              this.h[1] = sum32_3(this.h[2], D, Eh);
              this.h[2] = sum32_3(this.h[3], E, Ah);
              this.h[3] = sum32_3(this.h[4], A, Bh);
              this.h[4] = sum32_3(this.h[0], B, Ch);
              this.h[0] = T;
            };

            RIPEMD160$4.prototype._digest = function digest(enc) {
              if (enc === 'hex') return utils$p.toHex32(this.h, 'little');else return utils$p.split32(this.h, 'little');
            };

            function f(j, x, y, z) {
              if (j <= 15) return x ^ y ^ z;else if (j <= 31) return x & y | ~x & z;else if (j <= 47) return (x | ~y) ^ z;else if (j <= 63) return x & z | y & ~z;else return x ^ (y | ~z);
            }

            function K$4(j) {
              if (j <= 15) return 0x00000000;else if (j <= 31) return 0x5a827999;else if (j <= 47) return 0x6ed9eba1;else if (j <= 63) return 0x8f1bbcdc;else return 0xa953fd4e;
            }

            function Kh(j) {
              if (j <= 15) return 0x50a28be6;else if (j <= 31) return 0x5c4dd124;else if (j <= 47) return 0x6d703ef3;else if (j <= 63) return 0x7a6d76e9;else return 0x00000000;
            }

            var r = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];
            var rh = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];
            var s = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];
            var sh = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];

            var utils$o = utils$x;
            var assert$b = minimalisticAssert;

            function Hmac$3(hash, key, enc) {
              if (!(this instanceof Hmac$3)) return new Hmac$3(hash, key, enc);
              this.Hash = hash;
              this.blockSize = hash.blockSize / 8;
              this.outSize = hash.outSize / 8;
              this.inner = null;
              this.outer = null;

              this._init(utils$o.toArray(key, enc));
            }

            var hmac = Hmac$3;

            Hmac$3.prototype._init = function init(key) {
              // Shorten key, if needed
              if (key.length > this.blockSize) key = new this.Hash().update(key).digest();
              assert$b(key.length <= this.blockSize); // Add padding to key

              for (var i = key.length; i < this.blockSize; i++) {
                key.push(0);
              }

              for (i = 0; i < key.length; i++) {
                key[i] ^= 0x36;
              }

              this.inner = new this.Hash().update(key); // 0x36 ^ 0x5c = 0x6a

              for (i = 0; i < key.length; i++) {
                key[i] ^= 0x6a;
              }

              this.outer = new this.Hash().update(key);
            };

            Hmac$3.prototype.update = function update(msg, enc) {
              this.inner.update(msg, enc);
              return this;
            };

            Hmac$3.prototype.digest = function digest(enc) {
              this.outer.update(this.inner.digest());
              return this.outer.digest(enc);
            };

            (function (exports) {
              var hash = exports;
              hash.utils = utils$x;
              hash.common = common$5;
              hash.sha = sha$4;
              hash.ripemd = ripemd;
              hash.hmac = hmac; // Proxy hash functions to the main object

              hash.sha1 = hash.sha.sha1;
              hash.sha256 = hash.sha.sha256;
              hash.sha224 = hash.sha.sha224;
              hash.sha384 = hash.sha.sha384;
              hash.sha512 = hash.sha.sha512;
              hash.ripemd160 = hash.ripemd.ripemd160;
            })(hash$4);

            var secp256k1$2 = {
              doubles: {
                step: 4,
                points: [['e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a', 'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'], ['8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508', '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'], ['175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739', 'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'], ['363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640', '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'], ['8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c', '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'], ['723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda', '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'], ['eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa', '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'], ['100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0', 'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'], ['e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d', '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'], ['feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d', 'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'], ['da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1', '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'], ['53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0', '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'], ['8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047', '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'], ['385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862', '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'], ['6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7', '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'], ['3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd', '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'], ['85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83', '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'], ['948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a', '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'], ['6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8', 'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'], ['e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d', '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'], ['e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725', '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'], ['213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754', '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'], ['4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c', '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'], ['fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6', '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'], ['76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39', 'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'], ['c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891', '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'], ['d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b', 'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'], ['b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03', '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'], ['e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d', 'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'], ['a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070', '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'], ['90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4', 'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'], ['8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da', '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'], ['e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11', '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'], ['8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e', 'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'], ['e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41', '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'], ['b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef', '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'], ['d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8', 'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'], ['324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d', '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'], ['4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96', '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'], ['9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd', 'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'], ['6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5', '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'], ['a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266', '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'], ['7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71', '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'], ['928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac', 'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'], ['85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751', '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'], ['ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e', '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'], ['827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241', 'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'], ['eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3', 'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'], ['e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f', '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'], ['1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19', 'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'], ['146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be', 'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'], ['fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9', '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'], ['da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2', '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'], ['a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13', '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'], ['174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c', 'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'], ['959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba', '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'], ['d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151', 'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'], ['64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073', 'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'], ['8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458', '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'], ['13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b', '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'], ['bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366', 'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'], ['8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa', '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'], ['8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0', '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'], ['dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787', '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'], ['f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e', 'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82']]
              },
              naf: {
                wnd: 7,
                points: [['f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9', '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'], ['2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4', 'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'], ['5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc', '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'], ['acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe', 'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'], ['774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb', 'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'], ['f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8', 'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'], ['d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e', '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'], ['defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34', '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'], ['2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c', '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'], ['352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5', '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'], ['2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f', '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'], ['9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714', '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'], ['daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729', 'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'], ['c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db', '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'], ['6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4', 'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'], ['1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5', 'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'], ['605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479', '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'], ['62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d', '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'], ['80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f', '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'], ['7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb', 'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'], ['d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9', 'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'], ['49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963', '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'], ['77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74', '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'], ['f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530', 'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'], ['463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b', '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'], ['f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247', 'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'], ['caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1', 'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'], ['2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120', '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'], ['7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435', '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'], ['754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18', '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'], ['e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8', '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'], ['186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb', '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'], ['df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f', '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'], ['5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143', 'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'], ['290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba', 'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'], ['af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45', 'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'], ['766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a', '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'], ['59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e', 'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'], ['f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8', 'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'], ['7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c', '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'], ['948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519', 'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'], ['7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab', '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'], ['3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca', 'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'], ['d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf', '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'], ['1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610', '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'], ['733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4', 'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'], ['15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c', 'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'], ['a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940', 'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'], ['e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980', 'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'], ['311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3', '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'], ['34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf', '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'], ['f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63', '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'], ['d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448', 'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'], ['32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf', '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'], ['7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5', '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'], ['ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6', '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'], ['16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5', '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'], ['eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99', 'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'], ['78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51', 'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'], ['494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5', '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'], ['a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5', '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'], ['c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997', '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'], ['841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881', '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'], ['5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5', '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'], ['36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66', 'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'], ['336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726', 'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'], ['8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede', '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'], ['1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94', '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'], ['85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31', '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'], ['29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51', 'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'], ['a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252', 'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'], ['4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5', 'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'], ['d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b', '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'], ['ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4', '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'], ['af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f', '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'], ['e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889', '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'], ['591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246', 'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'], ['11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984', '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'], ['3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a', 'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'], ['cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030', 'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'], ['c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197', '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'], ['c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593', 'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'], ['a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef', '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'], ['347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38', '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'], ['da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a', '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'], ['c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111', '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'], ['4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502', '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'], ['3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea', 'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'], ['cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26', '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'], ['b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986', '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'], ['d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e', '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'], ['48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4', '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'], ['dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda', 'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'], ['6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859', 'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'], ['e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f', 'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'], ['eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c', '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'], ['13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942', 'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'], ['ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a', '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'], ['b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80', '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'], ['ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d', '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'], ['8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1', 'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'], ['52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63', 'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'], ['e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352', '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'], ['7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193', 'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'], ['5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00', '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'], ['32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58', 'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'], ['e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7', 'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'], ['8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8', 'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'], ['4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e', '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'], ['3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d', 'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'], ['674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b', '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'], ['d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f', 'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'], ['30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6', '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'], ['be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297', '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'], ['93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a', '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'], ['b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c', 'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'], ['d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52', '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'], ['d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb', 'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'], ['463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065', 'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'], ['7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917', '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'], ['74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9', 'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'], ['30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3', '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'], ['9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57', '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'], ['176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66', 'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'], ['75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8', '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'], ['809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721', '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'], ['1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180', '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9']]
              }
            };

            (function (exports) {

              var curves = exports;
              var hash = hash$4;
              var curve$1 = curve;
              var utils = utils$D;
              var assert = utils.assert;

              function PresetCurve(options) {
                if (options.type === 'short') this.curve = new curve$1["short"](options);else if (options.type === 'edwards') this.curve = new curve$1.edwards(options);else this.curve = new curve$1.mont(options);
                this.g = this.curve.g;
                this.n = this.curve.n;
                this.hash = options.hash;
                assert(this.g.validate(), 'Invalid curve');
                assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
              }

              curves.PresetCurve = PresetCurve;

              function defineCurve(name, options) {
                Object.defineProperty(curves, name, {
                  configurable: true,
                  enumerable: true,
                  get: function get() {
                    var curve = new PresetCurve(options);
                    Object.defineProperty(curves, name, {
                      configurable: true,
                      enumerable: true,
                      value: curve
                    });
                    return curve;
                  }
                });
              }

              defineCurve('p192', {
                type: 'short',
                prime: 'p192',
                p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
                a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
                b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
                n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
                hash: hash.sha256,
                gRed: false,
                g: ['188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012', '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811']
              });
              defineCurve('p224', {
                type: 'short',
                prime: 'p224',
                p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
                a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
                b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
                n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
                hash: hash.sha256,
                gRed: false,
                g: ['b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21', 'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34']
              });
              defineCurve('p256', {
                type: 'short',
                prime: null,
                p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
                a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
                b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
                n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
                hash: hash.sha256,
                gRed: false,
                g: ['6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296', '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5']
              });
              defineCurve('p384', {
                type: 'short',
                prime: null,
                p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 ffffffff',
                a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 fffffffc',
                b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' + '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
                n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' + 'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
                hash: hash.sha384,
                gRed: false,
                g: ['aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' + '5502f25d bf55296c 3a545e38 72760ab7', '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' + '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f']
              });
              defineCurve('p521', {
                type: 'short',
                prime: null,
                p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff',
                a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff fffffffc',
                b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' + '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' + '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
                n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' + 'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
                hash: hash.sha512,
                gRed: false,
                g: ['000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' + '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' + 'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66', '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' + '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' + '3fad0761 353c7086 a272c240 88be9476 9fd16650']
              });
              defineCurve('curve25519', {
                type: 'mont',
                prime: 'p25519',
                p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
                a: '76d06',
                b: '1',
                n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
                hash: hash.sha256,
                gRed: false,
                g: ['9']
              });
              defineCurve('ed25519', {
                type: 'edwards',
                prime: 'p25519',
                p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
                a: '-1',
                c: '1',
                // -121665 * (121666^(-1)) (mod P)
                d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
                n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
                hash: hash.sha256,
                gRed: false,
                g: ['216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a', // 4/5
                '6666666666666666666666666666666666666666666666666666666666666658']
              });
              var pre;

              try {
                pre = secp256k1$2;
              } catch (e) {
                pre = undefined;
              }

              defineCurve('secp256k1', {
                type: 'short',
                prime: 'k256',
                p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
                a: '0',
                b: '7',
                n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
                h: '1',
                hash: hash.sha256,
                // Precomputed endomorphism
                beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
                lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
                basis: [{
                  a: '3086d221a7d46bcde86c90e49284eb15',
                  b: '-e4437ed6010e88286f547fa90abfe4c3'
                }, {
                  a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
                  b: '3086d221a7d46bcde86c90e49284eb15'
                }],
                gRed: false,
                g: ['79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798', '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8', pre]
              });
            })(curves$2);

            var hash$3 = hash$4;
            var utils$n = utils$C;
            var assert$a = minimalisticAssert;

            function HmacDRBG$1(options) {
              if (!(this instanceof HmacDRBG$1)) return new HmacDRBG$1(options);
              this.hash = options.hash;
              this.predResist = !!options.predResist;
              this.outLen = this.hash.outSize;
              this.minEntropy = options.minEntropy || this.hash.hmacStrength;
              this._reseed = null;
              this.reseedInterval = null;
              this.K = null;
              this.V = null;
              var entropy = utils$n.toArray(options.entropy, options.entropyEnc || 'hex');
              var nonce = utils$n.toArray(options.nonce, options.nonceEnc || 'hex');
              var pers = utils$n.toArray(options.pers, options.persEnc || 'hex');
              assert$a(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

              this._init(entropy, nonce, pers);
            }

            var hmacDrbg = HmacDRBG$1;

            HmacDRBG$1.prototype._init = function init(entropy, nonce, pers) {
              var seed = entropy.concat(nonce).concat(pers);
              this.K = new Array(this.outLen / 8);
              this.V = new Array(this.outLen / 8);

              for (var i = 0; i < this.V.length; i++) {
                this.K[i] = 0x00;
                this.V[i] = 0x01;
              }

              this._update(seed);

              this._reseed = 1;
              this.reseedInterval = 0x1000000000000; // 2^48
            };

            HmacDRBG$1.prototype._hmac = function hmac() {
              return new hash$3.hmac(this.hash, this.K);
            };

            HmacDRBG$1.prototype._update = function update(seed) {
              var kmac = this._hmac().update(this.V).update([0x00]);

              if (seed) kmac = kmac.update(seed);
              this.K = kmac.digest();
              this.V = this._hmac().update(this.V).digest();
              if (!seed) return;
              this.K = this._hmac().update(this.V).update([0x01]).update(seed).digest();
              this.V = this._hmac().update(this.V).digest();
            };

            HmacDRBG$1.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
              // Optional entropy enc
              if (typeof entropyEnc !== 'string') {
                addEnc = add;
                add = entropyEnc;
                entropyEnc = null;
              }

              entropy = utils$n.toArray(entropy, entropyEnc);
              add = utils$n.toArray(add, addEnc);
              assert$a(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

              this._update(entropy.concat(add || []));

              this._reseed = 1;
            };

            HmacDRBG$1.prototype.generate = function generate(len, enc, add, addEnc) {
              if (this._reseed > this.reseedInterval) throw new Error('Reseed is required'); // Optional encoding

              if (typeof enc !== 'string') {
                addEnc = add;
                add = enc;
                enc = null;
              } // Optional additional data


              if (add) {
                add = utils$n.toArray(add, addEnc || 'hex');

                this._update(add);
              }

              var temp = [];

              while (temp.length < len) {
                this.V = this._hmac().update(this.V).digest();
                temp = temp.concat(this.V);
              }

              var res = temp.slice(0, len);

              this._update(add);

              this._reseed++;
              return utils$n.encode(res, enc);
            };

            var BN$5 = bn$1.exports;
            var utils$m = utils$D;
            var assert$9 = utils$m.assert;

            function KeyPair$3(ec, options) {
              this.ec = ec;
              this.priv = null;
              this.pub = null; // KeyPair(ec, { priv: ..., pub: ... })

              if (options.priv) this._importPrivate(options.priv, options.privEnc);
              if (options.pub) this._importPublic(options.pub, options.pubEnc);
            }

            var key$1 = KeyPair$3;

            KeyPair$3.fromPublic = function fromPublic(ec, pub, enc) {
              if (pub instanceof KeyPair$3) return pub;
              return new KeyPair$3(ec, {
                pub: pub,
                pubEnc: enc
              });
            };

            KeyPair$3.fromPrivate = function fromPrivate(ec, priv, enc) {
              if (priv instanceof KeyPair$3) return priv;
              return new KeyPair$3(ec, {
                priv: priv,
                privEnc: enc
              });
            };

            KeyPair$3.prototype.validate = function validate() {
              var pub = this.getPublic();
              if (pub.isInfinity()) return {
                result: false,
                reason: 'Invalid public key'
              };
              if (!pub.validate()) return {
                result: false,
                reason: 'Public key is not a point'
              };
              if (!pub.mul(this.ec.curve.n).isInfinity()) return {
                result: false,
                reason: 'Public key * N != O'
              };
              return {
                result: true,
                reason: null
              };
            };

            KeyPair$3.prototype.getPublic = function getPublic(compact, enc) {
              // compact is optional argument
              if (typeof compact === 'string') {
                enc = compact;
                compact = null;
              }

              if (!this.pub) this.pub = this.ec.g.mul(this.priv);
              if (!enc) return this.pub;
              return this.pub.encode(enc, compact);
            };

            KeyPair$3.prototype.getPrivate = function getPrivate(enc) {
              if (enc === 'hex') return this.priv.toString(16, 2);else return this.priv;
            };

            KeyPair$3.prototype._importPrivate = function _importPrivate(key, enc) {
              this.priv = new BN$5(key, enc || 16); // Ensure that the priv won't be bigger than n, otherwise we may fail
              // in fixed multiplication method

              this.priv = this.priv.umod(this.ec.curve.n);
            };

            KeyPair$3.prototype._importPublic = function _importPublic(key, enc) {
              if (key.x || key.y) {
                // Montgomery points only have an `x` coordinate.
                // Weierstrass/Edwards points on the other hand have both `x` and
                // `y` coordinates.
                if (this.ec.curve.type === 'mont') {
                  assert$9(key.x, 'Need x coordinate');
                } else if (this.ec.curve.type === 'short' || this.ec.curve.type === 'edwards') {
                  assert$9(key.x && key.y, 'Need both x and y coordinate');
                }

                this.pub = this.ec.curve.point(key.x, key.y);
                return;
              }

              this.pub = this.ec.curve.decodePoint(key, enc);
            }; // ECDH


            KeyPair$3.prototype.derive = function derive(pub) {
              return pub.mul(this.priv).getX();
            }; // ECDSA


            KeyPair$3.prototype.sign = function sign(msg, enc, options) {
              return this.ec.sign(msg, this, enc, options);
            };

            KeyPair$3.prototype.verify = function verify(msg, signature) {
              return this.ec.verify(msg, signature, this);
            };

            KeyPair$3.prototype.inspect = function inspect() {
              return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) + ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
            };

            var BN$4 = bn$1.exports;
            var utils$l = utils$D;
            var assert$8 = utils$l.assert;

            function Signature$3(options, enc) {
              if (options instanceof Signature$3) return options;
              if (this._importDER(options, enc)) return;
              assert$8(options.r && options.s, 'Signature without r or s');
              this.r = new BN$4(options.r, 16);
              this.s = new BN$4(options.s, 16);
              if (options.recoveryParam === undefined) this.recoveryParam = null;else this.recoveryParam = options.recoveryParam;
            }

            var signature$2 = Signature$3;

            function Position() {
              this.place = 0;
            }

            function getLength$1(buf, p) {
              var initial = buf[p.place++];

              if (!(initial & 0x80)) {
                return initial;
              }

              var octetLen = initial & 0xf; // Indefinite length or overflow

              if (octetLen === 0 || octetLen > 4) {
                return false;
              }

              var val = 0;

              for (var i = 0, off = p.place; i < octetLen; i++, off++) {
                val <<= 8;
                val |= buf[off];
                val >>>= 0;
              } // Leading zeroes


              if (val <= 0x7f) {
                return false;
              }

              p.place = off;
              return val;
            }

            function rmPadding(buf) {
              var i = 0;
              var len = buf.length - 1;

              while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
                i++;
              }

              if (i === 0) {
                return buf;
              }

              return buf.slice(i);
            }

            Signature$3.prototype._importDER = function _importDER(data, enc) {
              data = utils$l.toArray(data, enc);
              var p = new Position();

              if (data[p.place++] !== 0x30) {
                return false;
              }

              var len = getLength$1(data, p);

              if (len === false) {
                return false;
              }

              if (len + p.place !== data.length) {
                return false;
              }

              if (data[p.place++] !== 0x02) {
                return false;
              }

              var rlen = getLength$1(data, p);

              if (rlen === false) {
                return false;
              }

              var r = data.slice(p.place, rlen + p.place);
              p.place += rlen;

              if (data[p.place++] !== 0x02) {
                return false;
              }

              var slen = getLength$1(data, p);

              if (slen === false) {
                return false;
              }

              if (data.length !== slen + p.place) {
                return false;
              }

              var s = data.slice(p.place, slen + p.place);

              if (r[0] === 0) {
                if (r[1] & 0x80) {
                  r = r.slice(1);
                } else {
                  // Leading zeroes
                  return false;
                }
              }

              if (s[0] === 0) {
                if (s[1] & 0x80) {
                  s = s.slice(1);
                } else {
                  // Leading zeroes
                  return false;
                }
              }

              this.r = new BN$4(r);
              this.s = new BN$4(s);
              this.recoveryParam = null;
              return true;
            };

            function constructLength(arr, len) {
              if (len < 0x80) {
                arr.push(len);
                return;
              }

              var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
              arr.push(octets | 0x80);

              while (--octets) {
                arr.push(len >>> (octets << 3) & 0xff);
              }

              arr.push(len);
            }

            Signature$3.prototype.toDER = function toDER(enc) {
              var r = this.r.toArray();
              var s = this.s.toArray(); // Pad values

              if (r[0] & 0x80) r = [0].concat(r); // Pad values

              if (s[0] & 0x80) s = [0].concat(s);
              r = rmPadding(r);
              s = rmPadding(s);

              while (!s[0] && !(s[1] & 0x80)) {
                s = s.slice(1);
              }

              var arr = [0x02];
              constructLength(arr, r.length);
              arr = arr.concat(r);
              arr.push(0x02);
              constructLength(arr, s.length);
              var backHalf = arr.concat(s);
              var res = [0x30];
              constructLength(res, backHalf.length);
              res = res.concat(backHalf);
              return utils$l.encode(res, enc);
            };

            var BN$3 = bn$1.exports;
            var HmacDRBG = hmacDrbg;
            var utils$k = utils$D;
            var curves$1 = curves$2;
            var rand = brorand.exports;
            var assert$7 = utils$k.assert;
            var KeyPair$2 = key$1;
            var Signature$2 = signature$2;

            function EC$1(options) {
              if (!(this instanceof EC$1)) return new EC$1(options); // Shortcut `elliptic.ec(curve-name)`

              if (typeof options === 'string') {
                assert$7(curves$1.hasOwnProperty(options), 'Unknown curve ' + options);
                options = curves$1[options];
              } // Shortcut for `elliptic.ec(elliptic.curves.curveName)`


              if (options instanceof curves$1.PresetCurve) options = {
                curve: options
              };
              this.curve = options.curve.curve;
              this.n = this.curve.n;
              this.nh = this.n.ushrn(1);
              this.g = this.curve.g; // Point on curve

              this.g = options.curve.g;
              this.g.precompute(options.curve.n.bitLength() + 1); // Hash for function for DRBG

              this.hash = options.hash || options.curve.hash;
            }

            var ec$1 = EC$1;

            EC$1.prototype.keyPair = function keyPair(options) {
              return new KeyPair$2(this, options);
            };

            EC$1.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
              return KeyPair$2.fromPrivate(this, priv, enc);
            };

            EC$1.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
              return KeyPair$2.fromPublic(this, pub, enc);
            };

            EC$1.prototype.genKeyPair = function genKeyPair(options) {
              if (!options) options = {}; // Instantiate Hmac_DRBG

              var drbg = new HmacDRBG({
                hash: this.hash,
                pers: options.pers,
                persEnc: options.persEnc || 'utf8',
                entropy: options.entropy || rand(this.hash.hmacStrength),
                entropyEnc: options.entropy && options.entropyEnc || 'utf8',
                nonce: this.n.toArray()
              });
              var bytes = this.n.byteLength();
              var ns2 = this.n.sub(new BN$3(2));

              do {
                var priv = new BN$3(drbg.generate(bytes));
                if (priv.cmp(ns2) > 0) continue;
                priv.iaddn(1);
                return this.keyFromPrivate(priv);
              } while (true);
            };

            EC$1.prototype._truncateToN = function truncateToN(msg, truncOnly) {
              var delta = msg.byteLength() * 8 - this.n.bitLength();
              if (delta > 0) msg = msg.ushrn(delta);
              if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);else return msg;
            };

            EC$1.prototype.sign = function sign(msg, key, enc, options) {
              if (_typeof$1(enc) === 'object') {
                options = enc;
                enc = null;
              }

              if (!options) options = {};
              key = this.keyFromPrivate(key, enc);
              msg = this._truncateToN(new BN$3(msg, 16)); // Zero-extend key to provide enough entropy

              var bytes = this.n.byteLength();
              var bkey = key.getPrivate().toArray('be', bytes); // Zero-extend nonce to have the same byte size as N

              var nonce = msg.toArray('be', bytes); // Instantiate Hmac_DRBG

              var drbg = new HmacDRBG({
                hash: this.hash,
                entropy: bkey,
                nonce: nonce,
                pers: options.pers,
                persEnc: options.persEnc || 'utf8'
              }); // Number of bytes to generate

              var ns1 = this.n.sub(new BN$3(1));

              for (var iter = 0; true; iter++) {
                var k = options.k ? options.k(iter) : new BN$3(drbg.generate(this.n.byteLength()));
                k = this._truncateToN(k, true);
                if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;
                var kp = this.g.mul(k);
                if (kp.isInfinity()) continue;
                var kpX = kp.getX();
                var r = kpX.umod(this.n);
                if (r.cmpn(0) === 0) continue;
                var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
                s = s.umod(this.n);
                if (s.cmpn(0) === 0) continue;
                var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0); // Use complement of `s`, if it is > `n / 2`

                if (options.canonical && s.cmp(this.nh) > 0) {
                  s = this.n.sub(s);
                  recoveryParam ^= 1;
                }

                return new Signature$2({
                  r: r,
                  s: s,
                  recoveryParam: recoveryParam
                });
              }
            };

            EC$1.prototype.verify = function verify(msg, signature, key, enc) {
              msg = this._truncateToN(new BN$3(msg, 16));
              key = this.keyFromPublic(key, enc);
              signature = new Signature$2(signature, 'hex'); // Perform primitive values validation

              var r = signature.r;
              var s = signature.s;
              if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
              if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false; // Validate signature

              var sinv = s.invm(this.n);
              var u1 = sinv.mul(msg).umod(this.n);
              var u2 = sinv.mul(r).umod(this.n);

              if (!this.curve._maxwellTrick) {
                var p = this.g.mulAdd(u1, key.getPublic(), u2);
                if (p.isInfinity()) return false;
                return p.getX().umod(this.n).cmp(r) === 0;
              } // NOTE: Greg Maxwell's trick, inspired by:
              // https://git.io/vad3K


              var p = this.g.jmulAdd(u1, key.getPublic(), u2);
              if (p.isInfinity()) return false; // Compare `p.x` of Jacobian point with `r`,
              // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
              // inverse of `p.z^2`

              return p.eqXToP(r);
            };

            EC$1.prototype.recoverPubKey = function (msg, signature, j, enc) {
              assert$7((3 & j) === j, 'The recovery param is more than two bits');
              signature = new Signature$2(signature, enc);
              var n = this.n;
              var e = new BN$3(msg);
              var r = signature.r;
              var s = signature.s; // A set LSB signifies that the y-coordinate is odd

              var isYOdd = j & 1;
              var isSecondKey = j >> 1;
              if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error('Unable to find sencond key candinate'); // 1.1. Let x = r + jn.

              if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);else r = this.curve.pointFromX(r, isYOdd);
              var rInv = signature.r.invm(n);
              var s1 = n.sub(e).mul(rInv).umod(n);
              var s2 = s.mul(rInv).umod(n); // 1.6.1 Compute Q = r^-1 (sR -  eG)
              //               Q = r^-1 (sR + -eG)

              return this.g.mulAdd(s1, r, s2);
            };

            EC$1.prototype.getKeyRecoveryParam = function (e, signature, Q, enc) {
              signature = new Signature$2(signature, enc);
              if (signature.recoveryParam !== null) return signature.recoveryParam;

              for (var i = 0; i < 4; i++) {
                var Qprime;

                try {
                  Qprime = this.recoverPubKey(e, signature, i);
                } catch (e) {
                  continue;
                }

                if (Qprime.eq(Q)) return i;
              }

              throw new Error('Unable to find valid recovery factor');
            };

            var utils$j = utils$D;
            var assert$6 = utils$j.assert;
            var parseBytes$2 = utils$j.parseBytes;
            var cachedProperty$1 = utils$j.cachedProperty;
            /**
            * @param {EDDSA} eddsa - instance
            * @param {Object} params - public/private key parameters
            *
            * @param {Array<Byte>} [params.secret] - secret seed bytes
            * @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
            * @param {Array<Byte>} [params.pub] - public key point encoded as bytes
            *
            */

            function KeyPair$1(eddsa, params) {
              this.eddsa = eddsa;
              this._secret = parseBytes$2(params.secret);
              if (eddsa.isPoint(params.pub)) this._pub = params.pub;else this._pubBytes = parseBytes$2(params.pub);
            }

            KeyPair$1.fromPublic = function fromPublic(eddsa, pub) {
              if (pub instanceof KeyPair$1) return pub;
              return new KeyPair$1(eddsa, {
                pub: pub
              });
            };

            KeyPair$1.fromSecret = function fromSecret(eddsa, secret) {
              if (secret instanceof KeyPair$1) return secret;
              return new KeyPair$1(eddsa, {
                secret: secret
              });
            };

            KeyPair$1.prototype.secret = function secret() {
              return this._secret;
            };

            cachedProperty$1(KeyPair$1, 'pubBytes', function pubBytes() {
              return this.eddsa.encodePoint(this.pub());
            });
            cachedProperty$1(KeyPair$1, 'pub', function pub() {
              if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);
              return this.eddsa.g.mul(this.priv());
            });
            cachedProperty$1(KeyPair$1, 'privBytes', function privBytes() {
              var eddsa = this.eddsa;
              var hash = this.hash();
              var lastIx = eddsa.encodingLength - 1;
              var a = hash.slice(0, eddsa.encodingLength);
              a[0] &= 248;
              a[lastIx] &= 127;
              a[lastIx] |= 64;
              return a;
            });
            cachedProperty$1(KeyPair$1, 'priv', function priv() {
              return this.eddsa.decodeInt(this.privBytes());
            });
            cachedProperty$1(KeyPair$1, 'hash', function hash() {
              return this.eddsa.hash().update(this.secret()).digest();
            });
            cachedProperty$1(KeyPair$1, 'messagePrefix', function messagePrefix() {
              return this.hash().slice(this.eddsa.encodingLength);
            });

            KeyPair$1.prototype.sign = function sign(message) {
              assert$6(this._secret, 'KeyPair can only verify');
              return this.eddsa.sign(message, this);
            };

            KeyPair$1.prototype.verify = function verify(message, sig) {
              return this.eddsa.verify(message, sig, this);
            };

            KeyPair$1.prototype.getSecret = function getSecret(enc) {
              assert$6(this._secret, 'KeyPair is public only');
              return utils$j.encode(this.secret(), enc);
            };

            KeyPair$1.prototype.getPublic = function getPublic(enc) {
              return utils$j.encode(this.pubBytes(), enc);
            };

            var key = KeyPair$1;

            var BN$2 = bn$1.exports;
            var utils$i = utils$D;
            var assert$5 = utils$i.assert;
            var cachedProperty = utils$i.cachedProperty;
            var parseBytes$1 = utils$i.parseBytes;
            /**
            * @param {EDDSA} eddsa - eddsa instance
            * @param {Array<Bytes>|Object} sig -
            * @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
            * @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
            * @param {Array<Bytes>} [sig.Rencoded] - R point encoded
            * @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
            */

            function Signature$1(eddsa, sig) {
              this.eddsa = eddsa;
              if (_typeof$1(sig) !== 'object') sig = parseBytes$1(sig);

              if (Array.isArray(sig)) {
                sig = {
                  R: sig.slice(0, eddsa.encodingLength),
                  S: sig.slice(eddsa.encodingLength)
                };
              }

              assert$5(sig.R && sig.S, 'Signature without R or S');
              if (eddsa.isPoint(sig.R)) this._R = sig.R;
              if (sig.S instanceof BN$2) this._S = sig.S;
              this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
              this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
            }

            cachedProperty(Signature$1, 'S', function S() {
              return this.eddsa.decodeInt(this.Sencoded());
            });
            cachedProperty(Signature$1, 'R', function R() {
              return this.eddsa.decodePoint(this.Rencoded());
            });
            cachedProperty(Signature$1, 'Rencoded', function Rencoded() {
              return this.eddsa.encodePoint(this.R());
            });
            cachedProperty(Signature$1, 'Sencoded', function Sencoded() {
              return this.eddsa.encodeInt(this.S());
            });

            Signature$1.prototype.toBytes = function toBytes() {
              return this.Rencoded().concat(this.Sencoded());
            };

            Signature$1.prototype.toHex = function toHex() {
              return utils$i.encode(this.toBytes(), 'hex').toUpperCase();
            };

            var signature$1 = Signature$1;

            var hash$2 = hash$4;
            var curves = curves$2;
            var utils$h = utils$D;
            var assert$4 = utils$h.assert;
            var parseBytes = utils$h.parseBytes;
            var KeyPair = key;
            var Signature = signature$1;

            function EDDSA(curve) {
              assert$4(curve === 'ed25519', 'only tested with ed25519 so far');
              if (!(this instanceof EDDSA)) return new EDDSA(curve);
              var curve = curves[curve].curve;
              this.curve = curve;
              this.g = curve.g;
              this.g.precompute(curve.n.bitLength() + 1);
              this.pointClass = curve.point().constructor;
              this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
              this.hash = hash$2.sha512;
            }

            var eddsa = EDDSA;
            /**
            * @param {Array|String} message - message bytes
            * @param {Array|String|KeyPair} secret - secret bytes or a keypair
            * @returns {Signature} - signature
            */

            EDDSA.prototype.sign = function sign(message, secret) {
              message = parseBytes(message);
              var key = this.keyFromSecret(secret);
              var r = this.hashInt(key.messagePrefix(), message);
              var R = this.g.mul(r);
              var Rencoded = this.encodePoint(R);
              var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
              var S = r.add(s_).umod(this.curve.n);
              return this.makeSignature({
                R: R,
                S: S,
                Rencoded: Rencoded
              });
            };
            /**
            * @param {Array} message - message bytes
            * @param {Array|String|Signature} sig - sig bytes
            * @param {Array|String|Point|KeyPair} pub - public key
            * @returns {Boolean} - true if public key matches sig of message
            */


            EDDSA.prototype.verify = function verify(message, sig, pub) {
              message = parseBytes(message);
              sig = this.makeSignature(sig);
              var key = this.keyFromPublic(pub);
              var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
              var SG = this.g.mul(sig.S());
              var RplusAh = sig.R().add(key.pub().mul(h));
              return RplusAh.eq(SG);
            };

            EDDSA.prototype.hashInt = function hashInt() {
              var hash = this.hash();

              for (var i = 0; i < arguments.length; i++) {
                hash.update(arguments[i]);
              }

              return utils$h.intFromLE(hash.digest()).umod(this.curve.n);
            };

            EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
              return KeyPair.fromPublic(this, pub);
            };

            EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
              return KeyPair.fromSecret(this, secret);
            };

            EDDSA.prototype.makeSignature = function makeSignature(sig) {
              if (sig instanceof Signature) return sig;
              return new Signature(this, sig);
            };
            /**
            * * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
            *
            * EDDSA defines methods for encoding and decoding points and integers. These are
            * helper convenience methods, that pass along to utility functions implied
            * parameters.
            *
            */


            EDDSA.prototype.encodePoint = function encodePoint(point) {
              var enc = point.getY().toArray('le', this.encodingLength);
              enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
              return enc;
            };

            EDDSA.prototype.decodePoint = function decodePoint(bytes) {
              bytes = utils$h.parseBytes(bytes);
              var lastIx = bytes.length - 1;
              var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
              var xIsOdd = (bytes[lastIx] & 0x80) !== 0;
              var y = utils$h.intFromLE(normed);
              return this.curve.pointFromY(y, xIsOdd);
            };

            EDDSA.prototype.encodeInt = function encodeInt(num) {
              return num.toArray('le', this.encodingLength);
            };

            EDDSA.prototype.decodeInt = function decodeInt(bytes) {
              return utils$h.intFromLE(bytes);
            };

            EDDSA.prototype.isPoint = function isPoint(val) {
              return val instanceof this.pointClass;
            };

            (function (exports) {

              var elliptic = exports;
              elliptic.version = require$$0$5.version;
              elliptic.utils = utils$D;
              elliptic.rand = brorand.exports;
              elliptic.curve = curve;
              elliptic.curves = curves$2; // Protocols

              elliptic.ec = ec$1;
              elliptic.eddsa = eddsa;
            })(elliptic$2);

            var EC = elliptic$2.ec;
            var ec = new EC('secp256k1');
            var ecparams = ec.curve; // Hack, we can not use bn.js@5, while elliptic uses bn.js@4
            // See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758

            var BN$1 = ecparams.n.constructor;

            function loadCompressedPublicKey(first, xbuf) {
              var x = new BN$1(xbuf); // overflow

              if (x.cmp(ecparams.p) >= 0) return null;
              x = x.toRed(ecparams.red); // compute corresponding Y

              var y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt();
              if (first === 0x03 !== y.isOdd()) y = y.redNeg();
              return ec.keyPair({
                pub: {
                  x: x,
                  y: y
                }
              });
            }

            function loadUncompressedPublicKey(first, xbuf, ybuf) {
              var x = new BN$1(xbuf);
              var y = new BN$1(ybuf); // overflow

              if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null;
              x = x.toRed(ecparams.red);
              y = y.toRed(ecparams.red); // is odd flag

              if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null; // x*x*x + b = y*y

              var x3 = x.redSqr().redIMul(x);
              if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null;
              return ec.keyPair({
                pub: {
                  x: x,
                  y: y
                }
              });
            }

            function loadPublicKey(pubkey) {
              // length should be validated in interface
              var first = pubkey[0];

              switch (first) {
                case 0x02:
                case 0x03:
                  if (pubkey.length !== 33) return null;
                  return loadCompressedPublicKey(first, pubkey.subarray(1, 33));

                case 0x04:
                case 0x06:
                case 0x07:
                  if (pubkey.length !== 65) return null;
                  return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65));

                default:
                  return null;
              }
            }

            function savePublicKey(output, point) {
              var pubkey = point.encode(null, output.length === 33); // Loop should be faster because we do not need create extra Uint8Array
              // output.set(new Uint8Array(pubkey))

              for (var i = 0; i < output.length; ++i) {
                output[i] = pubkey[i];
              }
            }

            var elliptic$1 = {
              contextRandomize: function contextRandomize() {
                return 0;
              },
              privateKeyVerify: function privateKeyVerify(seckey) {
                var bn = new BN$1(seckey);
                return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1;
              },
              privateKeyNegate: function privateKeyNegate(seckey) {
                var bn = new BN$1(seckey);
                var negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, 'be', 32);
                seckey.set(negate);
                return 0;
              },
              privateKeyTweakAdd: function privateKeyTweakAdd(seckey, tweak) {
                var bn = new BN$1(tweak);
                if (bn.cmp(ecparams.n) >= 0) return 1;
                bn.iadd(new BN$1(seckey));
                if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n);
                if (bn.isZero()) return 1;
                var tweaked = bn.toArrayLike(Uint8Array, 'be', 32);
                seckey.set(tweaked);
                return 0;
              },
              privateKeyTweakMul: function privateKeyTweakMul(seckey, tweak) {
                var bn = new BN$1(tweak);
                if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1;
                bn.imul(new BN$1(seckey));
                if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n);
                var tweaked = bn.toArrayLike(Uint8Array, 'be', 32);
                seckey.set(tweaked);
                return 0;
              },
              publicKeyVerify: function publicKeyVerify(pubkey) {
                var pair = loadPublicKey(pubkey);
                return pair === null ? 1 : 0;
              },
              publicKeyCreate: function publicKeyCreate(output, seckey) {
                var bn = new BN$1(seckey);
                if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1;
                var point = ec.keyFromPrivate(seckey).getPublic();
                savePublicKey(output, point);
                return 0;
              },
              publicKeyConvert: function publicKeyConvert(output, pubkey) {
                var pair = loadPublicKey(pubkey);
                if (pair === null) return 1;
                var point = pair.getPublic();
                savePublicKey(output, point);
                return 0;
              },
              publicKeyNegate: function publicKeyNegate(output, pubkey) {
                var pair = loadPublicKey(pubkey);
                if (pair === null) return 1;
                var point = pair.getPublic();
                point.y = point.y.redNeg();
                savePublicKey(output, point);
                return 0;
              },
              publicKeyCombine: function publicKeyCombine(output, pubkeys) {
                var pairs = new Array(pubkeys.length);

                for (var i = 0; i < pubkeys.length; ++i) {
                  pairs[i] = loadPublicKey(pubkeys[i]);
                  if (pairs[i] === null) return 1;
                }

                var point = pairs[0].getPublic();

                for (var _i = 1; _i < pairs.length; ++_i) {
                  point = point.add(pairs[_i].pub);
                }

                if (point.isInfinity()) return 2;
                savePublicKey(output, point);
                return 0;
              },
              publicKeyTweakAdd: function publicKeyTweakAdd(output, pubkey, tweak) {
                var pair = loadPublicKey(pubkey);
                if (pair === null) return 1;
                tweak = new BN$1(tweak);
                if (tweak.cmp(ecparams.n) >= 0) return 2;
                var point = pair.getPublic().add(ecparams.g.mul(tweak));
                if (point.isInfinity()) return 2;
                savePublicKey(output, point);
                return 0;
              },
              publicKeyTweakMul: function publicKeyTweakMul(output, pubkey, tweak) {
                var pair = loadPublicKey(pubkey);
                if (pair === null) return 1;
                tweak = new BN$1(tweak);
                if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2;
                var point = pair.getPublic().mul(tweak);
                savePublicKey(output, point);
                return 0;
              },
              signatureNormalize: function signatureNormalize(sig) {
                var r = new BN$1(sig.subarray(0, 32));
                var s = new BN$1(sig.subarray(32, 64));
                if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1;

                if (s.cmp(ec.nh) === 1) {
                  sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32);
                }

                return 0;
              },
              // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
              // Adapted for Uint8Array instead Buffer
              signatureExport: function signatureExport(obj, sig) {
                var sigR = sig.subarray(0, 32);
                var sigS = sig.subarray(32, 64);
                if (new BN$1(sigR).cmp(ecparams.n) >= 0) return 1;
                if (new BN$1(sigS).cmp(ecparams.n) >= 0) return 1;
                var output = obj.output; // Prepare R

                var r = output.subarray(4, 4 + 33);
                r[0] = 0x00;
                r.set(sigR, 1);
                var lenR = 33;
                var posR = 0;

                for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR) {
                }

                r = r.subarray(posR);
                if (r[0] & 0x80) return 1;
                if (lenR > 1 && r[0] === 0x00 && !(r[1] & 0x80)) return 1; // Prepare S

                var s = output.subarray(6 + 33, 6 + 33 + 33);
                s[0] = 0x00;
                s.set(sigS, 1);
                var lenS = 33;
                var posS = 0;

                for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS) {
                }

                s = s.subarray(posS);
                if (s[0] & 0x80) return 1;
                if (lenS > 1 && s[0] === 0x00 && !(s[1] & 0x80)) return 1; // Set output length for return

                obj.outputlen = 6 + lenR + lenS; // Output in specified format
                // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]

                output[0] = 0x30;
                output[1] = obj.outputlen - 2;
                output[2] = 0x02;
                output[3] = r.length;
                output.set(r, 4);
                output[4 + lenR] = 0x02;
                output[5 + lenR] = s.length;
                output.set(s, 6 + lenR);
                return 0;
              },
              // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
              // Adapted for Uint8Array instead Buffer
              signatureImport: function signatureImport(output, sig) {
                if (sig.length < 8) return 1;
                if (sig.length > 72) return 1;
                if (sig[0] !== 0x30) return 1;
                if (sig[1] !== sig.length - 2) return 1;
                if (sig[2] !== 0x02) return 1;
                var lenR = sig[3];
                if (lenR === 0) return 1;
                if (5 + lenR >= sig.length) return 1;
                if (sig[4 + lenR] !== 0x02) return 1;
                var lenS = sig[5 + lenR];
                if (lenS === 0) return 1;
                if (6 + lenR + lenS !== sig.length) return 1;
                if (sig[4] & 0x80) return 1;
                if (lenR > 1 && sig[4] === 0x00 && !(sig[5] & 0x80)) return 1;
                if (sig[lenR + 6] & 0x80) return 1;
                if (lenS > 1 && sig[lenR + 6] === 0x00 && !(sig[lenR + 7] & 0x80)) return 1;
                var sigR = sig.subarray(4, 4 + lenR);
                if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1);
                if (sigR.length > 32) return 1;
                var sigS = sig.subarray(6 + lenR);
                if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1);
                if (sigS.length > 32) throw new Error('S length is too long');
                var r = new BN$1(sigR);
                if (r.cmp(ecparams.n) >= 0) r = new BN$1(0);
                var s = new BN$1(sig.subarray(6 + lenR));
                if (s.cmp(ecparams.n) >= 0) s = new BN$1(0);
                output.set(r.toArrayLike(Uint8Array, 'be', 32), 0);
                output.set(s.toArrayLike(Uint8Array, 'be', 32), 32);
                return 0;
              },
              ecdsaSign: function ecdsaSign(obj, message, seckey, data, noncefn) {
                if (noncefn) {
                  var _noncefn = noncefn;

                  noncefn = function noncefn(counter) {
                    var nonce = _noncefn(message, seckey, null, data, counter);

                    var isValid = nonce instanceof Uint8Array && nonce.length === 32;
                    if (!isValid) throw new Error('This is the way');
                    return new BN$1(nonce);
                  };
                }

                var d = new BN$1(seckey);
                if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1;
                var sig;

                try {
                  sig = ec.sign(message, seckey, {
                    canonical: true,
                    k: noncefn,
                    pers: data
                  });
                } catch (err) {
                  return 1;
                }

                obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0);
                obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32);
                obj.recid = sig.recoveryParam;
                return 0;
              },
              ecdsaVerify: function ecdsaVerify(sig, msg32, pubkey) {
                var sigObj = {
                  r: sig.subarray(0, 32),
                  s: sig.subarray(32, 64)
                };
                var sigr = new BN$1(sigObj.r);
                var sigs = new BN$1(sigObj.s);
                if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1;
                if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3;
                var pair = loadPublicKey(pubkey);
                if (pair === null) return 2;
                var point = pair.getPublic();
                var isValid = ec.verify(msg32, sigObj, point);
                return isValid ? 0 : 3;
              },
              ecdsaRecover: function ecdsaRecover(output, sig, recid, msg32) {
                var sigObj = {
                  r: sig.slice(0, 32),
                  s: sig.slice(32, 64)
                };
                var sigr = new BN$1(sigObj.r);
                var sigs = new BN$1(sigObj.s);
                if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1;
                if (sigr.isZero() || sigs.isZero()) return 2; // Can throw `throw new Error('Unable to find sencond key candinate');`

                var point;

                try {
                  point = ec.recoverPubKey(msg32, sigObj, recid);
                } catch (err) {
                  return 2;
                }

                savePublicKey(output, point);
                return 0;
              },
              ecdh: function ecdh(output, pubkey, seckey, data, hashfn, xbuf, ybuf) {
                var pair = loadPublicKey(pubkey);
                if (pair === null) return 1;
                var scalar = new BN$1(seckey);
                if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2;
                var point = pair.getPublic().mul(scalar);

                if (hashfn === undefined) {
                  var _data = point.encode(null, true);

                  var sha256 = ec.hash().update(_data).digest();

                  for (var i = 0; i < 32; ++i) {
                    output[i] = sha256[i];
                  }
                } else {
                  if (!xbuf) xbuf = new Uint8Array(32);
                  var x = point.getX().toArray('be', 32);

                  for (var _i2 = 0; _i2 < 32; ++_i2) {
                    xbuf[_i2] = x[_i2];
                  }

                  if (!ybuf) ybuf = new Uint8Array(32);
                  var y = point.getY().toArray('be', 32);

                  for (var _i3 = 0; _i3 < 32; ++_i3) {
                    ybuf[_i3] = y[_i3];
                  }

                  var hash = hashfn(xbuf, ybuf, data);
                  var isValid = hash instanceof Uint8Array && hash.length === output.length;
                  if (!isValid) return 2;
                  output.set(hash);
                }

                return 0;
              }
            };

            var elliptic = lib$2(elliptic$1);

            var keccak$2 = {};

            var hashUtils = {};

            Object.defineProperty(hashUtils, "__esModule", {
              value: true
            });

            function createHashFunction(hashConstructor) {
              return function (msg) {
                var hash = hashConstructor();
                hash.update(msg);
                return Buffer$i.from(hash.digest());
              };
            }

            hashUtils.createHashFunction = createHashFunction;

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            function _createClass(Constructor, protoProps, staticProps) {
              if (protoProps) _defineProperties(Constructor.prototype, protoProps);
              if (staticProps) _defineProperties(Constructor, staticProps);
              Object.defineProperty(Constructor, "prototype", {
                writable: false
              });
              return Constructor;
            }

            function _setPrototypeOf(o, p) {
              _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                o.__proto__ = p;
                return o;
              };

              return _setPrototypeOf(o, p);
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function");
              }

              Object.defineProperty(subClass, "prototype", {
                value: Object.create(superClass && superClass.prototype, {
                  constructor: {
                    value: subClass,
                    writable: true,
                    configurable: true
                  }
                }),
                writable: false
              });
              if (superClass) _setPrototypeOf(subClass, superClass);
            }

            function _assertThisInitialized(self) {
              if (self === void 0) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }

              return self;
            }

            function _possibleConstructorReturn(self, call) {
              if (call && (_typeof$1(call) === "object" || typeof call === "function")) {
                return call;
              } else if (call !== void 0) {
                throw new TypeError("Derived constructors may only return object or undefined");
              }

              return _assertThisInitialized(self);
            }

            function _getPrototypeOf(o) {
              _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
              return _getPrototypeOf(o);
            }

            var domain; // This constructor is used to store event handlers. Instantiating this is
            // faster than explicitly calling `Object.create(null)` to get a "clean" empty
            // object (tested with v8 v4.9).

            function EventHandlers() {}

            EventHandlers.prototype = Object.create(null);

            function EventEmitter() {
              EventEmitter.init.call(this);
            }
            // require('events') === require('events').EventEmitter

            EventEmitter.EventEmitter = EventEmitter;
            EventEmitter.usingDomains = false;
            EventEmitter.prototype.domain = undefined;
            EventEmitter.prototype._events = undefined;
            EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
            // added to it. This is a useful default which helps finding memory leaks.

            EventEmitter.defaultMaxListeners = 10;

            EventEmitter.init = function () {
              this.domain = null;

              if (EventEmitter.usingDomains) {
                // if there is an active domain, then attach to it.
                if (domain.active ) ;
              }

              if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
                this._events = new EventHandlers();
                this._eventsCount = 0;
              }

              this._maxListeners = this._maxListeners || undefined;
            }; // Obviously not all Emitters should be limited to 10. This function allows
            // that to be increased. Set to zero for unlimited.


            EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
              if (typeof n !== 'number' || n < 0 || isNaN(n)) throw new TypeError('"n" argument must be a positive number');
              this._maxListeners = n;
              return this;
            };

            function $getMaxListeners(that) {
              if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
              return that._maxListeners;
            }

            EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
              return $getMaxListeners(this);
            }; // These standalone emit* functions are used to optimize calling of event
            // handlers for fast cases because emit() itself often has a variable number of
            // arguments and can be deoptimized because of that. These functions always have
            // the same number of arguments and thus do not get deoptimized, so the code
            // inside them can execute faster.


            function emitNone(handler, isFn, self) {
              if (isFn) handler.call(self);else {
                var len = handler.length;
                var listeners = arrayClone(handler, len);

                for (var i = 0; i < len; ++i) {
                  listeners[i].call(self);
                }
              }
            }

            function emitOne(handler, isFn, self, arg1) {
              if (isFn) handler.call(self, arg1);else {
                var len = handler.length;
                var listeners = arrayClone(handler, len);

                for (var i = 0; i < len; ++i) {
                  listeners[i].call(self, arg1);
                }
              }
            }

            function emitTwo(handler, isFn, self, arg1, arg2) {
              if (isFn) handler.call(self, arg1, arg2);else {
                var len = handler.length;
                var listeners = arrayClone(handler, len);

                for (var i = 0; i < len; ++i) {
                  listeners[i].call(self, arg1, arg2);
                }
              }
            }

            function emitThree(handler, isFn, self, arg1, arg2, arg3) {
              if (isFn) handler.call(self, arg1, arg2, arg3);else {
                var len = handler.length;
                var listeners = arrayClone(handler, len);

                for (var i = 0; i < len; ++i) {
                  listeners[i].call(self, arg1, arg2, arg3);
                }
              }
            }

            function emitMany(handler, isFn, self, args) {
              if (isFn) handler.apply(self, args);else {
                var len = handler.length;
                var listeners = arrayClone(handler, len);

                for (var i = 0; i < len; ++i) {
                  listeners[i].apply(self, args);
                }
              }
            }

            EventEmitter.prototype.emit = function emit(type) {
              var er, handler, len, args, i, events, domain;
              var doError = type === 'error';
              events = this._events;
              if (events) doError = doError && events.error == null;else if (!doError) return false;
              domain = this.domain; // If there is no 'error' event listener then throw.

              if (doError) {
                er = arguments[1];

                if (domain) {
                  if (!er) er = new Error('Uncaught, unspecified "error" event');
                  er.domainEmitter = this;
                  er.domain = domain;
                  er.domainThrown = false;
                  domain.emit('error', er);
                } else if (er instanceof Error) {
                  throw er; // Unhandled 'error' event
                } else {
                  // At least give some kind of context to the user
                  var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
                  err.context = er;
                  throw err;
                }

                return false;
              }

              handler = events[type];
              if (!handler) return false;
              var isFn = typeof handler === 'function';
              len = arguments.length;

              switch (len) {
                // fast cases
                case 1:
                  emitNone(handler, isFn, this);
                  break;

                case 2:
                  emitOne(handler, isFn, this, arguments[1]);
                  break;

                case 3:
                  emitTwo(handler, isFn, this, arguments[1], arguments[2]);
                  break;

                case 4:
                  emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
                  break;
                // slower

                default:
                  args = new Array(len - 1);

                  for (i = 1; i < len; i++) {
                    args[i - 1] = arguments[i];
                  }

                  emitMany(handler, isFn, this, args);
              }
              return true;
            };

            function _addListener(target, type, listener, prepend) {
              var m;
              var events;
              var existing;
              if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
              events = target._events;

              if (!events) {
                events = target._events = new EventHandlers();
                target._eventsCount = 0;
              } else {
                // To avoid recursion in the case that type === "newListener"! Before
                // adding it to the listeners, first emit "newListener".
                if (events.newListener) {
                  target.emit('newListener', type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the
                  // this._events to be assigned to a new object

                  events = target._events;
                }

                existing = events[type];
              }

              if (!existing) {
                // Optimize the case of one listener. Don't need the extra array object.
                existing = events[type] = listener;
                ++target._eventsCount;
              } else {
                if (typeof existing === 'function') {
                  // Adding the second element, need to change to array.
                  existing = events[type] = prepend ? [listener, existing] : [existing, listener];
                } else {
                  // If we've already got an array, just append.
                  if (prepend) {
                    existing.unshift(listener);
                  } else {
                    existing.push(listener);
                  }
                } // Check for listener leak


                if (!existing.warned) {
                  m = $getMaxListeners(target);

                  if (m && m > 0 && existing.length > m) {
                    existing.warned = true;
                    var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + type + ' listeners added. ' + 'Use emitter.setMaxListeners() to increase limit');
                    w.name = 'MaxListenersExceededWarning';
                    w.emitter = target;
                    w.type = type;
                    w.count = existing.length;
                    emitWarning(w);
                  }
                }
              }

              return target;
            }

            function emitWarning(e) {
              typeof console.warn === 'function' ? console.warn(e) : console.log(e);
            }

            EventEmitter.prototype.addListener = function addListener(type, listener) {
              return _addListener(this, type, listener, false);
            };

            EventEmitter.prototype.on = EventEmitter.prototype.addListener;

            EventEmitter.prototype.prependListener = function prependListener(type, listener) {
              return _addListener(this, type, listener, true);
            };

            function _onceWrap(target, type, listener) {
              var fired = false;

              function g() {
                target.removeListener(type, g);

                if (!fired) {
                  fired = true;
                  listener.apply(target, arguments);
                }
              }

              g.listener = listener;
              return g;
            }

            EventEmitter.prototype.once = function once(type, listener) {
              if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
              this.on(type, _onceWrap(this, type, listener));
              return this;
            };

            EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
              if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
              this.prependListener(type, _onceWrap(this, type, listener));
              return this;
            }; // emits a 'removeListener' event iff the listener was removed


            EventEmitter.prototype.removeListener = function removeListener(type, listener) {
              var list, events, position, i, originalListener;
              if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
              events = this._events;
              if (!events) return this;
              list = events[type];
              if (!list) return this;

              if (list === listener || list.listener && list.listener === listener) {
                if (--this._eventsCount === 0) this._events = new EventHandlers();else {
                  delete events[type];
                  if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
                }
              } else if (typeof list !== 'function') {
                position = -1;

                for (i = list.length; i-- > 0;) {
                  if (list[i] === listener || list[i].listener && list[i].listener === listener) {
                    originalListener = list[i].listener;
                    position = i;
                    break;
                  }
                }

                if (position < 0) return this;

                if (list.length === 1) {
                  list[0] = undefined;

                  if (--this._eventsCount === 0) {
                    this._events = new EventHandlers();
                    return this;
                  } else {
                    delete events[type];
                  }
                } else {
                  spliceOne(list, position);
                }

                if (events.removeListener) this.emit('removeListener', type, originalListener || listener);
              }

              return this;
            };

            EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
              var listeners, events;
              events = this._events;
              if (!events) return this; // not listening for removeListener, no need to emit

              if (!events.removeListener) {
                if (arguments.length === 0) {
                  this._events = new EventHandlers();
                  this._eventsCount = 0;
                } else if (events[type]) {
                  if (--this._eventsCount === 0) this._events = new EventHandlers();else delete events[type];
                }

                return this;
              } // emit removeListener for all listeners on all events


              if (arguments.length === 0) {
                var keys = Object.keys(events);

                for (var i = 0, key; i < keys.length; ++i) {
                  key = keys[i];
                  if (key === 'removeListener') continue;
                  this.removeAllListeners(key);
                }

                this.removeAllListeners('removeListener');
                this._events = new EventHandlers();
                this._eventsCount = 0;
                return this;
              }

              listeners = events[type];

              if (typeof listeners === 'function') {
                this.removeListener(type, listeners);
              } else if (listeners) {
                // LIFO order
                do {
                  this.removeListener(type, listeners[listeners.length - 1]);
                } while (listeners[0]);
              }

              return this;
            };

            EventEmitter.prototype.listeners = function listeners(type) {
              var evlistener;
              var ret;
              var events = this._events;
              if (!events) ret = [];else {
                evlistener = events[type];
                if (!evlistener) ret = [];else if (typeof evlistener === 'function') ret = [evlistener.listener || evlistener];else ret = unwrapListeners(evlistener);
              }
              return ret;
            };

            EventEmitter.listenerCount = function (emitter, type) {
              if (typeof emitter.listenerCount === 'function') {
                return emitter.listenerCount(type);
              } else {
                return listenerCount$1.call(emitter, type);
              }
            };

            EventEmitter.prototype.listenerCount = listenerCount$1;

            function listenerCount$1(type) {
              var events = this._events;

              if (events) {
                var evlistener = events[type];

                if (typeof evlistener === 'function') {
                  return 1;
                } else if (evlistener) {
                  return evlistener.length;
                }
              }

              return 0;
            }

            EventEmitter.prototype.eventNames = function eventNames() {
              return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
            }; // About 1.5x faster than the two-arg version of Array#splice().


            function spliceOne(list, index) {
              for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
                list[i] = list[k];
              }

              list.pop();
            }

            function arrayClone(arr, i) {
              var copy = new Array(i);

              while (i--) {
                copy[i] = arr[i];
              }

              return copy;
            }

            function unwrapListeners(arr) {
              var ret = new Array(arr.length);

              for (var i = 0; i < ret.length; ++i) {
                ret[i] = arr[i].listener || arr[i];
              }

              return ret;
            }

            // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

            function defaultSetTimout() {
              throw new Error('setTimeout has not been defined');
            }

            function defaultClearTimeout() {
              throw new Error('clearTimeout has not been defined');
            }

            var cachedSetTimeout = defaultSetTimout;
            var cachedClearTimeout = defaultClearTimeout;

            if (typeof global$1.setTimeout === 'function') {
              cachedSetTimeout = setTimeout;
            }

            if (typeof global$1.clearTimeout === 'function') {
              cachedClearTimeout = clearTimeout;
            }

            function runTimeout(fun) {
              if (cachedSetTimeout === setTimeout) {
                //normal enviroments in sane situations
                return setTimeout(fun, 0);
              } // if setTimeout wasn't available but was latter defined


              if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                cachedSetTimeout = setTimeout;
                return setTimeout(fun, 0);
              }

              try {
                // when when somebody has screwed with setTimeout but no I.E. maddness
                return cachedSetTimeout(fun, 0);
              } catch (e) {
                try {
                  // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                  return cachedSetTimeout.call(null, fun, 0);
                } catch (e) {
                  // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                  return cachedSetTimeout.call(this, fun, 0);
                }
              }
            }

            function runClearTimeout(marker) {
              if (cachedClearTimeout === clearTimeout) {
                //normal enviroments in sane situations
                return clearTimeout(marker);
              } // if clearTimeout wasn't available but was latter defined


              if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                cachedClearTimeout = clearTimeout;
                return clearTimeout(marker);
              }

              try {
                // when when somebody has screwed with setTimeout but no I.E. maddness
                return cachedClearTimeout(marker);
              } catch (e) {
                try {
                  // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                  return cachedClearTimeout.call(null, marker);
                } catch (e) {
                  // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                  // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                  return cachedClearTimeout.call(this, marker);
                }
              }
            }

            var queue = [];
            var draining = false;
            var currentQueue;
            var queueIndex = -1;

            function cleanUpNextTick() {
              if (!draining || !currentQueue) {
                return;
              }

              draining = false;

              if (currentQueue.length) {
                queue = currentQueue.concat(queue);
              } else {
                queueIndex = -1;
              }

              if (queue.length) {
                drainQueue();
              }
            }

            function drainQueue() {
              if (draining) {
                return;
              }

              var timeout = runTimeout(cleanUpNextTick);
              draining = true;
              var len = queue.length;

              while (len) {
                currentQueue = queue;
                queue = [];

                while (++queueIndex < len) {
                  if (currentQueue) {
                    currentQueue[queueIndex].run();
                  }
                }

                queueIndex = -1;
                len = queue.length;
              }

              currentQueue = null;
              draining = false;
              runClearTimeout(timeout);
            }

            function nextTick(fun) {
              var args = new Array(arguments.length - 1);

              if (arguments.length > 1) {
                for (var i = 1; i < arguments.length; i++) {
                  args[i - 1] = arguments[i];
                }
              }

              queue.push(new Item(fun, args));

              if (queue.length === 1 && !draining) {
                runTimeout(drainQueue);
              }
            } // v8 likes predictible objects

            function Item(fun, array) {
              this.fun = fun;
              this.array = array;
            }

            Item.prototype.run = function () {
              this.fun.apply(null, this.array);
            };

            var title = 'browser';
            var platform = 'browser';
            var browser$4 = true;
            var env = {};
            var argv = [];
            var version = ''; // empty string to avoid regexp issues

            var versions = {};
            var release = {};
            var config = {};

            function noop$1() {}

            var on = noop$1;
            var addListener = noop$1;
            var once = noop$1;
            var off = noop$1;
            var removeListener = noop$1;
            var removeAllListeners = noop$1;
            var emit = noop$1;
            function binding(name) {
              throw new Error('process.binding is not supported');
            }
            function cwd() {
              return '/';
            }
            function chdir(dir) {
              throw new Error('process.chdir is not supported');
            }
            function umask() {
              return 0;
            } // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js

            var performance = global$1.performance || {};

            var performanceNow = performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow || function () {
              return new Date().getTime();
            }; // generate timestamp or delta
            // see http://nodejs.org/api/process.html#process_process_hrtime


            function hrtime(previousTimestamp) {
              var clocktime = performanceNow.call(performance) * 1e-3;
              var seconds = Math.floor(clocktime);
              var nanoseconds = Math.floor(clocktime % 1 * 1e9);

              if (previousTimestamp) {
                seconds = seconds - previousTimestamp[0];
                nanoseconds = nanoseconds - previousTimestamp[1];

                if (nanoseconds < 0) {
                  seconds--;
                  nanoseconds += 1e9;
                }
              }

              return [seconds, nanoseconds];
            }
            var startTime = new Date();
            function uptime() {
              var currentTime = new Date();
              var dif = currentTime - startTime;
              return dif / 1000;
            }
            var process = {
              nextTick: nextTick,
              title: title,
              browser: browser$4,
              env: env,
              argv: argv,
              version: version,
              versions: versions,
              on: on,
              addListener: addListener,
              once: once,
              off: off,
              removeListener: removeListener,
              removeAllListeners: removeAllListeners,
              emit: emit,
              binding: binding,
              cwd: cwd,
              chdir: chdir,
              umask: umask,
              hrtime: hrtime,
              platform: platform,
              release: release,
              config: config,
              uptime: uptime
            };

            var inherits$d;

            if (typeof Object.create === 'function') {
              inherits$d = function inherits(ctor, superCtor) {
                // implementation from standard node.js 'util' module
                ctor.super_ = superCtor;
                ctor.prototype = Object.create(superCtor.prototype, {
                  constructor: {
                    value: ctor,
                    enumerable: false,
                    writable: true,
                    configurable: true
                  }
                });
              };
            } else {
              inherits$d = function inherits(ctor, superCtor) {
                ctor.super_ = superCtor;

                var TempCtor = function TempCtor() {};

                TempCtor.prototype = superCtor.prototype;
                ctor.prototype = new TempCtor();
                ctor.prototype.constructor = ctor;
              };
            }

            var inherits$e = inherits$d;

            var formatRegExp = /%[sdj%]/g;
            function format(f) {
              if (!isString$2(f)) {
                var objects = [];

                for (var i = 0; i < arguments.length; i++) {
                  objects.push(inspect$2(arguments[i]));
                }

                return objects.join(' ');
              }

              var i = 1;
              var args = arguments;
              var len = args.length;
              var str = String(f).replace(formatRegExp, function (x) {
                if (x === '%%') return '%';
                if (i >= len) return x;

                switch (x) {
                  case '%s':
                    return String(args[i++]);

                  case '%d':
                    return Number(args[i++]);

                  case '%j':
                    try {
                      return JSON.stringify(args[i++]);
                    } catch (_) {
                      return '[Circular]';
                    }

                  default:
                    return x;
                }
              });

              for (var x = args[i]; i < len; x = args[++i]) {
                if (isNull(x) || !isObject$2(x)) {
                  str += ' ' + x;
                } else {
                  str += ' ' + inspect$2(x);
                }
              }

              return str;
            }
            // Returns a modified function which warns once by default.
            // If --no-deprecation is set, then it is a no-op.

            function deprecate(fn, msg) {
              // Allow for deprecating things in the process of starting up.
              if (isUndefined$1(global$1.process)) {
                return function () {
                  return deprecate(fn, msg).apply(this, arguments);
                };
              }

              if (process.noDeprecation === true) {
                return fn;
              }

              var warned = false;

              function deprecated() {
                if (!warned) {
                  if (process.throwDeprecation) {
                    throw new Error(msg);
                  } else if (process.traceDeprecation) {
                    console.trace(msg);
                  } else {
                    console.error(msg);
                  }

                  warned = true;
                }

                return fn.apply(this, arguments);
              }

              return deprecated;
            }
            var debugs = {};
            var debugEnviron;
            function debuglog(set) {
              if (isUndefined$1(debugEnviron)) debugEnviron = process.env.NODE_DEBUG || '';
              set = set.toUpperCase();

              if (!debugs[set]) {
                if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
                  var pid = 0;

                  debugs[set] = function () {
                    var msg = format.apply(null, arguments);
                    console.error('%s %d: %s', set, pid, msg);
                  };
                } else {
                  debugs[set] = function () {};
                }
              }

              return debugs[set];
            }
            /**
             * Echos the value of a value. Trys to print the value out
             * in the best way possible given the different types.
             *
             * @param {Object} obj The object to print out.
             * @param {Object} opts Optional options object that alters the output.
             */

            /* legacy: obj, showHidden, depth, colors*/

            function inspect$2(obj, opts) {
              // default options
              var ctx = {
                seen: [],
                stylize: stylizeNoColor
              }; // legacy...

              if (arguments.length >= 3) ctx.depth = arguments[2];
              if (arguments.length >= 4) ctx.colors = arguments[3];

              if (isBoolean$1(opts)) {
                // legacy...
                ctx.showHidden = opts;
              } else if (opts) {
                // got an "options" object
                _extend(ctx, opts);
              } // set default options


              if (isUndefined$1(ctx.showHidden)) ctx.showHidden = false;
              if (isUndefined$1(ctx.depth)) ctx.depth = 2;
              if (isUndefined$1(ctx.colors)) ctx.colors = false;
              if (isUndefined$1(ctx.customInspect)) ctx.customInspect = true;
              if (ctx.colors) ctx.stylize = stylizeWithColor;
              return formatValue(ctx, obj, ctx.depth);
            } // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics

            inspect$2.colors = {
              'bold': [1, 22],
              'italic': [3, 23],
              'underline': [4, 24],
              'inverse': [7, 27],
              'white': [37, 39],
              'grey': [90, 39],
              'black': [30, 39],
              'blue': [34, 39],
              'cyan': [36, 39],
              'green': [32, 39],
              'magenta': [35, 39],
              'red': [31, 39],
              'yellow': [33, 39]
            }; // Don't use 'blue' not visible on cmd.exe

            inspect$2.styles = {
              'special': 'cyan',
              'number': 'yellow',
              'boolean': 'yellow',
              'undefined': 'grey',
              'null': 'bold',
              'string': 'green',
              'date': 'magenta',
              // "name": intentionally not styling
              'regexp': 'red'
            };

            function stylizeWithColor(str, styleType) {
              var style = inspect$2.styles[styleType];

              if (style) {
                return "\x1B[" + inspect$2.colors[style][0] + 'm' + str + "\x1B[" + inspect$2.colors[style][1] + 'm';
              } else {
                return str;
              }
            }

            function stylizeNoColor(str, styleType) {
              return str;
            }

            function arrayToHash(array) {
              var hash = {};
              array.forEach(function (val, idx) {
                hash[val] = true;
              });
              return hash;
            }

            function formatValue(ctx, value, recurseTimes) {
              // Provide a hook for user-specified inspect functions.
              // Check that value is an object with an inspect function on it
              if (ctx.customInspect && value && isFunction$2(value.inspect) && // Filter out the util module, it's inspect function is special
              value.inspect !== inspect$2 && // Also filter out any prototype objects using the circular check.
              !(value.constructor && value.constructor.prototype === value)) {
                var ret = value.inspect(recurseTimes, ctx);

                if (!isString$2(ret)) {
                  ret = formatValue(ctx, ret, recurseTimes);
                }

                return ret;
              } // Primitive types cannot have properties


              var primitive = formatPrimitive(ctx, value);

              if (primitive) {
                return primitive;
              } // Look up the keys of the object.


              var keys = Object.keys(value);
              var visibleKeys = arrayToHash(keys);

              if (ctx.showHidden) {
                keys = Object.getOwnPropertyNames(value);
              } // IE doesn't make error fields non-enumerable
              // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx


              if (isError$1(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
                return formatError(value);
              } // Some type of object without properties can be shortcutted.


              if (keys.length === 0) {
                if (isFunction$2(value)) {
                  var name = value.name ? ': ' + value.name : '';
                  return ctx.stylize('[Function' + name + ']', 'special');
                }

                if (isRegExp$2(value)) {
                  return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                }

                if (isDate$2(value)) {
                  return ctx.stylize(Date.prototype.toString.call(value), 'date');
                }

                if (isError$1(value)) {
                  return formatError(value);
                }
              }

              var base = '',
                  array = false,
                  braces = ['{', '}']; // Make Array say that they are Array

              if (isArray$7(value)) {
                array = true;
                braces = ['[', ']'];
              } // Make functions say that they are functions


              if (isFunction$2(value)) {
                var n = value.name ? ': ' + value.name : '';
                base = ' [Function' + n + ']';
              } // Make RegExps say that they are RegExps


              if (isRegExp$2(value)) {
                base = ' ' + RegExp.prototype.toString.call(value);
              } // Make dates with properties first say the date


              if (isDate$2(value)) {
                base = ' ' + Date.prototype.toUTCString.call(value);
              } // Make error with message first say the error


              if (isError$1(value)) {
                base = ' ' + formatError(value);
              }

              if (keys.length === 0 && (!array || value.length == 0)) {
                return braces[0] + base + braces[1];
              }

              if (recurseTimes < 0) {
                if (isRegExp$2(value)) {
                  return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                } else {
                  return ctx.stylize('[Object]', 'special');
                }
              }

              ctx.seen.push(value);
              var output;

              if (array) {
                output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
              } else {
                output = keys.map(function (key) {
                  return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
                });
              }

              ctx.seen.pop();
              return reduceToSingleString(output, base, braces);
            }

            function formatPrimitive(ctx, value) {
              if (isUndefined$1(value)) return ctx.stylize('undefined', 'undefined');

              if (isString$2(value)) {
                var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
                return ctx.stylize(simple, 'string');
              }

              if (isNumber$2(value)) return ctx.stylize('' + value, 'number');
              if (isBoolean$1(value)) return ctx.stylize('' + value, 'boolean'); // For some reason typeof null is "object", so special case here.

              if (isNull(value)) return ctx.stylize('null', 'null');
            }

            function formatError(value) {
              return '[' + Error.prototype.toString.call(value) + ']';
            }

            function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
              var output = [];

              for (var i = 0, l = value.length; i < l; ++i) {
                if (hasOwnProperty$5(value, String(i))) {
                  output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
                } else {
                  output.push('');
                }
              }

              keys.forEach(function (key) {
                if (!key.match(/^\d+$/)) {
                  output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
                }
              });
              return output;
            }

            function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
              var name, str, desc;
              desc = Object.getOwnPropertyDescriptor(value, key) || {
                value: value[key]
              };

              if (desc.get) {
                if (desc.set) {
                  str = ctx.stylize('[Getter/Setter]', 'special');
                } else {
                  str = ctx.stylize('[Getter]', 'special');
                }
              } else {
                if (desc.set) {
                  str = ctx.stylize('[Setter]', 'special');
                }
              }

              if (!hasOwnProperty$5(visibleKeys, key)) {
                name = '[' + key + ']';
              }

              if (!str) {
                if (ctx.seen.indexOf(desc.value) < 0) {
                  if (isNull(recurseTimes)) {
                    str = formatValue(ctx, desc.value, null);
                  } else {
                    str = formatValue(ctx, desc.value, recurseTimes - 1);
                  }

                  if (str.indexOf('\n') > -1) {
                    if (array) {
                      str = str.split('\n').map(function (line) {
                        return '  ' + line;
                      }).join('\n').substr(2);
                    } else {
                      str = '\n' + str.split('\n').map(function (line) {
                        return '   ' + line;
                      }).join('\n');
                    }
                  }
                } else {
                  str = ctx.stylize('[Circular]', 'special');
                }
              }

              if (isUndefined$1(name)) {
                if (array && key.match(/^\d+$/)) {
                  return str;
                }

                name = JSON.stringify('' + key);

                if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                  name = name.substr(1, name.length - 2);
                  name = ctx.stylize(name, 'name');
                } else {
                  name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
                  name = ctx.stylize(name, 'string');
                }
              }

              return name + ': ' + str;
            }

            function reduceToSingleString(output, base, braces) {
              var length = output.reduce(function (prev, cur) {
                if (cur.indexOf('\n') >= 0) ;
                return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
              }, 0);

              if (length > 60) {
                return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
              }

              return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
            } // NOTE: These type checking functions intentionally don't use `instanceof`
            // because it is fragile and can be easily faked with `Object.create()`.


            function isArray$7(ar) {
              return Array.isArray(ar);
            }
            function isBoolean$1(arg) {
              return typeof arg === 'boolean';
            }
            function isNull(arg) {
              return arg === null;
            }
            function isNumber$2(arg) {
              return typeof arg === 'number';
            }
            function isString$2(arg) {
              return typeof arg === 'string';
            }
            function isUndefined$1(arg) {
              return arg === void 0;
            }
            function isRegExp$2(re) {
              return isObject$2(re) && objectToString$2(re) === '[object RegExp]';
            }
            function isObject$2(arg) {
              return _typeof$1(arg) === 'object' && arg !== null;
            }
            function isDate$2(d) {
              return isObject$2(d) && objectToString$2(d) === '[object Date]';
            }
            function isError$1(e) {
              return isObject$2(e) && (objectToString$2(e) === '[object Error]' || e instanceof Error);
            }
            function isFunction$2(arg) {
              return typeof arg === 'function';
            }
            function isPrimitive(arg) {
              return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || _typeof$1(arg) === 'symbol' || // ES6 symbol
              typeof arg === 'undefined';
            }

            function objectToString$2(o) {
              return Object.prototype.toString.call(o);
            }
            function _extend(origin, add) {
              // Don't do anything if add isn't an object
              if (!add || !isObject$2(add)) return origin;
              var keys = Object.keys(add);
              var i = keys.length;

              while (i--) {
                origin[keys[i]] = add[keys[i]];
              }

              return origin;
            }

            function hasOwnProperty$5(obj, prop) {
              return Object.prototype.hasOwnProperty.call(obj, prop);
            }

            function BufferList() {
              this.head = null;
              this.tail = null;
              this.length = 0;
            }

            BufferList.prototype.push = function (v) {
              var entry = {
                data: v,
                next: null
              };
              if (this.length > 0) this.tail.next = entry;else this.head = entry;
              this.tail = entry;
              ++this.length;
            };

            BufferList.prototype.unshift = function (v) {
              var entry = {
                data: v,
                next: this.head
              };
              if (this.length === 0) this.tail = entry;
              this.head = entry;
              ++this.length;
            };

            BufferList.prototype.shift = function () {
              if (this.length === 0) return;
              var ret = this.head.data;
              if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
              --this.length;
              return ret;
            };

            BufferList.prototype.clear = function () {
              this.head = this.tail = null;
              this.length = 0;
            };

            BufferList.prototype.join = function (s) {
              if (this.length === 0) return '';
              var p = this.head;
              var ret = '' + p.data;

              while (p = p.next) {
                ret += s + p.data;
              }

              return ret;
            };

            BufferList.prototype.concat = function (n) {
              if (this.length === 0) return Buffer$i.alloc(0);
              if (this.length === 1) return this.head.data;
              var ret = Buffer$i.allocUnsafe(n >>> 0);
              var p = this.head;
              var i = 0;

              while (p) {
                p.data.copy(ret, i);
                i += p.data.length;
                p = p.next;
              }

              return ret;
            };

            // Copyright Joyent, Inc. and other Node contributors.

            var isBufferEncoding = Buffer$i.isEncoding || function (encoding) {
              switch (encoding && encoding.toLowerCase()) {
                case 'hex':
                case 'utf8':
                case 'utf-8':
                case 'ascii':
                case 'binary':
                case 'base64':
                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                case 'raw':
                  return true;

                default:
                  return false;
              }
            };

            function assertEncoding(encoding) {
              if (encoding && !isBufferEncoding(encoding)) {
                throw new Error('Unknown encoding: ' + encoding);
              }
            } // StringDecoder provides an interface for efficiently splitting a series of
            // buffers into a series of JS strings without breaking apart multi-byte
            // characters. CESU-8 is handled as part of the UTF-8 encoding.
            //
            // @TODO Handling all encodings inside a single object makes it very difficult
            // to reason about this code, so it should be split up in the future.
            // @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
            // points as used by CESU-8.


            function StringDecoder$1(encoding) {
              this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
              assertEncoding(encoding);

              switch (this.encoding) {
                case 'utf8':
                  // CESU-8 represents each of Surrogate Pair by 3-bytes
                  this.surrogateSize = 3;
                  break;

                case 'ucs2':
                case 'utf16le':
                  // UTF-16 represents each of Surrogate Pair by 2-bytes
                  this.surrogateSize = 2;
                  this.detectIncompleteChar = utf16DetectIncompleteChar;
                  break;

                case 'base64':
                  // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
                  this.surrogateSize = 3;
                  this.detectIncompleteChar = base64DetectIncompleteChar;
                  break;

                default:
                  this.write = passThroughWrite;
                  return;
              } // Enough space to store all bytes of a single character. UTF-8 needs 4
              // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).


              this.charBuffer = new Buffer$i(6); // Number of bytes received for the current incomplete multi-byte character.

              this.charReceived = 0; // Number of bytes expected for the current incomplete multi-byte character.

              this.charLength = 0;
            }
            // guaranteed to not contain any partial multi-byte characters. Any partial
            // character found at the end of the buffer is buffered up, and will be
            // returned when calling write again with the remaining bytes.
            //
            // Note: Converting a Buffer containing an orphan surrogate to a String
            // currently works, but converting a String to a Buffer (via `new Buffer`, or
            // Buffer#write) will replace incomplete surrogates with the unicode
            // replacement character. See https://codereview.chromium.org/121173009/ .

            StringDecoder$1.prototype.write = function (buffer) {
              var charStr = ''; // if our last write ended with an incomplete multibyte character

              while (this.charLength) {
                // determine how many remaining bytes this buffer has to offer for this char
                var available = buffer.length >= this.charLength - this.charReceived ? this.charLength - this.charReceived : buffer.length; // add the new bytes to the char buffer

                buffer.copy(this.charBuffer, this.charReceived, 0, available);
                this.charReceived += available;

                if (this.charReceived < this.charLength) {
                  // still not enough chars in this buffer? wait for more ...
                  return '';
                } // remove bytes belonging to the current character from the buffer


                buffer = buffer.slice(available, buffer.length); // get the character that was split

                charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding); // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character

                var charCode = charStr.charCodeAt(charStr.length - 1);

                if (charCode >= 0xD800 && charCode <= 0xDBFF) {
                  this.charLength += this.surrogateSize;
                  charStr = '';
                  continue;
                }

                this.charReceived = this.charLength = 0; // if there are no more bytes in this buffer, just emit our char

                if (buffer.length === 0) {
                  return charStr;
                }

                break;
              } // determine and set charLength / charReceived


              this.detectIncompleteChar(buffer);
              var end = buffer.length;

              if (this.charLength) {
                // buffer the incomplete character bytes we got
                buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
                end -= this.charReceived;
              }

              charStr += buffer.toString(this.encoding, 0, end);
              var end = charStr.length - 1;
              var charCode = charStr.charCodeAt(end); // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character

              if (charCode >= 0xD800 && charCode <= 0xDBFF) {
                var size = this.surrogateSize;
                this.charLength += size;
                this.charReceived += size;
                this.charBuffer.copy(this.charBuffer, size, 0, size);
                buffer.copy(this.charBuffer, 0, 0, size);
                return charStr.substring(0, end);
              } // or just emit the charStr


              return charStr;
            }; // detectIncompleteChar determines if there is an incomplete UTF-8 character at
            // the end of the given buffer. If so, it sets this.charLength to the byte
            // length that character, and sets this.charReceived to the number of bytes
            // that are available for this character.


            StringDecoder$1.prototype.detectIncompleteChar = function (buffer) {
              // determine how many bytes we have to check at the end of this buffer
              var i = buffer.length >= 3 ? 3 : buffer.length; // Figure out if one of the last i bytes of our buffer announces an
              // incomplete char.

              for (; i > 0; i--) {
                var c = buffer[buffer.length - i]; // See http://en.wikipedia.org/wiki/UTF-8#Description
                // 110XXXXX

                if (i == 1 && c >> 5 == 0x06) {
                  this.charLength = 2;
                  break;
                } // 1110XXXX


                if (i <= 2 && c >> 4 == 0x0E) {
                  this.charLength = 3;
                  break;
                } // 11110XXX


                if (i <= 3 && c >> 3 == 0x1E) {
                  this.charLength = 4;
                  break;
                }
              }

              this.charReceived = i;
            };

            StringDecoder$1.prototype.end = function (buffer) {
              var res = '';
              if (buffer && buffer.length) res = this.write(buffer);

              if (this.charReceived) {
                var cr = this.charReceived;
                var buf = this.charBuffer;
                var enc = this.encoding;
                res += buf.slice(0, cr).toString(enc);
              }

              return res;
            };

            function passThroughWrite(buffer) {
              return buffer.toString(this.encoding);
            }

            function utf16DetectIncompleteChar(buffer) {
              this.charReceived = buffer.length % 2;
              this.charLength = this.charReceived ? 2 : 0;
            }

            function base64DetectIncompleteChar(buffer) {
              this.charReceived = buffer.length % 3;
              this.charLength = this.charReceived ? 3 : 0;
            }

            var stringDecoder = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        StringDecoder: StringDecoder$1
            });

            Readable.ReadableState = ReadableState;
            var debug = debuglog('stream');
            inherits$e(Readable, EventEmitter);

            function prependListener(emitter, event, fn) {
              // Sadly this is not cacheable as some libraries bundle their own
              // event emitter implementation with them.
              if (typeof emitter.prependListener === 'function') {
                return emitter.prependListener(event, fn);
              } else {
                // This is a hack to make sure that our error handler is attached before any
                // userland ones.  NEVER DO THIS. This is here only because this code needs
                // to continue to work with older versions of Node.js that do not include
                // the prependListener() method. The goal is to eventually remove this hack.
                if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
              }
            }

            function listenerCount(emitter, type) {
              return emitter.listeners(type).length;
            }

            function ReadableState(options, stream) {
              options = options || {}; // object stream flag. Used to make read(n) ignore n and to
              // make all the buffer merging and length checks go away

              this.objectMode = !!options.objectMode;
              if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
              // Note: 0 is a valid value, means "don't call _read preemptively ever"

              var hwm = options.highWaterMark;
              var defaultHwm = this.objectMode ? 16 : 16 * 1024;
              this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm; // cast to ints.

              this.highWaterMark = ~~this.highWaterMark; // A linked list is used to store data chunks instead of an array because the
              // linked list can remove elements from the beginning faster than
              // array.shift()

              this.buffer = new BufferList();
              this.length = 0;
              this.pipes = null;
              this.pipesCount = 0;
              this.flowing = null;
              this.ended = false;
              this.endEmitted = false;
              this.reading = false; // a flag to be able to tell if the onwrite cb is called immediately,
              // or on a later tick.  We set this to true at first, because any
              // actions that shouldn't happen until "later" should generally also
              // not happen before the first write call.

              this.sync = true; // whenever we return null, then we set a flag to say
              // that we're awaiting a 'readable' event emission.

              this.needReadable = false;
              this.emittedReadable = false;
              this.readableListening = false;
              this.resumeScheduled = false; // Crypto is kind of old and crusty.  Historically, its default string
              // encoding is 'binary' so we have to make this configurable.
              // Everything else in the universe uses 'utf8', though.

              this.defaultEncoding = options.defaultEncoding || 'utf8'; // when piping, we only care about 'readable' events that happen
              // after read()ing all the bytes and not getting any pushback.

              this.ranOut = false; // the number of writers that are awaiting a drain event in .pipe()s

              this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

              this.readingMore = false;
              this.decoder = null;
              this.encoding = null;

              if (options.encoding) {
                this.decoder = new StringDecoder$1(options.encoding);
                this.encoding = options.encoding;
              }
            }
            function Readable(options) {
              if (!(this instanceof Readable)) return new Readable(options);
              this._readableState = new ReadableState(options, this); // legacy

              this.readable = true;
              if (options && typeof options.read === 'function') this._read = options.read;
              EventEmitter.call(this);
            } // Manually shove something into the read() buffer.
            // This returns true if the highWaterMark has not been hit yet,
            // similar to how Writable.write() returns true if you should
            // write() some more.

            Readable.prototype.push = function (chunk, encoding) {
              var state = this._readableState;

              if (!state.objectMode && typeof chunk === 'string') {
                encoding = encoding || state.defaultEncoding;

                if (encoding !== state.encoding) {
                  chunk = Buffer$i.from(chunk, encoding);
                  encoding = '';
                }
              }

              return readableAddChunk(this, state, chunk, encoding, false);
            }; // Unshift should *always* be something directly out of read()


            Readable.prototype.unshift = function (chunk) {
              var state = this._readableState;
              return readableAddChunk(this, state, chunk, '', true);
            };

            Readable.prototype.isPaused = function () {
              return this._readableState.flowing === false;
            };

            function readableAddChunk(stream, state, chunk, encoding, addToFront) {
              var er = chunkInvalid(state, chunk);

              if (er) {
                stream.emit('error', er);
              } else if (chunk === null) {
                state.reading = false;
                onEofChunk(stream, state);
              } else if (state.objectMode || chunk && chunk.length > 0) {
                if (state.ended && !addToFront) {
                  var e = new Error('stream.push() after EOF');
                  stream.emit('error', e);
                } else if (state.endEmitted && addToFront) {
                  var _e = new Error('stream.unshift() after end event');

                  stream.emit('error', _e);
                } else {
                  var skipAdd;

                  if (state.decoder && !addToFront && !encoding) {
                    chunk = state.decoder.write(chunk);
                    skipAdd = !state.objectMode && chunk.length === 0;
                  }

                  if (!addToFront) state.reading = false; // Don't add to the buffer if we've decoded to an empty string chunk and
                  // we're not in object mode

                  if (!skipAdd) {
                    // if we want the data now, just emit it.
                    if (state.flowing && state.length === 0 && !state.sync) {
                      stream.emit('data', chunk);
                      stream.read(0);
                    } else {
                      // update the buffer info.
                      state.length += state.objectMode ? 1 : chunk.length;
                      if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
                      if (state.needReadable) emitReadable(stream);
                    }
                  }

                  maybeReadMore(stream, state);
                }
              } else if (!addToFront) {
                state.reading = false;
              }

              return needMoreData(state);
            } // if it's past the high water mark, we can push in some more.
            // Also, if we have no data yet, we can stand some
            // more bytes.  This is to work around cases where hwm=0,
            // such as the repl.  Also, if the push() triggered a
            // readable event, and the user called read(largeNumber) such that
            // needReadable was set, then we ought to push more, so that another
            // 'readable' event will be triggered.


            function needMoreData(state) {
              return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
            } // backwards compatibility.


            Readable.prototype.setEncoding = function (enc) {
              this._readableState.decoder = new StringDecoder$1(enc);
              this._readableState.encoding = enc;
              return this;
            }; // Don't raise the hwm > 8MB


            var MAX_HWM = 0x800000;

            function computeNewHighWaterMark(n) {
              if (n >= MAX_HWM) {
                n = MAX_HWM;
              } else {
                // Get the next highest power of 2 to prevent increasing hwm excessively in
                // tiny amounts
                n--;
                n |= n >>> 1;
                n |= n >>> 2;
                n |= n >>> 4;
                n |= n >>> 8;
                n |= n >>> 16;
                n++;
              }

              return n;
            } // This function is designed to be inlinable, so please take care when making
            // changes to the function body.


            function howMuchToRead(n, state) {
              if (n <= 0 || state.length === 0 && state.ended) return 0;
              if (state.objectMode) return 1;

              if (n !== n) {
                // Only flow one buffer at a time
                if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
              } // If we're asking for more than the current hwm, then raise the hwm.


              if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
              if (n <= state.length) return n; // Don't have enough

              if (!state.ended) {
                state.needReadable = true;
                return 0;
              }

              return state.length;
            } // you can override either this method, or the async _read(n) below.


            Readable.prototype.read = function (n) {
              debug('read', n);
              n = parseInt(n, 10);
              var state = this._readableState;
              var nOrig = n;
              if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
              // already have a bunch of data in the buffer, then just trigger
              // the 'readable' event and move on.

              if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
                debug('read: emitReadable', state.length, state.ended);
                if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
                return null;
              }

              n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

              if (n === 0 && state.ended) {
                if (state.length === 0) endReadable(this);
                return null;
              } // All the actual chunk generation logic needs to be
              // *below* the call to _read.  The reason is that in certain
              // synthetic stream cases, such as passthrough streams, _read
              // may be a completely synchronous operation which may change
              // the state of the read buffer, providing enough data when
              // before there was *not* enough.
              //
              // So, the steps are:
              // 1. Figure out what the state of things will be after we do
              // a read from the buffer.
              //
              // 2. If that resulting state will trigger a _read, then call _read.
              // Note that this may be asynchronous, or synchronous.  Yes, it is
              // deeply ugly to write APIs this way, but that still doesn't mean
              // that the Readable class should behave improperly, as streams are
              // designed to be sync/async agnostic.
              // Take note if the _read call is sync or async (ie, if the read call
              // has returned yet), so that we know whether or not it's safe to emit
              // 'readable' etc.
              //
              // 3. Actually pull the requested chunks out of the buffer and return.
              // if we need a readable event, then we need to do some reading.


              var doRead = state.needReadable;
              debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

              if (state.length === 0 || state.length - n < state.highWaterMark) {
                doRead = true;
                debug('length less than watermark', doRead);
              } // however, if we've ended, then there's no point, and if we're already
              // reading, then it's unnecessary.


              if (state.ended || state.reading) {
                doRead = false;
                debug('reading or ended', doRead);
              } else if (doRead) {
                debug('do read');
                state.reading = true;
                state.sync = true; // if the length is currently zero, then we *need* a readable event.

                if (state.length === 0) state.needReadable = true; // call internal read method

                this._read(state.highWaterMark);

                state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
                // and we need to re-evaluate how much data we can return to the user.

                if (!state.reading) n = howMuchToRead(nOrig, state);
              }

              var ret;
              if (n > 0) ret = fromList(n, state);else ret = null;

              if (ret === null) {
                state.needReadable = true;
                n = 0;
              } else {
                state.length -= n;
              }

              if (state.length === 0) {
                // If we have nothing in the buffer, then we want to know
                // as soon as we *do* get something into the buffer.
                if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

                if (nOrig !== n && state.ended) endReadable(this);
              }

              if (ret !== null) this.emit('data', ret);
              return ret;
            };

            function chunkInvalid(state, chunk) {
              var er = null;

              if (!isBuffer$2(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
                er = new TypeError('Invalid non-string/buffer chunk');
              }

              return er;
            }

            function onEofChunk(stream, state) {
              if (state.ended) return;

              if (state.decoder) {
                var chunk = state.decoder.end();

                if (chunk && chunk.length) {
                  state.buffer.push(chunk);
                  state.length += state.objectMode ? 1 : chunk.length;
                }
              }

              state.ended = true; // emit 'readable' now to make sure it gets picked up.

              emitReadable(stream);
            } // Don't emit readable right away in sync mode, because this can trigger
            // another read() call => stack overflow.  This way, it might trigger
            // a nextTick recursion warning, but that's not so bad.


            function emitReadable(stream) {
              var state = stream._readableState;
              state.needReadable = false;

              if (!state.emittedReadable) {
                debug('emitReadable', state.flowing);
                state.emittedReadable = true;
                if (state.sync) nextTick(emitReadable_, stream);else emitReadable_(stream);
              }
            }

            function emitReadable_(stream) {
              debug('emit readable');
              stream.emit('readable');
              flow(stream);
            } // at this point, the user has presumably seen the 'readable' event,
            // and called read() to consume some data.  that may have triggered
            // in turn another _read(n) call, in which case reading = true if
            // it's in progress.
            // However, if we're not ended, or reading, and the length < hwm,
            // then go ahead and try to read some more preemptively.


            function maybeReadMore(stream, state) {
              if (!state.readingMore) {
                state.readingMore = true;
                nextTick(maybeReadMore_, stream, state);
              }
            }

            function maybeReadMore_(stream, state) {
              var len = state.length;

              while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
                debug('maybeReadMore read 0');
                stream.read(0);
                if (len === state.length) // didn't get any data, stop spinning.
                  break;else len = state.length;
              }

              state.readingMore = false;
            } // abstract method.  to be overridden in specific implementation classes.
            // call cb(er, data) where data is <= n in length.
            // for virtual (non-string, non-buffer) streams, "length" is somewhat
            // arbitrary, and perhaps not very meaningful.


            Readable.prototype._read = function (n) {
              this.emit('error', new Error('not implemented'));
            };

            Readable.prototype.pipe = function (dest, pipeOpts) {
              var src = this;
              var state = this._readableState;

              switch (state.pipesCount) {
                case 0:
                  state.pipes = dest;
                  break;

                case 1:
                  state.pipes = [state.pipes, dest];
                  break;

                default:
                  state.pipes.push(dest);
                  break;
              }

              state.pipesCount += 1;
              debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
              var doEnd = !pipeOpts || pipeOpts.end !== false;
              var endFn = doEnd ? onend : cleanup;
              if (state.endEmitted) nextTick(endFn);else src.once('end', endFn);
              dest.on('unpipe', onunpipe);

              function onunpipe(readable) {
                debug('onunpipe');

                if (readable === src) {
                  cleanup();
                }
              }

              function onend() {
                debug('onend');
                dest.end();
              } // when the dest drains, it reduces the awaitDrain counter
              // on the source.  This would be more elegant with a .once()
              // handler in flow(), but adding and removing repeatedly is
              // too slow.


              var ondrain = pipeOnDrain(src);
              dest.on('drain', ondrain);
              var cleanedUp = false;

              function cleanup() {
                debug('cleanup'); // cleanup event handlers once the pipe is broken

                dest.removeListener('close', onclose);
                dest.removeListener('finish', onfinish);
                dest.removeListener('drain', ondrain);
                dest.removeListener('error', onerror);
                dest.removeListener('unpipe', onunpipe);
                src.removeListener('end', onend);
                src.removeListener('end', cleanup);
                src.removeListener('data', ondata);
                cleanedUp = true; // if the reader is waiting for a drain event from this
                // specific writer, then it would cause it to never start
                // flowing again.
                // So, if this is awaiting a drain, then we just call it now.
                // If we don't know, then assume that we are waiting for one.

                if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
              } // If the user pushes more data while we're writing to dest then we'll end up
              // in ondata again. However, we only want to increase awaitDrain once because
              // dest will only emit one 'drain' event for the multiple writes.
              // => Introduce a guard on increasing awaitDrain.


              var increasedAwaitDrain = false;
              src.on('data', ondata);

              function ondata(chunk) {
                debug('ondata');
                increasedAwaitDrain = false;
                var ret = dest.write(chunk);

                if (false === ret && !increasedAwaitDrain) {
                  // If the user unpiped during `dest.write()`, it is possible
                  // to get stuck in a permanently paused state if that write
                  // also returned false.
                  // => Check whether `dest` is still a piping destination.
                  if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf$1(state.pipes, dest) !== -1) && !cleanedUp) {
                    debug('false write response, pause', src._readableState.awaitDrain);
                    src._readableState.awaitDrain++;
                    increasedAwaitDrain = true;
                  }

                  src.pause();
                }
              } // if the dest has an error, then stop piping into it.
              // however, don't suppress the throwing behavior for this.


              function onerror(er) {
                debug('onerror', er);
                unpipe();
                dest.removeListener('error', onerror);
                if (listenerCount(dest, 'error') === 0) dest.emit('error', er);
              } // Make sure our error handler is attached before userland ones.


              prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

              function onclose() {
                dest.removeListener('finish', onfinish);
                unpipe();
              }

              dest.once('close', onclose);

              function onfinish() {
                debug('onfinish');
                dest.removeListener('close', onclose);
                unpipe();
              }

              dest.once('finish', onfinish);

              function unpipe() {
                debug('unpipe');
                src.unpipe(dest);
              } // tell the dest that it's being piped to


              dest.emit('pipe', src); // start the flow if it hasn't been started already.

              if (!state.flowing) {
                debug('pipe resume');
                src.resume();
              }

              return dest;
            };

            function pipeOnDrain(src) {
              return function () {
                var state = src._readableState;
                debug('pipeOnDrain', state.awaitDrain);
                if (state.awaitDrain) state.awaitDrain--;

                if (state.awaitDrain === 0 && src.listeners('data').length) {
                  state.flowing = true;
                  flow(src);
                }
              };
            }

            Readable.prototype.unpipe = function (dest) {
              var state = this._readableState; // if we're not piping anywhere, then do nothing.

              if (state.pipesCount === 0) return this; // just one destination.  most common case.

              if (state.pipesCount === 1) {
                // passed in one, but it's not the right one.
                if (dest && dest !== state.pipes) return this;
                if (!dest) dest = state.pipes; // got a match.

                state.pipes = null;
                state.pipesCount = 0;
                state.flowing = false;
                if (dest) dest.emit('unpipe', this);
                return this;
              } // slow case. multiple pipe destinations.


              if (!dest) {
                // remove all.
                var dests = state.pipes;
                var len = state.pipesCount;
                state.pipes = null;
                state.pipesCount = 0;
                state.flowing = false;

                for (var _i = 0; _i < len; _i++) {
                  dests[_i].emit('unpipe', this);
                }

                return this;
              } // try to find the right one.


              var i = indexOf$1(state.pipes, dest);
              if (i === -1) return this;
              state.pipes.splice(i, 1);
              state.pipesCount -= 1;
              if (state.pipesCount === 1) state.pipes = state.pipes[0];
              dest.emit('unpipe', this);
              return this;
            }; // set up data events if they are asked for
            // Ensure readable listeners eventually get something


            Readable.prototype.on = function (ev, fn) {
              var res = EventEmitter.prototype.on.call(this, ev, fn);

              if (ev === 'data') {
                // Start flowing on next tick if stream isn't explicitly paused
                if (this._readableState.flowing !== false) this.resume();
              } else if (ev === 'readable') {
                var state = this._readableState;

                if (!state.endEmitted && !state.readableListening) {
                  state.readableListening = state.needReadable = true;
                  state.emittedReadable = false;

                  if (!state.reading) {
                    nextTick(nReadingNextTick, this);
                  } else if (state.length) {
                    emitReadable(this);
                  }
                }
              }

              return res;
            };

            Readable.prototype.addListener = Readable.prototype.on;

            function nReadingNextTick(self) {
              debug('readable nexttick read 0');
              self.read(0);
            } // pause() and resume() are remnants of the legacy readable stream API
            // If the user uses them, then switch into old mode.


            Readable.prototype.resume = function () {
              var state = this._readableState;

              if (!state.flowing) {
                debug('resume');
                state.flowing = true;
                resume(this, state);
              }

              return this;
            };

            function resume(stream, state) {
              if (!state.resumeScheduled) {
                state.resumeScheduled = true;
                nextTick(resume_, stream, state);
              }
            }

            function resume_(stream, state) {
              if (!state.reading) {
                debug('resume read 0');
                stream.read(0);
              }

              state.resumeScheduled = false;
              state.awaitDrain = 0;
              stream.emit('resume');
              flow(stream);
              if (state.flowing && !state.reading) stream.read(0);
            }

            Readable.prototype.pause = function () {
              debug('call pause flowing=%j', this._readableState.flowing);

              if (false !== this._readableState.flowing) {
                debug('pause');
                this._readableState.flowing = false;
                this.emit('pause');
              }

              return this;
            };

            function flow(stream) {
              var state = stream._readableState;
              debug('flow', state.flowing);

              while (state.flowing && stream.read() !== null) {}
            } // wrap an old-style stream as the async data source.
            // This is *not* part of the readable stream interface.
            // It is an ugly unfortunate mess of history.


            Readable.prototype.wrap = function (stream) {
              var state = this._readableState;
              var paused = false;
              var self = this;
              stream.on('end', function () {
                debug('wrapped end');

                if (state.decoder && !state.ended) {
                  var chunk = state.decoder.end();
                  if (chunk && chunk.length) self.push(chunk);
                }

                self.push(null);
              });
              stream.on('data', function (chunk) {
                debug('wrapped data');
                if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

                if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
                var ret = self.push(chunk);

                if (!ret) {
                  paused = true;
                  stream.pause();
                }
              }); // proxy all the other methods.
              // important when wrapping filters and duplexes.

              for (var i in stream) {
                if (this[i] === undefined && typeof stream[i] === 'function') {
                  this[i] = function (method) {
                    return function () {
                      return stream[method].apply(stream, arguments);
                    };
                  }(i);
                }
              } // proxy certain important events.


              var events = ['error', 'close', 'destroy', 'pause', 'resume'];
              forEach$1(events, function (ev) {
                stream.on(ev, self.emit.bind(self, ev));
              }); // when we try to consume some more bytes, simply unpause the
              // underlying stream.

              self._read = function (n) {
                debug('wrapped _read', n);

                if (paused) {
                  paused = false;
                  stream.resume();
                }
              };

              return self;
            }; // exposed for testing purposes only.


            Readable._fromList = fromList; // Pluck off n bytes from an array of buffers.
            // Length is the combined lengths of all the buffers in the list.
            // This function is designed to be inlinable, so please take care when making
            // changes to the function body.

            function fromList(n, state) {
              // nothing buffered
              if (state.length === 0) return null;
              var ret;
              if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
                // read it all, truncate the list
                if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
                state.buffer.clear();
              } else {
                // read part of list
                ret = fromListPartial(n, state.buffer, state.decoder);
              }
              return ret;
            } // Extracts only enough buffered data to satisfy the amount requested.
            // This function is designed to be inlinable, so please take care when making
            // changes to the function body.


            function fromListPartial(n, list, hasStrings) {
              var ret;

              if (n < list.head.data.length) {
                // slice is the same for buffers and strings
                ret = list.head.data.slice(0, n);
                list.head.data = list.head.data.slice(n);
              } else if (n === list.head.data.length) {
                // first chunk is a perfect match
                ret = list.shift();
              } else {
                // result spans more than one buffer
                ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
              }

              return ret;
            } // Copies a specified amount of characters from the list of buffered data
            // chunks.
            // This function is designed to be inlinable, so please take care when making
            // changes to the function body.


            function copyFromBufferString(n, list) {
              var p = list.head;
              var c = 1;
              var ret = p.data;
              n -= ret.length;

              while (p = p.next) {
                var str = p.data;
                var nb = n > str.length ? str.length : n;
                if (nb === str.length) ret += str;else ret += str.slice(0, n);
                n -= nb;

                if (n === 0) {
                  if (nb === str.length) {
                    ++c;
                    if (p.next) list.head = p.next;else list.head = list.tail = null;
                  } else {
                    list.head = p;
                    p.data = str.slice(nb);
                  }

                  break;
                }

                ++c;
              }

              list.length -= c;
              return ret;
            } // Copies a specified amount of bytes from the list of buffered data chunks.
            // This function is designed to be inlinable, so please take care when making
            // changes to the function body.


            function copyFromBuffer(n, list) {
              var ret = Buffer$i.allocUnsafe(n);
              var p = list.head;
              var c = 1;
              p.data.copy(ret);
              n -= p.data.length;

              while (p = p.next) {
                var buf = p.data;
                var nb = n > buf.length ? buf.length : n;
                buf.copy(ret, ret.length - n, 0, nb);
                n -= nb;

                if (n === 0) {
                  if (nb === buf.length) {
                    ++c;
                    if (p.next) list.head = p.next;else list.head = list.tail = null;
                  } else {
                    list.head = p;
                    p.data = buf.slice(nb);
                  }

                  break;
                }

                ++c;
              }

              list.length -= c;
              return ret;
            }

            function endReadable(stream) {
              var state = stream._readableState; // If we get here before consuming all the bytes, then that is a
              // bug in node.  Should never happen.

              if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

              if (!state.endEmitted) {
                state.ended = true;
                nextTick(endReadableNT, state, stream);
              }
            }

            function endReadableNT(state, stream) {
              // Check that we didn't get one last unshift.
              if (!state.endEmitted && state.length === 0) {
                state.endEmitted = true;
                stream.readable = false;
                stream.emit('end');
              }
            }

            function forEach$1(xs, f) {
              for (var i = 0, l = xs.length; i < l; i++) {
                f(xs[i], i);
              }
            }

            function indexOf$1(xs, x) {
              for (var i = 0, l = xs.length; i < l; i++) {
                if (xs[i] === x) return i;
              }

              return -1;
            }

            // A bit simpler than readable streams.
            Writable.WritableState = WritableState;
            inherits$e(Writable, EventEmitter);

            function nop() {}

            function WriteReq(chunk, encoding, cb) {
              this.chunk = chunk;
              this.encoding = encoding;
              this.callback = cb;
              this.next = null;
            }

            function WritableState(options, stream) {
              Object.defineProperty(this, 'buffer', {
                get: deprecate(function () {
                  return this.getBuffer();
                }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
              });
              options = options || {}; // object stream flag to indicate whether or not this stream
              // contains buffers or objects.

              this.objectMode = !!options.objectMode;
              if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
              // Note: 0 is a valid value, means that we always return false if
              // the entire buffer is not flushed immediately on write()

              var hwm = options.highWaterMark;
              var defaultHwm = this.objectMode ? 16 : 16 * 1024;
              this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm; // cast to ints.

              this.highWaterMark = ~~this.highWaterMark;
              this.needDrain = false; // at the start of calling end()

              this.ending = false; // when end() has been called, and returned

              this.ended = false; // when 'finish' is emitted

              this.finished = false; // should we decode strings into buffers before passing to _write?
              // this is here so that some node-core streams can optimize string
              // handling at a lower level.

              var noDecode = options.decodeStrings === false;
              this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
              // encoding is 'binary' so we have to make this configurable.
              // Everything else in the universe uses 'utf8', though.

              this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
              // of how much we're waiting to get pushed to some underlying
              // socket or file.

              this.length = 0; // a flag to see when we're in the middle of a write.

              this.writing = false; // when true all writes will be buffered until .uncork() call

              this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
              // or on a later tick.  We set this to true at first, because any
              // actions that shouldn't happen until "later" should generally also
              // not happen before the first write call.

              this.sync = true; // a flag to know if we're processing previously buffered items, which
              // may call the _write() callback in the same tick, so that we don't
              // end up in an overlapped onwrite situation.

              this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

              this.onwrite = function (er) {
                onwrite(stream, er);
              }; // the callback that the user supplies to write(chunk,encoding,cb)


              this.writecb = null; // the amount that is being written when _write is called.

              this.writelen = 0;
              this.bufferedRequest = null;
              this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
              // this must be 0 before 'finish' can be emitted

              this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
              // This is relevant for synchronous Transform streams

              this.prefinished = false; // True if the error was already emitted and should not be thrown again

              this.errorEmitted = false; // count buffered requests

              this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
              // one allocated and free to use, and we maintain at most two

              this.corkedRequestsFree = new CorkedRequest(this);
            }

            WritableState.prototype.getBuffer = function writableStateGetBuffer() {
              var current = this.bufferedRequest;
              var out = [];

              while (current) {
                out.push(current);
                current = current.next;
              }

              return out;
            };
            function Writable(options) {
              // Writable ctor is applied to Duplexes, though they're not
              // instanceof Writable, they're instanceof Readable.
              if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);
              this._writableState = new WritableState(options, this); // legacy.

              this.writable = true;

              if (options) {
                if (typeof options.write === 'function') this._write = options.write;
                if (typeof options.writev === 'function') this._writev = options.writev;
              }

              EventEmitter.call(this);
            } // Otherwise people can pipe Writable streams, which is just wrong.

            Writable.prototype.pipe = function () {
              this.emit('error', new Error('Cannot pipe, not readable'));
            };

            function writeAfterEnd(stream, cb) {
              var er = new Error('write after end'); // TODO: defer error events consistently everywhere, not just the cb

              stream.emit('error', er);
              nextTick(cb, er);
            } // If we get something that is not a buffer, string, null, or undefined,
            // and we're not in objectMode, then that's an error.
            // Otherwise stream chunks are all considered to be of length=1, and the
            // watermarks determine how many objects to keep in the buffer, rather than
            // how many bytes or characters.


            function validChunk(stream, state, chunk, cb) {
              var valid = true;
              var er = false; // Always throw error if a null is written
              // if we are not in object mode then throw
              // if it is not a buffer, string, or undefined.

              if (chunk === null) {
                er = new TypeError('May not write null values to stream');
              } else if (!Buffer$i.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
                er = new TypeError('Invalid non-string/buffer chunk');
              }

              if (er) {
                stream.emit('error', er);
                nextTick(cb, er);
                valid = false;
              }

              return valid;
            }

            Writable.prototype.write = function (chunk, encoding, cb) {
              var state = this._writableState;
              var ret = false;

              if (typeof encoding === 'function') {
                cb = encoding;
                encoding = null;
              }

              if (Buffer$i.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
              if (typeof cb !== 'function') cb = nop;
              if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
                state.pendingcb++;
                ret = writeOrBuffer(this, state, chunk, encoding, cb);
              }
              return ret;
            };

            Writable.prototype.cork = function () {
              var state = this._writableState;
              state.corked++;
            };

            Writable.prototype.uncork = function () {
              var state = this._writableState;

              if (state.corked) {
                state.corked--;
                if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
              }
            };

            Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
              // node::ParseEncoding() requires lower case.
              if (typeof encoding === 'string') encoding = encoding.toLowerCase();
              if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
              this._writableState.defaultEncoding = encoding;
              return this;
            };

            function decodeChunk(state, chunk, encoding) {
              if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
                chunk = Buffer$i.from(chunk, encoding);
              }

              return chunk;
            } // if we're already writing something, then just put this
            // in the queue, and wait our turn.  Otherwise, call _write
            // If we return false, then we need a drain event, so set that flag.


            function writeOrBuffer(stream, state, chunk, encoding, cb) {
              chunk = decodeChunk(state, chunk, encoding);
              if (Buffer$i.isBuffer(chunk)) encoding = 'buffer';
              var len = state.objectMode ? 1 : chunk.length;
              state.length += len;
              var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

              if (!ret) state.needDrain = true;

              if (state.writing || state.corked) {
                var last = state.lastBufferedRequest;
                state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);

                if (last) {
                  last.next = state.lastBufferedRequest;
                } else {
                  state.bufferedRequest = state.lastBufferedRequest;
                }

                state.bufferedRequestCount += 1;
              } else {
                doWrite(stream, state, false, len, chunk, encoding, cb);
              }

              return ret;
            }

            function doWrite(stream, state, writev, len, chunk, encoding, cb) {
              state.writelen = len;
              state.writecb = cb;
              state.writing = true;
              state.sync = true;
              if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
              state.sync = false;
            }

            function onwriteError(stream, state, sync, er, cb) {
              --state.pendingcb;
              if (sync) nextTick(cb, er);else cb(er);
              stream._writableState.errorEmitted = true;
              stream.emit('error', er);
            }

            function onwriteStateUpdate(state) {
              state.writing = false;
              state.writecb = null;
              state.length -= state.writelen;
              state.writelen = 0;
            }

            function onwrite(stream, er) {
              var state = stream._writableState;
              var sync = state.sync;
              var cb = state.writecb;
              onwriteStateUpdate(state);
              if (er) onwriteError(stream, state, sync, er, cb);else {
                // Check if we're actually ready to finish, but don't emit yet
                var finished = needFinish(state);

                if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
                  clearBuffer(stream, state);
                }

                if (sync) {
                  /*<replacement>*/
                  nextTick(afterWrite, stream, state, finished, cb);
                  /*</replacement>*/
                } else {
                  afterWrite(stream, state, finished, cb);
                }
              }
            }

            function afterWrite(stream, state, finished, cb) {
              if (!finished) onwriteDrain(stream, state);
              state.pendingcb--;
              cb();
              finishMaybe(stream, state);
            } // Must force callback to be called on nextTick, so that we don't
            // emit 'drain' before the write() consumer gets the 'false' return
            // value, and has a chance to attach a 'drain' listener.


            function onwriteDrain(stream, state) {
              if (state.length === 0 && state.needDrain) {
                state.needDrain = false;
                stream.emit('drain');
              }
            } // if there's something in the buffer waiting, then process it


            function clearBuffer(stream, state) {
              state.bufferProcessing = true;
              var entry = state.bufferedRequest;

              if (stream._writev && entry && entry.next) {
                // Fast case, write everything using _writev()
                var l = state.bufferedRequestCount;
                var buffer = new Array(l);
                var holder = state.corkedRequestsFree;
                holder.entry = entry;
                var count = 0;

                while (entry) {
                  buffer[count] = entry;
                  entry = entry.next;
                  count += 1;
                }

                doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
                // as the hot path ends with doWrite

                state.pendingcb++;
                state.lastBufferedRequest = null;

                if (holder.next) {
                  state.corkedRequestsFree = holder.next;
                  holder.next = null;
                } else {
                  state.corkedRequestsFree = new CorkedRequest(state);
                }
              } else {
                // Slow case, write chunks one-by-one
                while (entry) {
                  var chunk = entry.chunk;
                  var encoding = entry.encoding;
                  var cb = entry.callback;
                  var len = state.objectMode ? 1 : chunk.length;
                  doWrite(stream, state, false, len, chunk, encoding, cb);
                  entry = entry.next; // if we didn't call the onwrite immediately, then
                  // it means that we need to wait until it does.
                  // also, that means that the chunk and cb are currently
                  // being processed, so move the buffer counter past them.

                  if (state.writing) {
                    break;
                  }
                }

                if (entry === null) state.lastBufferedRequest = null;
              }

              state.bufferedRequestCount = 0;
              state.bufferedRequest = entry;
              state.bufferProcessing = false;
            }

            Writable.prototype._write = function (chunk, encoding, cb) {
              cb(new Error('not implemented'));
            };

            Writable.prototype._writev = null;

            Writable.prototype.end = function (chunk, encoding, cb) {
              var state = this._writableState;

              if (typeof chunk === 'function') {
                cb = chunk;
                chunk = null;
                encoding = null;
              } else if (typeof encoding === 'function') {
                cb = encoding;
                encoding = null;
              }

              if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

              if (state.corked) {
                state.corked = 1;
                this.uncork();
              } // ignore unnecessary end() calls.


              if (!state.ending && !state.finished) endWritable(this, state, cb);
            };

            function needFinish(state) {
              return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
            }

            function prefinish(stream, state) {
              if (!state.prefinished) {
                state.prefinished = true;
                stream.emit('prefinish');
              }
            }

            function finishMaybe(stream, state) {
              var need = needFinish(state);

              if (need) {
                if (state.pendingcb === 0) {
                  prefinish(stream, state);
                  state.finished = true;
                  stream.emit('finish');
                } else {
                  prefinish(stream, state);
                }
              }

              return need;
            }

            function endWritable(stream, state, cb) {
              state.ending = true;
              finishMaybe(stream, state);

              if (cb) {
                if (state.finished) nextTick(cb);else stream.once('finish', cb);
              }

              state.ended = true;
              stream.writable = false;
            } // It seems a linked list but it is not
            // there will be only 2 of these for each stream


            function CorkedRequest(state) {
              var _this = this;

              this.next = null;
              this.entry = null;

              this.finish = function (err) {
                var entry = _this.entry;
                _this.entry = null;

                while (entry) {
                  var cb = entry.callback;
                  state.pendingcb--;
                  cb(err);
                  entry = entry.next;
                }

                if (state.corkedRequestsFree) {
                  state.corkedRequestsFree.next = _this;
                } else {
                  state.corkedRequestsFree = _this;
                }
              };
            }

            inherits$e(Duplex, Readable);
            var keys = Object.keys(Writable.prototype);

            for (var v = 0; v < keys.length; v++) {
              var method = keys[v];
              if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
            }
            function Duplex(options) {
              if (!(this instanceof Duplex)) return new Duplex(options);
              Readable.call(this, options);
              Writable.call(this, options);
              if (options && options.readable === false) this.readable = false;
              if (options && options.writable === false) this.writable = false;
              this.allowHalfOpen = true;
              if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
              this.once('end', onend);
            } // the no-half-open enforcer

            function onend() {
              // if we allow half-open state, or if the writable side ended,
              // then we're ok.
              if (this.allowHalfOpen || this._writableState.ended) return; // no more data can be written.
              // But allow more writes to happen in this tick.

              nextTick(onEndNT, this);
            }

            function onEndNT(self) {
              self.end();
            }

            // a transform stream is a readable/writable stream where you do
            inherits$e(Transform$4, Duplex);

            function TransformState(stream) {
              this.afterTransform = function (er, data) {
                return afterTransform(stream, er, data);
              };

              this.needTransform = false;
              this.transforming = false;
              this.writecb = null;
              this.writechunk = null;
              this.writeencoding = null;
            }

            function afterTransform(stream, er, data) {
              var ts = stream._transformState;
              ts.transforming = false;
              var cb = ts.writecb;
              if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));
              ts.writechunk = null;
              ts.writecb = null;
              if (data !== null && data !== undefined) stream.push(data);
              cb(er);
              var rs = stream._readableState;
              rs.reading = false;

              if (rs.needReadable || rs.length < rs.highWaterMark) {
                stream._read(rs.highWaterMark);
              }
            }
            function Transform$4(options) {
              if (!(this instanceof Transform$4)) return new Transform$4(options);
              Duplex.call(this, options);
              this._transformState = new TransformState(this); // when the writable side finishes, then flush out anything remaining.

              var stream = this; // start out asking for a readable event once data is transformed.

              this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
              // that Readable wants before the first _read call, so unset the
              // sync guard flag.

              this._readableState.sync = false;

              if (options) {
                if (typeof options.transform === 'function') this._transform = options.transform;
                if (typeof options.flush === 'function') this._flush = options.flush;
              }

              this.once('prefinish', function () {
                if (typeof this._flush === 'function') this._flush(function (er) {
                  done(stream, er);
                });else done(stream);
              });
            }

            Transform$4.prototype.push = function (chunk, encoding) {
              this._transformState.needTransform = false;
              return Duplex.prototype.push.call(this, chunk, encoding);
            }; // This is the part where you do stuff!
            // override this function in implementation classes.
            // 'chunk' is an input chunk.
            //
            // Call `push(newChunk)` to pass along transformed output
            // to the readable side.  You may call 'push' zero or more times.
            //
            // Call `cb(err)` when you are done with this chunk.  If you pass
            // an error, then that'll put the hurt on the whole operation.  If you
            // never call cb(), then you'll never get another chunk.


            Transform$4.prototype._transform = function (chunk, encoding, cb) {
              throw new Error('Not implemented');
            };

            Transform$4.prototype._write = function (chunk, encoding, cb) {
              var ts = this._transformState;
              ts.writecb = cb;
              ts.writechunk = chunk;
              ts.writeencoding = encoding;

              if (!ts.transforming) {
                var rs = this._readableState;
                if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
              }
            }; // Doesn't matter what the args are here.
            // _transform does all the work.
            // That we got here means that the readable side wants more data.


            Transform$4.prototype._read = function (n) {
              var ts = this._transformState;

              if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
                ts.transforming = true;

                this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
              } else {
                // mark that we need a transform, so that any data that comes in
                // will get processed, now that we've asked for it.
                ts.needTransform = true;
              }
            };

            function done(stream, er) {
              if (er) return stream.emit('error', er); // if there's nothing in the write buffer, then that means
              // that nothing more will ever be provided

              var ws = stream._writableState;
              var ts = stream._transformState;
              if (ws.length) throw new Error('Calling transform done when ws.length != 0');
              if (ts.transforming) throw new Error('Calling transform done when still transforming');
              return stream.push(null);
            }

            inherits$e(PassThrough, Transform$4);
            function PassThrough(options) {
              if (!(this instanceof PassThrough)) return new PassThrough(options);
              Transform$4.call(this, options);
            }

            PassThrough.prototype._transform = function (chunk, encoding, cb) {
              cb(null, chunk);
            };

            inherits$e(Stream, EventEmitter);
            Stream.Readable = Readable;
            Stream.Writable = Writable;
            Stream.Duplex = Duplex;
            Stream.Transform = Transform$4;
            Stream.PassThrough = PassThrough; // Backwards-compat with node 0.4.x

            Stream.Stream = Stream;
            // part of this class) is overridden in the Readable class.

            function Stream() {
              EventEmitter.call(this);
            }

            Stream.prototype.pipe = function (dest, options) {
              var source = this;

              function ondata(chunk) {
                if (dest.writable) {
                  if (false === dest.write(chunk) && source.pause) {
                    source.pause();
                  }
                }
              }

              source.on('data', ondata);

              function ondrain() {
                if (source.readable && source.resume) {
                  source.resume();
                }
              }

              dest.on('drain', ondrain); // If the 'end' option is not supplied, dest.end() will be called when
              // source gets the 'end' or 'close' events.  Only dest.end() once.

              if (!dest._isStdio && (!options || options.end !== false)) {
                source.on('end', onend);
                source.on('close', onclose);
              }

              var didOnEnd = false;

              function onend() {
                if (didOnEnd) return;
                didOnEnd = true;
                dest.end();
              }

              function onclose() {
                if (didOnEnd) return;
                didOnEnd = true;
                if (typeof dest.destroy === 'function') dest.destroy();
              } // don't leave dangling pipes when there are errors.


              function onerror(er) {
                cleanup();

                if (EventEmitter.listenerCount(this, 'error') === 0) {
                  throw er; // Unhandled stream error in pipe.
                }
              }

              source.on('error', onerror);
              dest.on('error', onerror); // remove all the event listeners that were added.

              function cleanup() {
                source.removeListener('data', ondata);
                dest.removeListener('drain', ondrain);
                source.removeListener('end', onend);
                source.removeListener('close', onclose);
                source.removeListener('error', onerror);
                dest.removeListener('error', onerror);
                source.removeListener('end', cleanup);
                source.removeListener('close', cleanup);
                dest.removeListener('close', cleanup);
              }

              source.on('end', cleanup);
              source.on('close', cleanup);
              dest.on('close', cleanup);
              dest.emit('pipe', source); // Allow for unix-like usage: A.pipe(B).pipe(C)

              return dest;
            };

            var stream = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        'default': Stream,
                        Readable: Readable,
                        Writable: Writable,
                        Duplex: Duplex,
                        Transform: Transform$4,
                        PassThrough: PassThrough,
                        Stream: Stream
            });

            var require$$1$1 = /*@__PURE__*/getAugmentedNamespace(stream);

            function _createSuper$1(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$1(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

            function _isNativeReflectConstruct$1() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
            var Transform$3 = require$$1$1.Transform;

            var keccak$1 = function keccak(KeccakState) {
              return /*#__PURE__*/function (_Transform) {
                _inherits(Keccak, _Transform);

                var _super = _createSuper$1(Keccak);

                function Keccak(rate, capacity, delimitedSuffix, hashBitLength, options) {
                  var _this;

                  _classCallCheck(this, Keccak);

                  _this = _super.call(this, options);
                  _this._rate = rate;
                  _this._capacity = capacity;
                  _this._delimitedSuffix = delimitedSuffix;
                  _this._hashBitLength = hashBitLength;
                  _this._options = options;
                  _this._state = new KeccakState();

                  _this._state.initialize(rate, capacity);

                  _this._finalized = false;
                  return _this;
                }

                _createClass(Keccak, [{
                  key: "_transform",
                  value: function _transform(chunk, encoding, callback) {
                    var error = null;

                    try {
                      this.update(chunk, encoding);
                    } catch (err) {
                      error = err;
                    }

                    callback(error);
                  }
                }, {
                  key: "_flush",
                  value: function _flush(callback) {
                    var error = null;

                    try {
                      this.push(this.digest());
                    } catch (err) {
                      error = err;
                    }

                    callback(error);
                  }
                }, {
                  key: "update",
                  value: function update(data, encoding) {
                    if (!isBuffer$2(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer');
                    if (this._finalized) throw new Error('Digest already called');
                    if (!isBuffer$2(data)) data = Buffer$i.from(data, encoding);

                    this._state.absorb(data);

                    return this;
                  }
                }, {
                  key: "digest",
                  value: function digest(encoding) {
                    if (this._finalized) throw new Error('Digest already called');
                    this._finalized = true;
                    if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix);

                    var digest = this._state.squeeze(this._hashBitLength / 8);

                    if (encoding !== undefined) digest = digest.toString(encoding);

                    this._resetState();

                    return digest;
                  } // remove result from memory

                }, {
                  key: "_resetState",
                  value: function _resetState() {
                    this._state.initialize(this._rate, this._capacity);

                    return this;
                  } // because sometimes we need hash right now and little later

                }, {
                  key: "_clone",
                  value: function _clone() {
                    var clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options);

                    this._state.copy(clone._state);

                    clone._finalized = this._finalized;
                    return clone;
                  }
                }]);

                return Keccak;
              }(Transform$3);
            };

            function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

            function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
            var Transform$2 = require$$1$1.Transform;

            var shake = function shake(KeccakState) {
              return /*#__PURE__*/function (_Transform) {
                _inherits(Shake, _Transform);

                var _super = _createSuper(Shake);

                function Shake(rate, capacity, delimitedSuffix, options) {
                  var _this;

                  _classCallCheck(this, Shake);

                  _this = _super.call(this, options);
                  _this._rate = rate;
                  _this._capacity = capacity;
                  _this._delimitedSuffix = delimitedSuffix;
                  _this._options = options;
                  _this._state = new KeccakState();

                  _this._state.initialize(rate, capacity);

                  _this._finalized = false;
                  return _this;
                }

                _createClass(Shake, [{
                  key: "_transform",
                  value: function _transform(chunk, encoding, callback) {
                    var error = null;

                    try {
                      this.update(chunk, encoding);
                    } catch (err) {
                      error = err;
                    }

                    callback(error);
                  }
                }, {
                  key: "_flush",
                  value: function _flush() {}
                }, {
                  key: "_read",
                  value: function _read(size) {
                    this.push(this.squeeze(size));
                  }
                }, {
                  key: "update",
                  value: function update(data, encoding) {
                    if (!isBuffer$2(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer');
                    if (this._finalized) throw new Error('Squeeze already called');
                    if (!isBuffer$2(data)) data = Buffer$i.from(data, encoding);

                    this._state.absorb(data);

                    return this;
                  }
                }, {
                  key: "squeeze",
                  value: function squeeze(dataByteLength, encoding) {
                    if (!this._finalized) {
                      this._finalized = true;

                      this._state.absorbLastFewBits(this._delimitedSuffix);
                    }

                    var data = this._state.squeeze(dataByteLength);

                    if (encoding !== undefined) data = data.toString(encoding);
                    return data;
                  }
                }, {
                  key: "_resetState",
                  value: function _resetState() {
                    this._state.initialize(this._rate, this._capacity);

                    return this;
                  }
                }, {
                  key: "_clone",
                  value: function _clone() {
                    var clone = new Shake(this._rate, this._capacity, this._delimitedSuffix, this._options);

                    this._state.copy(clone._state);

                    clone._finalized = this._finalized;
                    return clone;
                  }
                }]);

                return Shake;
              }(Transform$2);
            };

            var createKeccak = keccak$1;
            var createShake = shake;

            var api = function api(KeccakState) {
              var Keccak = createKeccak(KeccakState);
              var Shake = createShake(KeccakState);
              return function (algorithm, options) {
                var hash = typeof algorithm === 'string' ? algorithm.toLowerCase() : algorithm;

                switch (hash) {
                  case 'keccak224':
                    return new Keccak(1152, 448, null, 224, options);

                  case 'keccak256':
                    return new Keccak(1088, 512, null, 256, options);

                  case 'keccak384':
                    return new Keccak(832, 768, null, 384, options);

                  case 'keccak512':
                    return new Keccak(576, 1024, null, 512, options);

                  case 'sha3-224':
                    return new Keccak(1152, 448, 0x06, 224, options);

                  case 'sha3-256':
                    return new Keccak(1088, 512, 0x06, 256, options);

                  case 'sha3-384':
                    return new Keccak(832, 768, 0x06, 384, options);

                  case 'sha3-512':
                    return new Keccak(576, 1024, 0x06, 512, options);

                  case 'shake128':
                    return new Shake(1344, 256, 0x1f, options);

                  case 'shake256':
                    return new Shake(1088, 512, 0x1f, options);

                  default:
                    throw new Error('Invald algorithm: ' + algorithm);
                }
              };
            };

            var keccakStateUnroll = {};

            var P1600_ROUND_CONSTANTS = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];

            keccakStateUnroll.p1600 = function (s) {
              for (var round = 0; round < 24; ++round) {
                // theta
                var lo0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
                var hi0 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
                var lo1 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
                var hi1 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
                var lo2 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
                var hi2 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
                var lo3 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
                var hi3 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
                var lo4 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
                var hi4 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
                var lo = lo4 ^ (lo1 << 1 | hi1 >>> 31);
                var hi = hi4 ^ (hi1 << 1 | lo1 >>> 31);
                var t1slo0 = s[0] ^ lo;
                var t1shi0 = s[1] ^ hi;
                var t1slo5 = s[10] ^ lo;
                var t1shi5 = s[11] ^ hi;
                var t1slo10 = s[20] ^ lo;
                var t1shi10 = s[21] ^ hi;
                var t1slo15 = s[30] ^ lo;
                var t1shi15 = s[31] ^ hi;
                var t1slo20 = s[40] ^ lo;
                var t1shi20 = s[41] ^ hi;
                lo = lo0 ^ (lo2 << 1 | hi2 >>> 31);
                hi = hi0 ^ (hi2 << 1 | lo2 >>> 31);
                var t1slo1 = s[2] ^ lo;
                var t1shi1 = s[3] ^ hi;
                var t1slo6 = s[12] ^ lo;
                var t1shi6 = s[13] ^ hi;
                var t1slo11 = s[22] ^ lo;
                var t1shi11 = s[23] ^ hi;
                var t1slo16 = s[32] ^ lo;
                var t1shi16 = s[33] ^ hi;
                var t1slo21 = s[42] ^ lo;
                var t1shi21 = s[43] ^ hi;
                lo = lo1 ^ (lo3 << 1 | hi3 >>> 31);
                hi = hi1 ^ (hi3 << 1 | lo3 >>> 31);
                var t1slo2 = s[4] ^ lo;
                var t1shi2 = s[5] ^ hi;
                var t1slo7 = s[14] ^ lo;
                var t1shi7 = s[15] ^ hi;
                var t1slo12 = s[24] ^ lo;
                var t1shi12 = s[25] ^ hi;
                var t1slo17 = s[34] ^ lo;
                var t1shi17 = s[35] ^ hi;
                var t1slo22 = s[44] ^ lo;
                var t1shi22 = s[45] ^ hi;
                lo = lo2 ^ (lo4 << 1 | hi4 >>> 31);
                hi = hi2 ^ (hi4 << 1 | lo4 >>> 31);
                var t1slo3 = s[6] ^ lo;
                var t1shi3 = s[7] ^ hi;
                var t1slo8 = s[16] ^ lo;
                var t1shi8 = s[17] ^ hi;
                var t1slo13 = s[26] ^ lo;
                var t1shi13 = s[27] ^ hi;
                var t1slo18 = s[36] ^ lo;
                var t1shi18 = s[37] ^ hi;
                var t1slo23 = s[46] ^ lo;
                var t1shi23 = s[47] ^ hi;
                lo = lo3 ^ (lo0 << 1 | hi0 >>> 31);
                hi = hi3 ^ (hi0 << 1 | lo0 >>> 31);
                var t1slo4 = s[8] ^ lo;
                var t1shi4 = s[9] ^ hi;
                var t1slo9 = s[18] ^ lo;
                var t1shi9 = s[19] ^ hi;
                var t1slo14 = s[28] ^ lo;
                var t1shi14 = s[29] ^ hi;
                var t1slo19 = s[38] ^ lo;
                var t1shi19 = s[39] ^ hi;
                var t1slo24 = s[48] ^ lo;
                var t1shi24 = s[49] ^ hi; // rho & pi

                var t2slo0 = t1slo0;
                var t2shi0 = t1shi0;
                var t2slo16 = t1shi5 << 4 | t1slo5 >>> 28;
                var t2shi16 = t1slo5 << 4 | t1shi5 >>> 28;
                var t2slo7 = t1slo10 << 3 | t1shi10 >>> 29;
                var t2shi7 = t1shi10 << 3 | t1slo10 >>> 29;
                var t2slo23 = t1shi15 << 9 | t1slo15 >>> 23;
                var t2shi23 = t1slo15 << 9 | t1shi15 >>> 23;
                var t2slo14 = t1slo20 << 18 | t1shi20 >>> 14;
                var t2shi14 = t1shi20 << 18 | t1slo20 >>> 14;
                var t2slo10 = t1slo1 << 1 | t1shi1 >>> 31;
                var t2shi10 = t1shi1 << 1 | t1slo1 >>> 31;
                var t2slo1 = t1shi6 << 12 | t1slo6 >>> 20;
                var t2shi1 = t1slo6 << 12 | t1shi6 >>> 20;
                var t2slo17 = t1slo11 << 10 | t1shi11 >>> 22;
                var t2shi17 = t1shi11 << 10 | t1slo11 >>> 22;
                var t2slo8 = t1shi16 << 13 | t1slo16 >>> 19;
                var t2shi8 = t1slo16 << 13 | t1shi16 >>> 19;
                var t2slo24 = t1slo21 << 2 | t1shi21 >>> 30;
                var t2shi24 = t1shi21 << 2 | t1slo21 >>> 30;
                var t2slo20 = t1shi2 << 30 | t1slo2 >>> 2;
                var t2shi20 = t1slo2 << 30 | t1shi2 >>> 2;
                var t2slo11 = t1slo7 << 6 | t1shi7 >>> 26;
                var t2shi11 = t1shi7 << 6 | t1slo7 >>> 26;
                var t2slo2 = t1shi12 << 11 | t1slo12 >>> 21;
                var t2shi2 = t1slo12 << 11 | t1shi12 >>> 21;
                var t2slo18 = t1slo17 << 15 | t1shi17 >>> 17;
                var t2shi18 = t1shi17 << 15 | t1slo17 >>> 17;
                var t2slo9 = t1shi22 << 29 | t1slo22 >>> 3;
                var t2shi9 = t1slo22 << 29 | t1shi22 >>> 3;
                var t2slo5 = t1slo3 << 28 | t1shi3 >>> 4;
                var t2shi5 = t1shi3 << 28 | t1slo3 >>> 4;
                var t2slo21 = t1shi8 << 23 | t1slo8 >>> 9;
                var t2shi21 = t1slo8 << 23 | t1shi8 >>> 9;
                var t2slo12 = t1slo13 << 25 | t1shi13 >>> 7;
                var t2shi12 = t1shi13 << 25 | t1slo13 >>> 7;
                var t2slo3 = t1slo18 << 21 | t1shi18 >>> 11;
                var t2shi3 = t1shi18 << 21 | t1slo18 >>> 11;
                var t2slo19 = t1shi23 << 24 | t1slo23 >>> 8;
                var t2shi19 = t1slo23 << 24 | t1shi23 >>> 8;
                var t2slo15 = t1slo4 << 27 | t1shi4 >>> 5;
                var t2shi15 = t1shi4 << 27 | t1slo4 >>> 5;
                var t2slo6 = t1slo9 << 20 | t1shi9 >>> 12;
                var t2shi6 = t1shi9 << 20 | t1slo9 >>> 12;
                var t2slo22 = t1shi14 << 7 | t1slo14 >>> 25;
                var t2shi22 = t1slo14 << 7 | t1shi14 >>> 25;
                var t2slo13 = t1slo19 << 8 | t1shi19 >>> 24;
                var t2shi13 = t1shi19 << 8 | t1slo19 >>> 24;
                var t2slo4 = t1slo24 << 14 | t1shi24 >>> 18;
                var t2shi4 = t1shi24 << 14 | t1slo24 >>> 18; // chi

                s[0] = t2slo0 ^ ~t2slo1 & t2slo2;
                s[1] = t2shi0 ^ ~t2shi1 & t2shi2;
                s[10] = t2slo5 ^ ~t2slo6 & t2slo7;
                s[11] = t2shi5 ^ ~t2shi6 & t2shi7;
                s[20] = t2slo10 ^ ~t2slo11 & t2slo12;
                s[21] = t2shi10 ^ ~t2shi11 & t2shi12;
                s[30] = t2slo15 ^ ~t2slo16 & t2slo17;
                s[31] = t2shi15 ^ ~t2shi16 & t2shi17;
                s[40] = t2slo20 ^ ~t2slo21 & t2slo22;
                s[41] = t2shi20 ^ ~t2shi21 & t2shi22;
                s[2] = t2slo1 ^ ~t2slo2 & t2slo3;
                s[3] = t2shi1 ^ ~t2shi2 & t2shi3;
                s[12] = t2slo6 ^ ~t2slo7 & t2slo8;
                s[13] = t2shi6 ^ ~t2shi7 & t2shi8;
                s[22] = t2slo11 ^ ~t2slo12 & t2slo13;
                s[23] = t2shi11 ^ ~t2shi12 & t2shi13;
                s[32] = t2slo16 ^ ~t2slo17 & t2slo18;
                s[33] = t2shi16 ^ ~t2shi17 & t2shi18;
                s[42] = t2slo21 ^ ~t2slo22 & t2slo23;
                s[43] = t2shi21 ^ ~t2shi22 & t2shi23;
                s[4] = t2slo2 ^ ~t2slo3 & t2slo4;
                s[5] = t2shi2 ^ ~t2shi3 & t2shi4;
                s[14] = t2slo7 ^ ~t2slo8 & t2slo9;
                s[15] = t2shi7 ^ ~t2shi8 & t2shi9;
                s[24] = t2slo12 ^ ~t2slo13 & t2slo14;
                s[25] = t2shi12 ^ ~t2shi13 & t2shi14;
                s[34] = t2slo17 ^ ~t2slo18 & t2slo19;
                s[35] = t2shi17 ^ ~t2shi18 & t2shi19;
                s[44] = t2slo22 ^ ~t2slo23 & t2slo24;
                s[45] = t2shi22 ^ ~t2shi23 & t2shi24;
                s[6] = t2slo3 ^ ~t2slo4 & t2slo0;
                s[7] = t2shi3 ^ ~t2shi4 & t2shi0;
                s[16] = t2slo8 ^ ~t2slo9 & t2slo5;
                s[17] = t2shi8 ^ ~t2shi9 & t2shi5;
                s[26] = t2slo13 ^ ~t2slo14 & t2slo10;
                s[27] = t2shi13 ^ ~t2shi14 & t2shi10;
                s[36] = t2slo18 ^ ~t2slo19 & t2slo15;
                s[37] = t2shi18 ^ ~t2shi19 & t2shi15;
                s[46] = t2slo23 ^ ~t2slo24 & t2slo20;
                s[47] = t2shi23 ^ ~t2shi24 & t2shi20;
                s[8] = t2slo4 ^ ~t2slo0 & t2slo1;
                s[9] = t2shi4 ^ ~t2shi0 & t2shi1;
                s[18] = t2slo9 ^ ~t2slo5 & t2slo6;
                s[19] = t2shi9 ^ ~t2shi5 & t2shi6;
                s[28] = t2slo14 ^ ~t2slo10 & t2slo11;
                s[29] = t2shi14 ^ ~t2shi10 & t2shi11;
                s[38] = t2slo19 ^ ~t2slo15 & t2slo16;
                s[39] = t2shi19 ^ ~t2shi15 & t2shi16;
                s[48] = t2slo24 ^ ~t2slo20 & t2slo21;
                s[49] = t2shi24 ^ ~t2shi20 & t2shi21; // iota

                s[0] ^= P1600_ROUND_CONSTANTS[round * 2];
                s[1] ^= P1600_ROUND_CONSTANTS[round * 2 + 1];
              }
            };

            var keccakState = keccakStateUnroll;

            function Keccak() {
              // much faster than `new Array(50)`
              this.state = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
              this.blockSize = null;
              this.count = 0;
              this.squeezing = false;
            }

            Keccak.prototype.initialize = function (rate, capacity) {
              for (var i = 0; i < 50; ++i) {
                this.state[i] = 0;
              }

              this.blockSize = rate / 8;
              this.count = 0;
              this.squeezing = false;
            };

            Keccak.prototype.absorb = function (data) {
              for (var i = 0; i < data.length; ++i) {
                this.state[~~(this.count / 4)] ^= data[i] << 8 * (this.count % 4);
                this.count += 1;

                if (this.count === this.blockSize) {
                  keccakState.p1600(this.state);
                  this.count = 0;
                }
              }
            };

            Keccak.prototype.absorbLastFewBits = function (bits) {
              this.state[~~(this.count / 4)] ^= bits << 8 * (this.count % 4);
              if ((bits & 0x80) !== 0 && this.count === this.blockSize - 1) keccakState.p1600(this.state);
              this.state[~~((this.blockSize - 1) / 4)] ^= 0x80 << 8 * ((this.blockSize - 1) % 4);
              keccakState.p1600(this.state);
              this.count = 0;
              this.squeezing = true;
            };

            Keccak.prototype.squeeze = function (length) {
              if (!this.squeezing) this.absorbLastFewBits(0x01);
              var output = Buffer$i.alloc(length);

              for (var i = 0; i < length; ++i) {
                output[i] = this.state[~~(this.count / 4)] >>> 8 * (this.count % 4) & 0xff;
                this.count += 1;

                if (this.count === this.blockSize) {
                  keccakState.p1600(this.state);
                  this.count = 0;
                }
              }

              return output;
            };

            Keccak.prototype.copy = function (dest) {
              for (var i = 0; i < 50; ++i) {
                dest.state[i] = this.state[i];
              }

              dest.blockSize = this.blockSize;
              dest.count = this.count;
              dest.squeezing = this.squeezing;
            };

            var keccak = Keccak;

            var js = api(keccak);

            Object.defineProperty(keccak$2, "__esModule", {
              value: true
            });
            var hash_utils_1$2 = hashUtils;
            var createKeccakHash = js;
            keccak$2.keccak224 = hash_utils_1$2.createHashFunction(function () {
              return createKeccakHash("keccak224");
            });
            keccak$2.keccak256 = hash_utils_1$2.createHashFunction(function () {
              return createKeccakHash("keccak256");
            });
            keccak$2.keccak384 = hash_utils_1$2.createHashFunction(function () {
              return createKeccakHash("keccak384");
            });
            keccak$2.keccak512 = hash_utils_1$2.createHashFunction(function () {
              return createKeccakHash("keccak512");
            });

            function compare(a, b) {
              if (a === b) {
                return 0;
              }

              var x = a.length;
              var y = b.length;

              for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                if (a[i] !== b[i]) {
                  x = a[i];
                  y = b[i];
                  break;
                }
              }

              if (x < y) {
                return -1;
              }

              if (y < x) {
                return 1;
              }

              return 0;
            }

            var hasOwn$2 = Object.prototype.hasOwnProperty;

            var objectKeys = Object.keys || function (obj) {
              var keys = [];

              for (var key in obj) {
                if (hasOwn$2.call(obj, key)) keys.push(key);
              }

              return keys;
            }; // based on node assert, original notice:
            var pSlice = Array.prototype.slice;

            var _functionsHaveNames;

            function functionsHaveNames() {
              if (typeof _functionsHaveNames !== 'undefined') {
                return _functionsHaveNames;
              }

              return _functionsHaveNames = function () {
                return function foo() {}.name === 'foo';
              }();
            }

            function pToString(obj) {
              return Object.prototype.toString.call(obj);
            }

            function isView(arrbuf) {
              if (isBuffer$2(arrbuf)) {
                return false;
              }

              if (typeof global$1.ArrayBuffer !== 'function') {
                return false;
              }

              if (typeof ArrayBuffer.isView === 'function') {
                return ArrayBuffer.isView(arrbuf);
              }

              if (!arrbuf) {
                return false;
              }

              if (arrbuf instanceof DataView) {
                return true;
              }

              if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
                return true;
              }

              return false;
            } // 1. The assert module provides functions that throw
            // AssertionError's when particular conditions are not met. The
            // assert module must conform to the following interface.


            function assert$2(value, message) {
              if (!value) fail(value, true, message, '==', ok);
            }
            // new assert.AssertionError({ message: message,
            //                             actual: actual,
            //                             expected: expected })

            var regex = /\s*function\s+([^\(\s]*)\s*/; // based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js

            function getName(func) {
              if (!isFunction$2(func)) {
                return;
              }

              if (functionsHaveNames()) {
                return func.name;
              }

              var str = func.toString();
              var match = str.match(regex);
              return match && match[1];
            }

            assert$2.AssertionError = AssertionError;
            function AssertionError(options) {
              this.name = 'AssertionError';
              this.actual = options.actual;
              this.expected = options.expected;
              this.operator = options.operator;

              if (options.message) {
                this.message = options.message;
                this.generatedMessage = false;
              } else {
                this.message = getMessage(this);
                this.generatedMessage = true;
              }

              var stackStartFunction = options.stackStartFunction || fail;

              if (Error.captureStackTrace) {
                Error.captureStackTrace(this, stackStartFunction);
              } else {
                // non v8 browsers so we can have a stacktrace
                var err = new Error();

                if (err.stack) {
                  var out = err.stack; // try to strip useless frames

                  var fn_name = getName(stackStartFunction);
                  var idx = out.indexOf('\n' + fn_name);

                  if (idx >= 0) {
                    // once we have located the function frame
                    // we need to strip out everything before it (and its line)
                    var next_line = out.indexOf('\n', idx + 1);
                    out = out.substring(next_line + 1);
                  }

                  this.stack = out;
                }
              }
            } // assert.AssertionError instanceof Error

            inherits$e(AssertionError, Error);

            function truncate(s, n) {
              if (typeof s === 'string') {
                return s.length < n ? s : s.slice(0, n);
              } else {
                return s;
              }
            }

            function inspect$1(something) {
              if (functionsHaveNames() || !isFunction$2(something)) {
                return inspect$2(something);
              }

              var rawname = getName(something);
              var name = rawname ? ': ' + rawname : '';
              return '[Function' + name + ']';
            }

            function getMessage(self) {
              return truncate(inspect$1(self.actual), 128) + ' ' + self.operator + ' ' + truncate(inspect$1(self.expected), 128);
            } // At present only the three keys mentioned above are used and
            // understood by the spec. Implementations or sub modules can pass
            // other keys to the AssertionError's constructor - they will be
            // ignored.
            // 3. All of the following functions must throw an AssertionError
            // when a corresponding condition is not met, with a message that
            // may be undefined if not provided.  All assertion methods provide
            // both the actual and expected values to the assertion error for
            // display purposes.


            function fail(actual, expected, message, operator, stackStartFunction) {
              throw new AssertionError({
                message: message,
                actual: actual,
                expected: expected,
                operator: operator,
                stackStartFunction: stackStartFunction
              });
            } // EXTENSION! allows for well behaved errors defined elsewhere.

            assert$2.fail = fail; // 4. Pure assertion tests whether a value is truthy, as determined
            // by !!guard.
            // assert.ok(guard, message_opt);
            // This statement is equivalent to assert.equal(true, !!guard,
            // message_opt);. To test strictly for the value true, use
            // assert.strictEqual(true, guard, message_opt);.

            function ok(value, message) {
              if (!value) fail(value, true, message, '==', ok);
            }
            assert$2.ok = ok;
            // ==.
            // assert.equal(actual, expected, message_opt);

            assert$2.equal = equal;
            function equal(actual, expected, message) {
              if (actual != expected) fail(actual, expected, message, '==', equal);
            } // 6. The non-equality assertion tests for whether two objects are not equal
            // with != assert.notEqual(actual, expected, message_opt);

            assert$2.notEqual = notEqual;
            function notEqual(actual, expected, message) {
              if (actual == expected) {
                fail(actual, expected, message, '!=', notEqual);
              }
            } // 7. The equivalence assertion tests a deep equality relation.
            // assert.deepEqual(actual, expected, message_opt);

            assert$2.deepEqual = deepEqual;
            function deepEqual(actual, expected, message) {
              if (!_deepEqual(actual, expected, false)) {
                fail(actual, expected, message, 'deepEqual', deepEqual);
              }
            }
            assert$2.deepStrictEqual = deepStrictEqual;
            function deepStrictEqual(actual, expected, message) {
              if (!_deepEqual(actual, expected, true)) {
                fail(actual, expected, message, 'deepStrictEqual', deepStrictEqual);
              }
            }

            function _deepEqual(actual, expected, strict, memos) {
              // 7.1. All identical values are equivalent, as determined by ===.
              if (actual === expected) {
                return true;
              } else if (isBuffer$2(actual) && isBuffer$2(expected)) {
                return compare(actual, expected) === 0; // 7.2. If the expected value is a Date object, the actual value is
                // equivalent if it is also a Date object that refers to the same time.
              } else if (isDate$2(actual) && isDate$2(expected)) {
                return actual.getTime() === expected.getTime(); // 7.3 If the expected value is a RegExp object, the actual value is
                // equivalent if it is also a RegExp object with the same source and
                // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
              } else if (isRegExp$2(actual) && isRegExp$2(expected)) {
                return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase; // 7.4. Other pairs that do not both pass typeof value == 'object',
                // equivalence is determined by ==.
              } else if ((actual === null || _typeof$1(actual) !== 'object') && (expected === null || _typeof$1(expected) !== 'object')) {
                return strict ? actual === expected : actual == expected; // If both values are instances of typed arrays, wrap their underlying
                // ArrayBuffers in a Buffer each to increase performance
                // This optimization requires the arrays to have the same type as checked by
                // Object.prototype.toString (aka pToString). Never perform binary
                // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
                // bit patterns are not identical.
              } else if (isView(actual) && isView(expected) && pToString(actual) === pToString(expected) && !(actual instanceof Float32Array || actual instanceof Float64Array)) {
                return compare(new Uint8Array(actual.buffer), new Uint8Array(expected.buffer)) === 0; // 7.5 For all other Object pairs, including Array objects, equivalence is
                // determined by having the same number of owned properties (as verified
                // with Object.prototype.hasOwnProperty.call), the same set of keys
                // (although not necessarily the same order), equivalent values for every
                // corresponding key, and an identical 'prototype' property. Note: this
                // accounts for both named and indexed properties on Arrays.
              } else if (isBuffer$2(actual) !== isBuffer$2(expected)) {
                return false;
              } else {
                memos = memos || {
                  actual: [],
                  expected: []
                };
                var actualIndex = memos.actual.indexOf(actual);

                if (actualIndex !== -1) {
                  if (actualIndex === memos.expected.indexOf(expected)) {
                    return true;
                  }
                }

                memos.actual.push(actual);
                memos.expected.push(expected);
                return objEquiv(actual, expected, strict, memos);
              }
            }

            function isArguments(object) {
              return Object.prototype.toString.call(object) == '[object Arguments]';
            }

            function objEquiv(a, b, strict, actualVisitedObjects) {
              if (a === null || a === undefined || b === null || b === undefined) return false; // if one is a primitive, the other must be same

              if (isPrimitive(a) || isPrimitive(b)) return a === b;
              if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b)) return false;
              var aIsArgs = isArguments(a);
              var bIsArgs = isArguments(b);
              if (aIsArgs && !bIsArgs || !aIsArgs && bIsArgs) return false;

              if (aIsArgs) {
                a = pSlice.call(a);
                b = pSlice.call(b);
                return _deepEqual(a, b, strict);
              }

              var ka = objectKeys(a);
              var kb = objectKeys(b);
              var key, i; // having the same number of owned properties (keys incorporates
              // hasOwnProperty)

              if (ka.length !== kb.length) return false; //the same set of keys (although not necessarily the same order),

              ka.sort();
              kb.sort(); //~~~cheap key test

              for (i = ka.length - 1; i >= 0; i--) {
                if (ka[i] !== kb[i]) return false;
              } //equivalent values for every corresponding key, and
              //~~~possibly expensive deep test


              for (i = ka.length - 1; i >= 0; i--) {
                key = ka[i];
                if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects)) return false;
              }

              return true;
            } // 8. The non-equivalence assertion tests for any deep inequality.
            // assert.notDeepEqual(actual, expected, message_opt);


            assert$2.notDeepEqual = notDeepEqual;
            function notDeepEqual(actual, expected, message) {
              if (_deepEqual(actual, expected, false)) {
                fail(actual, expected, message, 'notDeepEqual', notDeepEqual);
              }
            }
            assert$2.notDeepStrictEqual = notDeepStrictEqual;
            function notDeepStrictEqual(actual, expected, message) {
              if (_deepEqual(actual, expected, true)) {
                fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
              }
            } // 9. The strict equality assertion tests strict equality, as determined by ===.
            // assert.strictEqual(actual, expected, message_opt);

            assert$2.strictEqual = strictEqual;
            function strictEqual(actual, expected, message) {
              if (actual !== expected) {
                fail(actual, expected, message, '===', strictEqual);
              }
            } // 10. The strict non-equality assertion tests for strict inequality, as
            // determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

            assert$2.notStrictEqual = notStrictEqual;
            function notStrictEqual(actual, expected, message) {
              if (actual === expected) {
                fail(actual, expected, message, '!==', notStrictEqual);
              }
            }

            function expectedException(actual, expected) {
              if (!actual || !expected) {
                return false;
              }

              if (Object.prototype.toString.call(expected) == '[object RegExp]') {
                return expected.test(actual);
              }

              try {
                if (actual instanceof expected) {
                  return true;
                }
              } catch (e) {// Ignore.  The instanceof check doesn't work for arrow functions.
              }

              if (Error.isPrototypeOf(expected)) {
                return false;
              }

              return expected.call({}, actual) === true;
            }

            function _tryBlock(block) {
              var error;

              try {
                block();
              } catch (e) {
                error = e;
              }

              return error;
            }

            function _throws(shouldThrow, block, expected, message) {
              var actual;

              if (typeof block !== 'function') {
                throw new TypeError('"block" argument must be a function');
              }

              if (typeof expected === 'string') {
                message = expected;
                expected = null;
              }

              actual = _tryBlock(block);
              message = (expected && expected.name ? ' (' + expected.name + ').' : '.') + (message ? ' ' + message : '.');

              if (shouldThrow && !actual) {
                fail(actual, expected, 'Missing expected exception' + message);
              }

              var userProvidedMessage = typeof message === 'string';
              var isUnwantedException = !shouldThrow && isError$1(actual);
              var isUnexpectedException = !shouldThrow && actual && !expected;

              if (isUnwantedException && userProvidedMessage && expectedException(actual, expected) || isUnexpectedException) {
                fail(actual, expected, 'Got unwanted exception' + message);
              }

              if (shouldThrow && actual && expected && !expectedException(actual, expected) || !shouldThrow && actual) {
                throw actual;
              }
            } // 11. Expected to throw an error:
            // assert.throws(block, Error_opt, message_opt);


            assert$2["throws"] = _throws2;

            function _throws2(block,
            /*optional*/
            error,
            /*optional*/
            message) {
              _throws(true, block, error, message);
            } // EXTENSION! This is annoying to write outside this module.
            assert$2.doesNotThrow = doesNotThrow;
            function doesNotThrow(block,
            /*optional*/
            error,
            /*optional*/
            message) {
              _throws(false, block, error, message);
            }
            assert$2.ifError = ifError;
            function ifError(err) {
              if (err) throw err;
            }

            var assert$3 = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        'default': assert$2,
                        AssertionError: AssertionError,
                        fail: fail,
                        ok: ok,
                        assert: ok,
                        equal: equal,
                        notEqual: notEqual,
                        deepEqual: deepEqual,
                        deepStrictEqual: deepStrictEqual,
                        notDeepEqual: notDeepEqual,
                        notDeepStrictEqual: notDeepStrictEqual,
                        strictEqual: strictEqual,
                        notStrictEqual: notStrictEqual,
                        throws: _throws2,
                        doesNotThrow: doesNotThrow,
                        ifError: ifError
            });

            var src$4 = function isHexPrefixed(str) {
              if (typeof str !== 'string') {
                throw new Error("[is-hex-prefixed] value must be type 'string', is currently type " + _typeof$1(str) + ", while checking isHexPrefixed.");
              }

              return str.slice(0, 2) === '0x';
            };

            var isHexPrefixed$3 = src$4;
            /**
             * Removes '0x' from a given `String` is present
             * @param {String} str the string value
             * @return {String|Optional} a string by pass if necessary
             */

            var src$3 = function stripHexPrefix(str) {
              if (typeof str !== 'string') {
                return str;
              }

              return isHexPrefixed$3(str) ? str.slice(2) : str;
            };

            var isHexPrefixed$2 = src$4;
            var stripHexPrefix$2 = src$3;
            /**
             * Pads a `String` to have an even length
             * @param {String} value
             * @return {String} output
             */

            function padToEven$2(value) {
              var a = value; // eslint-disable-line

              if (typeof a !== 'string') {
                throw new Error('[ethjs-util] while padding to even, value must be string, is currently ' + _typeof$1(a) + ', while padToEven.');
              }

              if (a.length % 2) {
                a = '0' + a;
              }

              return a;
            }
            /**
             * Converts a `Number` into a hex `String`
             * @param {Number} i
             * @return {String}
             */


            function intToHex$1(i) {
              var hex = i.toString(16); // eslint-disable-line

              return '0x' + hex;
            }
            /**
             * Converts an `Number` to a `Buffer`
             * @param {Number} i
             * @return {Buffer}
             */


            function intToBuffer$1(i) {
              var hex = intToHex$1(i);
              return new Buffer$i(padToEven$2(hex.slice(2)), 'hex');
            }
            /**
             * Get the binary size of a string
             * @param {String} str
             * @return {Number}
             */


            function getBinarySize$1(str) {
              if (typeof str !== 'string') {
                throw new Error('[ethjs-util] while getting binary size, method getBinarySize requires input \'str\' to be type String, got \'' + _typeof$1(str) + '\'.');
              }

              return Buffer$i.byteLength(str, 'utf8');
            }
            /**
             * Returns TRUE if the first specified array contains all elements
             * from the second one. FALSE otherwise.
             *
             * @param {array} superset
             * @param {array} subset
             *
             * @returns {boolean}
             */


            function arrayContainsArray$1(superset, subset, some) {
              if (Array.isArray(superset) !== true) {
                throw new Error('[ethjs-util] method arrayContainsArray requires input \'superset\' to be an array got type \'' + _typeof$1(superset) + '\'');
              }

              if (Array.isArray(subset) !== true) {
                throw new Error('[ethjs-util] method arrayContainsArray requires input \'subset\' to be an array got type \'' + _typeof$1(subset) + '\'');
              }

              return subset[Boolean(some) && 'some' || 'every'](function (value) {
                return superset.indexOf(value) >= 0;
              });
            }
            /**
             * Should be called to get utf8 from it's hex representation
             *
             * @method toUtf8
             * @param {String} string in hex
             * @returns {String} ascii string representation of hex value
             */


            function toUtf8(hex) {
              var bufferValue = new Buffer$i(padToEven$2(stripHexPrefix$2(hex).replace(/^0+|0+$/g, '')), 'hex');
              return bufferValue.toString('utf8');
            }
            /**
             * Should be called to get ascii from it's hex representation
             *
             * @method toAscii
             * @param {String} string in hex
             * @returns {String} ascii string representation of hex value
             */


            function toAscii$1(hex) {
              var str = ''; // eslint-disable-line

              var i = 0,
                  l = hex.length; // eslint-disable-line

              if (hex.substring(0, 2) === '0x') {
                i = 2;
              }

              for (; i < l; i += 2) {
                var code = parseInt(hex.substr(i, 2), 16);
                str += String.fromCharCode(code);
              }

              return str;
            }
            /**
             * Should be called to get hex representation (prefixed by 0x) of utf8 string
             *
             * @method fromUtf8
             * @param {String} string
             * @param {Number} optional padding
             * @returns {String} hex representation of input string
             */


            function fromUtf8$1(stringValue) {
              var str = new Buffer$i(stringValue, 'utf8');
              return '0x' + padToEven$2(str.toString('hex')).replace(/^0+|0+$/g, '');
            }
            /**
             * Should be called to get hex representation (prefixed by 0x) of ascii string
             *
             * @method fromAscii
             * @param {String} string
             * @param {Number} optional padding
             * @returns {String} hex representation of input string
             */


            function fromAscii$1(stringValue) {
              var hex = ''; // eslint-disable-line

              for (var i = 0; i < stringValue.length; i++) {
                // eslint-disable-line
                var code = stringValue.charCodeAt(i);
                var n = code.toString(16);
                hex += n.length < 2 ? '0' + n : n;
              }

              return '0x' + hex;
            }
            /**
             * getKeys([{a: 1, b: 2}, {a: 3, b: 4}], 'a') => [1, 3]
             *
             * @method getKeys get specific key from inner object array of objects
             * @param {String} params
             * @param {String} key
             * @param {Boolean} allowEmpty
             * @returns {Array} output just a simple array of output keys
             */


            function getKeys$1(params, key, allowEmpty) {
              if (!Array.isArray(params)) {
                throw new Error('[ethjs-util] method getKeys expecting type Array as \'params\' input, got \'' + _typeof$1(params) + '\'');
              }

              if (typeof key !== 'string') {
                throw new Error('[ethjs-util] method getKeys expecting type String for input \'key\' got \'' + _typeof$1(key) + '\'.');
              }

              var result = []; // eslint-disable-line

              for (var i = 0; i < params.length; i++) {
                // eslint-disable-line
                var value = params[i][key]; // eslint-disable-line

                if (allowEmpty && !value) {
                  value = '';
                } else if (typeof value !== 'string') {
                  throw new Error('invalid abi');
                }

                result.push(value);
              }

              return result;
            }
            /**
             * Is the string a hex string.
             *
             * @method check if string is hex string of specific length
             * @param {String} value
             * @param {Number} length
             * @returns {Boolean} output the string is a hex string
             */


            function isHexString$1(value, length) {
              if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {
                return false;
              }

              if (length && value.length !== 2 + 2 * length) {
                return false;
              }

              return true;
            }

            var lib$1 = {
              arrayContainsArray: arrayContainsArray$1,
              intToBuffer: intToBuffer$1,
              getBinarySize: getBinarySize$1,
              isHexPrefixed: isHexPrefixed$2,
              stripHexPrefix: stripHexPrefix$2,
              padToEven: padToEven$2,
              intToHex: intToHex$1,
              fromAscii: fromAscii$1,
              fromUtf8: fromUtf8$1,
              toAscii: toAscii$1,
              toUtf8: toUtf8,
              getKeys: getKeys$1,
              isHexString: isHexString$1
            };

            var bytes = {};

            var bn = {exports: {}};

            (function (module) {
              (function (module, exports) {

                function assert(val, msg) {
                  if (!val) throw new Error(msg || 'Assertion failed');
                } // Could use `inherits` module, but don't want to move from single file
                // architecture yet.


                function inherits(ctor, superCtor) {
                  ctor.super_ = superCtor;

                  var TempCtor = function TempCtor() {};

                  TempCtor.prototype = superCtor.prototype;
                  ctor.prototype = new TempCtor();
                  ctor.prototype.constructor = ctor;
                } // BN


                function BN(number, base, endian) {
                  if (BN.isBN(number)) {
                    return number;
                  }

                  this.negative = 0;
                  this.words = null;
                  this.length = 0; // Reduction context

                  this.red = null;

                  if (number !== null) {
                    if (base === 'le' || base === 'be') {
                      endian = base;
                      base = 10;
                    }

                    this._init(number || 0, base || 10, endian || 'be');
                  }
                }

                if (_typeof$1(module) === 'object') {
                  module.exports = BN;
                } else {
                  exports.BN = BN;
                }

                BN.BN = BN;
                BN.wordSize = 26;
                var Buffer;

                try {
                  if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
                    Buffer = window.Buffer;
                  } else {
                    Buffer = require$$0$4.Buffer;
                  }
                } catch (e) {}

                BN.isBN = function isBN(num) {
                  if (num instanceof BN) {
                    return true;
                  }

                  return num !== null && _typeof$1(num) === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
                };

                BN.max = function max(left, right) {
                  if (left.cmp(right) > 0) return left;
                  return right;
                };

                BN.min = function min(left, right) {
                  if (left.cmp(right) < 0) return left;
                  return right;
                };

                BN.prototype._init = function init(number, base, endian) {
                  if (typeof number === 'number') {
                    return this._initNumber(number, base, endian);
                  }

                  if (_typeof$1(number) === 'object') {
                    return this._initArray(number, base, endian);
                  }

                  if (base === 'hex') {
                    base = 16;
                  }

                  assert(base === (base | 0) && base >= 2 && base <= 36);
                  number = number.toString().replace(/\s+/g, '');
                  var start = 0;

                  if (number[0] === '-') {
                    start++;
                    this.negative = 1;
                  }

                  if (start < number.length) {
                    if (base === 16) {
                      this._parseHex(number, start, endian);
                    } else {
                      this._parseBase(number, base, start);

                      if (endian === 'le') {
                        this._initArray(this.toArray(), base, endian);
                      }
                    }
                  }
                };

                BN.prototype._initNumber = function _initNumber(number, base, endian) {
                  if (number < 0) {
                    this.negative = 1;
                    number = -number;
                  }

                  if (number < 0x4000000) {
                    this.words = [number & 0x3ffffff];
                    this.length = 1;
                  } else if (number < 0x10000000000000) {
                    this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];
                    this.length = 2;
                  } else {
                    assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)

                    this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];
                    this.length = 3;
                  }

                  if (endian !== 'le') return; // Reverse the bytes

                  this._initArray(this.toArray(), base, endian);
                };

                BN.prototype._initArray = function _initArray(number, base, endian) {
                  // Perhaps a Uint8Array
                  assert(typeof number.length === 'number');

                  if (number.length <= 0) {
                    this.words = [0];
                    this.length = 1;
                    return this;
                  }

                  this.length = Math.ceil(number.length / 3);
                  this.words = new Array(this.length);

                  for (var i = 0; i < this.length; i++) {
                    this.words[i] = 0;
                  }

                  var j, w;
                  var off = 0;

                  if (endian === 'be') {
                    for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
                      w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
                      this.words[j] |= w << off & 0x3ffffff;
                      this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
                      off += 24;

                      if (off >= 26) {
                        off -= 26;
                        j++;
                      }
                    }
                  } else if (endian === 'le') {
                    for (i = 0, j = 0; i < number.length; i += 3) {
                      w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
                      this.words[j] |= w << off & 0x3ffffff;
                      this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
                      off += 24;

                      if (off >= 26) {
                        off -= 26;
                        j++;
                      }
                    }
                  }

                  return this._strip();
                };

                function parseHex4Bits(string, index) {
                  var c = string.charCodeAt(index); // '0' - '9'

                  if (c >= 48 && c <= 57) {
                    return c - 48; // 'A' - 'F'
                  } else if (c >= 65 && c <= 70) {
                    return c - 55; // 'a' - 'f'
                  } else if (c >= 97 && c <= 102) {
                    return c - 87;
                  } else {
                    assert(false, 'Invalid character in ' + string);
                  }
                }

                function parseHexByte(string, lowerBound, index) {
                  var r = parseHex4Bits(string, index);

                  if (index - 1 >= lowerBound) {
                    r |= parseHex4Bits(string, index - 1) << 4;
                  }

                  return r;
                }

                BN.prototype._parseHex = function _parseHex(number, start, endian) {
                  // Create possibly bigger array to ensure that it fits the number
                  this.length = Math.ceil((number.length - start) / 6);
                  this.words = new Array(this.length);

                  for (var i = 0; i < this.length; i++) {
                    this.words[i] = 0;
                  } // 24-bits chunks


                  var off = 0;
                  var j = 0;
                  var w;

                  if (endian === 'be') {
                    for (i = number.length - 1; i >= start; i -= 2) {
                      w = parseHexByte(number, start, i) << off;
                      this.words[j] |= w & 0x3ffffff;

                      if (off >= 18) {
                        off -= 18;
                        j += 1;
                        this.words[j] |= w >>> 26;
                      } else {
                        off += 8;
                      }
                    }
                  } else {
                    var parseLength = number.length - start;

                    for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
                      w = parseHexByte(number, start, i) << off;
                      this.words[j] |= w & 0x3ffffff;

                      if (off >= 18) {
                        off -= 18;
                        j += 1;
                        this.words[j] |= w >>> 26;
                      } else {
                        off += 8;
                      }
                    }
                  }

                  this._strip();
                };

                function parseBase(str, start, end, mul) {
                  var r = 0;
                  var b = 0;
                  var len = Math.min(str.length, end);

                  for (var i = start; i < len; i++) {
                    var c = str.charCodeAt(i) - 48;
                    r *= mul; // 'a'

                    if (c >= 49) {
                      b = c - 49 + 0xa; // 'A'
                    } else if (c >= 17) {
                      b = c - 17 + 0xa; // '0' - '9'
                    } else {
                      b = c;
                    }

                    assert(c >= 0 && b < mul, 'Invalid character');
                    r += b;
                  }

                  return r;
                }

                BN.prototype._parseBase = function _parseBase(number, base, start) {
                  // Initialize as zero
                  this.words = [0];
                  this.length = 1; // Find length of limb in base

                  for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
                    limbLen++;
                  }

                  limbLen--;
                  limbPow = limbPow / base | 0;
                  var total = number.length - start;
                  var mod = total % limbLen;
                  var end = Math.min(total, total - mod) + start;
                  var word = 0;

                  for (var i = start; i < end; i += limbLen) {
                    word = parseBase(number, i, i + limbLen, base);
                    this.imuln(limbPow);

                    if (this.words[0] + word < 0x4000000) {
                      this.words[0] += word;
                    } else {
                      this._iaddn(word);
                    }
                  }

                  if (mod !== 0) {
                    var pow = 1;
                    word = parseBase(number, i, number.length, base);

                    for (i = 0; i < mod; i++) {
                      pow *= base;
                    }

                    this.imuln(pow);

                    if (this.words[0] + word < 0x4000000) {
                      this.words[0] += word;
                    } else {
                      this._iaddn(word);
                    }
                  }

                  this._strip();
                };

                BN.prototype.copy = function copy(dest) {
                  dest.words = new Array(this.length);

                  for (var i = 0; i < this.length; i++) {
                    dest.words[i] = this.words[i];
                  }

                  dest.length = this.length;
                  dest.negative = this.negative;
                  dest.red = this.red;
                };

                function move(dest, src) {
                  dest.words = src.words;
                  dest.length = src.length;
                  dest.negative = src.negative;
                  dest.red = src.red;
                }

                BN.prototype._move = function _move(dest) {
                  move(dest, this);
                };

                BN.prototype.clone = function clone() {
                  var r = new BN(null);
                  this.copy(r);
                  return r;
                };

                BN.prototype._expand = function _expand(size) {
                  while (this.length < size) {
                    this.words[this.length++] = 0;
                  }

                  return this;
                }; // Remove leading `0` from `this`


                BN.prototype._strip = function strip() {
                  while (this.length > 1 && this.words[this.length - 1] === 0) {
                    this.length--;
                  }

                  return this._normSign();
                };

                BN.prototype._normSign = function _normSign() {
                  // -0 = 0
                  if (this.length === 1 && this.words[0] === 0) {
                    this.negative = 0;
                  }

                  return this;
                }; // Check Symbol.for because not everywhere where Symbol defined
                // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility


                if (typeof Symbol !== 'undefined' && typeof Symbol["for"] === 'function') {
                  try {
                    BN.prototype[Symbol["for"]('nodejs.util.inspect.custom')] = inspect;
                  } catch (e) {
                    BN.prototype.inspect = inspect;
                  }
                } else {
                  BN.prototype.inspect = inspect;
                }

                function inspect() {
                  return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
                }
                /*
                 var zeros = [];
                var groupSizes = [];
                var groupBases = [];
                 var s = '';
                var i = -1;
                while (++i < BN.wordSize) {
                  zeros[i] = s;
                  s += '0';
                }
                groupSizes[0] = 0;
                groupSizes[1] = 0;
                groupBases[0] = 0;
                groupBases[1] = 0;
                var base = 2 - 1;
                while (++base < 36 + 1) {
                  var groupSize = 0;
                  var groupBase = 1;
                  while (groupBase < (1 << BN.wordSize) / base) {
                    groupBase *= base;
                    groupSize += 1;
                  }
                  groupSizes[base] = groupSize;
                  groupBases[base] = groupBase;
                }
                 */


                var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];
                var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
                var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];

                BN.prototype.toString = function toString(base, padding) {
                  base = base || 10;
                  padding = padding | 0 || 1;
                  var out;

                  if (base === 16 || base === 'hex') {
                    out = '';
                    var off = 0;
                    var carry = 0;

                    for (var i = 0; i < this.length; i++) {
                      var w = this.words[i];
                      var word = ((w << off | carry) & 0xffffff).toString(16);
                      carry = w >>> 24 - off & 0xffffff;

                      if (carry !== 0 || i !== this.length - 1) {
                        out = zeros[6 - word.length] + word + out;
                      } else {
                        out = word + out;
                      }

                      off += 2;

                      if (off >= 26) {
                        off -= 26;
                        i--;
                      }
                    }

                    if (carry !== 0) {
                      out = carry.toString(16) + out;
                    }

                    while (out.length % padding !== 0) {
                      out = '0' + out;
                    }

                    if (this.negative !== 0) {
                      out = '-' + out;
                    }

                    return out;
                  }

                  if (base === (base | 0) && base >= 2 && base <= 36) {
                    // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
                    var groupSize = groupSizes[base]; // var groupBase = Math.pow(base, groupSize);

                    var groupBase = groupBases[base];
                    out = '';
                    var c = this.clone();
                    c.negative = 0;

                    while (!c.isZero()) {
                      var r = c.modrn(groupBase).toString(base);
                      c = c.idivn(groupBase);

                      if (!c.isZero()) {
                        out = zeros[groupSize - r.length] + r + out;
                      } else {
                        out = r + out;
                      }
                    }

                    if (this.isZero()) {
                      out = '0' + out;
                    }

                    while (out.length % padding !== 0) {
                      out = '0' + out;
                    }

                    if (this.negative !== 0) {
                      out = '-' + out;
                    }

                    return out;
                  }

                  assert(false, 'Base should be between 2 and 36');
                };

                BN.prototype.toNumber = function toNumber() {
                  var ret = this.words[0];

                  if (this.length === 2) {
                    ret += this.words[1] * 0x4000000;
                  } else if (this.length === 3 && this.words[2] === 0x01) {
                    // NOTE: at this stage it is known that the top bit is set
                    ret += 0x10000000000000 + this.words[1] * 0x4000000;
                  } else if (this.length > 2) {
                    assert(false, 'Number can only safely store up to 53 bits');
                  }

                  return this.negative !== 0 ? -ret : ret;
                };

                BN.prototype.toJSON = function toJSON() {
                  return this.toString(16, 2);
                };

                if (Buffer) {
                  BN.prototype.toBuffer = function toBuffer(endian, length) {
                    return this.toArrayLike(Buffer, endian, length);
                  };
                }

                BN.prototype.toArray = function toArray(endian, length) {
                  return this.toArrayLike(Array, endian, length);
                };

                var allocate = function allocate(ArrayType, size) {
                  if (ArrayType.allocUnsafe) {
                    return ArrayType.allocUnsafe(size);
                  }

                  return new ArrayType(size);
                };

                BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
                  this._strip();

                  var byteLength = this.byteLength();
                  var reqLength = length || Math.max(1, byteLength);
                  assert(byteLength <= reqLength, 'byte array longer than desired length');
                  assert(reqLength > 0, 'Requested array length <= 0');
                  var res = allocate(ArrayType, reqLength);
                  var postfix = endian === 'le' ? 'LE' : 'BE';
                  this['_toArrayLike' + postfix](res, byteLength);
                  return res;
                };

                BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
                  var position = 0;
                  var carry = 0;

                  for (var i = 0, shift = 0; i < this.length; i++) {
                    var word = this.words[i] << shift | carry;
                    res[position++] = word & 0xff;

                    if (position < res.length) {
                      res[position++] = word >> 8 & 0xff;
                    }

                    if (position < res.length) {
                      res[position++] = word >> 16 & 0xff;
                    }

                    if (shift === 6) {
                      if (position < res.length) {
                        res[position++] = word >> 24 & 0xff;
                      }

                      carry = 0;
                      shift = 0;
                    } else {
                      carry = word >>> 24;
                      shift += 2;
                    }
                  }

                  if (position < res.length) {
                    res[position++] = carry;

                    while (position < res.length) {
                      res[position++] = 0;
                    }
                  }
                };

                BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
                  var position = res.length - 1;
                  var carry = 0;

                  for (var i = 0, shift = 0; i < this.length; i++) {
                    var word = this.words[i] << shift | carry;
                    res[position--] = word & 0xff;

                    if (position >= 0) {
                      res[position--] = word >> 8 & 0xff;
                    }

                    if (position >= 0) {
                      res[position--] = word >> 16 & 0xff;
                    }

                    if (shift === 6) {
                      if (position >= 0) {
                        res[position--] = word >> 24 & 0xff;
                      }

                      carry = 0;
                      shift = 0;
                    } else {
                      carry = word >>> 24;
                      shift += 2;
                    }
                  }

                  if (position >= 0) {
                    res[position--] = carry;

                    while (position >= 0) {
                      res[position--] = 0;
                    }
                  }
                };

                if (Math.clz32) {
                  BN.prototype._countBits = function _countBits(w) {
                    return 32 - Math.clz32(w);
                  };
                } else {
                  BN.prototype._countBits = function _countBits(w) {
                    var t = w;
                    var r = 0;

                    if (t >= 0x1000) {
                      r += 13;
                      t >>>= 13;
                    }

                    if (t >= 0x40) {
                      r += 7;
                      t >>>= 7;
                    }

                    if (t >= 0x8) {
                      r += 4;
                      t >>>= 4;
                    }

                    if (t >= 0x02) {
                      r += 2;
                      t >>>= 2;
                    }

                    return r + t;
                  };
                }

                BN.prototype._zeroBits = function _zeroBits(w) {
                  // Short-cut
                  if (w === 0) return 26;
                  var t = w;
                  var r = 0;

                  if ((t & 0x1fff) === 0) {
                    r += 13;
                    t >>>= 13;
                  }

                  if ((t & 0x7f) === 0) {
                    r += 7;
                    t >>>= 7;
                  }

                  if ((t & 0xf) === 0) {
                    r += 4;
                    t >>>= 4;
                  }

                  if ((t & 0x3) === 0) {
                    r += 2;
                    t >>>= 2;
                  }

                  if ((t & 0x1) === 0) {
                    r++;
                  }

                  return r;
                }; // Return number of used bits in a BN


                BN.prototype.bitLength = function bitLength() {
                  var w = this.words[this.length - 1];

                  var hi = this._countBits(w);

                  return (this.length - 1) * 26 + hi;
                };

                function toBitArray(num) {
                  var w = new Array(num.bitLength());

                  for (var bit = 0; bit < w.length; bit++) {
                    var off = bit / 26 | 0;
                    var wbit = bit % 26;
                    w[bit] = num.words[off] >>> wbit & 0x01;
                  }

                  return w;
                } // Number of trailing zero bits


                BN.prototype.zeroBits = function zeroBits() {
                  if (this.isZero()) return 0;
                  var r = 0;

                  for (var i = 0; i < this.length; i++) {
                    var b = this._zeroBits(this.words[i]);

                    r += b;
                    if (b !== 26) break;
                  }

                  return r;
                };

                BN.prototype.byteLength = function byteLength() {
                  return Math.ceil(this.bitLength() / 8);
                };

                BN.prototype.toTwos = function toTwos(width) {
                  if (this.negative !== 0) {
                    return this.abs().inotn(width).iaddn(1);
                  }

                  return this.clone();
                };

                BN.prototype.fromTwos = function fromTwos(width) {
                  if (this.testn(width - 1)) {
                    return this.notn(width).iaddn(1).ineg();
                  }

                  return this.clone();
                };

                BN.prototype.isNeg = function isNeg() {
                  return this.negative !== 0;
                }; // Return negative clone of `this`


                BN.prototype.neg = function neg() {
                  return this.clone().ineg();
                };

                BN.prototype.ineg = function ineg() {
                  if (!this.isZero()) {
                    this.negative ^= 1;
                  }

                  return this;
                }; // Or `num` with `this` in-place


                BN.prototype.iuor = function iuor(num) {
                  while (this.length < num.length) {
                    this.words[this.length++] = 0;
                  }

                  for (var i = 0; i < num.length; i++) {
                    this.words[i] = this.words[i] | num.words[i];
                  }

                  return this._strip();
                };

                BN.prototype.ior = function ior(num) {
                  assert((this.negative | num.negative) === 0);
                  return this.iuor(num);
                }; // Or `num` with `this`


                BN.prototype.or = function or(num) {
                  if (this.length > num.length) return this.clone().ior(num);
                  return num.clone().ior(this);
                };

                BN.prototype.uor = function uor(num) {
                  if (this.length > num.length) return this.clone().iuor(num);
                  return num.clone().iuor(this);
                }; // And `num` with `this` in-place


                BN.prototype.iuand = function iuand(num) {
                  // b = min-length(num, this)
                  var b;

                  if (this.length > num.length) {
                    b = num;
                  } else {
                    b = this;
                  }

                  for (var i = 0; i < b.length; i++) {
                    this.words[i] = this.words[i] & num.words[i];
                  }

                  this.length = b.length;
                  return this._strip();
                };

                BN.prototype.iand = function iand(num) {
                  assert((this.negative | num.negative) === 0);
                  return this.iuand(num);
                }; // And `num` with `this`


                BN.prototype.and = function and(num) {
                  if (this.length > num.length) return this.clone().iand(num);
                  return num.clone().iand(this);
                };

                BN.prototype.uand = function uand(num) {
                  if (this.length > num.length) return this.clone().iuand(num);
                  return num.clone().iuand(this);
                }; // Xor `num` with `this` in-place


                BN.prototype.iuxor = function iuxor(num) {
                  // a.length > b.length
                  var a;
                  var b;

                  if (this.length > num.length) {
                    a = this;
                    b = num;
                  } else {
                    a = num;
                    b = this;
                  }

                  for (var i = 0; i < b.length; i++) {
                    this.words[i] = a.words[i] ^ b.words[i];
                  }

                  if (this !== a) {
                    for (; i < a.length; i++) {
                      this.words[i] = a.words[i];
                    }
                  }

                  this.length = a.length;
                  return this._strip();
                };

                BN.prototype.ixor = function ixor(num) {
                  assert((this.negative | num.negative) === 0);
                  return this.iuxor(num);
                }; // Xor `num` with `this`


                BN.prototype.xor = function xor(num) {
                  if (this.length > num.length) return this.clone().ixor(num);
                  return num.clone().ixor(this);
                };

                BN.prototype.uxor = function uxor(num) {
                  if (this.length > num.length) return this.clone().iuxor(num);
                  return num.clone().iuxor(this);
                }; // Not ``this`` with ``width`` bitwidth


                BN.prototype.inotn = function inotn(width) {
                  assert(typeof width === 'number' && width >= 0);
                  var bytesNeeded = Math.ceil(width / 26) | 0;
                  var bitsLeft = width % 26; // Extend the buffer with leading zeroes

                  this._expand(bytesNeeded);

                  if (bitsLeft > 0) {
                    bytesNeeded--;
                  } // Handle complete words


                  for (var i = 0; i < bytesNeeded; i++) {
                    this.words[i] = ~this.words[i] & 0x3ffffff;
                  } // Handle the residue


                  if (bitsLeft > 0) {
                    this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
                  } // And remove leading zeroes


                  return this._strip();
                };

                BN.prototype.notn = function notn(width) {
                  return this.clone().inotn(width);
                }; // Set `bit` of `this`


                BN.prototype.setn = function setn(bit, val) {
                  assert(typeof bit === 'number' && bit >= 0);
                  var off = bit / 26 | 0;
                  var wbit = bit % 26;

                  this._expand(off + 1);

                  if (val) {
                    this.words[off] = this.words[off] | 1 << wbit;
                  } else {
                    this.words[off] = this.words[off] & ~(1 << wbit);
                  }

                  return this._strip();
                }; // Add `num` to `this` in-place


                BN.prototype.iadd = function iadd(num) {
                  var r; // negative + positive

                  if (this.negative !== 0 && num.negative === 0) {
                    this.negative = 0;
                    r = this.isub(num);
                    this.negative ^= 1;
                    return this._normSign(); // positive + negative
                  } else if (this.negative === 0 && num.negative !== 0) {
                    num.negative = 0;
                    r = this.isub(num);
                    num.negative = 1;
                    return r._normSign();
                  } // a.length > b.length


                  var a, b;

                  if (this.length > num.length) {
                    a = this;
                    b = num;
                  } else {
                    a = num;
                    b = this;
                  }

                  var carry = 0;

                  for (var i = 0; i < b.length; i++) {
                    r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
                    this.words[i] = r & 0x3ffffff;
                    carry = r >>> 26;
                  }

                  for (; carry !== 0 && i < a.length; i++) {
                    r = (a.words[i] | 0) + carry;
                    this.words[i] = r & 0x3ffffff;
                    carry = r >>> 26;
                  }

                  this.length = a.length;

                  if (carry !== 0) {
                    this.words[this.length] = carry;
                    this.length++; // Copy the rest of the words
                  } else if (a !== this) {
                    for (; i < a.length; i++) {
                      this.words[i] = a.words[i];
                    }
                  }

                  return this;
                }; // Add `num` to `this`


                BN.prototype.add = function add(num) {
                  var res;

                  if (num.negative !== 0 && this.negative === 0) {
                    num.negative = 0;
                    res = this.sub(num);
                    num.negative ^= 1;
                    return res;
                  } else if (num.negative === 0 && this.negative !== 0) {
                    this.negative = 0;
                    res = num.sub(this);
                    this.negative = 1;
                    return res;
                  }

                  if (this.length > num.length) return this.clone().iadd(num);
                  return num.clone().iadd(this);
                }; // Subtract `num` from `this` in-place


                BN.prototype.isub = function isub(num) {
                  // this - (-num) = this + num
                  if (num.negative !== 0) {
                    num.negative = 0;
                    var r = this.iadd(num);
                    num.negative = 1;
                    return r._normSign(); // -this - num = -(this + num)
                  } else if (this.negative !== 0) {
                    this.negative = 0;
                    this.iadd(num);
                    this.negative = 1;
                    return this._normSign();
                  } // At this point both numbers are positive


                  var cmp = this.cmp(num); // Optimization - zeroify

                  if (cmp === 0) {
                    this.negative = 0;
                    this.length = 1;
                    this.words[0] = 0;
                    return this;
                  } // a > b


                  var a, b;

                  if (cmp > 0) {
                    a = this;
                    b = num;
                  } else {
                    a = num;
                    b = this;
                  }

                  var carry = 0;

                  for (var i = 0; i < b.length; i++) {
                    r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
                    carry = r >> 26;
                    this.words[i] = r & 0x3ffffff;
                  }

                  for (; carry !== 0 && i < a.length; i++) {
                    r = (a.words[i] | 0) + carry;
                    carry = r >> 26;
                    this.words[i] = r & 0x3ffffff;
                  } // Copy rest of the words


                  if (carry === 0 && i < a.length && a !== this) {
                    for (; i < a.length; i++) {
                      this.words[i] = a.words[i];
                    }
                  }

                  this.length = Math.max(this.length, i);

                  if (a !== this) {
                    this.negative = 1;
                  }

                  return this._strip();
                }; // Subtract `num` from `this`


                BN.prototype.sub = function sub(num) {
                  return this.clone().isub(num);
                };

                function smallMulTo(self, num, out) {
                  out.negative = num.negative ^ self.negative;
                  var len = self.length + num.length | 0;
                  out.length = len;
                  len = len - 1 | 0; // Peel one iteration (compiler can't do it, because of code complexity)

                  var a = self.words[0] | 0;
                  var b = num.words[0] | 0;
                  var r = a * b;
                  var lo = r & 0x3ffffff;
                  var carry = r / 0x4000000 | 0;
                  out.words[0] = lo;

                  for (var k = 1; k < len; k++) {
                    // Sum all words with the same `i + j = k` and accumulate `ncarry`,
                    // note that ncarry could be >= 0x3ffffff
                    var ncarry = carry >>> 26;
                    var rword = carry & 0x3ffffff;
                    var maxJ = Math.min(k, num.length - 1);

                    for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                      var i = k - j | 0;
                      a = self.words[i] | 0;
                      b = num.words[j] | 0;
                      r = a * b + rword;
                      ncarry += r / 0x4000000 | 0;
                      rword = r & 0x3ffffff;
                    }

                    out.words[k] = rword | 0;
                    carry = ncarry | 0;
                  }

                  if (carry !== 0) {
                    out.words[k] = carry | 0;
                  } else {
                    out.length--;
                  }

                  return out._strip();
                } // TODO(indutny): it may be reasonable to omit it for users who don't need
                // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
                // multiplication (like elliptic secp256k1).


                var comb10MulTo = function comb10MulTo(self, num, out) {
                  var a = self.words;
                  var b = num.words;
                  var o = out.words;
                  var c = 0;
                  var lo;
                  var mid;
                  var hi;
                  var a0 = a[0] | 0;
                  var al0 = a0 & 0x1fff;
                  var ah0 = a0 >>> 13;
                  var a1 = a[1] | 0;
                  var al1 = a1 & 0x1fff;
                  var ah1 = a1 >>> 13;
                  var a2 = a[2] | 0;
                  var al2 = a2 & 0x1fff;
                  var ah2 = a2 >>> 13;
                  var a3 = a[3] | 0;
                  var al3 = a3 & 0x1fff;
                  var ah3 = a3 >>> 13;
                  var a4 = a[4] | 0;
                  var al4 = a4 & 0x1fff;
                  var ah4 = a4 >>> 13;
                  var a5 = a[5] | 0;
                  var al5 = a5 & 0x1fff;
                  var ah5 = a5 >>> 13;
                  var a6 = a[6] | 0;
                  var al6 = a6 & 0x1fff;
                  var ah6 = a6 >>> 13;
                  var a7 = a[7] | 0;
                  var al7 = a7 & 0x1fff;
                  var ah7 = a7 >>> 13;
                  var a8 = a[8] | 0;
                  var al8 = a8 & 0x1fff;
                  var ah8 = a8 >>> 13;
                  var a9 = a[9] | 0;
                  var al9 = a9 & 0x1fff;
                  var ah9 = a9 >>> 13;
                  var b0 = b[0] | 0;
                  var bl0 = b0 & 0x1fff;
                  var bh0 = b0 >>> 13;
                  var b1 = b[1] | 0;
                  var bl1 = b1 & 0x1fff;
                  var bh1 = b1 >>> 13;
                  var b2 = b[2] | 0;
                  var bl2 = b2 & 0x1fff;
                  var bh2 = b2 >>> 13;
                  var b3 = b[3] | 0;
                  var bl3 = b3 & 0x1fff;
                  var bh3 = b3 >>> 13;
                  var b4 = b[4] | 0;
                  var bl4 = b4 & 0x1fff;
                  var bh4 = b4 >>> 13;
                  var b5 = b[5] | 0;
                  var bl5 = b5 & 0x1fff;
                  var bh5 = b5 >>> 13;
                  var b6 = b[6] | 0;
                  var bl6 = b6 & 0x1fff;
                  var bh6 = b6 >>> 13;
                  var b7 = b[7] | 0;
                  var bl7 = b7 & 0x1fff;
                  var bh7 = b7 >>> 13;
                  var b8 = b[8] | 0;
                  var bl8 = b8 & 0x1fff;
                  var bh8 = b8 >>> 13;
                  var b9 = b[9] | 0;
                  var bl9 = b9 & 0x1fff;
                  var bh9 = b9 >>> 13;
                  out.negative = self.negative ^ num.negative;
                  out.length = 19;
                  /* k = 0 */

                  lo = Math.imul(al0, bl0);
                  mid = Math.imul(al0, bh0);
                  mid = mid + Math.imul(ah0, bl0) | 0;
                  hi = Math.imul(ah0, bh0);
                  var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
                  w0 &= 0x3ffffff;
                  /* k = 1 */

                  lo = Math.imul(al1, bl0);
                  mid = Math.imul(al1, bh0);
                  mid = mid + Math.imul(ah1, bl0) | 0;
                  hi = Math.imul(ah1, bh0);
                  lo = lo + Math.imul(al0, bl1) | 0;
                  mid = mid + Math.imul(al0, bh1) | 0;
                  mid = mid + Math.imul(ah0, bl1) | 0;
                  hi = hi + Math.imul(ah0, bh1) | 0;
                  var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
                  w1 &= 0x3ffffff;
                  /* k = 2 */

                  lo = Math.imul(al2, bl0);
                  mid = Math.imul(al2, bh0);
                  mid = mid + Math.imul(ah2, bl0) | 0;
                  hi = Math.imul(ah2, bh0);
                  lo = lo + Math.imul(al1, bl1) | 0;
                  mid = mid + Math.imul(al1, bh1) | 0;
                  mid = mid + Math.imul(ah1, bl1) | 0;
                  hi = hi + Math.imul(ah1, bh1) | 0;
                  lo = lo + Math.imul(al0, bl2) | 0;
                  mid = mid + Math.imul(al0, bh2) | 0;
                  mid = mid + Math.imul(ah0, bl2) | 0;
                  hi = hi + Math.imul(ah0, bh2) | 0;
                  var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
                  w2 &= 0x3ffffff;
                  /* k = 3 */

                  lo = Math.imul(al3, bl0);
                  mid = Math.imul(al3, bh0);
                  mid = mid + Math.imul(ah3, bl0) | 0;
                  hi = Math.imul(ah3, bh0);
                  lo = lo + Math.imul(al2, bl1) | 0;
                  mid = mid + Math.imul(al2, bh1) | 0;
                  mid = mid + Math.imul(ah2, bl1) | 0;
                  hi = hi + Math.imul(ah2, bh1) | 0;
                  lo = lo + Math.imul(al1, bl2) | 0;
                  mid = mid + Math.imul(al1, bh2) | 0;
                  mid = mid + Math.imul(ah1, bl2) | 0;
                  hi = hi + Math.imul(ah1, bh2) | 0;
                  lo = lo + Math.imul(al0, bl3) | 0;
                  mid = mid + Math.imul(al0, bh3) | 0;
                  mid = mid + Math.imul(ah0, bl3) | 0;
                  hi = hi + Math.imul(ah0, bh3) | 0;
                  var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
                  w3 &= 0x3ffffff;
                  /* k = 4 */

                  lo = Math.imul(al4, bl0);
                  mid = Math.imul(al4, bh0);
                  mid = mid + Math.imul(ah4, bl0) | 0;
                  hi = Math.imul(ah4, bh0);
                  lo = lo + Math.imul(al3, bl1) | 0;
                  mid = mid + Math.imul(al3, bh1) | 0;
                  mid = mid + Math.imul(ah3, bl1) | 0;
                  hi = hi + Math.imul(ah3, bh1) | 0;
                  lo = lo + Math.imul(al2, bl2) | 0;
                  mid = mid + Math.imul(al2, bh2) | 0;
                  mid = mid + Math.imul(ah2, bl2) | 0;
                  hi = hi + Math.imul(ah2, bh2) | 0;
                  lo = lo + Math.imul(al1, bl3) | 0;
                  mid = mid + Math.imul(al1, bh3) | 0;
                  mid = mid + Math.imul(ah1, bl3) | 0;
                  hi = hi + Math.imul(ah1, bh3) | 0;
                  lo = lo + Math.imul(al0, bl4) | 0;
                  mid = mid + Math.imul(al0, bh4) | 0;
                  mid = mid + Math.imul(ah0, bl4) | 0;
                  hi = hi + Math.imul(ah0, bh4) | 0;
                  var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
                  w4 &= 0x3ffffff;
                  /* k = 5 */

                  lo = Math.imul(al5, bl0);
                  mid = Math.imul(al5, bh0);
                  mid = mid + Math.imul(ah5, bl0) | 0;
                  hi = Math.imul(ah5, bh0);
                  lo = lo + Math.imul(al4, bl1) | 0;
                  mid = mid + Math.imul(al4, bh1) | 0;
                  mid = mid + Math.imul(ah4, bl1) | 0;
                  hi = hi + Math.imul(ah4, bh1) | 0;
                  lo = lo + Math.imul(al3, bl2) | 0;
                  mid = mid + Math.imul(al3, bh2) | 0;
                  mid = mid + Math.imul(ah3, bl2) | 0;
                  hi = hi + Math.imul(ah3, bh2) | 0;
                  lo = lo + Math.imul(al2, bl3) | 0;
                  mid = mid + Math.imul(al2, bh3) | 0;
                  mid = mid + Math.imul(ah2, bl3) | 0;
                  hi = hi + Math.imul(ah2, bh3) | 0;
                  lo = lo + Math.imul(al1, bl4) | 0;
                  mid = mid + Math.imul(al1, bh4) | 0;
                  mid = mid + Math.imul(ah1, bl4) | 0;
                  hi = hi + Math.imul(ah1, bh4) | 0;
                  lo = lo + Math.imul(al0, bl5) | 0;
                  mid = mid + Math.imul(al0, bh5) | 0;
                  mid = mid + Math.imul(ah0, bl5) | 0;
                  hi = hi + Math.imul(ah0, bh5) | 0;
                  var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
                  w5 &= 0x3ffffff;
                  /* k = 6 */

                  lo = Math.imul(al6, bl0);
                  mid = Math.imul(al6, bh0);
                  mid = mid + Math.imul(ah6, bl0) | 0;
                  hi = Math.imul(ah6, bh0);
                  lo = lo + Math.imul(al5, bl1) | 0;
                  mid = mid + Math.imul(al5, bh1) | 0;
                  mid = mid + Math.imul(ah5, bl1) | 0;
                  hi = hi + Math.imul(ah5, bh1) | 0;
                  lo = lo + Math.imul(al4, bl2) | 0;
                  mid = mid + Math.imul(al4, bh2) | 0;
                  mid = mid + Math.imul(ah4, bl2) | 0;
                  hi = hi + Math.imul(ah4, bh2) | 0;
                  lo = lo + Math.imul(al3, bl3) | 0;
                  mid = mid + Math.imul(al3, bh3) | 0;
                  mid = mid + Math.imul(ah3, bl3) | 0;
                  hi = hi + Math.imul(ah3, bh3) | 0;
                  lo = lo + Math.imul(al2, bl4) | 0;
                  mid = mid + Math.imul(al2, bh4) | 0;
                  mid = mid + Math.imul(ah2, bl4) | 0;
                  hi = hi + Math.imul(ah2, bh4) | 0;
                  lo = lo + Math.imul(al1, bl5) | 0;
                  mid = mid + Math.imul(al1, bh5) | 0;
                  mid = mid + Math.imul(ah1, bl5) | 0;
                  hi = hi + Math.imul(ah1, bh5) | 0;
                  lo = lo + Math.imul(al0, bl6) | 0;
                  mid = mid + Math.imul(al0, bh6) | 0;
                  mid = mid + Math.imul(ah0, bl6) | 0;
                  hi = hi + Math.imul(ah0, bh6) | 0;
                  var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
                  w6 &= 0x3ffffff;
                  /* k = 7 */

                  lo = Math.imul(al7, bl0);
                  mid = Math.imul(al7, bh0);
                  mid = mid + Math.imul(ah7, bl0) | 0;
                  hi = Math.imul(ah7, bh0);
                  lo = lo + Math.imul(al6, bl1) | 0;
                  mid = mid + Math.imul(al6, bh1) | 0;
                  mid = mid + Math.imul(ah6, bl1) | 0;
                  hi = hi + Math.imul(ah6, bh1) | 0;
                  lo = lo + Math.imul(al5, bl2) | 0;
                  mid = mid + Math.imul(al5, bh2) | 0;
                  mid = mid + Math.imul(ah5, bl2) | 0;
                  hi = hi + Math.imul(ah5, bh2) | 0;
                  lo = lo + Math.imul(al4, bl3) | 0;
                  mid = mid + Math.imul(al4, bh3) | 0;
                  mid = mid + Math.imul(ah4, bl3) | 0;
                  hi = hi + Math.imul(ah4, bh3) | 0;
                  lo = lo + Math.imul(al3, bl4) | 0;
                  mid = mid + Math.imul(al3, bh4) | 0;
                  mid = mid + Math.imul(ah3, bl4) | 0;
                  hi = hi + Math.imul(ah3, bh4) | 0;
                  lo = lo + Math.imul(al2, bl5) | 0;
                  mid = mid + Math.imul(al2, bh5) | 0;
                  mid = mid + Math.imul(ah2, bl5) | 0;
                  hi = hi + Math.imul(ah2, bh5) | 0;
                  lo = lo + Math.imul(al1, bl6) | 0;
                  mid = mid + Math.imul(al1, bh6) | 0;
                  mid = mid + Math.imul(ah1, bl6) | 0;
                  hi = hi + Math.imul(ah1, bh6) | 0;
                  lo = lo + Math.imul(al0, bl7) | 0;
                  mid = mid + Math.imul(al0, bh7) | 0;
                  mid = mid + Math.imul(ah0, bl7) | 0;
                  hi = hi + Math.imul(ah0, bh7) | 0;
                  var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
                  w7 &= 0x3ffffff;
                  /* k = 8 */

                  lo = Math.imul(al8, bl0);
                  mid = Math.imul(al8, bh0);
                  mid = mid + Math.imul(ah8, bl0) | 0;
                  hi = Math.imul(ah8, bh0);
                  lo = lo + Math.imul(al7, bl1) | 0;
                  mid = mid + Math.imul(al7, bh1) | 0;
                  mid = mid + Math.imul(ah7, bl1) | 0;
                  hi = hi + Math.imul(ah7, bh1) | 0;
                  lo = lo + Math.imul(al6, bl2) | 0;
                  mid = mid + Math.imul(al6, bh2) | 0;
                  mid = mid + Math.imul(ah6, bl2) | 0;
                  hi = hi + Math.imul(ah6, bh2) | 0;
                  lo = lo + Math.imul(al5, bl3) | 0;
                  mid = mid + Math.imul(al5, bh3) | 0;
                  mid = mid + Math.imul(ah5, bl3) | 0;
                  hi = hi + Math.imul(ah5, bh3) | 0;
                  lo = lo + Math.imul(al4, bl4) | 0;
                  mid = mid + Math.imul(al4, bh4) | 0;
                  mid = mid + Math.imul(ah4, bl4) | 0;
                  hi = hi + Math.imul(ah4, bh4) | 0;
                  lo = lo + Math.imul(al3, bl5) | 0;
                  mid = mid + Math.imul(al3, bh5) | 0;
                  mid = mid + Math.imul(ah3, bl5) | 0;
                  hi = hi + Math.imul(ah3, bh5) | 0;
                  lo = lo + Math.imul(al2, bl6) | 0;
                  mid = mid + Math.imul(al2, bh6) | 0;
                  mid = mid + Math.imul(ah2, bl6) | 0;
                  hi = hi + Math.imul(ah2, bh6) | 0;
                  lo = lo + Math.imul(al1, bl7) | 0;
                  mid = mid + Math.imul(al1, bh7) | 0;
                  mid = mid + Math.imul(ah1, bl7) | 0;
                  hi = hi + Math.imul(ah1, bh7) | 0;
                  lo = lo + Math.imul(al0, bl8) | 0;
                  mid = mid + Math.imul(al0, bh8) | 0;
                  mid = mid + Math.imul(ah0, bl8) | 0;
                  hi = hi + Math.imul(ah0, bh8) | 0;
                  var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
                  w8 &= 0x3ffffff;
                  /* k = 9 */

                  lo = Math.imul(al9, bl0);
                  mid = Math.imul(al9, bh0);
                  mid = mid + Math.imul(ah9, bl0) | 0;
                  hi = Math.imul(ah9, bh0);
                  lo = lo + Math.imul(al8, bl1) | 0;
                  mid = mid + Math.imul(al8, bh1) | 0;
                  mid = mid + Math.imul(ah8, bl1) | 0;
                  hi = hi + Math.imul(ah8, bh1) | 0;
                  lo = lo + Math.imul(al7, bl2) | 0;
                  mid = mid + Math.imul(al7, bh2) | 0;
                  mid = mid + Math.imul(ah7, bl2) | 0;
                  hi = hi + Math.imul(ah7, bh2) | 0;
                  lo = lo + Math.imul(al6, bl3) | 0;
                  mid = mid + Math.imul(al6, bh3) | 0;
                  mid = mid + Math.imul(ah6, bl3) | 0;
                  hi = hi + Math.imul(ah6, bh3) | 0;
                  lo = lo + Math.imul(al5, bl4) | 0;
                  mid = mid + Math.imul(al5, bh4) | 0;
                  mid = mid + Math.imul(ah5, bl4) | 0;
                  hi = hi + Math.imul(ah5, bh4) | 0;
                  lo = lo + Math.imul(al4, bl5) | 0;
                  mid = mid + Math.imul(al4, bh5) | 0;
                  mid = mid + Math.imul(ah4, bl5) | 0;
                  hi = hi + Math.imul(ah4, bh5) | 0;
                  lo = lo + Math.imul(al3, bl6) | 0;
                  mid = mid + Math.imul(al3, bh6) | 0;
                  mid = mid + Math.imul(ah3, bl6) | 0;
                  hi = hi + Math.imul(ah3, bh6) | 0;
                  lo = lo + Math.imul(al2, bl7) | 0;
                  mid = mid + Math.imul(al2, bh7) | 0;
                  mid = mid + Math.imul(ah2, bl7) | 0;
                  hi = hi + Math.imul(ah2, bh7) | 0;
                  lo = lo + Math.imul(al1, bl8) | 0;
                  mid = mid + Math.imul(al1, bh8) | 0;
                  mid = mid + Math.imul(ah1, bl8) | 0;
                  hi = hi + Math.imul(ah1, bh8) | 0;
                  lo = lo + Math.imul(al0, bl9) | 0;
                  mid = mid + Math.imul(al0, bh9) | 0;
                  mid = mid + Math.imul(ah0, bl9) | 0;
                  hi = hi + Math.imul(ah0, bh9) | 0;
                  var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
                  w9 &= 0x3ffffff;
                  /* k = 10 */

                  lo = Math.imul(al9, bl1);
                  mid = Math.imul(al9, bh1);
                  mid = mid + Math.imul(ah9, bl1) | 0;
                  hi = Math.imul(ah9, bh1);
                  lo = lo + Math.imul(al8, bl2) | 0;
                  mid = mid + Math.imul(al8, bh2) | 0;
                  mid = mid + Math.imul(ah8, bl2) | 0;
                  hi = hi + Math.imul(ah8, bh2) | 0;
                  lo = lo + Math.imul(al7, bl3) | 0;
                  mid = mid + Math.imul(al7, bh3) | 0;
                  mid = mid + Math.imul(ah7, bl3) | 0;
                  hi = hi + Math.imul(ah7, bh3) | 0;
                  lo = lo + Math.imul(al6, bl4) | 0;
                  mid = mid + Math.imul(al6, bh4) | 0;
                  mid = mid + Math.imul(ah6, bl4) | 0;
                  hi = hi + Math.imul(ah6, bh4) | 0;
                  lo = lo + Math.imul(al5, bl5) | 0;
                  mid = mid + Math.imul(al5, bh5) | 0;
                  mid = mid + Math.imul(ah5, bl5) | 0;
                  hi = hi + Math.imul(ah5, bh5) | 0;
                  lo = lo + Math.imul(al4, bl6) | 0;
                  mid = mid + Math.imul(al4, bh6) | 0;
                  mid = mid + Math.imul(ah4, bl6) | 0;
                  hi = hi + Math.imul(ah4, bh6) | 0;
                  lo = lo + Math.imul(al3, bl7) | 0;
                  mid = mid + Math.imul(al3, bh7) | 0;
                  mid = mid + Math.imul(ah3, bl7) | 0;
                  hi = hi + Math.imul(ah3, bh7) | 0;
                  lo = lo + Math.imul(al2, bl8) | 0;
                  mid = mid + Math.imul(al2, bh8) | 0;
                  mid = mid + Math.imul(ah2, bl8) | 0;
                  hi = hi + Math.imul(ah2, bh8) | 0;
                  lo = lo + Math.imul(al1, bl9) | 0;
                  mid = mid + Math.imul(al1, bh9) | 0;
                  mid = mid + Math.imul(ah1, bl9) | 0;
                  hi = hi + Math.imul(ah1, bh9) | 0;
                  var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
                  w10 &= 0x3ffffff;
                  /* k = 11 */

                  lo = Math.imul(al9, bl2);
                  mid = Math.imul(al9, bh2);
                  mid = mid + Math.imul(ah9, bl2) | 0;
                  hi = Math.imul(ah9, bh2);
                  lo = lo + Math.imul(al8, bl3) | 0;
                  mid = mid + Math.imul(al8, bh3) | 0;
                  mid = mid + Math.imul(ah8, bl3) | 0;
                  hi = hi + Math.imul(ah8, bh3) | 0;
                  lo = lo + Math.imul(al7, bl4) | 0;
                  mid = mid + Math.imul(al7, bh4) | 0;
                  mid = mid + Math.imul(ah7, bl4) | 0;
                  hi = hi + Math.imul(ah7, bh4) | 0;
                  lo = lo + Math.imul(al6, bl5) | 0;
                  mid = mid + Math.imul(al6, bh5) | 0;
                  mid = mid + Math.imul(ah6, bl5) | 0;
                  hi = hi + Math.imul(ah6, bh5) | 0;
                  lo = lo + Math.imul(al5, bl6) | 0;
                  mid = mid + Math.imul(al5, bh6) | 0;
                  mid = mid + Math.imul(ah5, bl6) | 0;
                  hi = hi + Math.imul(ah5, bh6) | 0;
                  lo = lo + Math.imul(al4, bl7) | 0;
                  mid = mid + Math.imul(al4, bh7) | 0;
                  mid = mid + Math.imul(ah4, bl7) | 0;
                  hi = hi + Math.imul(ah4, bh7) | 0;
                  lo = lo + Math.imul(al3, bl8) | 0;
                  mid = mid + Math.imul(al3, bh8) | 0;
                  mid = mid + Math.imul(ah3, bl8) | 0;
                  hi = hi + Math.imul(ah3, bh8) | 0;
                  lo = lo + Math.imul(al2, bl9) | 0;
                  mid = mid + Math.imul(al2, bh9) | 0;
                  mid = mid + Math.imul(ah2, bl9) | 0;
                  hi = hi + Math.imul(ah2, bh9) | 0;
                  var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
                  w11 &= 0x3ffffff;
                  /* k = 12 */

                  lo = Math.imul(al9, bl3);
                  mid = Math.imul(al9, bh3);
                  mid = mid + Math.imul(ah9, bl3) | 0;
                  hi = Math.imul(ah9, bh3);
                  lo = lo + Math.imul(al8, bl4) | 0;
                  mid = mid + Math.imul(al8, bh4) | 0;
                  mid = mid + Math.imul(ah8, bl4) | 0;
                  hi = hi + Math.imul(ah8, bh4) | 0;
                  lo = lo + Math.imul(al7, bl5) | 0;
                  mid = mid + Math.imul(al7, bh5) | 0;
                  mid = mid + Math.imul(ah7, bl5) | 0;
                  hi = hi + Math.imul(ah7, bh5) | 0;
                  lo = lo + Math.imul(al6, bl6) | 0;
                  mid = mid + Math.imul(al6, bh6) | 0;
                  mid = mid + Math.imul(ah6, bl6) | 0;
                  hi = hi + Math.imul(ah6, bh6) | 0;
                  lo = lo + Math.imul(al5, bl7) | 0;
                  mid = mid + Math.imul(al5, bh7) | 0;
                  mid = mid + Math.imul(ah5, bl7) | 0;
                  hi = hi + Math.imul(ah5, bh7) | 0;
                  lo = lo + Math.imul(al4, bl8) | 0;
                  mid = mid + Math.imul(al4, bh8) | 0;
                  mid = mid + Math.imul(ah4, bl8) | 0;
                  hi = hi + Math.imul(ah4, bh8) | 0;
                  lo = lo + Math.imul(al3, bl9) | 0;
                  mid = mid + Math.imul(al3, bh9) | 0;
                  mid = mid + Math.imul(ah3, bl9) | 0;
                  hi = hi + Math.imul(ah3, bh9) | 0;
                  var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
                  w12 &= 0x3ffffff;
                  /* k = 13 */

                  lo = Math.imul(al9, bl4);
                  mid = Math.imul(al9, bh4);
                  mid = mid + Math.imul(ah9, bl4) | 0;
                  hi = Math.imul(ah9, bh4);
                  lo = lo + Math.imul(al8, bl5) | 0;
                  mid = mid + Math.imul(al8, bh5) | 0;
                  mid = mid + Math.imul(ah8, bl5) | 0;
                  hi = hi + Math.imul(ah8, bh5) | 0;
                  lo = lo + Math.imul(al7, bl6) | 0;
                  mid = mid + Math.imul(al7, bh6) | 0;
                  mid = mid + Math.imul(ah7, bl6) | 0;
                  hi = hi + Math.imul(ah7, bh6) | 0;
                  lo = lo + Math.imul(al6, bl7) | 0;
                  mid = mid + Math.imul(al6, bh7) | 0;
                  mid = mid + Math.imul(ah6, bl7) | 0;
                  hi = hi + Math.imul(ah6, bh7) | 0;
                  lo = lo + Math.imul(al5, bl8) | 0;
                  mid = mid + Math.imul(al5, bh8) | 0;
                  mid = mid + Math.imul(ah5, bl8) | 0;
                  hi = hi + Math.imul(ah5, bh8) | 0;
                  lo = lo + Math.imul(al4, bl9) | 0;
                  mid = mid + Math.imul(al4, bh9) | 0;
                  mid = mid + Math.imul(ah4, bl9) | 0;
                  hi = hi + Math.imul(ah4, bh9) | 0;
                  var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
                  w13 &= 0x3ffffff;
                  /* k = 14 */

                  lo = Math.imul(al9, bl5);
                  mid = Math.imul(al9, bh5);
                  mid = mid + Math.imul(ah9, bl5) | 0;
                  hi = Math.imul(ah9, bh5);
                  lo = lo + Math.imul(al8, bl6) | 0;
                  mid = mid + Math.imul(al8, bh6) | 0;
                  mid = mid + Math.imul(ah8, bl6) | 0;
                  hi = hi + Math.imul(ah8, bh6) | 0;
                  lo = lo + Math.imul(al7, bl7) | 0;
                  mid = mid + Math.imul(al7, bh7) | 0;
                  mid = mid + Math.imul(ah7, bl7) | 0;
                  hi = hi + Math.imul(ah7, bh7) | 0;
                  lo = lo + Math.imul(al6, bl8) | 0;
                  mid = mid + Math.imul(al6, bh8) | 0;
                  mid = mid + Math.imul(ah6, bl8) | 0;
                  hi = hi + Math.imul(ah6, bh8) | 0;
                  lo = lo + Math.imul(al5, bl9) | 0;
                  mid = mid + Math.imul(al5, bh9) | 0;
                  mid = mid + Math.imul(ah5, bl9) | 0;
                  hi = hi + Math.imul(ah5, bh9) | 0;
                  var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
                  w14 &= 0x3ffffff;
                  /* k = 15 */

                  lo = Math.imul(al9, bl6);
                  mid = Math.imul(al9, bh6);
                  mid = mid + Math.imul(ah9, bl6) | 0;
                  hi = Math.imul(ah9, bh6);
                  lo = lo + Math.imul(al8, bl7) | 0;
                  mid = mid + Math.imul(al8, bh7) | 0;
                  mid = mid + Math.imul(ah8, bl7) | 0;
                  hi = hi + Math.imul(ah8, bh7) | 0;
                  lo = lo + Math.imul(al7, bl8) | 0;
                  mid = mid + Math.imul(al7, bh8) | 0;
                  mid = mid + Math.imul(ah7, bl8) | 0;
                  hi = hi + Math.imul(ah7, bh8) | 0;
                  lo = lo + Math.imul(al6, bl9) | 0;
                  mid = mid + Math.imul(al6, bh9) | 0;
                  mid = mid + Math.imul(ah6, bl9) | 0;
                  hi = hi + Math.imul(ah6, bh9) | 0;
                  var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
                  w15 &= 0x3ffffff;
                  /* k = 16 */

                  lo = Math.imul(al9, bl7);
                  mid = Math.imul(al9, bh7);
                  mid = mid + Math.imul(ah9, bl7) | 0;
                  hi = Math.imul(ah9, bh7);
                  lo = lo + Math.imul(al8, bl8) | 0;
                  mid = mid + Math.imul(al8, bh8) | 0;
                  mid = mid + Math.imul(ah8, bl8) | 0;
                  hi = hi + Math.imul(ah8, bh8) | 0;
                  lo = lo + Math.imul(al7, bl9) | 0;
                  mid = mid + Math.imul(al7, bh9) | 0;
                  mid = mid + Math.imul(ah7, bl9) | 0;
                  hi = hi + Math.imul(ah7, bh9) | 0;
                  var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
                  w16 &= 0x3ffffff;
                  /* k = 17 */

                  lo = Math.imul(al9, bl8);
                  mid = Math.imul(al9, bh8);
                  mid = mid + Math.imul(ah9, bl8) | 0;
                  hi = Math.imul(ah9, bh8);
                  lo = lo + Math.imul(al8, bl9) | 0;
                  mid = mid + Math.imul(al8, bh9) | 0;
                  mid = mid + Math.imul(ah8, bl9) | 0;
                  hi = hi + Math.imul(ah8, bh9) | 0;
                  var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
                  w17 &= 0x3ffffff;
                  /* k = 18 */

                  lo = Math.imul(al9, bl9);
                  mid = Math.imul(al9, bh9);
                  mid = mid + Math.imul(ah9, bl9) | 0;
                  hi = Math.imul(ah9, bh9);
                  var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
                  w18 &= 0x3ffffff;
                  o[0] = w0;
                  o[1] = w1;
                  o[2] = w2;
                  o[3] = w3;
                  o[4] = w4;
                  o[5] = w5;
                  o[6] = w6;
                  o[7] = w7;
                  o[8] = w8;
                  o[9] = w9;
                  o[10] = w10;
                  o[11] = w11;
                  o[12] = w12;
                  o[13] = w13;
                  o[14] = w14;
                  o[15] = w15;
                  o[16] = w16;
                  o[17] = w17;
                  o[18] = w18;

                  if (c !== 0) {
                    o[19] = c;
                    out.length++;
                  }

                  return out;
                }; // Polyfill comb


                if (!Math.imul) {
                  comb10MulTo = smallMulTo;
                }

                function bigMulTo(self, num, out) {
                  out.negative = num.negative ^ self.negative;
                  out.length = self.length + num.length;
                  var carry = 0;
                  var hncarry = 0;

                  for (var k = 0; k < out.length - 1; k++) {
                    // Sum all words with the same `i + j = k` and accumulate `ncarry`,
                    // note that ncarry could be >= 0x3ffffff
                    var ncarry = hncarry;
                    hncarry = 0;
                    var rword = carry & 0x3ffffff;
                    var maxJ = Math.min(k, num.length - 1);

                    for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                      var i = k - j;
                      var a = self.words[i] | 0;
                      var b = num.words[j] | 0;
                      var r = a * b;
                      var lo = r & 0x3ffffff;
                      ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                      lo = lo + rword | 0;
                      rword = lo & 0x3ffffff;
                      ncarry = ncarry + (lo >>> 26) | 0;
                      hncarry += ncarry >>> 26;
                      ncarry &= 0x3ffffff;
                    }

                    out.words[k] = rword;
                    carry = ncarry;
                    ncarry = hncarry;
                  }

                  if (carry !== 0) {
                    out.words[k] = carry;
                  } else {
                    out.length--;
                  }

                  return out._strip();
                }

                function jumboMulTo(self, num, out) {
                  // Temporary disable, see https://github.com/indutny/bn.js/issues/211
                  // var fftm = new FFTM();
                  // return fftm.mulp(self, num, out);
                  return bigMulTo(self, num, out);
                }

                BN.prototype.mulTo = function mulTo(num, out) {
                  var res;
                  var len = this.length + num.length;

                  if (this.length === 10 && num.length === 10) {
                    res = comb10MulTo(this, num, out);
                  } else if (len < 63) {
                    res = smallMulTo(this, num, out);
                  } else if (len < 1024) {
                    res = bigMulTo(this, num, out);
                  } else {
                    res = jumboMulTo(this, num, out);
                  }

                  return res;
                }; // Cooley-Tukey algorithm for FFT


                BN.prototype.mul = function mul(num) {
                  var out = new BN(null);
                  out.words = new Array(this.length + num.length);
                  return this.mulTo(num, out);
                }; // Multiply employing FFT


                BN.prototype.mulf = function mulf(num) {
                  var out = new BN(null);
                  out.words = new Array(this.length + num.length);
                  return jumboMulTo(this, num, out);
                }; // In-place Multiplication


                BN.prototype.imul = function imul(num) {
                  return this.clone().mulTo(num, this);
                };

                BN.prototype.imuln = function imuln(num) {
                  var isNegNum = num < 0;
                  if (isNegNum) num = -num;
                  assert(typeof num === 'number');
                  assert(num < 0x4000000); // Carry

                  var carry = 0;

                  for (var i = 0; i < this.length; i++) {
                    var w = (this.words[i] | 0) * num;
                    var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
                    carry >>= 26;
                    carry += w / 0x4000000 | 0; // NOTE: lo is 27bit maximum

                    carry += lo >>> 26;
                    this.words[i] = lo & 0x3ffffff;
                  }

                  if (carry !== 0) {
                    this.words[i] = carry;
                    this.length++;
                  }

                  return isNegNum ? this.ineg() : this;
                };

                BN.prototype.muln = function muln(num) {
                  return this.clone().imuln(num);
                }; // `this` * `this`


                BN.prototype.sqr = function sqr() {
                  return this.mul(this);
                }; // `this` * `this` in-place


                BN.prototype.isqr = function isqr() {
                  return this.imul(this.clone());
                }; // Math.pow(`this`, `num`)


                BN.prototype.pow = function pow(num) {
                  var w = toBitArray(num);
                  if (w.length === 0) return new BN(1); // Skip leading zeroes

                  var res = this;

                  for (var i = 0; i < w.length; i++, res = res.sqr()) {
                    if (w[i] !== 0) break;
                  }

                  if (++i < w.length) {
                    for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
                      if (w[i] === 0) continue;
                      res = res.mul(q);
                    }
                  }

                  return res;
                }; // Shift-left in-place


                BN.prototype.iushln = function iushln(bits) {
                  assert(typeof bits === 'number' && bits >= 0);
                  var r = bits % 26;
                  var s = (bits - r) / 26;
                  var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
                  var i;

                  if (r !== 0) {
                    var carry = 0;

                    for (i = 0; i < this.length; i++) {
                      var newCarry = this.words[i] & carryMask;
                      var c = (this.words[i] | 0) - newCarry << r;
                      this.words[i] = c | carry;
                      carry = newCarry >>> 26 - r;
                    }

                    if (carry) {
                      this.words[i] = carry;
                      this.length++;
                    }
                  }

                  if (s !== 0) {
                    for (i = this.length - 1; i >= 0; i--) {
                      this.words[i + s] = this.words[i];
                    }

                    for (i = 0; i < s; i++) {
                      this.words[i] = 0;
                    }

                    this.length += s;
                  }

                  return this._strip();
                };

                BN.prototype.ishln = function ishln(bits) {
                  // TODO(indutny): implement me
                  assert(this.negative === 0);
                  return this.iushln(bits);
                }; // Shift-right in-place
                // NOTE: `hint` is a lowest bit before trailing zeroes
                // NOTE: if `extended` is present - it will be filled with destroyed bits


                BN.prototype.iushrn = function iushrn(bits, hint, extended) {
                  assert(typeof bits === 'number' && bits >= 0);
                  var h;

                  if (hint) {
                    h = (hint - hint % 26) / 26;
                  } else {
                    h = 0;
                  }

                  var r = bits % 26;
                  var s = Math.min((bits - r) / 26, this.length);
                  var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
                  var maskedWords = extended;
                  h -= s;
                  h = Math.max(0, h); // Extended mode, copy masked part

                  if (maskedWords) {
                    for (var i = 0; i < s; i++) {
                      maskedWords.words[i] = this.words[i];
                    }

                    maskedWords.length = s;
                  }

                  if (s === 0) ; else if (this.length > s) {
                    this.length -= s;

                    for (i = 0; i < this.length; i++) {
                      this.words[i] = this.words[i + s];
                    }
                  } else {
                    this.words[0] = 0;
                    this.length = 1;
                  }

                  var carry = 0;

                  for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
                    var word = this.words[i] | 0;
                    this.words[i] = carry << 26 - r | word >>> r;
                    carry = word & mask;
                  } // Push carried bits as a mask


                  if (maskedWords && carry !== 0) {
                    maskedWords.words[maskedWords.length++] = carry;
                  }

                  if (this.length === 0) {
                    this.words[0] = 0;
                    this.length = 1;
                  }

                  return this._strip();
                };

                BN.prototype.ishrn = function ishrn(bits, hint, extended) {
                  // TODO(indutny): implement me
                  assert(this.negative === 0);
                  return this.iushrn(bits, hint, extended);
                }; // Shift-left


                BN.prototype.shln = function shln(bits) {
                  return this.clone().ishln(bits);
                };

                BN.prototype.ushln = function ushln(bits) {
                  return this.clone().iushln(bits);
                }; // Shift-right


                BN.prototype.shrn = function shrn(bits) {
                  return this.clone().ishrn(bits);
                };

                BN.prototype.ushrn = function ushrn(bits) {
                  return this.clone().iushrn(bits);
                }; // Test if n bit is set


                BN.prototype.testn = function testn(bit) {
                  assert(typeof bit === 'number' && bit >= 0);
                  var r = bit % 26;
                  var s = (bit - r) / 26;
                  var q = 1 << r; // Fast case: bit is much higher than all existing words

                  if (this.length <= s) return false; // Check bit and return

                  var w = this.words[s];
                  return !!(w & q);
                }; // Return only lowers bits of number (in-place)


                BN.prototype.imaskn = function imaskn(bits) {
                  assert(typeof bits === 'number' && bits >= 0);
                  var r = bits % 26;
                  var s = (bits - r) / 26;
                  assert(this.negative === 0, 'imaskn works only with positive numbers');

                  if (this.length <= s) {
                    return this;
                  }

                  if (r !== 0) {
                    s++;
                  }

                  this.length = Math.min(s, this.length);

                  if (r !== 0) {
                    var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
                    this.words[this.length - 1] &= mask;
                  }

                  return this._strip();
                }; // Return only lowers bits of number


                BN.prototype.maskn = function maskn(bits) {
                  return this.clone().imaskn(bits);
                }; // Add plain number `num` to `this`


                BN.prototype.iaddn = function iaddn(num) {
                  assert(typeof num === 'number');
                  assert(num < 0x4000000);
                  if (num < 0) return this.isubn(-num); // Possible sign change

                  if (this.negative !== 0) {
                    if (this.length === 1 && (this.words[0] | 0) <= num) {
                      this.words[0] = num - (this.words[0] | 0);
                      this.negative = 0;
                      return this;
                    }

                    this.negative = 0;
                    this.isubn(num);
                    this.negative = 1;
                    return this;
                  } // Add without checks


                  return this._iaddn(num);
                };

                BN.prototype._iaddn = function _iaddn(num) {
                  this.words[0] += num; // Carry

                  for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
                    this.words[i] -= 0x4000000;

                    if (i === this.length - 1) {
                      this.words[i + 1] = 1;
                    } else {
                      this.words[i + 1]++;
                    }
                  }

                  this.length = Math.max(this.length, i + 1);
                  return this;
                }; // Subtract plain number `num` from `this`


                BN.prototype.isubn = function isubn(num) {
                  assert(typeof num === 'number');
                  assert(num < 0x4000000);
                  if (num < 0) return this.iaddn(-num);

                  if (this.negative !== 0) {
                    this.negative = 0;
                    this.iaddn(num);
                    this.negative = 1;
                    return this;
                  }

                  this.words[0] -= num;

                  if (this.length === 1 && this.words[0] < 0) {
                    this.words[0] = -this.words[0];
                    this.negative = 1;
                  } else {
                    // Carry
                    for (var i = 0; i < this.length && this.words[i] < 0; i++) {
                      this.words[i] += 0x4000000;
                      this.words[i + 1] -= 1;
                    }
                  }

                  return this._strip();
                };

                BN.prototype.addn = function addn(num) {
                  return this.clone().iaddn(num);
                };

                BN.prototype.subn = function subn(num) {
                  return this.clone().isubn(num);
                };

                BN.prototype.iabs = function iabs() {
                  this.negative = 0;
                  return this;
                };

                BN.prototype.abs = function abs() {
                  return this.clone().iabs();
                };

                BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
                  var len = num.length + shift;
                  var i;

                  this._expand(len);

                  var w;
                  var carry = 0;

                  for (i = 0; i < num.length; i++) {
                    w = (this.words[i + shift] | 0) + carry;
                    var right = (num.words[i] | 0) * mul;
                    w -= right & 0x3ffffff;
                    carry = (w >> 26) - (right / 0x4000000 | 0);
                    this.words[i + shift] = w & 0x3ffffff;
                  }

                  for (; i < this.length - shift; i++) {
                    w = (this.words[i + shift] | 0) + carry;
                    carry = w >> 26;
                    this.words[i + shift] = w & 0x3ffffff;
                  }

                  if (carry === 0) return this._strip(); // Subtraction overflow

                  assert(carry === -1);
                  carry = 0;

                  for (i = 0; i < this.length; i++) {
                    w = -(this.words[i] | 0) + carry;
                    carry = w >> 26;
                    this.words[i] = w & 0x3ffffff;
                  }

                  this.negative = 1;
                  return this._strip();
                };

                BN.prototype._wordDiv = function _wordDiv(num, mode) {
                  var shift = this.length - num.length;
                  var a = this.clone();
                  var b = num; // Normalize

                  var bhi = b.words[b.length - 1] | 0;

                  var bhiBits = this._countBits(bhi);

                  shift = 26 - bhiBits;

                  if (shift !== 0) {
                    b = b.ushln(shift);
                    a.iushln(shift);
                    bhi = b.words[b.length - 1] | 0;
                  } // Initialize quotient


                  var m = a.length - b.length;
                  var q;

                  if (mode !== 'mod') {
                    q = new BN(null);
                    q.length = m + 1;
                    q.words = new Array(q.length);

                    for (var i = 0; i < q.length; i++) {
                      q.words[i] = 0;
                    }
                  }

                  var diff = a.clone()._ishlnsubmul(b, 1, m);

                  if (diff.negative === 0) {
                    a = diff;

                    if (q) {
                      q.words[m] = 1;
                    }
                  }

                  for (var j = m - 1; j >= 0; j--) {
                    var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0); // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
                    // (0x7ffffff)

                    qj = Math.min(qj / bhi | 0, 0x3ffffff);

                    a._ishlnsubmul(b, qj, j);

                    while (a.negative !== 0) {
                      qj--;
                      a.negative = 0;

                      a._ishlnsubmul(b, 1, j);

                      if (!a.isZero()) {
                        a.negative ^= 1;
                      }
                    }

                    if (q) {
                      q.words[j] = qj;
                    }
                  }

                  if (q) {
                    q._strip();
                  }

                  a._strip(); // Denormalize


                  if (mode !== 'div' && shift !== 0) {
                    a.iushrn(shift);
                  }

                  return {
                    div: q || null,
                    mod: a
                  };
                }; // NOTE: 1) `mode` can be set to `mod` to request mod only,
                //       to `div` to request div only, or be absent to
                //       request both div & mod
                //       2) `positive` is true if unsigned mod is requested


                BN.prototype.divmod = function divmod(num, mode, positive) {
                  assert(!num.isZero());

                  if (this.isZero()) {
                    return {
                      div: new BN(0),
                      mod: new BN(0)
                    };
                  }

                  var div, mod, res;

                  if (this.negative !== 0 && num.negative === 0) {
                    res = this.neg().divmod(num, mode);

                    if (mode !== 'mod') {
                      div = res.div.neg();
                    }

                    if (mode !== 'div') {
                      mod = res.mod.neg();

                      if (positive && mod.negative !== 0) {
                        mod.iadd(num);
                      }
                    }

                    return {
                      div: div,
                      mod: mod
                    };
                  }

                  if (this.negative === 0 && num.negative !== 0) {
                    res = this.divmod(num.neg(), mode);

                    if (mode !== 'mod') {
                      div = res.div.neg();
                    }

                    return {
                      div: div,
                      mod: res.mod
                    };
                  }

                  if ((this.negative & num.negative) !== 0) {
                    res = this.neg().divmod(num.neg(), mode);

                    if (mode !== 'div') {
                      mod = res.mod.neg();

                      if (positive && mod.negative !== 0) {
                        mod.isub(num);
                      }
                    }

                    return {
                      div: res.div,
                      mod: mod
                    };
                  } // Both numbers are positive at this point
                  // Strip both numbers to approximate shift value


                  if (num.length > this.length || this.cmp(num) < 0) {
                    return {
                      div: new BN(0),
                      mod: this
                    };
                  } // Very short reduction


                  if (num.length === 1) {
                    if (mode === 'div') {
                      return {
                        div: this.divn(num.words[0]),
                        mod: null
                      };
                    }

                    if (mode === 'mod') {
                      return {
                        div: null,
                        mod: new BN(this.modrn(num.words[0]))
                      };
                    }

                    return {
                      div: this.divn(num.words[0]),
                      mod: new BN(this.modrn(num.words[0]))
                    };
                  }

                  return this._wordDiv(num, mode);
                }; // Find `this` / `num`


                BN.prototype.div = function div(num) {
                  return this.divmod(num, 'div', false).div;
                }; // Find `this` % `num`


                BN.prototype.mod = function mod(num) {
                  return this.divmod(num, 'mod', false).mod;
                };

                BN.prototype.umod = function umod(num) {
                  return this.divmod(num, 'mod', true).mod;
                }; // Find Round(`this` / `num`)


                BN.prototype.divRound = function divRound(num) {
                  var dm = this.divmod(num); // Fast case - exact division

                  if (dm.mod.isZero()) return dm.div;
                  var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
                  var half = num.ushrn(1);
                  var r2 = num.andln(1);
                  var cmp = mod.cmp(half); // Round down

                  if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div; // Round up

                  return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
                };

                BN.prototype.modrn = function modrn(num) {
                  var isNegNum = num < 0;
                  if (isNegNum) num = -num;
                  assert(num <= 0x3ffffff);
                  var p = (1 << 26) % num;
                  var acc = 0;

                  for (var i = this.length - 1; i >= 0; i--) {
                    acc = (p * acc + (this.words[i] | 0)) % num;
                  }

                  return isNegNum ? -acc : acc;
                }; // WARNING: DEPRECATED


                BN.prototype.modn = function modn(num) {
                  return this.modrn(num);
                }; // In-place division by number


                BN.prototype.idivn = function idivn(num) {
                  var isNegNum = num < 0;
                  if (isNegNum) num = -num;
                  assert(num <= 0x3ffffff);
                  var carry = 0;

                  for (var i = this.length - 1; i >= 0; i--) {
                    var w = (this.words[i] | 0) + carry * 0x4000000;
                    this.words[i] = w / num | 0;
                    carry = w % num;
                  }

                  this._strip();

                  return isNegNum ? this.ineg() : this;
                };

                BN.prototype.divn = function divn(num) {
                  return this.clone().idivn(num);
                };

                BN.prototype.egcd = function egcd(p) {
                  assert(p.negative === 0);
                  assert(!p.isZero());
                  var x = this;
                  var y = p.clone();

                  if (x.negative !== 0) {
                    x = x.umod(p);
                  } else {
                    x = x.clone();
                  } // A * x + B * y = x


                  var A = new BN(1);
                  var B = new BN(0); // C * x + D * y = y

                  var C = new BN(0);
                  var D = new BN(1);
                  var g = 0;

                  while (x.isEven() && y.isEven()) {
                    x.iushrn(1);
                    y.iushrn(1);
                    ++g;
                  }

                  var yp = y.clone();
                  var xp = x.clone();

                  while (!x.isZero()) {
                    for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) {
                    }

                    if (i > 0) {
                      x.iushrn(i);

                      while (i-- > 0) {
                        if (A.isOdd() || B.isOdd()) {
                          A.iadd(yp);
                          B.isub(xp);
                        }

                        A.iushrn(1);
                        B.iushrn(1);
                      }
                    }

                    for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) {
                    }

                    if (j > 0) {
                      y.iushrn(j);

                      while (j-- > 0) {
                        if (C.isOdd() || D.isOdd()) {
                          C.iadd(yp);
                          D.isub(xp);
                        }

                        C.iushrn(1);
                        D.iushrn(1);
                      }
                    }

                    if (x.cmp(y) >= 0) {
                      x.isub(y);
                      A.isub(C);
                      B.isub(D);
                    } else {
                      y.isub(x);
                      C.isub(A);
                      D.isub(B);
                    }
                  }

                  return {
                    a: C,
                    b: D,
                    gcd: y.iushln(g)
                  };
                }; // This is reduced incarnation of the binary EEA
                // above, designated to invert members of the
                // _prime_ fields F(p) at a maximal speed


                BN.prototype._invmp = function _invmp(p) {
                  assert(p.negative === 0);
                  assert(!p.isZero());
                  var a = this;
                  var b = p.clone();

                  if (a.negative !== 0) {
                    a = a.umod(p);
                  } else {
                    a = a.clone();
                  }

                  var x1 = new BN(1);
                  var x2 = new BN(0);
                  var delta = b.clone();

                  while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
                    for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) {
                    }

                    if (i > 0) {
                      a.iushrn(i);

                      while (i-- > 0) {
                        if (x1.isOdd()) {
                          x1.iadd(delta);
                        }

                        x1.iushrn(1);
                      }
                    }

                    for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) {
                    }

                    if (j > 0) {
                      b.iushrn(j);

                      while (j-- > 0) {
                        if (x2.isOdd()) {
                          x2.iadd(delta);
                        }

                        x2.iushrn(1);
                      }
                    }

                    if (a.cmp(b) >= 0) {
                      a.isub(b);
                      x1.isub(x2);
                    } else {
                      b.isub(a);
                      x2.isub(x1);
                    }
                  }

                  var res;

                  if (a.cmpn(1) === 0) {
                    res = x1;
                  } else {
                    res = x2;
                  }

                  if (res.cmpn(0) < 0) {
                    res.iadd(p);
                  }

                  return res;
                };

                BN.prototype.gcd = function gcd(num) {
                  if (this.isZero()) return num.abs();
                  if (num.isZero()) return this.abs();
                  var a = this.clone();
                  var b = num.clone();
                  a.negative = 0;
                  b.negative = 0; // Remove common factor of two

                  for (var shift = 0; a.isEven() && b.isEven(); shift++) {
                    a.iushrn(1);
                    b.iushrn(1);
                  }

                  do {
                    while (a.isEven()) {
                      a.iushrn(1);
                    }

                    while (b.isEven()) {
                      b.iushrn(1);
                    }

                    var r = a.cmp(b);

                    if (r < 0) {
                      // Swap `a` and `b` to make `a` always bigger than `b`
                      var t = a;
                      a = b;
                      b = t;
                    } else if (r === 0 || b.cmpn(1) === 0) {
                      break;
                    }

                    a.isub(b);
                  } while (true);

                  return b.iushln(shift);
                }; // Invert number in the field F(num)


                BN.prototype.invm = function invm(num) {
                  return this.egcd(num).a.umod(num);
                };

                BN.prototype.isEven = function isEven() {
                  return (this.words[0] & 1) === 0;
                };

                BN.prototype.isOdd = function isOdd() {
                  return (this.words[0] & 1) === 1;
                }; // And first word and num


                BN.prototype.andln = function andln(num) {
                  return this.words[0] & num;
                }; // Increment at the bit position in-line


                BN.prototype.bincn = function bincn(bit) {
                  assert(typeof bit === 'number');
                  var r = bit % 26;
                  var s = (bit - r) / 26;
                  var q = 1 << r; // Fast case: bit is much higher than all existing words

                  if (this.length <= s) {
                    this._expand(s + 1);

                    this.words[s] |= q;
                    return this;
                  } // Add bit and propagate, if needed


                  var carry = q;

                  for (var i = s; carry !== 0 && i < this.length; i++) {
                    var w = this.words[i] | 0;
                    w += carry;
                    carry = w >>> 26;
                    w &= 0x3ffffff;
                    this.words[i] = w;
                  }

                  if (carry !== 0) {
                    this.words[i] = carry;
                    this.length++;
                  }

                  return this;
                };

                BN.prototype.isZero = function isZero() {
                  return this.length === 1 && this.words[0] === 0;
                };

                BN.prototype.cmpn = function cmpn(num) {
                  var negative = num < 0;
                  if (this.negative !== 0 && !negative) return -1;
                  if (this.negative === 0 && negative) return 1;

                  this._strip();

                  var res;

                  if (this.length > 1) {
                    res = 1;
                  } else {
                    if (negative) {
                      num = -num;
                    }

                    assert(num <= 0x3ffffff, 'Number is too big');
                    var w = this.words[0] | 0;
                    res = w === num ? 0 : w < num ? -1 : 1;
                  }

                  if (this.negative !== 0) return -res | 0;
                  return res;
                }; // Compare two numbers and return:
                // 1 - if `this` > `num`
                // 0 - if `this` == `num`
                // -1 - if `this` < `num`


                BN.prototype.cmp = function cmp(num) {
                  if (this.negative !== 0 && num.negative === 0) return -1;
                  if (this.negative === 0 && num.negative !== 0) return 1;
                  var res = this.ucmp(num);
                  if (this.negative !== 0) return -res | 0;
                  return res;
                }; // Unsigned comparison


                BN.prototype.ucmp = function ucmp(num) {
                  // At this point both numbers have the same sign
                  if (this.length > num.length) return 1;
                  if (this.length < num.length) return -1;
                  var res = 0;

                  for (var i = this.length - 1; i >= 0; i--) {
                    var a = this.words[i] | 0;
                    var b = num.words[i] | 0;
                    if (a === b) continue;

                    if (a < b) {
                      res = -1;
                    } else if (a > b) {
                      res = 1;
                    }

                    break;
                  }

                  return res;
                };

                BN.prototype.gtn = function gtn(num) {
                  return this.cmpn(num) === 1;
                };

                BN.prototype.gt = function gt(num) {
                  return this.cmp(num) === 1;
                };

                BN.prototype.gten = function gten(num) {
                  return this.cmpn(num) >= 0;
                };

                BN.prototype.gte = function gte(num) {
                  return this.cmp(num) >= 0;
                };

                BN.prototype.ltn = function ltn(num) {
                  return this.cmpn(num) === -1;
                };

                BN.prototype.lt = function lt(num) {
                  return this.cmp(num) === -1;
                };

                BN.prototype.lten = function lten(num) {
                  return this.cmpn(num) <= 0;
                };

                BN.prototype.lte = function lte(num) {
                  return this.cmp(num) <= 0;
                };

                BN.prototype.eqn = function eqn(num) {
                  return this.cmpn(num) === 0;
                };

                BN.prototype.eq = function eq(num) {
                  return this.cmp(num) === 0;
                }; //
                // A reduce context, could be using montgomery or something better, depending
                // on the `m` itself.
                //


                BN.red = function red(num) {
                  return new Red(num);
                };

                BN.prototype.toRed = function toRed(ctx) {
                  assert(!this.red, 'Already a number in reduction context');
                  assert(this.negative === 0, 'red works only with positives');
                  return ctx.convertTo(this)._forceRed(ctx);
                };

                BN.prototype.fromRed = function fromRed() {
                  assert(this.red, 'fromRed works only with numbers in reduction context');
                  return this.red.convertFrom(this);
                };

                BN.prototype._forceRed = function _forceRed(ctx) {
                  this.red = ctx;
                  return this;
                };

                BN.prototype.forceRed = function forceRed(ctx) {
                  assert(!this.red, 'Already a number in reduction context');
                  return this._forceRed(ctx);
                };

                BN.prototype.redAdd = function redAdd(num) {
                  assert(this.red, 'redAdd works only with red numbers');
                  return this.red.add(this, num);
                };

                BN.prototype.redIAdd = function redIAdd(num) {
                  assert(this.red, 'redIAdd works only with red numbers');
                  return this.red.iadd(this, num);
                };

                BN.prototype.redSub = function redSub(num) {
                  assert(this.red, 'redSub works only with red numbers');
                  return this.red.sub(this, num);
                };

                BN.prototype.redISub = function redISub(num) {
                  assert(this.red, 'redISub works only with red numbers');
                  return this.red.isub(this, num);
                };

                BN.prototype.redShl = function redShl(num) {
                  assert(this.red, 'redShl works only with red numbers');
                  return this.red.shl(this, num);
                };

                BN.prototype.redMul = function redMul(num) {
                  assert(this.red, 'redMul works only with red numbers');

                  this.red._verify2(this, num);

                  return this.red.mul(this, num);
                };

                BN.prototype.redIMul = function redIMul(num) {
                  assert(this.red, 'redMul works only with red numbers');

                  this.red._verify2(this, num);

                  return this.red.imul(this, num);
                };

                BN.prototype.redSqr = function redSqr() {
                  assert(this.red, 'redSqr works only with red numbers');

                  this.red._verify1(this);

                  return this.red.sqr(this);
                };

                BN.prototype.redISqr = function redISqr() {
                  assert(this.red, 'redISqr works only with red numbers');

                  this.red._verify1(this);

                  return this.red.isqr(this);
                }; // Square root over p


                BN.prototype.redSqrt = function redSqrt() {
                  assert(this.red, 'redSqrt works only with red numbers');

                  this.red._verify1(this);

                  return this.red.sqrt(this);
                };

                BN.prototype.redInvm = function redInvm() {
                  assert(this.red, 'redInvm works only with red numbers');

                  this.red._verify1(this);

                  return this.red.invm(this);
                }; // Return negative clone of `this` % `red modulo`


                BN.prototype.redNeg = function redNeg() {
                  assert(this.red, 'redNeg works only with red numbers');

                  this.red._verify1(this);

                  return this.red.neg(this);
                };

                BN.prototype.redPow = function redPow(num) {
                  assert(this.red && !num.red, 'redPow(normalNum)');

                  this.red._verify1(this);

                  return this.red.pow(this, num);
                }; // Prime numbers with efficient reduction


                var primes = {
                  k256: null,
                  p224: null,
                  p192: null,
                  p25519: null
                }; // Pseudo-Mersenne prime

                function MPrime(name, p) {
                  // P = 2 ^ N - K
                  this.name = name;
                  this.p = new BN(p, 16);
                  this.n = this.p.bitLength();
                  this.k = new BN(1).iushln(this.n).isub(this.p);
                  this.tmp = this._tmp();
                }

                MPrime.prototype._tmp = function _tmp() {
                  var tmp = new BN(null);
                  tmp.words = new Array(Math.ceil(this.n / 13));
                  return tmp;
                };

                MPrime.prototype.ireduce = function ireduce(num) {
                  // Assumes that `num` is less than `P^2`
                  // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
                  var r = num;
                  var rlen;

                  do {
                    this.split(r, this.tmp);
                    r = this.imulK(r);
                    r = r.iadd(this.tmp);
                    rlen = r.bitLength();
                  } while (rlen > this.n);

                  var cmp = rlen < this.n ? -1 : r.ucmp(this.p);

                  if (cmp === 0) {
                    r.words[0] = 0;
                    r.length = 1;
                  } else if (cmp > 0) {
                    r.isub(this.p);
                  } else {
                    if (r.strip !== undefined) {
                      // r is a BN v4 instance
                      r.strip();
                    } else {
                      // r is a BN v5 instance
                      r._strip();
                    }
                  }

                  return r;
                };

                MPrime.prototype.split = function split(input, out) {
                  input.iushrn(this.n, 0, out);
                };

                MPrime.prototype.imulK = function imulK(num) {
                  return num.imul(this.k);
                };

                function K256() {
                  MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
                }

                inherits(K256, MPrime);

                K256.prototype.split = function split(input, output) {
                  // 256 = 9 * 26 + 22
                  var mask = 0x3fffff;
                  var outLen = Math.min(input.length, 9);

                  for (var i = 0; i < outLen; i++) {
                    output.words[i] = input.words[i];
                  }

                  output.length = outLen;

                  if (input.length <= 9) {
                    input.words[0] = 0;
                    input.length = 1;
                    return;
                  } // Shift by 9 limbs


                  var prev = input.words[9];
                  output.words[output.length++] = prev & mask;

                  for (i = 10; i < input.length; i++) {
                    var next = input.words[i] | 0;
                    input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
                    prev = next;
                  }

                  prev >>>= 22;
                  input.words[i - 10] = prev;

                  if (prev === 0 && input.length > 10) {
                    input.length -= 10;
                  } else {
                    input.length -= 9;
                  }
                };

                K256.prototype.imulK = function imulK(num) {
                  // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
                  num.words[num.length] = 0;
                  num.words[num.length + 1] = 0;
                  num.length += 2; // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390

                  var lo = 0;

                  for (var i = 0; i < num.length; i++) {
                    var w = num.words[i] | 0;
                    lo += w * 0x3d1;
                    num.words[i] = lo & 0x3ffffff;
                    lo = w * 0x40 + (lo / 0x4000000 | 0);
                  } // Fast length reduction


                  if (num.words[num.length - 1] === 0) {
                    num.length--;

                    if (num.words[num.length - 1] === 0) {
                      num.length--;
                    }
                  }

                  return num;
                };

                function P224() {
                  MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
                }

                inherits(P224, MPrime);

                function P192() {
                  MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
                }

                inherits(P192, MPrime);

                function P25519() {
                  // 2 ^ 255 - 19
                  MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
                }

                inherits(P25519, MPrime);

                P25519.prototype.imulK = function imulK(num) {
                  // K = 0x13
                  var carry = 0;

                  for (var i = 0; i < num.length; i++) {
                    var hi = (num.words[i] | 0) * 0x13 + carry;
                    var lo = hi & 0x3ffffff;
                    hi >>>= 26;
                    num.words[i] = lo;
                    carry = hi;
                  }

                  if (carry !== 0) {
                    num.words[num.length++] = carry;
                  }

                  return num;
                }; // Exported mostly for testing purposes, use plain name instead


                BN._prime = function prime(name) {
                  // Cached version of prime
                  if (primes[name]) return primes[name];
                  var prime;

                  if (name === 'k256') {
                    prime = new K256();
                  } else if (name === 'p224') {
                    prime = new P224();
                  } else if (name === 'p192') {
                    prime = new P192();
                  } else if (name === 'p25519') {
                    prime = new P25519();
                  } else {
                    throw new Error('Unknown prime ' + name);
                  }

                  primes[name] = prime;
                  return prime;
                }; //
                // Base reduction engine
                //


                function Red(m) {
                  if (typeof m === 'string') {
                    var prime = BN._prime(m);

                    this.m = prime.p;
                    this.prime = prime;
                  } else {
                    assert(m.gtn(1), 'modulus must be greater than 1');
                    this.m = m;
                    this.prime = null;
                  }
                }

                Red.prototype._verify1 = function _verify1(a) {
                  assert(a.negative === 0, 'red works only with positives');
                  assert(a.red, 'red works only with red numbers');
                };

                Red.prototype._verify2 = function _verify2(a, b) {
                  assert((a.negative | b.negative) === 0, 'red works only with positives');
                  assert(a.red && a.red === b.red, 'red works only with red numbers');
                };

                Red.prototype.imod = function imod(a) {
                  if (this.prime) return this.prime.ireduce(a)._forceRed(this);
                  move(a, a.umod(this.m)._forceRed(this));
                  return a;
                };

                Red.prototype.neg = function neg(a) {
                  if (a.isZero()) {
                    return a.clone();
                  }

                  return this.m.sub(a)._forceRed(this);
                };

                Red.prototype.add = function add(a, b) {
                  this._verify2(a, b);

                  var res = a.add(b);

                  if (res.cmp(this.m) >= 0) {
                    res.isub(this.m);
                  }

                  return res._forceRed(this);
                };

                Red.prototype.iadd = function iadd(a, b) {
                  this._verify2(a, b);

                  var res = a.iadd(b);

                  if (res.cmp(this.m) >= 0) {
                    res.isub(this.m);
                  }

                  return res;
                };

                Red.prototype.sub = function sub(a, b) {
                  this._verify2(a, b);

                  var res = a.sub(b);

                  if (res.cmpn(0) < 0) {
                    res.iadd(this.m);
                  }

                  return res._forceRed(this);
                };

                Red.prototype.isub = function isub(a, b) {
                  this._verify2(a, b);

                  var res = a.isub(b);

                  if (res.cmpn(0) < 0) {
                    res.iadd(this.m);
                  }

                  return res;
                };

                Red.prototype.shl = function shl(a, num) {
                  this._verify1(a);

                  return this.imod(a.ushln(num));
                };

                Red.prototype.imul = function imul(a, b) {
                  this._verify2(a, b);

                  return this.imod(a.imul(b));
                };

                Red.prototype.mul = function mul(a, b) {
                  this._verify2(a, b);

                  return this.imod(a.mul(b));
                };

                Red.prototype.isqr = function isqr(a) {
                  return this.imul(a, a.clone());
                };

                Red.prototype.sqr = function sqr(a) {
                  return this.mul(a, a);
                };

                Red.prototype.sqrt = function sqrt(a) {
                  if (a.isZero()) return a.clone();
                  var mod3 = this.m.andln(3);
                  assert(mod3 % 2 === 1); // Fast case

                  if (mod3 === 3) {
                    var pow = this.m.add(new BN(1)).iushrn(2);
                    return this.pow(a, pow);
                  } // Tonelli-Shanks algorithm (Totally unoptimized and slow)
                  //
                  // Find Q and S, that Q * 2 ^ S = (P - 1)


                  var q = this.m.subn(1);
                  var s = 0;

                  while (!q.isZero() && q.andln(1) === 0) {
                    s++;
                    q.iushrn(1);
                  }

                  assert(!q.isZero());
                  var one = new BN(1).toRed(this);
                  var nOne = one.redNeg(); // Find quadratic non-residue
                  // NOTE: Max is such because of generalized Riemann hypothesis.

                  var lpow = this.m.subn(1).iushrn(1);
                  var z = this.m.bitLength();
                  z = new BN(2 * z * z).toRed(this);

                  while (this.pow(z, lpow).cmp(nOne) !== 0) {
                    z.redIAdd(nOne);
                  }

                  var c = this.pow(z, q);
                  var r = this.pow(a, q.addn(1).iushrn(1));
                  var t = this.pow(a, q);
                  var m = s;

                  while (t.cmp(one) !== 0) {
                    var tmp = t;

                    for (var i = 0; tmp.cmp(one) !== 0; i++) {
                      tmp = tmp.redSqr();
                    }

                    assert(i < m);
                    var b = this.pow(c, new BN(1).iushln(m - i - 1));
                    r = r.redMul(b);
                    c = b.redSqr();
                    t = t.redMul(c);
                    m = i;
                  }

                  return r;
                };

                Red.prototype.invm = function invm(a) {
                  var inv = a._invmp(this.m);

                  if (inv.negative !== 0) {
                    inv.negative = 0;
                    return this.imod(inv).redNeg();
                  } else {
                    return this.imod(inv);
                  }
                };

                Red.prototype.pow = function pow(a, num) {
                  if (num.isZero()) return new BN(1).toRed(this);
                  if (num.cmpn(1) === 0) return a.clone();
                  var windowSize = 4;
                  var wnd = new Array(1 << windowSize);
                  wnd[0] = new BN(1).toRed(this);
                  wnd[1] = a;

                  for (var i = 2; i < wnd.length; i++) {
                    wnd[i] = this.mul(wnd[i - 1], a);
                  }

                  var res = wnd[0];
                  var current = 0;
                  var currentLen = 0;
                  var start = num.bitLength() % 26;

                  if (start === 0) {
                    start = 26;
                  }

                  for (i = num.length - 1; i >= 0; i--) {
                    var word = num.words[i];

                    for (var j = start - 1; j >= 0; j--) {
                      var bit = word >> j & 1;

                      if (res !== wnd[0]) {
                        res = this.sqr(res);
                      }

                      if (bit === 0 && current === 0) {
                        currentLen = 0;
                        continue;
                      }

                      current <<= 1;
                      current |= bit;
                      currentLen++;
                      if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                      res = this.mul(res, wnd[current]);
                      currentLen = 0;
                      current = 0;
                    }

                    start = 26;
                  }

                  return res;
                };

                Red.prototype.convertTo = function convertTo(num) {
                  var r = num.umod(this.m);
                  return r === num ? r.clone() : r;
                };

                Red.prototype.convertFrom = function convertFrom(num) {
                  var res = num.clone();
                  res.red = null;
                  return res;
                }; //
                // Montgomery method engine
                //


                BN.mont = function mont(num) {
                  return new Mont(num);
                };

                function Mont(m) {
                  Red.call(this, m);
                  this.shift = this.m.bitLength();

                  if (this.shift % 26 !== 0) {
                    this.shift += 26 - this.shift % 26;
                  }

                  this.r = new BN(1).iushln(this.shift);
                  this.r2 = this.imod(this.r.sqr());
                  this.rinv = this.r._invmp(this.m);
                  this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
                  this.minv = this.minv.umod(this.r);
                  this.minv = this.r.sub(this.minv);
                }

                inherits(Mont, Red);

                Mont.prototype.convertTo = function convertTo(num) {
                  return this.imod(num.ushln(this.shift));
                };

                Mont.prototype.convertFrom = function convertFrom(num) {
                  var r = this.imod(num.mul(this.rinv));
                  r.red = null;
                  return r;
                };

                Mont.prototype.imul = function imul(a, b) {
                  if (a.isZero() || b.isZero()) {
                    a.words[0] = 0;
                    a.length = 1;
                    return a;
                  }

                  var t = a.imul(b);
                  var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
                  var u = t.isub(c).iushrn(this.shift);
                  var res = u;

                  if (u.cmp(this.m) >= 0) {
                    res = u.isub(this.m);
                  } else if (u.cmpn(0) < 0) {
                    res = u.iadd(this.m);
                  }

                  return res._forceRed(this);
                };

                Mont.prototype.mul = function mul(a, b) {
                  if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
                  var t = a.mul(b);
                  var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
                  var u = t.isub(c).iushrn(this.shift);
                  var res = u;

                  if (u.cmp(this.m) >= 0) {
                    res = u.isub(this.m);
                  } else if (u.cmpn(0) < 0) {
                    res = u.iadd(this.m);
                  }

                  return res._forceRed(this);
                };

                Mont.prototype.invm = function invm(a) {
                  // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
                  var res = this.imod(a._invmp(this.m).mul(this.r2));
                  return res._forceRed(this);
                };
              })(module, commonjsGlobal);
            })(bn);

            var BN = bn.exports;

            var internal = {};

            /*
            The MIT License

            Copyright (c) 2016 Nick Dodson. nickdodson.com

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE
             */


            Object.defineProperty(internal, "__esModule", {
              value: true
            });
            internal.isHexString = internal.getKeys = internal.fromAscii = internal.fromUtf8 = internal.toAscii = internal.arrayContainsArray = internal.getBinarySize = internal.padToEven = internal.stripHexPrefix = internal.isHexPrefixed = void 0;
            /**
             * Returns a `Boolean` on whether or not the a `String` starts with '0x'
             * @param str the string input value
             * @return a boolean if it is or is not hex prefixed
             * @throws if the str input is not a string
             */

            function isHexPrefixed$1(str) {
              if (typeof str !== 'string') {
                throw new Error("[isHexPrefixed] input must be type 'string', received type ".concat(_typeof$1(str)));
              }

              return str[0] === '0' && str[1] === 'x';
            }

            internal.isHexPrefixed = isHexPrefixed$1;
            /**
             * Removes '0x' from a given `String` if present
             * @param str the string value
             * @returns the string without 0x prefix
             */

            var stripHexPrefix$1 = function stripHexPrefix(str) {
              if (typeof str !== 'string') throw new Error("[stripHexPrefix] input must be type 'string', received ".concat(_typeof$1(str)));
              return isHexPrefixed$1(str) ? str.slice(2) : str;
            };

            internal.stripHexPrefix = stripHexPrefix$1;
            /**
             * Pads a `String` to have an even length
             * @param value
             * @return output
             */

            function padToEven$1(value) {
              var a = value;

              if (typeof a !== 'string') {
                throw new Error("[padToEven] value must be type 'string', received ".concat(_typeof$1(a)));
              }

              if (a.length % 2) a = "0".concat(a);
              return a;
            }

            internal.padToEven = padToEven$1;
            /**
             * Get the binary size of a string
             * @param str
             * @returns the number of bytes contained within the string
             */

            function getBinarySize(str) {
              if (typeof str !== 'string') {
                throw new Error("[getBinarySize] method requires input type 'string', recieved ".concat(_typeof$1(str)));
              }

              return Buffer$i.byteLength(str, 'utf8');
            }

            internal.getBinarySize = getBinarySize;
            /**
             * Returns TRUE if the first specified array contains all elements
             * from the second one. FALSE otherwise.
             *
             * @param superset
             * @param subset
             *
             */

            function arrayContainsArray(superset, subset, some) {
              if (Array.isArray(superset) !== true) {
                throw new Error("[arrayContainsArray] method requires input 'superset' to be an array, got type '".concat(_typeof$1(superset), "'"));
              }

              if (Array.isArray(subset) !== true) {
                throw new Error("[arrayContainsArray] method requires input 'subset' to be an array, got type '".concat(_typeof$1(subset), "'"));
              }

              return subset[some ? 'some' : 'every'](function (value) {
                return superset.indexOf(value) >= 0;
              });
            }

            internal.arrayContainsArray = arrayContainsArray;
            /**
             * Should be called to get ascii from its hex representation
             *
             * @param string in hex
             * @returns ascii string representation of hex value
             */

            function toAscii(hex) {
              var str = '';
              var i = 0;
              var l = hex.length;
              if (hex.substring(0, 2) === '0x') i = 2;

              for (; i < l; i += 2) {
                var code = parseInt(hex.substr(i, 2), 16);
                str += String.fromCharCode(code);
              }

              return str;
            }

            internal.toAscii = toAscii;
            /**
             * Should be called to get hex representation (prefixed by 0x) of utf8 string
             *
             * @param string
             * @param optional padding
             * @returns hex representation of input string
             */

            function fromUtf8(stringValue) {
              var str = Buffer$i.from(stringValue, 'utf8');
              return "0x".concat(padToEven$1(str.toString('hex')).replace(/^0+|0+$/g, ''));
            }

            internal.fromUtf8 = fromUtf8;
            /**
             * Should be called to get hex representation (prefixed by 0x) of ascii string
             *
             * @param  string
             * @param  optional padding
             * @returns  hex representation of input string
             */

            function fromAscii(stringValue) {
              var hex = '';

              for (var i = 0; i < stringValue.length; i++) {
                var code = stringValue.charCodeAt(i);
                var n = code.toString(16);
                hex += n.length < 2 ? "0".concat(n) : n;
              }

              return "0x".concat(hex);
            }

            internal.fromAscii = fromAscii;
            /**
             * Returns the keys from an array of objects.
             * @example
             * ```js
             * getKeys([{a: '1', b: '2'}, {a: '3', b: '4'}], 'a') => ['1', '3']
             *````
             * @param  params
             * @param  key
             * @param  allowEmpty
             * @returns output just a simple array of output keys
             */

            function getKeys(params, key, allowEmpty) {
              if (!Array.isArray(params)) {
                throw new Error("[getKeys] method expects input 'params' to be an array, got ".concat(_typeof$1(params)));
              }

              if (typeof key !== 'string') {
                throw new Error("[getKeys] method expects input 'key' to be type 'string', got ".concat(_typeof$1(params)));
              }

              var result = [];

              for (var i = 0; i < params.length; i++) {
                var value = params[i][key];

                if (allowEmpty && !value) {
                  value = '';
                } else if (typeof value !== 'string') {
                  throw new Error("invalid abi - expected type 'string', received ".concat(_typeof$1(value)));
                }

                result.push(value);
              }

              return result;
            }

            internal.getKeys = getKeys;
            /**
             * Is the string a hex string.
             *
             * @param  value
             * @param  length
             * @returns  output the string is a hex string
             */

            function isHexString(value, length) {
              if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) return false;
              if (length && value.length !== 2 + 2 * length) return false;
              return true;
            }

            internal.isHexString = isHexString;

            var helpers = {};

            Object.defineProperty(helpers, "__esModule", {
              value: true
            });
            helpers.assertIsString = helpers.assertIsArray = helpers.assertIsBuffer = helpers.assertIsHexString = void 0;
            var internal_1 = internal;
            /**
             * Throws if a string is not hex prefixed
             * @param {string} input string to check hex prefix of
             */

            var assertIsHexString = function assertIsHexString(input) {
              if (!(0, internal_1.isHexString)(input)) {
                var msg = "This method only supports 0x-prefixed hex strings but input was: ".concat(input);
                throw new Error(msg);
              }
            };

            helpers.assertIsHexString = assertIsHexString;
            /**
             * Throws if input is not a buffer
             * @param {Buffer} input value to check
             */

            var assertIsBuffer = function assertIsBuffer(input) {
              if (!isBuffer$2(input)) {
                var msg = "This method only supports Buffer but input was: ".concat(input);
                throw new Error(msg);
              }
            };

            helpers.assertIsBuffer = assertIsBuffer;
            /**
             * Throws if input is not an array
             * @param {number[]} input value to check
             */

            var assertIsArray = function assertIsArray(input) {
              if (!Array.isArray(input)) {
                var msg = "This method only supports number arrays but input was: ".concat(input);
                throw new Error(msg);
              }
            };

            helpers.assertIsArray = assertIsArray;
            /**
             * Throws if input is not a string
             * @param {string} input value to check
             */

            var assertIsString = function assertIsString(input) {
              if (typeof input !== 'string') {
                var msg = "This method only supports strings but input was: ".concat(input);
                throw new Error(msg);
              }
            };

            helpers.assertIsString = assertIsString;

            (function (exports) {

              var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
                return mod && mod.__esModule ? mod : {
                  "default": mod
                };
              };

              Object.defineProperty(exports, "__esModule", {
                value: true
              });
              exports.baToJSON = exports.toUtf8 = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = exports.intToBuffer = exports.intToHex = void 0;

              var bn_js_1 = __importDefault(bn.exports);

              var internal_1 = internal;
              var helpers_1 = helpers;
              /**
               * Converts a `Number` into a hex `String`
               * @param {Number} i
               * @return {String}
               */

              var intToHex = function intToHex(i) {
                if (!Number.isSafeInteger(i) || i < 0) {
                  throw new Error("Received an invalid integer type: ".concat(i));
                }

                return "0x".concat(i.toString(16));
              };

              exports.intToHex = intToHex;
              /**
               * Converts an `Number` to a `Buffer`
               * @param {Number} i
               * @return {Buffer}
               */

              var intToBuffer = function intToBuffer(i) {
                var hex = (0, exports.intToHex)(i);
                return Buffer$i.from((0, internal_1.padToEven)(hex.slice(2)), 'hex');
              };

              exports.intToBuffer = intToBuffer;
              /**
               * Returns a buffer filled with 0s.
               * @param bytes the number of bytes the buffer should be
               */

              var zeros = function zeros(bytes) {
                return Buffer$i.allocUnsafe(bytes).fill(0);
              };

              exports.zeros = zeros;
              /**
               * Pads a `Buffer` with zeros till it has `length` bytes.
               * Truncates the beginning or end of input if its length exceeds `length`.
               * @param msg the value to pad (Buffer)
               * @param length the number of bytes the output should be
               * @param right whether to start padding form the left or right
               * @return (Buffer)
               */

              var setLength = function setLength(msg, length, right) {
                var buf = (0, exports.zeros)(length);

                if (right) {
                  if (msg.length < length) {
                    msg.copy(buf);
                    return buf;
                  }

                  return msg.slice(0, length);
                } else {
                  if (msg.length < length) {
                    msg.copy(buf, length - msg.length);
                    return buf;
                  }

                  return msg.slice(-length);
                }
              };
              /**
               * Left Pads a `Buffer` with leading zeros till it has `length` bytes.
               * Or it truncates the beginning if it exceeds.
               * @param msg the value to pad (Buffer)
               * @param length the number of bytes the output should be
               * @return (Buffer)
               */


              var setLengthLeft = function setLengthLeft(msg, length) {
                (0, helpers_1.assertIsBuffer)(msg);
                return setLength(msg, length, false);
              };

              exports.setLengthLeft = setLengthLeft;
              /**
               * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.
               * it truncates the end if it exceeds.
               * @param msg the value to pad (Buffer)
               * @param length the number of bytes the output should be
               * @return (Buffer)
               */

              var setLengthRight = function setLengthRight(msg, length) {
                (0, helpers_1.assertIsBuffer)(msg);
                return setLength(msg, length, true);
              };

              exports.setLengthRight = setLengthRight;
              /**
               * Trims leading zeros from a `Buffer`, `String` or `Number[]`.
               * @param a (Buffer|Array|String)
               * @return (Buffer|Array|String)
               */

              var stripZeros = function stripZeros(a) {
                var first = a[0];

                while (a.length > 0 && first.toString() === '0') {
                  a = a.slice(1);
                  first = a[0];
                }

                return a;
              };
              /**
               * Trims leading zeros from a `Buffer`.
               * @param a (Buffer)
               * @return (Buffer)
               */


              var unpadBuffer = function unpadBuffer(a) {
                (0, helpers_1.assertIsBuffer)(a);
                return stripZeros(a);
              };

              exports.unpadBuffer = unpadBuffer;
              /**
               * Trims leading zeros from an `Array` (of numbers).
               * @param a (number[])
               * @return (number[])
               */

              var unpadArray = function unpadArray(a) {
                (0, helpers_1.assertIsArray)(a);
                return stripZeros(a);
              };

              exports.unpadArray = unpadArray;
              /**
               * Trims leading zeros from a hex-prefixed `String`.
               * @param a (String)
               * @return (String)
               */

              var unpadHexString = function unpadHexString(a) {
                (0, helpers_1.assertIsHexString)(a);
                a = (0, internal_1.stripHexPrefix)(a);
                return stripZeros(a);
              };

              exports.unpadHexString = unpadHexString;
              /**
               * Attempts to turn a value into a `Buffer`.
               * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BN` and other objects
               * with a `toArray()` or `toBuffer()` method.
               * @param v the value
               */

              var toBuffer = function toBuffer(v) {
                if (v === null || v === undefined) {
                  return Buffer$i.allocUnsafe(0);
                }

                if (isBuffer$2(v)) {
                  return Buffer$i.from(v);
                }

                if (Array.isArray(v) || v instanceof Uint8Array) {
                  return Buffer$i.from(v);
                }

                if (typeof v === 'string') {
                  if (!(0, internal_1.isHexString)(v)) {
                    throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ".concat(v));
                  }

                  return Buffer$i.from((0, internal_1.padToEven)((0, internal_1.stripHexPrefix)(v)), 'hex');
                }

                if (typeof v === 'number') {
                  return (0, exports.intToBuffer)(v);
                }

                if (bn_js_1["default"].isBN(v)) {
                  return v.toArrayLike(Buffer$i);
                }

                if (v.toArray) {
                  // converts a BN to a Buffer
                  return Buffer$i.from(v.toArray());
                }

                if (v.toBuffer) {
                  return Buffer$i.from(v.toBuffer());
                }

                throw new Error('invalid type');
              };

              exports.toBuffer = toBuffer;
              /**
               * Converts a `Buffer` to a `Number`.
               * @param buf `Buffer` object to convert
               * @throws If the input number exceeds 53 bits.
               */

              var bufferToInt = function bufferToInt(buf) {
                return new bn_js_1["default"]((0, exports.toBuffer)(buf)).toNumber();
              };

              exports.bufferToInt = bufferToInt;
              /**
               * Converts a `Buffer` into a `0x`-prefixed hex `String`.
               * @param buf `Buffer` object to convert
               */

              var bufferToHex = function bufferToHex(buf) {
                buf = (0, exports.toBuffer)(buf);
                return '0x' + buf.toString('hex');
              };

              exports.bufferToHex = bufferToHex;
              /**
               * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
               * @param num Signed integer value
               */

              var fromSigned = function fromSigned(num) {
                return new bn_js_1["default"](num).fromTwos(256);
              };

              exports.fromSigned = fromSigned;
              /**
               * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
               * @param num
               */

              var toUnsigned = function toUnsigned(num) {
                return Buffer$i.from(num.toTwos(256).toArray());
              };

              exports.toUnsigned = toUnsigned;
              /**
               * Adds "0x" to a given `String` if it does not already start with "0x".
               */

              var addHexPrefix = function addHexPrefix(str) {
                if (typeof str !== 'string') {
                  return str;
                }

                return (0, internal_1.isHexPrefixed)(str) ? str : '0x' + str;
              };

              exports.addHexPrefix = addHexPrefix;
              /**
               * Returns the utf8 string representation from a hex string.
               *
               * Examples:
               *
               * Input 1: '657468657265756d000000000000000000000000000000000000000000000000'
               * Input 2: '657468657265756d'
               * Input 3: '000000000000000000000000000000000000000000000000657468657265756d'
               *
               * Output (all 3 input variants): 'ethereum'
               *
               * Note that this method is not intended to be used with hex strings
               * representing quantities in both big endian or little endian notation.
               *
               * @param string Hex string, should be `0x` prefixed
               * @return Utf8 string
               */

              var toUtf8 = function toUtf8(hex) {
                var zerosRegexp = /^(00)+|(00)+$/g;
                hex = (0, internal_1.stripHexPrefix)(hex);

                if (hex.length % 2 !== 0) {
                  throw new Error('Invalid non-even hex string input for toUtf8() provided');
                }

                var bufferVal = Buffer$i.from(hex.replace(zerosRegexp, ''), 'hex');
                return bufferVal.toString('utf8');
              };

              exports.toUtf8 = toUtf8;
              /**
               * Converts a `Buffer` or `Array` to JSON.
               * @param ba (Buffer|Array)
               * @return (Array|String|null)
               */

              var baToJSON = function baToJSON(ba) {
                if (isBuffer$2(ba)) {
                  return "0x".concat(ba.toString('hex'));
                } else if (ba instanceof Array) {
                  var array = [];

                  for (var i = 0; i < ba.length; i++) {
                    array.push((0, exports.baToJSON)(ba[i]));
                  }

                  return array;
                }
              };

              exports.baToJSON = baToJSON;
            })(bytes);

            function _arrayWithHoles(arr) {
              if (Array.isArray(arr)) return arr;
            }

            function _iterableToArrayLimit(arr, i) {
              var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

              if (_i == null) return;
              var _arr = [];
              var _n = true;
              var _d = false;

              var _s, _e;

              try {
                for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);

                  if (i && _arr.length === i) break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"] != null) _i["return"]();
                } finally {
                  if (_d) throw _e;
                }
              }

              return _arr;
            }

            function _arrayLikeToArray(arr, len) {
              if (len == null || len > arr.length) len = arr.length;

              for (var i = 0, arr2 = new Array(len); i < len; i++) {
                arr2[i] = arr[i];
              }

              return arr2;
            }

            function _unsupportedIterableToArray(o, minLen) {
              if (!o) return;
              if (typeof o === "string") return _arrayLikeToArray(o, minLen);
              var n = Object.prototype.toString.call(o).slice(8, -1);
              if (n === "Object" && o.constructor) n = o.constructor.name;
              if (n === "Map" || n === "Set") return Array.from(o);
              if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
            }

            function _nonIterableRest() {
              throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }

            function _slicedToArray(arr, i) {
              return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
            }

            var account = {};

            var require$$0$2 = /*@__PURE__*/getAugmentedNamespace(assert$3);

            var dist_browser = {};

            var __importDefault$1 = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
              return mod && mod.__esModule ? mod : {
                "default": mod
              };
            };

            Object.defineProperty(dist_browser, "__esModule", {
              value: true
            });
            dist_browser.getLength = decode_1 = dist_browser.decode = encode_1 = dist_browser.encode = void 0;

            var bn_js_1$1 = __importDefault$1(bn.exports);
            /**
             * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP
             * This function takes in a data, convert it to buffer if not, and a length for recursion
             * @param input - will be converted to buffer
             * @returns returns buffer of encoded data
             **/


            function encode$2(input) {
              if (Array.isArray(input)) {
                var output = [];

                for (var i = 0; i < input.length; i++) {
                  output.push(encode$2(input[i]));
                }

                var buf = Buffer$i.concat(output);
                return Buffer$i.concat([encodeLength(buf.length, 192), buf]);
              } else {
                var inputBuf = toBuffer$2(input);
                return inputBuf.length === 1 && inputBuf[0] < 128 ? inputBuf : Buffer$i.concat([encodeLength(inputBuf.length, 128), inputBuf]);
              }
            }

            var encode_1 = dist_browser.encode = encode$2;
            /**
             * Parse integers. Check if there is no leading zeros
             * @param v The value to parse
             * @param base The base to parse the integer into
             */

            function safeParseInt(v, base) {
              if (v[0] === '0' && v[1] === '0') {
                throw new Error('invalid RLP: extra zeros');
              }

              return parseInt(v, base);
            }

            function encodeLength(len, offset) {
              if (len < 56) {
                return Buffer$i.from([len + offset]);
              } else {
                var hexLength = intToHex(len);
                var lLength = hexLength.length / 2;
                var firstByte = intToHex(offset + 55 + lLength);
                return Buffer$i.from(firstByte + hexLength, 'hex');
              }
            }

            function decode$1(input, stream) {
              if (stream === void 0) {
                stream = false;
              }

              if (!input || input.length === 0) {
                return Buffer$i.from([]);
              }

              var inputBuffer = toBuffer$2(input);

              var decoded = _decode(inputBuffer);

              if (stream) {
                return decoded;
              }

              if (decoded.remainder.length !== 0) {
                throw new Error('invalid remainder');
              }

              return decoded.data;
            }

            var decode_1 = dist_browser.decode = decode$1;
            /**
             * Get the length of the RLP input
             * @param input
             * @returns The length of the input or an empty Buffer if no input
             */

            function getLength(input) {
              if (!input || input.length === 0) {
                return Buffer$i.from([]);
              }

              var inputBuffer = toBuffer$2(input);
              var firstByte = inputBuffer[0];

              if (firstByte <= 0x7f) {
                return inputBuffer.length;
              } else if (firstByte <= 0xb7) {
                return firstByte - 0x7f;
              } else if (firstByte <= 0xbf) {
                return firstByte - 0xb6;
              } else if (firstByte <= 0xf7) {
                // a list between  0-55 bytes long
                return firstByte - 0xbf;
              } else {
                // a list  over 55 bytes long
                var llength = firstByte - 0xf6;
                var length_1 = safeParseInt(inputBuffer.slice(1, llength).toString('hex'), 16);
                return llength + length_1;
              }
            }

            dist_browser.getLength = getLength;
            /** Decode an input with RLP */

            function _decode(input) {
              var length, llength, data, innerRemainder, d;
              var decoded = [];
              var firstByte = input[0];

              if (firstByte <= 0x7f) {
                // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.
                return {
                  data: input.slice(0, 1),
                  remainder: input.slice(1)
                };
              } else if (firstByte <= 0xb7) {
                // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string
                // The range of the first byte is [0x80, 0xb7]
                length = firstByte - 0x7f; // set 0x80 null to 0

                if (firstByte === 0x80) {
                  data = Buffer$i.from([]);
                } else {
                  data = input.slice(1, length);
                }

                if (length === 2 && data[0] < 0x80) {
                  throw new Error('invalid rlp encoding: byte must be less 0x80');
                }

                return {
                  data: data,
                  remainder: input.slice(length)
                };
              } else if (firstByte <= 0xbf) {
                // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),
                // followed by the length, followed by the string
                llength = firstByte - 0xb6;

                if (input.length - 1 < llength) {
                  throw new Error('invalid RLP: not enough bytes for string length');
                }

                length = safeParseInt(input.slice(1, llength).toString('hex'), 16);

                if (length <= 55) {
                  throw new Error('invalid RLP: expected string length to be greater than 55');
                }

                data = input.slice(llength, length + llength);

                if (data.length < length) {
                  throw new Error('invalid RLP: not enough bytes for string');
                }

                return {
                  data: data,
                  remainder: input.slice(length + llength)
                };
              } else if (firstByte <= 0xf7) {
                // a list between  0-55 bytes long
                length = firstByte - 0xbf;
                innerRemainder = input.slice(1, length);

                while (innerRemainder.length) {
                  d = _decode(innerRemainder);
                  decoded.push(d.data);
                  innerRemainder = d.remainder;
                }

                return {
                  data: decoded,
                  remainder: input.slice(length)
                };
              } else {
                // a list  over 55 bytes long
                llength = firstByte - 0xf6;
                length = safeParseInt(input.slice(1, llength).toString('hex'), 16);
                var totalLength = llength + length;

                if (totalLength > input.length) {
                  throw new Error('invalid rlp: total length is larger than the data');
                }

                innerRemainder = input.slice(llength, totalLength);

                if (innerRemainder.length === 0) {
                  throw new Error('invalid rlp, List has a invalid length');
                }

                while (innerRemainder.length) {
                  d = _decode(innerRemainder);
                  decoded.push(d.data);
                  innerRemainder = d.remainder;
                }

                return {
                  data: decoded,
                  remainder: input.slice(totalLength)
                };
              }
            }
            /** Check if a string is prefixed by 0x */


            function isHexPrefixed(str) {
              return str.slice(0, 2) === '0x';
            }
            /** Removes 0x from a given String */


            function stripHexPrefix(str) {
              if (typeof str !== 'string') {
                return str;
              }

              return isHexPrefixed(str) ? str.slice(2) : str;
            }
            /** Transform an integer into its hexadecimal value */


            function intToHex(integer) {
              if (integer < 0) {
                throw new Error('Invalid integer as argument, must be unsigned!');
              }

              var hex = integer.toString(16);
              return hex.length % 2 ? "0" + hex : hex;
            }
            /** Pad a string to be even */


            function padToEven(a) {
              return a.length % 2 ? "0" + a : a;
            }
            /** Transform an integer into a Buffer */


            function intToBuffer(integer) {
              var hex = intToHex(integer);
              return Buffer$i.from(hex, 'hex');
            }
            /** Transform anything into a Buffer */


            function toBuffer$2(v) {
              if (!isBuffer$2(v)) {
                if (typeof v === 'string') {
                  if (isHexPrefixed(v)) {
                    return Buffer$i.from(padToEven(stripHexPrefix(v)), 'hex');
                  } else {
                    return Buffer$i.from(v);
                  }
                } else if (typeof v === 'number' || typeof v === 'bigint') {
                  if (!v) {
                    return Buffer$i.from([]);
                  } else {
                    return intToBuffer(v);
                  }
                } else if (v === null || v === undefined) {
                  return Buffer$i.from([]);
                } else if (v instanceof Uint8Array) {
                  return Buffer$i.from(v);
                } else if (bn_js_1$1["default"].isBN(v)) {
                  // converts a BN to a Buffer
                  return Buffer$i.from(v.toArray());
                } else {
                  throw new Error('invalid type');
                }
              }

              return v;
            }

            var secp256k1$1 = {};

            var random = {};

            var browser$3 = {exports: {}};

            var safeBuffer$1 = {exports: {}};

            /* eslint-disable node/no-deprecated-api */

            (function (module, exports) {
              var buffer = require$$0$4;
              var Buffer = buffer.Buffer; // alternative to using Object.keys for old browsers

              function copyProps(src, dst) {
                for (var key in src) {
                  dst[key] = src[key];
                }
              }

              if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
                module.exports = buffer;
              } else {
                // Copy properties from require('buffer')
                copyProps(buffer, exports);
                exports.Buffer = SafeBuffer;
              }

              function SafeBuffer(arg, encodingOrOffset, length) {
                return Buffer(arg, encodingOrOffset, length);
              }

              SafeBuffer.prototype = Object.create(Buffer.prototype); // Copy static methods from Buffer

              copyProps(Buffer, SafeBuffer);

              SafeBuffer.from = function (arg, encodingOrOffset, length) {
                if (typeof arg === 'number') {
                  throw new TypeError('Argument must not be a number');
                }

                return Buffer(arg, encodingOrOffset, length);
              };

              SafeBuffer.alloc = function (size, fill, encoding) {
                if (typeof size !== 'number') {
                  throw new TypeError('Argument must be a number');
                }

                var buf = Buffer(size);

                if (fill !== undefined) {
                  if (typeof encoding === 'string') {
                    buf.fill(fill, encoding);
                  } else {
                    buf.fill(fill);
                  }
                } else {
                  buf.fill(0);
                }

                return buf;
              };

              SafeBuffer.allocUnsafe = function (size) {
                if (typeof size !== 'number') {
                  throw new TypeError('Argument must be a number');
                }

                return Buffer(size);
              };

              SafeBuffer.allocUnsafeSlow = function (size) {
                if (typeof size !== 'number') {
                  throw new TypeError('Argument must be a number');
                }

                return buffer.SlowBuffer(size);
              };
            })(safeBuffer$1, safeBuffer$1.exports);

            // https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues


            var MAX_BYTES = 65536; // Node supports requesting up to this number of bytes
            // https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48

            var MAX_UINT32 = 4294967295;

            function oldBrowser() {
              throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11');
            }

            var Buffer$h = safeBuffer$1.exports.Buffer;
            var crypto = commonjsGlobal.crypto || commonjsGlobal.msCrypto;

            if (crypto && crypto.getRandomValues) {
              browser$3.exports = randomBytes$1;
            } else {
              browser$3.exports = oldBrowser;
            }

            function randomBytes$1(size, cb) {
              // phantomjs needs to throw
              if (size > MAX_UINT32) throw new RangeError('requested too many random bytes');
              var bytes = Buffer$h.allocUnsafe(size);

              if (size > 0) {
                // getRandomValues fails on IE if size == 0
                if (size > MAX_BYTES) {
                  // this is the max bytes crypto.getRandomValues
                  // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
                  for (var generated = 0; generated < size; generated += MAX_BYTES) {
                    // buffer.slice automatically checks if the end is past the end of
                    // the buffer so we don't have to here
                    crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));
                  }
                } else {
                  crypto.getRandomValues(bytes);
                }
              }

              if (typeof cb === 'function') {
                return nextTick(function () {
                  cb(null, bytes);
                });
              }

              return bytes;
            }

            Object.defineProperty(random, "__esModule", {
              value: true
            });
            var randombytes = browser$3.exports;

            function getRandomBytes(bytes) {
              return new Promise(function (resolve, reject) {
                randombytes(bytes, function (err, resp) {
                  if (err) {
                    reject(err);
                    return;
                  }

                  resolve(resp);
                });
              });
            }

            random.getRandomBytes = getRandomBytes;

            function getRandomBytesSync(bytes) {
              return randombytes(bytes);
            }

            random.getRandomBytesSync = getRandomBytesSync;

            (function (exports) {

              var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {
                function adopt(value) {
                  return value instanceof P ? value : new P(function (resolve) {
                    resolve(value);
                  });
                }

                return new (P || (P = Promise))(function (resolve, reject) {
                  function fulfilled(value) {
                    try {
                      step(generator.next(value));
                    } catch (e) {
                      reject(e);
                    }
                  }

                  function rejected(value) {
                    try {
                      step(generator["throw"](value));
                    } catch (e) {
                      reject(e);
                    }
                  }

                  function step(result) {
                    result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
                  }

                  step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
              };

              var __generator = commonjsGlobal && commonjsGlobal.__generator || function (thisArg, body) {
                var _ = {
                  label: 0,
                  sent: function sent() {
                    if (t[0] & 1) throw t[1];
                    return t[1];
                  },
                  trys: [],
                  ops: []
                },
                    f,
                    y,
                    t,
                    g;
                return g = {
                  next: verb(0),
                  "throw": verb(1),
                  "return": verb(2)
                }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
                  return this;
                }), g;

                function verb(n) {
                  return function (v) {
                    return step([n, v]);
                  };
                }

                function step(op) {
                  if (f) throw new TypeError("Generator is already executing.");

                  while (_) {
                    try {
                      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                      if (y = 0, t) op = [op[0] & 2, t.value];

                      switch (op[0]) {
                        case 0:
                        case 1:
                          t = op;
                          break;

                        case 4:
                          _.label++;
                          return {
                            value: op[1],
                            done: false
                          };

                        case 5:
                          _.label++;
                          y = op[1];
                          op = [0];
                          continue;

                        case 7:
                          op = _.ops.pop();

                          _.trys.pop();

                          continue;

                        default:
                          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;
                            continue;
                          }

                          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];
                            break;
                          }

                          if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];
                            t = op;
                            break;
                          }

                          if (t && _.label < t[2]) {
                            _.label = t[2];

                            _.ops.push(op);

                            break;
                          }

                          if (t[2]) _.ops.pop();

                          _.trys.pop();

                          continue;
                      }

                      op = body.call(thisArg, _);
                    } catch (e) {
                      op = [6, e];
                      y = 0;
                    } finally {
                      f = t = 0;
                    }
                  }

                  if (op[0] & 5) throw op[1];
                  return {
                    value: op[0] ? op[1] : void 0,
                    done: true
                  };
                }
              };

              function __export(m) {
                for (var p in m) {
                  if (!exports.hasOwnProperty(p)) exports[p] = m[p];
                }
              }

              Object.defineProperty(exports, "__esModule", {
                value: true
              });
              var secp256k1_1 = elliptic;
              var random_1 = random;
              var SECP256K1_PRIVATE_KEY_SIZE = 32;

              function createPrivateKey() {
                return __awaiter(this, void 0, void 0, function () {
                  var pk;
                  return __generator(this, function (_a) {
                    switch (_a.label) {
                      case 0:
                        return [4
                        /*yield*/
                        , random_1.getRandomBytes(SECP256K1_PRIVATE_KEY_SIZE)];

                      case 1:
                        pk = _a.sent();

                        if (secp256k1_1.privateKeyVerify(pk)) {
                          return [2
                          /*return*/
                          , pk];
                        }

                        return [3
                        /*break*/
                        , 0];

                      case 2:
                        return [2
                        /*return*/
                        ];
                    }
                  });
                });
              }

              exports.createPrivateKey = createPrivateKey;

              function createPrivateKeySync() {
                while (true) {
                  var pk = random_1.getRandomBytesSync(SECP256K1_PRIVATE_KEY_SIZE);

                  if (secp256k1_1.privateKeyVerify(pk)) {
                    return pk;
                  }
                }
              }

              exports.createPrivateKeySync = createPrivateKeySync;

              __export(elliptic);
            })(secp256k1$1);

            var constants = {};

            (function (exports) {

              var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
                return mod && mod.__esModule ? mod : {
                  "default": mod
                };
              };

              Object.defineProperty(exports, "__esModule", {
                value: true
              });
              exports.KECCAK256_RLP = exports.KECCAK256_RLP_S = exports.KECCAK256_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY_S = exports.KECCAK256_NULL = exports.KECCAK256_NULL_S = exports.TWO_POW256 = exports.MAX_INTEGER = void 0;
              var Buffer = require$$0$4.Buffer;

              var bn_js_1 = __importDefault(bn.exports);
              /**
               * The max integer that this VM can handle
               */


              exports.MAX_INTEGER = new bn_js_1["default"]('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);
              /**
               * 2^256
               */

              exports.TWO_POW256 = new bn_js_1["default"]('10000000000000000000000000000000000000000000000000000000000000000', 16);
              /**
               * Keccak-256 hash of null
               */

              exports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
              /**
               * Keccak-256 hash of null
               */

              exports.KECCAK256_NULL = Buffer.from(exports.KECCAK256_NULL_S, 'hex');
              /**
               * Keccak-256 of an RLP of an empty array
               */

              exports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';
              /**
               * Keccak-256 of an RLP of an empty array
               */

              exports.KECCAK256_RLP_ARRAY = Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');
              /**
               * Keccak-256 hash of the RLP of null
               */

              exports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';
              /**
               * Keccak-256 hash of the RLP of null
               */

              exports.KECCAK256_RLP = Buffer.from(exports.KECCAK256_RLP_S, 'hex');
            })(constants);

            var hash$1 = {};

            var Buffer$g = safeBuffer$1.exports.Buffer;
            var Transform$1 = require$$1$1.Transform;
            var inherits$c = inherits_browser.exports;

            function throwIfNotStringOrBuffer(val, prefix) {
              if (!Buffer$g.isBuffer(val) && typeof val !== 'string') {
                throw new TypeError(prefix + ' must be a string or a buffer');
              }
            }

            function HashBase$2(blockSize) {
              Transform$1.call(this);
              this._block = Buffer$g.allocUnsafe(blockSize);
              this._blockSize = blockSize;
              this._blockOffset = 0;
              this._length = [0, 0, 0, 0];
              this._finalized = false;
            }

            inherits$c(HashBase$2, Transform$1);

            HashBase$2.prototype._transform = function (chunk, encoding, callback) {
              var error = null;

              try {
                this.update(chunk, encoding);
              } catch (err) {
                error = err;
              }

              callback(error);
            };

            HashBase$2.prototype._flush = function (callback) {
              var error = null;

              try {
                this.push(this.digest());
              } catch (err) {
                error = err;
              }

              callback(error);
            };

            HashBase$2.prototype.update = function (data, encoding) {
              throwIfNotStringOrBuffer(data, 'Data');
              if (this._finalized) throw new Error('Digest already called');
              if (!Buffer$g.isBuffer(data)) data = Buffer$g.from(data, encoding); // consume data

              var block = this._block;
              var offset = 0;

              while (this._blockOffset + data.length - offset >= this._blockSize) {
                for (var i = this._blockOffset; i < this._blockSize;) {
                  block[i++] = data[offset++];
                }

                this._update();

                this._blockOffset = 0;
              }

              while (offset < data.length) {
                block[this._blockOffset++] = data[offset++];
              } // update length


              for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
                this._length[j] += carry;
                carry = this._length[j] / 0x0100000000 | 0;
                if (carry > 0) this._length[j] -= 0x0100000000 * carry;
              }

              return this;
            };

            HashBase$2.prototype._update = function () {
              throw new Error('_update is not implemented');
            };

            HashBase$2.prototype.digest = function (encoding) {
              if (this._finalized) throw new Error('Digest already called');
              this._finalized = true;

              var digest = this._digest();

              if (encoding !== undefined) digest = digest.toString(encoding); // reset state

              this._block.fill(0);

              this._blockOffset = 0;

              for (var i = 0; i < 4; ++i) {
                this._length[i] = 0;
              }

              return digest;
            };

            HashBase$2.prototype._digest = function () {
              throw new Error('_digest is not implemented');
            };

            var hashBase = HashBase$2;

            var inherits$b = inherits_browser.exports;
            var HashBase$1 = hashBase;
            var Buffer$f = safeBuffer$1.exports.Buffer;
            var ARRAY16$1 = new Array(16);

            function MD5$2() {
              HashBase$1.call(this, 64); // state

              this._a = 0x67452301;
              this._b = 0xefcdab89;
              this._c = 0x98badcfe;
              this._d = 0x10325476;
            }

            inherits$b(MD5$2, HashBase$1);

            MD5$2.prototype._update = function () {
              var M = ARRAY16$1;

              for (var i = 0; i < 16; ++i) {
                M[i] = this._block.readInt32LE(i * 4);
              }

              var a = this._a;
              var b = this._b;
              var c = this._c;
              var d = this._d;
              a = fnF(a, b, c, d, M[0], 0xd76aa478, 7);
              d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12);
              c = fnF(c, d, a, b, M[2], 0x242070db, 17);
              b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22);
              a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7);
              d = fnF(d, a, b, c, M[5], 0x4787c62a, 12);
              c = fnF(c, d, a, b, M[6], 0xa8304613, 17);
              b = fnF(b, c, d, a, M[7], 0xfd469501, 22);
              a = fnF(a, b, c, d, M[8], 0x698098d8, 7);
              d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12);
              c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17);
              b = fnF(b, c, d, a, M[11], 0x895cd7be, 22);
              a = fnF(a, b, c, d, M[12], 0x6b901122, 7);
              d = fnF(d, a, b, c, M[13], 0xfd987193, 12);
              c = fnF(c, d, a, b, M[14], 0xa679438e, 17);
              b = fnF(b, c, d, a, M[15], 0x49b40821, 22);
              a = fnG(a, b, c, d, M[1], 0xf61e2562, 5);
              d = fnG(d, a, b, c, M[6], 0xc040b340, 9);
              c = fnG(c, d, a, b, M[11], 0x265e5a51, 14);
              b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20);
              a = fnG(a, b, c, d, M[5], 0xd62f105d, 5);
              d = fnG(d, a, b, c, M[10], 0x02441453, 9);
              c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14);
              b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20);
              a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5);
              d = fnG(d, a, b, c, M[14], 0xc33707d6, 9);
              c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14);
              b = fnG(b, c, d, a, M[8], 0x455a14ed, 20);
              a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5);
              d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9);
              c = fnG(c, d, a, b, M[7], 0x676f02d9, 14);
              b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20);
              a = fnH(a, b, c, d, M[5], 0xfffa3942, 4);
              d = fnH(d, a, b, c, M[8], 0x8771f681, 11);
              c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16);
              b = fnH(b, c, d, a, M[14], 0xfde5380c, 23);
              a = fnH(a, b, c, d, M[1], 0xa4beea44, 4);
              d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11);
              c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16);
              b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23);
              a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4);
              d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11);
              c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16);
              b = fnH(b, c, d, a, M[6], 0x04881d05, 23);
              a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4);
              d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11);
              c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16);
              b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23);
              a = fnI(a, b, c, d, M[0], 0xf4292244, 6);
              d = fnI(d, a, b, c, M[7], 0x432aff97, 10);
              c = fnI(c, d, a, b, M[14], 0xab9423a7, 15);
              b = fnI(b, c, d, a, M[5], 0xfc93a039, 21);
              a = fnI(a, b, c, d, M[12], 0x655b59c3, 6);
              d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10);
              c = fnI(c, d, a, b, M[10], 0xffeff47d, 15);
              b = fnI(b, c, d, a, M[1], 0x85845dd1, 21);
              a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6);
              d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10);
              c = fnI(c, d, a, b, M[6], 0xa3014314, 15);
              b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21);
              a = fnI(a, b, c, d, M[4], 0xf7537e82, 6);
              d = fnI(d, a, b, c, M[11], 0xbd3af235, 10);
              c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15);
              b = fnI(b, c, d, a, M[9], 0xeb86d391, 21);
              this._a = this._a + a | 0;
              this._b = this._b + b | 0;
              this._c = this._c + c | 0;
              this._d = this._d + d | 0;
            };

            MD5$2.prototype._digest = function () {
              // create padding and handle blocks
              this._block[this._blockOffset++] = 0x80;

              if (this._blockOffset > 56) {
                this._block.fill(0, this._blockOffset, 64);

                this._update();

                this._blockOffset = 0;
              }

              this._block.fill(0, this._blockOffset, 56);

              this._block.writeUInt32LE(this._length[0], 56);

              this._block.writeUInt32LE(this._length[1], 60);

              this._update(); // produce result


              var buffer = Buffer$f.allocUnsafe(16);
              buffer.writeInt32LE(this._a, 0);
              buffer.writeInt32LE(this._b, 4);
              buffer.writeInt32LE(this._c, 8);
              buffer.writeInt32LE(this._d, 12);
              return buffer;
            };

            function rotl$1(x, n) {
              return x << n | x >>> 32 - n;
            }

            function fnF(a, b, c, d, m, k, s) {
              return rotl$1(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;
            }

            function fnG(a, b, c, d, m, k, s) {
              return rotl$1(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;
            }

            function fnH(a, b, c, d, m, k, s) {
              return rotl$1(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;
            }

            function fnI(a, b, c, d, m, k, s) {
              return rotl$1(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;
            }

            var md5_js = MD5$2;

            var Buffer$e = require$$0$4.Buffer;
            var inherits$a = inherits_browser.exports;
            var HashBase = hashBase;
            var ARRAY16 = new Array(16);
            var zl = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];
            var zr = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];
            var sl = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];
            var sr = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
            var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e];
            var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000];

            function RIPEMD160$3() {
              HashBase.call(this, 64); // state

              this._a = 0x67452301;
              this._b = 0xefcdab89;
              this._c = 0x98badcfe;
              this._d = 0x10325476;
              this._e = 0xc3d2e1f0;
            }

            inherits$a(RIPEMD160$3, HashBase);

            RIPEMD160$3.prototype._update = function () {
              var words = ARRAY16;

              for (var j = 0; j < 16; ++j) {
                words[j] = this._block.readInt32LE(j * 4);
              }

              var al = this._a | 0;
              var bl = this._b | 0;
              var cl = this._c | 0;
              var dl = this._d | 0;
              var el = this._e | 0;
              var ar = this._a | 0;
              var br = this._b | 0;
              var cr = this._c | 0;
              var dr = this._d | 0;
              var er = this._e | 0; // computation

              for (var i = 0; i < 80; i += 1) {
                var tl;
                var tr;

                if (i < 16) {
                  tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
                  tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
                } else if (i < 32) {
                  tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
                  tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
                } else if (i < 48) {
                  tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
                  tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
                } else if (i < 64) {
                  tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
                  tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
                } else {
                  // if (i<80) {
                  tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
                  tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
                }

                al = el;
                el = dl;
                dl = rotl(cl, 10);
                cl = bl;
                bl = tl;
                ar = er;
                er = dr;
                dr = rotl(cr, 10);
                cr = br;
                br = tr;
              } // update state


              var t = this._b + cl + dr | 0;
              this._b = this._c + dl + er | 0;
              this._c = this._d + el + ar | 0;
              this._d = this._e + al + br | 0;
              this._e = this._a + bl + cr | 0;
              this._a = t;
            };

            RIPEMD160$3.prototype._digest = function () {
              // create padding and handle blocks
              this._block[this._blockOffset++] = 0x80;

              if (this._blockOffset > 56) {
                this._block.fill(0, this._blockOffset, 64);

                this._update();

                this._blockOffset = 0;
              }

              this._block.fill(0, this._blockOffset, 56);

              this._block.writeUInt32LE(this._length[0], 56);

              this._block.writeUInt32LE(this._length[1], 60);

              this._update(); // produce result


              var buffer = Buffer$e.alloc ? Buffer$e.alloc(20) : new Buffer$e(20);
              buffer.writeInt32LE(this._a, 0);
              buffer.writeInt32LE(this._b, 4);
              buffer.writeInt32LE(this._c, 8);
              buffer.writeInt32LE(this._d, 12);
              buffer.writeInt32LE(this._e, 16);
              return buffer;
            };

            function rotl(x, n) {
              return x << n | x >>> 32 - n;
            }

            function fn1(a, b, c, d, e, m, k, s) {
              return rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
            }

            function fn2(a, b, c, d, e, m, k, s) {
              return rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
            }

            function fn3(a, b, c, d, e, m, k, s) {
              return rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
            }

            function fn4(a, b, c, d, e, m, k, s) {
              return rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
            }

            function fn5(a, b, c, d, e, m, k, s) {
              return rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
            }

            var ripemd160$1 = RIPEMD160$3;

            var sha_js = {exports: {}};

            var Buffer$d = safeBuffer$1.exports.Buffer; // prototype class for hash functions

            function Hash$9(blockSize, finalSize) {
              this._block = Buffer$d.alloc(blockSize);
              this._finalSize = finalSize;
              this._blockSize = blockSize;
              this._len = 0;
            }

            Hash$9.prototype.update = function (data, enc) {
              if (typeof data === 'string') {
                enc = enc || 'utf8';
                data = Buffer$d.from(data, enc);
              }

              var block = this._block;
              var blockSize = this._blockSize;
              var length = data.length;
              var accum = this._len;

              for (var offset = 0; offset < length;) {
                var assigned = accum % blockSize;
                var remainder = Math.min(length - offset, blockSize - assigned);

                for (var i = 0; i < remainder; i++) {
                  block[assigned + i] = data[offset + i];
                }

                accum += remainder;
                offset += remainder;

                if (accum % blockSize === 0) {
                  this._update(block);
                }
              }

              this._len += length;
              return this;
            };

            Hash$9.prototype.digest = function (enc) {
              var rem = this._len % this._blockSize;
              this._block[rem] = 0x80; // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
              // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize

              this._block.fill(0, rem + 1);

              if (rem >= this._finalSize) {
                this._update(this._block);

                this._block.fill(0);
              }

              var bits = this._len * 8; // uint32

              if (bits <= 0xffffffff) {
                this._block.writeUInt32BE(bits, this._blockSize - 4); // uint64

              } else {
                var lowBits = (bits & 0xffffffff) >>> 0;
                var highBits = (bits - lowBits) / 0x100000000;

                this._block.writeUInt32BE(highBits, this._blockSize - 8);

                this._block.writeUInt32BE(lowBits, this._blockSize - 4);
              }

              this._update(this._block);

              var hash = this._hash();

              return enc ? hash.toString(enc) : hash;
            };

            Hash$9.prototype._update = function () {
              throw new Error('_update must be implemented by subclass');
            };

            var hash = Hash$9;

            /*
             * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
             * in FIPS PUB 180-1
             * This source code is derived from sha1.js of the same repository.
             * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
             * operation was added.
             */
            var inherits$9 = inherits_browser.exports;
            var Hash$8 = hash;
            var Buffer$c = safeBuffer$1.exports.Buffer;
            var K$3 = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0];
            var W$5 = new Array(80);

            function Sha() {
              this.init();
              this._w = W$5;
              Hash$8.call(this, 64, 56);
            }

            inherits$9(Sha, Hash$8);

            Sha.prototype.init = function () {
              this._a = 0x67452301;
              this._b = 0xefcdab89;
              this._c = 0x98badcfe;
              this._d = 0x10325476;
              this._e = 0xc3d2e1f0;
              return this;
            };

            function rotl5$1(num) {
              return num << 5 | num >>> 27;
            }

            function rotl30$1(num) {
              return num << 30 | num >>> 2;
            }

            function ft$1(s, b, c, d) {
              if (s === 0) return b & c | ~b & d;
              if (s === 2) return b & c | b & d | c & d;
              return b ^ c ^ d;
            }

            Sha.prototype._update = function (M) {
              var W = this._w;
              var a = this._a | 0;
              var b = this._b | 0;
              var c = this._c | 0;
              var d = this._d | 0;
              var e = this._e | 0;

              for (var i = 0; i < 16; ++i) {
                W[i] = M.readInt32BE(i * 4);
              }

              for (; i < 80; ++i) {
                W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
              }

              for (var j = 0; j < 80; ++j) {
                var s = ~~(j / 20);
                var t = rotl5$1(a) + ft$1(s, b, c, d) + e + W[j] + K$3[s] | 0;
                e = d;
                d = c;
                c = rotl30$1(b);
                b = a;
                a = t;
              }

              this._a = a + this._a | 0;
              this._b = b + this._b | 0;
              this._c = c + this._c | 0;
              this._d = d + this._d | 0;
              this._e = e + this._e | 0;
            };

            Sha.prototype._hash = function () {
              var H = Buffer$c.allocUnsafe(20);
              H.writeInt32BE(this._a | 0, 0);
              H.writeInt32BE(this._b | 0, 4);
              H.writeInt32BE(this._c | 0, 8);
              H.writeInt32BE(this._d | 0, 12);
              H.writeInt32BE(this._e | 0, 16);
              return H;
            };

            var sha$3 = Sha;

            /*
             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
             * in FIPS PUB 180-1
             * Version 2.1a Copyright Paul Johnston 2000 - 2002.
             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
             * Distributed under the BSD License
             * See http://pajhome.org.uk/crypt/md5 for details.
             */
            var inherits$8 = inherits_browser.exports;
            var Hash$7 = hash;
            var Buffer$b = safeBuffer$1.exports.Buffer;
            var K$2 = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0];
            var W$4 = new Array(80);

            function Sha1() {
              this.init();
              this._w = W$4;
              Hash$7.call(this, 64, 56);
            }

            inherits$8(Sha1, Hash$7);

            Sha1.prototype.init = function () {
              this._a = 0x67452301;
              this._b = 0xefcdab89;
              this._c = 0x98badcfe;
              this._d = 0x10325476;
              this._e = 0xc3d2e1f0;
              return this;
            };

            function rotl1(num) {
              return num << 1 | num >>> 31;
            }

            function rotl5(num) {
              return num << 5 | num >>> 27;
            }

            function rotl30(num) {
              return num << 30 | num >>> 2;
            }

            function ft(s, b, c, d) {
              if (s === 0) return b & c | ~b & d;
              if (s === 2) return b & c | b & d | c & d;
              return b ^ c ^ d;
            }

            Sha1.prototype._update = function (M) {
              var W = this._w;
              var a = this._a | 0;
              var b = this._b | 0;
              var c = this._c | 0;
              var d = this._d | 0;
              var e = this._e | 0;

              for (var i = 0; i < 16; ++i) {
                W[i] = M.readInt32BE(i * 4);
              }

              for (; i < 80; ++i) {
                W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);
              }

              for (var j = 0; j < 80; ++j) {
                var s = ~~(j / 20);
                var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K$2[s] | 0;
                e = d;
                d = c;
                c = rotl30(b);
                b = a;
                a = t;
              }

              this._a = a + this._a | 0;
              this._b = b + this._b | 0;
              this._c = c + this._c | 0;
              this._d = d + this._d | 0;
              this._e = e + this._e | 0;
            };

            Sha1.prototype._hash = function () {
              var H = Buffer$b.allocUnsafe(20);
              H.writeInt32BE(this._a | 0, 0);
              H.writeInt32BE(this._b | 0, 4);
              H.writeInt32BE(this._c | 0, 8);
              H.writeInt32BE(this._d | 0, 12);
              H.writeInt32BE(this._e | 0, 16);
              return H;
            };

            var sha1 = Sha1;

            /**
             * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
             * in FIPS 180-2
             * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
             *
             */
            var inherits$7 = inherits_browser.exports;
            var Hash$6 = hash;
            var Buffer$a = safeBuffer$1.exports.Buffer;
            var K$1 = [0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5, 0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174, 0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA, 0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967, 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85, 0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070, 0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3, 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2];
            var W$3 = new Array(64);

            function Sha256$1() {
              this.init();
              this._w = W$3; // new Array(64)

              Hash$6.call(this, 64, 56);
            }

            inherits$7(Sha256$1, Hash$6);

            Sha256$1.prototype.init = function () {
              this._a = 0x6a09e667;
              this._b = 0xbb67ae85;
              this._c = 0x3c6ef372;
              this._d = 0xa54ff53a;
              this._e = 0x510e527f;
              this._f = 0x9b05688c;
              this._g = 0x1f83d9ab;
              this._h = 0x5be0cd19;
              return this;
            };

            function ch(x, y, z) {
              return z ^ x & (y ^ z);
            }

            function maj$1(x, y, z) {
              return x & y | z & (x | y);
            }

            function sigma0$1(x) {
              return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
            }

            function sigma1$1(x) {
              return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
            }

            function gamma0(x) {
              return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
            }

            function gamma1(x) {
              return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
            }

            Sha256$1.prototype._update = function (M) {
              var W = this._w;
              var a = this._a | 0;
              var b = this._b | 0;
              var c = this._c | 0;
              var d = this._d | 0;
              var e = this._e | 0;
              var f = this._f | 0;
              var g = this._g | 0;
              var h = this._h | 0;

              for (var i = 0; i < 16; ++i) {
                W[i] = M.readInt32BE(i * 4);
              }

              for (; i < 64; ++i) {
                W[i] = gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16] | 0;
              }

              for (var j = 0; j < 64; ++j) {
                var T1 = h + sigma1$1(e) + ch(e, f, g) + K$1[j] + W[j] | 0;
                var T2 = sigma0$1(a) + maj$1(a, b, c) | 0;
                h = g;
                g = f;
                f = e;
                e = d + T1 | 0;
                d = c;
                c = b;
                b = a;
                a = T1 + T2 | 0;
              }

              this._a = a + this._a | 0;
              this._b = b + this._b | 0;
              this._c = c + this._c | 0;
              this._d = d + this._d | 0;
              this._e = e + this._e | 0;
              this._f = f + this._f | 0;
              this._g = g + this._g | 0;
              this._h = h + this._h | 0;
            };

            Sha256$1.prototype._hash = function () {
              var H = Buffer$a.allocUnsafe(32);
              H.writeInt32BE(this._a, 0);
              H.writeInt32BE(this._b, 4);
              H.writeInt32BE(this._c, 8);
              H.writeInt32BE(this._d, 12);
              H.writeInt32BE(this._e, 16);
              H.writeInt32BE(this._f, 20);
              H.writeInt32BE(this._g, 24);
              H.writeInt32BE(this._h, 28);
              return H;
            };

            var sha256$1 = Sha256$1;

            /**
             * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
             * in FIPS 180-2
             * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
             *
             */
            var inherits$6 = inherits_browser.exports;
            var Sha256 = sha256$1;
            var Hash$5 = hash;
            var Buffer$9 = safeBuffer$1.exports.Buffer;
            var W$2 = new Array(64);

            function Sha224() {
              this.init();
              this._w = W$2; // new Array(64)

              Hash$5.call(this, 64, 56);
            }

            inherits$6(Sha224, Sha256);

            Sha224.prototype.init = function () {
              this._a = 0xc1059ed8;
              this._b = 0x367cd507;
              this._c = 0x3070dd17;
              this._d = 0xf70e5939;
              this._e = 0xffc00b31;
              this._f = 0x68581511;
              this._g = 0x64f98fa7;
              this._h = 0xbefa4fa4;
              return this;
            };

            Sha224.prototype._hash = function () {
              var H = Buffer$9.allocUnsafe(28);
              H.writeInt32BE(this._a, 0);
              H.writeInt32BE(this._b, 4);
              H.writeInt32BE(this._c, 8);
              H.writeInt32BE(this._d, 12);
              H.writeInt32BE(this._e, 16);
              H.writeInt32BE(this._f, 20);
              H.writeInt32BE(this._g, 24);
              return H;
            };

            var sha224 = Sha224;

            var inherits$5 = inherits_browser.exports;
            var Hash$4 = hash;
            var Buffer$8 = safeBuffer$1.exports.Buffer;
            var K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];
            var W$1 = new Array(160);

            function Sha512() {
              this.init();
              this._w = W$1;
              Hash$4.call(this, 128, 112);
            }

            inherits$5(Sha512, Hash$4);

            Sha512.prototype.init = function () {
              this._ah = 0x6a09e667;
              this._bh = 0xbb67ae85;
              this._ch = 0x3c6ef372;
              this._dh = 0xa54ff53a;
              this._eh = 0x510e527f;
              this._fh = 0x9b05688c;
              this._gh = 0x1f83d9ab;
              this._hh = 0x5be0cd19;
              this._al = 0xf3bcc908;
              this._bl = 0x84caa73b;
              this._cl = 0xfe94f82b;
              this._dl = 0x5f1d36f1;
              this._el = 0xade682d1;
              this._fl = 0x2b3e6c1f;
              this._gl = 0xfb41bd6b;
              this._hl = 0x137e2179;
              return this;
            };

            function Ch(x, y, z) {
              return z ^ x & (y ^ z);
            }

            function maj(x, y, z) {
              return x & y | z & (x | y);
            }

            function sigma0(x, xl) {
              return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
            }

            function sigma1(x, xl) {
              return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
            }

            function Gamma0(x, xl) {
              return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
            }

            function Gamma0l(x, xl) {
              return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
            }

            function Gamma1(x, xl) {
              return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
            }

            function Gamma1l(x, xl) {
              return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
            }

            function getCarry(a, b) {
              return a >>> 0 < b >>> 0 ? 1 : 0;
            }

            Sha512.prototype._update = function (M) {
              var W = this._w;
              var ah = this._ah | 0;
              var bh = this._bh | 0;
              var ch = this._ch | 0;
              var dh = this._dh | 0;
              var eh = this._eh | 0;
              var fh = this._fh | 0;
              var gh = this._gh | 0;
              var hh = this._hh | 0;
              var al = this._al | 0;
              var bl = this._bl | 0;
              var cl = this._cl | 0;
              var dl = this._dl | 0;
              var el = this._el | 0;
              var fl = this._fl | 0;
              var gl = this._gl | 0;
              var hl = this._hl | 0;

              for (var i = 0; i < 32; i += 2) {
                W[i] = M.readInt32BE(i * 4);
                W[i + 1] = M.readInt32BE(i * 4 + 4);
              }

              for (; i < 160; i += 2) {
                var xh = W[i - 15 * 2];
                var xl = W[i - 15 * 2 + 1];
                var gamma0 = Gamma0(xh, xl);
                var gamma0l = Gamma0l(xl, xh);
                xh = W[i - 2 * 2];
                xl = W[i - 2 * 2 + 1];
                var gamma1 = Gamma1(xh, xl);
                var gamma1l = Gamma1l(xl, xh); // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]

                var Wi7h = W[i - 7 * 2];
                var Wi7l = W[i - 7 * 2 + 1];
                var Wi16h = W[i - 16 * 2];
                var Wi16l = W[i - 16 * 2 + 1];
                var Wil = gamma0l + Wi7l | 0;
                var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
                Wil = Wil + gamma1l | 0;
                Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
                Wil = Wil + Wi16l | 0;
                Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;
                W[i] = Wih;
                W[i + 1] = Wil;
              }

              for (var j = 0; j < 160; j += 2) {
                Wih = W[j];
                Wil = W[j + 1];
                var majh = maj(ah, bh, ch);
                var majl = maj(al, bl, cl);
                var sigma0h = sigma0(ah, al);
                var sigma0l = sigma0(al, ah);
                var sigma1h = sigma1(eh, el);
                var sigma1l = sigma1(el, eh); // t1 = h + sigma1 + ch + K[j] + W[j]

                var Kih = K[j];
                var Kil = K[j + 1];
                var chh = Ch(eh, fh, gh);
                var chl = Ch(el, fl, gl);
                var t1l = hl + sigma1l | 0;
                var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;
                t1l = t1l + chl | 0;
                t1h = t1h + chh + getCarry(t1l, chl) | 0;
                t1l = t1l + Kil | 0;
                t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
                t1l = t1l + Wil | 0;
                t1h = t1h + Wih + getCarry(t1l, Wil) | 0; // t2 = sigma0 + maj

                var t2l = sigma0l + majl | 0;
                var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;
                hh = gh;
                hl = gl;
                gh = fh;
                gl = fl;
                fh = eh;
                fl = el;
                el = dl + t1l | 0;
                eh = dh + t1h + getCarry(el, dl) | 0;
                dh = ch;
                dl = cl;
                ch = bh;
                cl = bl;
                bh = ah;
                bl = al;
                al = t1l + t2l | 0;
                ah = t1h + t2h + getCarry(al, t1l) | 0;
              }

              this._al = this._al + al | 0;
              this._bl = this._bl + bl | 0;
              this._cl = this._cl + cl | 0;
              this._dl = this._dl + dl | 0;
              this._el = this._el + el | 0;
              this._fl = this._fl + fl | 0;
              this._gl = this._gl + gl | 0;
              this._hl = this._hl + hl | 0;
              this._ah = this._ah + ah + getCarry(this._al, al) | 0;
              this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;
              this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;
              this._dh = this._dh + dh + getCarry(this._dl, dl) | 0;
              this._eh = this._eh + eh + getCarry(this._el, el) | 0;
              this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;
              this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;
              this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;
            };

            Sha512.prototype._hash = function () {
              var H = Buffer$8.allocUnsafe(64);

              function writeInt64BE(h, l, offset) {
                H.writeInt32BE(h, offset);
                H.writeInt32BE(l, offset + 4);
              }

              writeInt64BE(this._ah, this._al, 0);
              writeInt64BE(this._bh, this._bl, 8);
              writeInt64BE(this._ch, this._cl, 16);
              writeInt64BE(this._dh, this._dl, 24);
              writeInt64BE(this._eh, this._el, 32);
              writeInt64BE(this._fh, this._fl, 40);
              writeInt64BE(this._gh, this._gl, 48);
              writeInt64BE(this._hh, this._hl, 56);
              return H;
            };

            var sha512 = Sha512;

            var inherits$4 = inherits_browser.exports;
            var SHA512 = sha512;
            var Hash$3 = hash;
            var Buffer$7 = safeBuffer$1.exports.Buffer;
            var W = new Array(160);

            function Sha384() {
              this.init();
              this._w = W;
              Hash$3.call(this, 128, 112);
            }

            inherits$4(Sha384, SHA512);

            Sha384.prototype.init = function () {
              this._ah = 0xcbbb9d5d;
              this._bh = 0x629a292a;
              this._ch = 0x9159015a;
              this._dh = 0x152fecd8;
              this._eh = 0x67332667;
              this._fh = 0x8eb44a87;
              this._gh = 0xdb0c2e0d;
              this._hh = 0x47b5481d;
              this._al = 0xc1059ed8;
              this._bl = 0x367cd507;
              this._cl = 0x3070dd17;
              this._dl = 0xf70e5939;
              this._el = 0xffc00b31;
              this._fl = 0x68581511;
              this._gl = 0x64f98fa7;
              this._hl = 0xbefa4fa4;
              return this;
            };

            Sha384.prototype._hash = function () {
              var H = Buffer$7.allocUnsafe(48);

              function writeInt64BE(h, l, offset) {
                H.writeInt32BE(h, offset);
                H.writeInt32BE(l, offset + 4);
              }

              writeInt64BE(this._ah, this._al, 0);
              writeInt64BE(this._bh, this._bl, 8);
              writeInt64BE(this._ch, this._cl, 16);
              writeInt64BE(this._dh, this._dl, 24);
              writeInt64BE(this._eh, this._el, 32);
              writeInt64BE(this._fh, this._fl, 40);
              return H;
            };

            var sha384 = Sha384;

            var exports$1 = sha_js.exports = function SHA(algorithm) {
              algorithm = algorithm.toLowerCase();
              var Algorithm = exports$1[algorithm];
              if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)');
              return new Algorithm();
            };

            exports$1.sha = sha$3;
            exports$1.sha1 = sha1;
            exports$1.sha224 = sha224;
            exports$1.sha256 = sha256$1;
            exports$1.sha384 = sha384;
            exports$1.sha512 = sha512;

            var require$$2$1 = /*@__PURE__*/getAugmentedNamespace(stringDecoder);

            var Buffer$6 = safeBuffer$1.exports.Buffer;
            var Transform = require$$1$1.Transform;
            var StringDecoder = require$$2$1.StringDecoder;
            var inherits$3 = inherits_browser.exports;

            function CipherBase(hashMode) {
              Transform.call(this);
              this.hashMode = typeof hashMode === 'string';

              if (this.hashMode) {
                this[hashMode] = this._finalOrDigest;
              } else {
                this["final"] = this._finalOrDigest;
              }

              if (this._final) {
                this.__final = this._final;
                this._final = null;
              }

              this._decoder = null;
              this._encoding = null;
            }

            inherits$3(CipherBase, Transform);

            CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
              if (typeof data === 'string') {
                data = Buffer$6.from(data, inputEnc);
              }

              var outData = this._update(data);

              if (this.hashMode) return this;

              if (outputEnc) {
                outData = this._toString(outData, outputEnc);
              }

              return outData;
            };

            CipherBase.prototype.setAutoPadding = function () {};

            CipherBase.prototype.getAuthTag = function () {
              throw new Error('trying to get auth tag in unsupported state');
            };

            CipherBase.prototype.setAuthTag = function () {
              throw new Error('trying to set auth tag in unsupported state');
            };

            CipherBase.prototype.setAAD = function () {
              throw new Error('trying to set aad in unsupported state');
            };

            CipherBase.prototype._transform = function (data, _, next) {
              var err;

              try {
                if (this.hashMode) {
                  this._update(data);
                } else {
                  this.push(this._update(data));
                }
              } catch (e) {
                err = e;
              } finally {
                next(err);
              }
            };

            CipherBase.prototype._flush = function (done) {
              var err;

              try {
                this.push(this.__final());
              } catch (e) {
                err = e;
              }

              done(err);
            };

            CipherBase.prototype._finalOrDigest = function (outputEnc) {
              var outData = this.__final() || Buffer$6.alloc(0);

              if (outputEnc) {
                outData = this._toString(outData, outputEnc, true);
              }

              return outData;
            };

            CipherBase.prototype._toString = function (value, enc, fin) {
              if (!this._decoder) {
                this._decoder = new StringDecoder(enc);
                this._encoding = enc;
              }

              if (this._encoding !== enc) throw new Error('can\'t switch encodings');

              var out = this._decoder.write(value);

              if (fin) {
                out += this._decoder.end();
              }

              return out;
            };

            var cipherBase = CipherBase;

            var inherits$2 = inherits_browser.exports;
            var MD5$1 = md5_js;
            var RIPEMD160$2 = ripemd160$1;
            var sha$2 = sha_js.exports;
            var Base$2 = cipherBase;

            function Hash$2(hash) {
              Base$2.call(this, 'digest');
              this._hash = hash;
            }

            inherits$2(Hash$2, Base$2);

            Hash$2.prototype._update = function (data) {
              this._hash.update(data);
            };

            Hash$2.prototype._final = function () {
              return this._hash.digest();
            };

            var browser$2 = function createHash(alg) {
              alg = alg.toLowerCase();
              if (alg === 'md5') return new MD5$1();
              if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160$2();
              return new Hash$2(sha$2(alg));
            };

            (function (exports) {

              var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
                if (k2 === undefined) k2 = k;
                Object.defineProperty(o, k2, {
                  enumerable: true,
                  get: function get() {
                    return m[k];
                  }
                });
              } : function (o, m, k, k2) {
                if (k2 === undefined) k2 = k;
                o[k2] = m[k];
              });

              var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function (o, v) {
                Object.defineProperty(o, "default", {
                  enumerable: true,
                  value: v
                });
              } : function (o, v) {
                o["default"] = v;
              });

              var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
                if (mod && mod.__esModule) return mod;
                var result = {};
                if (mod != null) for (var k in mod) {
                  if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                }

                __setModuleDefault(result, mod);

                return result;
              };

              Object.defineProperty(exports, "__esModule", {
                value: true
              });
              exports.rlphash = exports.ripemd160FromArray = exports.ripemd160FromString = exports.ripemd160 = exports.sha256FromArray = exports.sha256FromString = exports.sha256 = exports.keccakFromArray = exports.keccakFromHexString = exports.keccakFromString = exports.keccak256 = exports.keccak = void 0;
              var keccak_1 = keccak$2;
              var createHash = browser$2;

              var rlp = __importStar(dist_browser);

              var bytes_1 = bytes;
              var helpers_1 = helpers;
              /**
               * Creates Keccak hash of a Buffer input
               * @param a The input data (Buffer)
               * @param bits (number = 256) The Keccak width
               */

              var keccak = function keccak(a) {
                var bits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 256;
                (0, helpers_1.assertIsBuffer)(a);

                switch (bits) {
                  case 224:
                    {
                      return (0, keccak_1.keccak224)(a);
                    }

                  case 256:
                    {
                      return (0, keccak_1.keccak256)(a);
                    }

                  case 384:
                    {
                      return (0, keccak_1.keccak384)(a);
                    }

                  case 512:
                    {
                      return (0, keccak_1.keccak512)(a);
                    }

                  default:
                    {
                      throw new Error("Invald algorithm: keccak".concat(bits));
                    }
                }
              };

              exports.keccak = keccak;
              /**
               * Creates Keccak-256 hash of the input, alias for keccak(a, 256).
               * @param a The input data (Buffer)
               */

              var keccak256 = function keccak256(a) {
                return (0, exports.keccak)(a);
              };

              exports.keccak256 = keccak256;
              /**
               * Creates Keccak hash of a utf-8 string input
               * @param a The input data (String)
               * @param bits (number = 256) The Keccak width
               */

              var keccakFromString = function keccakFromString(a) {
                var bits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 256;
                (0, helpers_1.assertIsString)(a);
                var buf = Buffer$i.from(a, 'utf8');
                return (0, exports.keccak)(buf, bits);
              };

              exports.keccakFromString = keccakFromString;
              /**
               * Creates Keccak hash of an 0x-prefixed string input
               * @param a The input data (String)
               * @param bits (number = 256) The Keccak width
               */

              var keccakFromHexString = function keccakFromHexString(a) {
                var bits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 256;
                (0, helpers_1.assertIsHexString)(a);
                return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);
              };

              exports.keccakFromHexString = keccakFromHexString;
              /**
               * Creates Keccak hash of a number array input
               * @param a The input data (number[])
               * @param bits (number = 256) The Keccak width
               */

              var keccakFromArray = function keccakFromArray(a) {
                var bits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 256;
                (0, helpers_1.assertIsArray)(a);
                return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);
              };

              exports.keccakFromArray = keccakFromArray;
              /**
               * Creates SHA256 hash of an input.
               * @param  a The input data (Buffer|Array|String)
               */

              var _sha256 = function _sha256(a) {
                a = (0, bytes_1.toBuffer)(a);
                return createHash('sha256').update(a).digest();
              };
              /**
               * Creates SHA256 hash of a Buffer input.
               * @param a The input data (Buffer)
               */


              var sha256 = function sha256(a) {
                (0, helpers_1.assertIsBuffer)(a);
                return _sha256(a);
              };

              exports.sha256 = sha256;
              /**
               * Creates SHA256 hash of a string input.
               * @param a The input data (string)
               */

              var sha256FromString = function sha256FromString(a) {
                (0, helpers_1.assertIsString)(a);
                return _sha256(a);
              };

              exports.sha256FromString = sha256FromString;
              /**
               * Creates SHA256 hash of a number[] input.
               * @param a The input data (number[])
               */

              var sha256FromArray = function sha256FromArray(a) {
                (0, helpers_1.assertIsArray)(a);
                return _sha256(a);
              };

              exports.sha256FromArray = sha256FromArray;
              /**
               * Creates RIPEMD160 hash of the input.
               * @param a The input data (Buffer|Array|String|Number)
               * @param padded Whether it should be padded to 256 bits or not
               */

              var _ripemd160 = function _ripemd160(a, padded) {
                a = (0, bytes_1.toBuffer)(a);
                var hash = createHash('rmd160').update(a).digest();

                if (padded === true) {
                  return (0, bytes_1.setLengthLeft)(hash, 32);
                } else {
                  return hash;
                }
              };
              /**
               * Creates RIPEMD160 hash of a Buffer input.
               * @param a The input data (Buffer)
               * @param padded Whether it should be padded to 256 bits or not
               */


              var ripemd160 = function ripemd160(a, padded) {
                (0, helpers_1.assertIsBuffer)(a);
                return _ripemd160(a, padded);
              };

              exports.ripemd160 = ripemd160;
              /**
               * Creates RIPEMD160 hash of a string input.
               * @param a The input data (String)
               * @param padded Whether it should be padded to 256 bits or not
               */

              var ripemd160FromString = function ripemd160FromString(a, padded) {
                (0, helpers_1.assertIsString)(a);
                return _ripemd160(a, padded);
              };

              exports.ripemd160FromString = ripemd160FromString;
              /**
               * Creates RIPEMD160 hash of a number[] input.
               * @param a The input data (number[])
               * @param padded Whether it should be padded to 256 bits or not
               */

              var ripemd160FromArray = function ripemd160FromArray(a, padded) {
                (0, helpers_1.assertIsArray)(a);
                return _ripemd160(a, padded);
              };

              exports.ripemd160FromArray = ripemd160FromArray;
              /**
               * Creates SHA-3 hash of the RLP encoded version of the input.
               * @param a The input data
               */

              var rlphash = function rlphash(a) {
                return (0, exports.keccak)(rlp.encode(a));
              };

              exports.rlphash = rlphash;
            })(hash$1);

            var types = {};

            (function (exports) {

              var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
                return mod && mod.__esModule ? mod : {
                  "default": mod
                };
              };

              Object.defineProperty(exports, "__esModule", {
                value: true
              });
              exports.toType = exports.TypeOutput = exports.bnToRlp = exports.bnToUnpaddedBuffer = exports.bnToHex = void 0;

              var bn_js_1 = __importDefault(bn.exports);

              var internal_1 = internal;
              var bytes_1 = bytes;
              /**
               * Convert BN to 0x-prefixed hex string.
               */

              function bnToHex(value) {
                return "0x".concat(value.toString(16));
              }

              exports.bnToHex = bnToHex;
              /**
               * Convert value from BN to an unpadded Buffer
               * (useful for RLP transport)
               * @param value value to convert
               */

              function bnToUnpaddedBuffer(value) {
                // Using `bn.toArrayLike(Buffer)` instead of `bn.toBuffer()`
                // for compatibility with browserify and similar tools
                return (0, bytes_1.unpadBuffer)(value.toArrayLike(Buffer$i));
              }

              exports.bnToUnpaddedBuffer = bnToUnpaddedBuffer;
              /**
               * Deprecated alias for {@link bnToUnpaddedBuffer}
               * @deprecated
               */

              function bnToRlp(value) {
                return bnToUnpaddedBuffer(value);
              }

              exports.bnToRlp = bnToRlp;
              /**
               * Type output options
               */

              var TypeOutput;

              (function (TypeOutput) {
                TypeOutput[TypeOutput["Number"] = 0] = "Number";
                TypeOutput[TypeOutput["BN"] = 1] = "BN";
                TypeOutput[TypeOutput["Buffer"] = 2] = "Buffer";
                TypeOutput[TypeOutput["PrefixedHexString"] = 3] = "PrefixedHexString";
              })(TypeOutput = exports.TypeOutput || (exports.TypeOutput = {}));

              function toType(input, outputType) {
                if (input === null) {
                  return null;
                }

                if (input === undefined) {
                  return undefined;
                }

                if (typeof input === 'string' && !(0, internal_1.isHexString)(input)) {
                  throw new Error("A string must be provided with a 0x-prefix, given: ".concat(input));
                } else if (typeof input === 'number' && !Number.isSafeInteger(input)) {
                  throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');
                }

                var output = (0, bytes_1.toBuffer)(input);

                if (outputType === TypeOutput.Buffer) {
                  return output;
                } else if (outputType === TypeOutput.BN) {
                  return new bn_js_1["default"](output);
                } else if (outputType === TypeOutput.Number) {
                  var bn = new bn_js_1["default"](output);
                  var max = new bn_js_1["default"](Number.MAX_SAFE_INTEGER.toString());

                  if (bn.gt(max)) {
                    throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)');
                  }

                  return bn.toNumber();
                } else {
                  // outputType === TypeOutput.PrefixedHexString
                  return "0x".concat(output.toString('hex'));
                }
              }

              exports.toType = toType;
            })(types);

            (function (exports) {

              var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
                if (k2 === undefined) k2 = k;
                Object.defineProperty(o, k2, {
                  enumerable: true,
                  get: function get() {
                    return m[k];
                  }
                });
              } : function (o, m, k, k2) {
                if (k2 === undefined) k2 = k;
                o[k2] = m[k];
              });

              var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function (o, v) {
                Object.defineProperty(o, "default", {
                  enumerable: true,
                  value: v
                });
              } : function (o, v) {
                o["default"] = v;
              });

              var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
                if (mod && mod.__esModule) return mod;
                var result = {};
                if (mod != null) for (var k in mod) {
                  if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                }

                __setModuleDefault(result, mod);

                return result;
              };

              var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
                return mod && mod.__esModule ? mod : {
                  "default": mod
                };
              };

              Object.defineProperty(exports, "__esModule", {
                value: true
              });
              exports.isZeroAddress = exports.zeroAddress = exports.importPublic = exports.privateToAddress = exports.privateToPublic = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isValidAddress = exports.Account = void 0;

              var assert_1 = __importDefault(require$$0$2);

              var bn_js_1 = __importDefault(bn.exports);

              var rlp = __importStar(dist_browser);

              var secp256k1_1 = secp256k1$1;
              var internal_1 = internal;
              var constants_1 = constants;
              var bytes_1 = bytes;
              var hash_1 = hash$1;
              var helpers_1 = helpers;
              var types_1 = types;

              var Account = /*#__PURE__*/function () {
                /**
                 * This constructor assigns and validates the values.
                 * Use the static factory methods to assist in creating an Account from varying data types.
                 */
                function Account() {
                  var nonce = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new bn_js_1["default"](0);
                  var balance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new bn_js_1["default"](0);
                  var stateRoot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : constants_1.KECCAK256_RLP;
                  var codeHash = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : constants_1.KECCAK256_NULL;

                  _classCallCheck(this, Account);

                  this.nonce = nonce;
                  this.balance = balance;
                  this.stateRoot = stateRoot;
                  this.codeHash = codeHash;

                  this._validate();
                }

                _createClass(Account, [{
                  key: "_validate",
                  value: function _validate() {
                    if (this.nonce.lt(new bn_js_1["default"](0))) {
                      throw new Error('nonce must be greater than zero');
                    }

                    if (this.balance.lt(new bn_js_1["default"](0))) {
                      throw new Error('balance must be greater than zero');
                    }

                    if (this.stateRoot.length !== 32) {
                      throw new Error('stateRoot must have a length of 32');
                    }

                    if (this.codeHash.length !== 32) {
                      throw new Error('codeHash must have a length of 32');
                    }
                  }
                  /**
                   * Returns a Buffer Array of the raw Buffers for the account, in order.
                   */

                }, {
                  key: "raw",
                  value: function raw() {
                    return [(0, types_1.bnToUnpaddedBuffer)(this.nonce), (0, types_1.bnToUnpaddedBuffer)(this.balance), this.stateRoot, this.codeHash];
                  }
                  /**
                   * Returns the RLP serialization of the account as a `Buffer`.
                   */

                }, {
                  key: "serialize",
                  value: function serialize() {
                    return rlp.encode(this.raw());
                  }
                  /**
                   * Returns a `Boolean` determining if the account is a contract.
                   */

                }, {
                  key: "isContract",
                  value: function isContract() {
                    return !this.codeHash.equals(constants_1.KECCAK256_NULL);
                  }
                  /**
                   * Returns a `Boolean` determining if the account is empty complying to the definition of
                   * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):
                   * "An account is considered empty when it has no code and zero nonce and zero balance."
                   */

                }, {
                  key: "isEmpty",
                  value: function isEmpty() {
                    return this.balance.isZero() && this.nonce.isZero() && this.codeHash.equals(constants_1.KECCAK256_NULL);
                  }
                }], [{
                  key: "fromAccountData",
                  value: function fromAccountData(accountData) {
                    var nonce = accountData.nonce,
                        balance = accountData.balance,
                        stateRoot = accountData.stateRoot,
                        codeHash = accountData.codeHash;
                    return new Account(nonce ? new bn_js_1["default"]((0, bytes_1.toBuffer)(nonce)) : undefined, balance ? new bn_js_1["default"]((0, bytes_1.toBuffer)(balance)) : undefined, stateRoot ? (0, bytes_1.toBuffer)(stateRoot) : undefined, codeHash ? (0, bytes_1.toBuffer)(codeHash) : undefined);
                  }
                }, {
                  key: "fromRlpSerializedAccount",
                  value: function fromRlpSerializedAccount(serialized) {
                    var values = rlp.decode(serialized);

                    if (!Array.isArray(values)) {
                      throw new Error('Invalid serialized account input. Must be array');
                    }

                    return this.fromValuesArray(values);
                  }
                }, {
                  key: "fromValuesArray",
                  value: function fromValuesArray(values) {
                    var _values = _slicedToArray(values, 4),
                        nonce = _values[0],
                        balance = _values[1],
                        stateRoot = _values[2],
                        codeHash = _values[3];

                    return new Account(new bn_js_1["default"](nonce), new bn_js_1["default"](balance), stateRoot, codeHash);
                  }
                }]);

                return Account;
              }();

              exports.Account = Account;
              /**
               * Checks if the address is a valid. Accepts checksummed addresses too.
               */

              var isValidAddress = function isValidAddress(hexAddress) {
                try {
                  (0, helpers_1.assertIsString)(hexAddress);
                } catch (e) {
                  return false;
                }

                return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);
              };

              exports.isValidAddress = isValidAddress;
              /**
               * Returns a checksummed address.
               *
               * If an eip1191ChainId is provided, the chainId will be included in the checksum calculation. This
               * has the effect of checksummed addresses for one chain having invalid checksums for others.
               * For more details see [EIP-1191](https://eips.ethereum.org/EIPS/eip-1191).
               *
               * WARNING: Checksums with and without the chainId will differ and the EIP-1191 checksum is not
               * backwards compatible to the original widely adopted checksum format standard introduced in
               * [EIP-55](https://eips.ethereum.org/EIPS/eip-55), so this will break in existing applications.
               * Usage of this EIP is therefore discouraged unless you have a very targeted use case.
               */

              var toChecksumAddress = function toChecksumAddress(hexAddress, eip1191ChainId) {
                (0, helpers_1.assertIsHexString)(hexAddress);
                var address = (0, internal_1.stripHexPrefix)(hexAddress).toLowerCase();
                var prefix = '';

                if (eip1191ChainId) {
                  var chainId = (0, types_1.toType)(eip1191ChainId, types_1.TypeOutput.BN);
                  prefix = chainId.toString() + '0x';
                }

                var hash = (0, hash_1.keccakFromString)(prefix + address).toString('hex');
                var ret = '0x';

                for (var i = 0; i < address.length; i++) {
                  if (parseInt(hash[i], 16) >= 8) {
                    ret += address[i].toUpperCase();
                  } else {
                    ret += address[i];
                  }
                }

                return ret;
              };

              exports.toChecksumAddress = toChecksumAddress;
              /**
               * Checks if the address is a valid checksummed address.
               *
               * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.
               */

              var isValidChecksumAddress = function isValidChecksumAddress(hexAddress, eip1191ChainId) {
                return (0, exports.isValidAddress)(hexAddress) && (0, exports.toChecksumAddress)(hexAddress, eip1191ChainId) === hexAddress;
              };

              exports.isValidChecksumAddress = isValidChecksumAddress;
              /**
               * Generates an address of a newly created contract.
               * @param from The address which is creating this new address
               * @param nonce The nonce of the from account
               */

              var generateAddress = function generateAddress(from, nonce) {
                (0, helpers_1.assertIsBuffer)(from);
                (0, helpers_1.assertIsBuffer)(nonce);
                var nonceBN = new bn_js_1["default"](nonce);

                if (nonceBN.isZero()) {
                  // in RLP we want to encode null in the case of zero nonce
                  // read the RLP documentation for an answer if you dare
                  return (0, hash_1.rlphash)([from, null]).slice(-20);
                } // Only take the lower 160bits of the hash


                return (0, hash_1.rlphash)([from, Buffer$i.from(nonceBN.toArray())]).slice(-20);
              };

              exports.generateAddress = generateAddress;
              /**
               * Generates an address for a contract created using CREATE2.
               * @param from The address which is creating this new address
               * @param salt A salt
               * @param initCode The init code of the contract being created
               */

              var generateAddress2 = function generateAddress2(from, salt, initCode) {
                (0, helpers_1.assertIsBuffer)(from);
                (0, helpers_1.assertIsBuffer)(salt);
                (0, helpers_1.assertIsBuffer)(initCode);
                (0, assert_1["default"])(from.length === 20);
                (0, assert_1["default"])(salt.length === 32);
                var address = (0, hash_1.keccak256)(Buffer$i.concat([Buffer$i.from('ff', 'hex'), from, salt, (0, hash_1.keccak256)(initCode)]));
                return address.slice(-20);
              };

              exports.generateAddress2 = generateAddress2;
              /**
               * Checks if the private key satisfies the rules of the curve secp256k1.
               */

              var isValidPrivate = function isValidPrivate(privateKey) {
                return (0, secp256k1_1.privateKeyVerify)(privateKey);
              };

              exports.isValidPrivate = isValidPrivate;
              /**
               * Checks if the public key satisfies the rules of the curve secp256k1
               * and the requirements of Ethereum.
               * @param publicKey The two points of an uncompressed key, unless sanitize is enabled
               * @param sanitize Accept public keys in other formats
               */

              var isValidPublic = function isValidPublic(publicKey) {
                var sanitize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                (0, helpers_1.assertIsBuffer)(publicKey);

                if (publicKey.length === 64) {
                  // Convert to SEC1 for secp256k1
                  return (0, secp256k1_1.publicKeyVerify)(Buffer$i.concat([Buffer$i.from([4]), publicKey]));
                }

                if (!sanitize) {
                  return false;
                }

                return (0, secp256k1_1.publicKeyVerify)(publicKey);
              };

              exports.isValidPublic = isValidPublic;
              /**
               * Returns the ethereum address of a given public key.
               * Accepts "Ethereum public keys" and SEC1 encoded keys.
               * @param pubKey The two points of an uncompressed key, unless sanitize is enabled
               * @param sanitize Accept public keys in other formats
               */

              var pubToAddress = function pubToAddress(pubKey) {
                var sanitize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                (0, helpers_1.assertIsBuffer)(pubKey);

                if (sanitize && pubKey.length !== 64) {
                  pubKey = Buffer$i.from((0, secp256k1_1.publicKeyConvert)(pubKey, false).slice(1));
                }

                (0, assert_1["default"])(pubKey.length === 64); // Only take the lower 160bits of the hash

                return (0, hash_1.keccak)(pubKey).slice(-20);
              };

              exports.pubToAddress = pubToAddress;
              exports.publicToAddress = exports.pubToAddress;
              /**
               * Returns the ethereum public key of a given private key.
               * @param privateKey A private key must be 256 bits wide
               */

              var privateToPublic = function privateToPublic(privateKey) {
                (0, helpers_1.assertIsBuffer)(privateKey); // skip the type flag and use the X, Y points

                return Buffer$i.from((0, secp256k1_1.publicKeyCreate)(privateKey, false)).slice(1);
              };

              exports.privateToPublic = privateToPublic;
              /**
               * Returns the ethereum address of a given private key.
               * @param privateKey A private key must be 256 bits wide
               */

              var privateToAddress = function privateToAddress(privateKey) {
                return (0, exports.publicToAddress)((0, exports.privateToPublic)(privateKey));
              };

              exports.privateToAddress = privateToAddress;
              /**
               * Converts a public key to the Ethereum format.
               */

              var importPublic = function importPublic(publicKey) {
                (0, helpers_1.assertIsBuffer)(publicKey);

                if (publicKey.length !== 64) {
                  publicKey = Buffer$i.from((0, secp256k1_1.publicKeyConvert)(publicKey, false).slice(1));
                }

                return publicKey;
              };

              exports.importPublic = importPublic;
              /**
               * Returns the zero address.
               */

              var zeroAddress = function zeroAddress() {
                var addressLength = 20;
                var addr = (0, bytes_1.zeros)(addressLength);
                return (0, bytes_1.bufferToHex)(addr);
              };

              exports.zeroAddress = zeroAddress;
              /**
               * Checks if a given address is the zero address.
               */

              var isZeroAddress = function isZeroAddress(hexAddress) {
                try {
                  (0, helpers_1.assertIsString)(hexAddress);
                } catch (e) {
                  return false;
                }

                var zeroAddr = (0, exports.zeroAddress)();
                return zeroAddr === hexAddress;
              };

              exports.isZeroAddress = isZeroAddress;
            })(account);

            /**
             * Strip Minter prefixes
             * @param {string} value
             */

            function mPrefixStrip(value) {
              return value.replace(/^(Mx|Mp|Mt|Mc|Mh)/, '');
            }
            /**
             * Converts Minter prefixed hex string to Buffer
             * @param {string} value
             * @return {Buffer}
             */

            function mToBuffer(value) {
              if (typeof value !== 'string') {
                throw new TypeError('Type error: string expected');
              }

              if (!isMinterPrefixed(value)) {
                throw new Error('Not minter prefixed');
              }

              value = mPrefixStrip(value);
              return Buffer$i.from(value, 'hex');
            }
            /**
             * Attempts to turn a value into a `Buffer`.
             * Supports Minter prefixed hex strings.
             * Otherwise use `ethereumjs-util.toBuffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.
             * @param {*} value
             * @return {Buffer}
             */

            function toBuffer$1(value) {
              if (typeof value === 'string' && isMinterPrefixed(value)) {
                return mToBuffer(value);
              }

              if (typeof value === 'string' && !lib$1.isHexString(value, 0)) {
                // eslint-disable-next-line unicorn/prefer-type-error
                throw new Error('Cannot convert string to buffer. toBuffer only supports Minter-prefixed or 0x-prefixed hex strings. You can pass buffer instead of string.');
              }

              return bytes.toBuffer(value);
            }
            function addressToString(address) {
              address = toBuffer$1(address);
              return "Mx".concat(address.toString('hex'));
            }
            function checkToString(check) {
              check = toBuffer$1(check);
              return "Mc".concat(check.toString('hex'));
            }
            /**
             * Returns the Minter style address string of a given private key
             * @param {Buffer} privateKey A private key must be 256 bits wide
             * @return {string}
             */

            function privateToAddressString(privateKey) {
              return "Mx".concat(account.privateToAddress(privateKey).toString('hex'));
            }
            function isMinterPrefixed(value) {
              return /^(Mx|Mp|Mt|Mc|Mh)[0-9a-fA-F]+$/.test(value);
            }
            /**
             * Checks only prefix, length and hex body.
             * Don't check secp256k1 curve.
             * @param {string} publicKey
             * @return {boolean}
             */

            function isValidPublicKeyString(publicKey) {
              return /^Mp[0-9a-fA-F]{64}$/.test(publicKey);
            }
            function isValidAddress(address) {
              return /^Mx[0-9a-fA-F]{40}$/.test(address);
            }
            function isValidCheck(check) {
              return /^Mc[0-9a-fA-F]+$/.test(check);
            }

            /**
             * Return Minter style public key string
             * @param {Buffer|Uint8Array|string} publicKey
             * @return {string}
             */

            function publicToString(publicKey) {
              publicKey = toBuffer$1(publicKey);

              if (!isBuffer$2(publicKey)) {
                throw new TypeError('Public key should be of type Buffer');
              }

              if (publicKey.length === 64) {
                // Ethereum style to uncompressed
                publicKey = Buffer$i.concat([Buffer$i.from([4]), publicKey]);
              }

              if (publicKey.length === 65) {
                // uncompressed to compressed
                publicKey = Buffer$i.from(elliptic.publicKeyConvert(publicKey, true));
              }

              if (publicKey.length === 33) {
                publicKey = publicKey.slice(1);
              }

              assert$2(publicKey.length === 32);
              return "Mp".concat(publicKey.toString('hex'));
            }

            var big = {exports: {}};

            /*
             *  big.js v6.1.1
             *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.
             *  Copyright (c) 2021 Michael Mclaughlin
             *  https://github.com/MikeMcl/big.js/LICENCE.md
             */

            (function (module) {

              (function (GLOBAL) {

                var Big,

                /************************************** EDITABLE DEFAULTS *****************************************/
                // The default values below must be integers within the stated ranges.

                /*
                 * The maximum number of decimal places (DP) of the results of operations involving division:
                 * div and sqrt, and pow with negative exponents.
                 */
                DP = 20,
                    // 0 to MAX_DP

                /*
                 * The rounding mode (RM) used when rounding to the above decimal places.
                 *
                 *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)
                 *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)
                 *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)
                 *  3  Away from zero.                                  (ROUND_UP)
                 */
                RM = 1,
                    // 0, 1, 2 or 3
                // The maximum value of DP and Big.DP.
                MAX_DP = 1E6,
                    // 0 to 1000000
                // The maximum magnitude of the exponent argument to the pow method.
                MAX_POWER = 1E6,
                    // 1 to 1000000

                /*
                 * The negative exponent (NE) at and beneath which toString returns exponential notation.
                 * (JavaScript numbers: -7)
                 * -1000000 is the minimum recommended exponent value of a Big.
                 */
                NE = -7,
                    // 0 to -1000000

                /*
                 * The positive exponent (PE) at and above which toString returns exponential notation.
                 * (JavaScript numbers: 21)
                 * 1000000 is the maximum recommended exponent value of a Big, but this limit is not enforced.
                 */
                PE = 21,
                    // 0 to 1000000

                /*
                 * When true, an error will be thrown if a primitive number is passed to the Big constructor,
                 * or if valueOf is called, or if toNumber is called on a Big which cannot be converted to a
                 * primitive number without a loss of precision.
                 */
                STRICT = false,
                    // true or false

                /**************************************************************************************************/
                // Error messages.
                NAME = '[big.js] ',
                    INVALID = NAME + 'Invalid ',
                    INVALID_DP = INVALID + 'decimal places',
                    INVALID_RM = INVALID + 'rounding mode',
                    DIV_BY_ZERO = NAME + 'Division by zero',
                    // The shared prototype object.
                P = {},
                    UNDEFINED = void 0,
                    NUMERIC = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;
                /*
                 * Create and return a Big constructor.
                 */

                function _Big_() {
                  /*
                   * The Big constructor and exported function.
                   * Create and return a new instance of a Big number object.
                   *
                   * n {number|string|Big} A numeric value.
                   */
                  function Big(n) {
                    var x = this; // Enable constructor usage without new.

                    if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n); // Duplicate.

                    if (n instanceof Big) {
                      x.s = n.s;
                      x.e = n.e;
                      x.c = n.c.slice();
                    } else {
                      if (typeof n !== 'string') {
                        if (Big.strict === true) {
                          throw TypeError(INVALID + 'number');
                        } // Minus zero?


                        n = n === 0 && 1 / n < 0 ? '-0' : String(n);
                      }

                      parse(x, n);
                    } // Retain a reference to this Big constructor.
                    // Shadow Big.prototype.constructor which points to Object.


                    x.constructor = Big;
                  }

                  Big.prototype = P;
                  Big.DP = DP;
                  Big.RM = RM;
                  Big.NE = NE;
                  Big.PE = PE;
                  Big.strict = STRICT;
                  Big.roundDown = 0;
                  Big.roundHalfUp = 1;
                  Big.roundHalfEven = 2;
                  Big.roundUp = 3;
                  return Big;
                }
                /*
                 * Parse the number or string value passed to a Big constructor.
                 *
                 * x {Big} A Big number instance.
                 * n {number|string} A numeric value.
                 */


                function parse(x, n) {
                  var e, i, nl;

                  if (!NUMERIC.test(n)) {
                    throw Error(INVALID + 'number');
                  } // Determine sign.


                  x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1; // Decimal point?

                  if ((e = n.indexOf('.')) > -1) n = n.replace('.', ''); // Exponential form?

                  if ((i = n.search(/e/i)) > 0) {
                    // Determine exponent.
                    if (e < 0) e = i;
                    e += +n.slice(i + 1);
                    n = n.substring(0, i);
                  } else if (e < 0) {
                    // Integer.
                    e = n.length;
                  }

                  nl = n.length; // Determine leading zeros.

                  for (i = 0; i < nl && n.charAt(i) == '0';) {
                    ++i;
                  }

                  if (i == nl) {
                    // Zero.
                    x.c = [x.e = 0];
                  } else {
                    // Determine trailing zeros.
                    for (; nl > 0 && n.charAt(--nl) == '0';) {
                    }

                    x.e = e - i - 1;
                    x.c = []; // Convert string to array of digits without leading/trailing zeros.

                    for (e = 0; i <= nl;) {
                      x.c[e++] = +n.charAt(i++);
                    }
                  }

                  return x;
                }
                /*
                 * Round Big x to a maximum of sd significant digits using rounding mode rm.
                 *
                 * x {Big} The Big to round.
                 * sd {number} Significant digits: integer, 0 to MAX_DP inclusive.
                 * rm {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
                 * [more] {boolean} Whether the result of division was truncated.
                 */


                function round(x, sd, rm, more) {
                  var xc = x.c;
                  if (rm === UNDEFINED) rm = x.constructor.RM;

                  if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {
                    throw Error(INVALID_RM);
                  }

                  if (sd < 1) {
                    more = rm === 3 && (more || !!xc[0]) || sd === 0 && (rm === 1 && xc[0] >= 5 || rm === 2 && (xc[0] > 5 || xc[0] === 5 && (more || xc[1] !== UNDEFINED)));
                    xc.length = 1;

                    if (more) {
                      // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                      x.e = x.e - sd + 1;
                      xc[0] = 1;
                    } else {
                      // Zero.
                      xc[0] = x.e = 0;
                    }
                  } else if (sd < xc.length) {
                    // xc[sd] is the digit after the digit that may be rounded up.
                    more = rm === 1 && xc[sd] >= 5 || rm === 2 && (xc[sd] > 5 || xc[sd] === 5 && (more || xc[sd + 1] !== UNDEFINED || xc[sd - 1] & 1)) || rm === 3 && (more || !!xc[0]); // Remove any digits after the required precision.

                    xc.length = sd--; // Round up?

                    if (more) {
                      // Rounding up may mean the previous digit has to be rounded up.
                      for (; ++xc[sd] > 9;) {
                        xc[sd] = 0;

                        if (!sd--) {
                          ++x.e;
                          xc.unshift(1);
                        }
                      }
                    } // Remove trailing zeros.


                    for (sd = xc.length; !xc[--sd];) {
                      xc.pop();
                    }
                  }

                  return x;
                }
                /*
                 * Return a string representing the value of Big x in normal or exponential notation.
                 * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.
                 */


                function stringify(x, doExponential, isNonzero) {
                  var e = x.e,
                      s = x.c.join(''),
                      n = s.length; // Exponential notation?

                  if (doExponential) {
                    s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e; // Normal notation.
                  } else if (e < 0) {
                    for (; ++e;) {
                      s = '0' + s;
                    }

                    s = '0.' + s;
                  } else if (e > 0) {
                    if (++e > n) {
                      for (e -= n; e--;) {
                        s += '0';
                      }
                    } else if (e < n) {
                      s = s.slice(0, e) + '.' + s.slice(e);
                    }
                  } else if (n > 1) {
                    s = s.charAt(0) + '.' + s.slice(1);
                  }

                  return x.s < 0 && isNonzero ? '-' + s : s;
                } // Prototype/instance methods

                /*
                 * Return a new Big whose value is the absolute value of this Big.
                 */


                P.abs = function () {
                  var x = new this.constructor(this);
                  x.s = 1;
                  return x;
                };
                /*
                 * Return 1 if the value of this Big is greater than the value of Big y,
                 *       -1 if the value of this Big is less than the value of Big y, or
                 *        0 if they have the same value.
                 */


                P.cmp = function (y) {
                  var isneg,
                      x = this,
                      xc = x.c,
                      yc = (y = new x.constructor(y)).c,
                      i = x.s,
                      j = y.s,
                      k = x.e,
                      l = y.e; // Either zero?

                  if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i; // Signs differ?

                  if (i != j) return i;
                  isneg = i < 0; // Compare exponents.

                  if (k != l) return k > l ^ isneg ? 1 : -1;
                  j = (k = xc.length) < (l = yc.length) ? k : l; // Compare digit by digit.

                  for (i = -1; ++i < j;) {
                    if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;
                  } // Compare lengths.


                  return k == l ? 0 : k > l ^ isneg ? 1 : -1;
                };
                /*
                 * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,
                 * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.
                 */


                P.div = function (y) {
                  var x = this,
                      Big = x.constructor,
                      a = x.c,
                      // dividend
                  b = (y = new Big(y)).c,
                      // divisor
                  k = x.s == y.s ? 1 : -1,
                      dp = Big.DP;

                  if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
                    throw Error(INVALID_DP);
                  } // Divisor is zero?


                  if (!b[0]) {
                    throw Error(DIV_BY_ZERO);
                  } // Dividend is 0? Return +-0.


                  if (!a[0]) {
                    y.s = k;
                    y.c = [y.e = 0];
                    return y;
                  }

                  var bl,
                      bt,
                      n,
                      cmp,
                      ri,
                      bz = b.slice(),
                      ai = bl = b.length,
                      al = a.length,
                      r = a.slice(0, bl),
                      // remainder
                  rl = r.length,
                      q = y,
                      // quotient
                  qc = q.c = [],
                      qi = 0,
                      p = dp + (q.e = x.e - y.e) + 1; // precision of the result

                  q.s = k;
                  k = p < 0 ? 0 : p; // Create version of divisor with leading zero.

                  bz.unshift(0); // Add zeros to make remainder as long as divisor.

                  for (; rl++ < bl;) {
                    r.push(0);
                  }

                  do {
                    // n is how many times the divisor goes into current remainder.
                    for (n = 0; n < 10; n++) {
                      // Compare divisor and remainder.
                      if (bl != (rl = r.length)) {
                        cmp = bl > rl ? 1 : -1;
                      } else {
                        for (ri = -1, cmp = 0; ++ri < bl;) {
                          if (b[ri] != r[ri]) {
                            cmp = b[ri] > r[ri] ? 1 : -1;
                            break;
                          }
                        }
                      } // If divisor < remainder, subtract divisor from remainder.


                      if (cmp < 0) {
                        // Remainder can't be more than 1 digit longer than divisor.
                        // Equalise lengths using divisor with extra leading zero?
                        for (bt = rl == bl ? b : bz; rl;) {
                          if (r[--rl] < bt[rl]) {
                            ri = rl;

                            for (; ri && !r[--ri];) {
                              r[ri] = 9;
                            }

                            --r[ri];
                            r[rl] += 10;
                          }

                          r[rl] -= bt[rl];
                        }

                        for (; !r[0];) {
                          r.shift();
                        }
                      } else {
                        break;
                      }
                    } // Add the digit n to the result array.


                    qc[qi++] = cmp ? n : ++n; // Update the remainder.

                    if (r[0] && cmp) r[rl] = a[ai] || 0;else r = [a[ai]];
                  } while ((ai++ < al || r[0] !== UNDEFINED) && k--); // Leading zero? Do not remove if result is simply zero (qi == 1).


                  if (!qc[0] && qi != 1) {
                    // There can't be more than one zero.
                    qc.shift();
                    q.e--;
                    p--;
                  } // Round?


                  if (qi > p) round(q, p, Big.RM, r[0] !== UNDEFINED);
                  return q;
                };
                /*
                 * Return true if the value of this Big is equal to the value of Big y, otherwise return false.
                 */


                P.eq = function (y) {
                  return this.cmp(y) === 0;
                };
                /*
                 * Return true if the value of this Big is greater than the value of Big y, otherwise return
                 * false.
                 */


                P.gt = function (y) {
                  return this.cmp(y) > 0;
                };
                /*
                 * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise
                 * return false.
                 */


                P.gte = function (y) {
                  return this.cmp(y) > -1;
                };
                /*
                 * Return true if the value of this Big is less than the value of Big y, otherwise return false.
                 */


                P.lt = function (y) {
                  return this.cmp(y) < 0;
                };
                /*
                 * Return true if the value of this Big is less than or equal to the value of Big y, otherwise
                 * return false.
                 */


                P.lte = function (y) {
                  return this.cmp(y) < 1;
                };
                /*
                 * Return a new Big whose value is the value of this Big minus the value of Big y.
                 */


                P.minus = P.sub = function (y) {
                  var i,
                      j,
                      t,
                      xlty,
                      x = this,
                      Big = x.constructor,
                      a = x.s,
                      b = (y = new Big(y)).s; // Signs differ?

                  if (a != b) {
                    y.s = -b;
                    return x.plus(y);
                  }

                  var xc = x.c.slice(),
                      xe = x.e,
                      yc = y.c,
                      ye = y.e; // Either zero?

                  if (!xc[0] || !yc[0]) {
                    if (yc[0]) {
                      y.s = -b;
                    } else if (xc[0]) {
                      y = new Big(x);
                    } else {
                      y.s = 1;
                    }

                    return y;
                  } // Determine which is the bigger number. Prepend zeros to equalise exponents.


                  if (a = xe - ye) {
                    if (xlty = a < 0) {
                      a = -a;
                      t = xc;
                    } else {
                      ye = xe;
                      t = yc;
                    }

                    t.reverse();

                    for (b = a; b--;) {
                      t.push(0);
                    }

                    t.reverse();
                  } else {
                    // Exponents equal. Check digit by digit.
                    j = ((xlty = xc.length < yc.length) ? xc : yc).length;

                    for (a = b = 0; b < j; b++) {
                      if (xc[b] != yc[b]) {
                        xlty = xc[b] < yc[b];
                        break;
                      }
                    }
                  } // x < y? Point xc to the array of the bigger number.


                  if (xlty) {
                    t = xc;
                    xc = yc;
                    yc = t;
                    y.s = -y.s;
                  }
                  /*
                   * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only
                   * needs to start at yc.length.
                   */


                  if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) {
                    xc[i++] = 0;
                  } // Subtract yc from xc.

                  for (b = i; j > a;) {
                    if (xc[--j] < yc[j]) {
                      for (i = j; i && !xc[--i];) {
                        xc[i] = 9;
                      }

                      --xc[i];
                      xc[j] += 10;
                    }

                    xc[j] -= yc[j];
                  } // Remove trailing zeros.


                  for (; xc[--b] === 0;) {
                    xc.pop();
                  } // Remove leading zeros and adjust exponent accordingly.


                  for (; xc[0] === 0;) {
                    xc.shift();
                    --ye;
                  }

                  if (!xc[0]) {
                    // n - n = +0
                    y.s = 1; // Result must be zero.

                    xc = [ye = 0];
                  }

                  y.c = xc;
                  y.e = ye;
                  return y;
                };
                /*
                 * Return a new Big whose value is the value of this Big modulo the value of Big y.
                 */


                P.mod = function (y) {
                  var ygtx,
                      x = this,
                      Big = x.constructor,
                      a = x.s,
                      b = (y = new Big(y)).s;

                  if (!y.c[0]) {
                    throw Error(DIV_BY_ZERO);
                  }

                  x.s = y.s = 1;
                  ygtx = y.cmp(x) == 1;
                  x.s = a;
                  y.s = b;
                  if (ygtx) return new Big(x);
                  a = Big.DP;
                  b = Big.RM;
                  Big.DP = Big.RM = 0;
                  x = x.div(y);
                  Big.DP = a;
                  Big.RM = b;
                  return this.minus(x.times(y));
                };
                /*
                 * Return a new Big whose value is the value of this Big plus the value of Big y.
                 */


                P.plus = P.add = function (y) {
                  var e,
                      k,
                      t,
                      x = this,
                      Big = x.constructor;
                  y = new Big(y); // Signs differ?

                  if (x.s != y.s) {
                    y.s = -y.s;
                    return x.minus(y);
                  }

                  var xe = x.e,
                      xc = x.c,
                      ye = y.e,
                      yc = y.c; // Either zero?

                  if (!xc[0] || !yc[0]) {
                    if (!yc[0]) {
                      if (xc[0]) {
                        y = new Big(x);
                      } else {
                        y.s = x.s;
                      }
                    }

                    return y;
                  }

                  xc = xc.slice(); // Prepend zeros to equalise exponents.
                  // Note: reverse faster than unshifts.

                  if (e = xe - ye) {
                    if (e > 0) {
                      ye = xe;
                      t = yc;
                    } else {
                      e = -e;
                      t = xc;
                    }

                    t.reverse();

                    for (; e--;) {
                      t.push(0);
                    }

                    t.reverse();
                  } // Point xc to the longer array.


                  if (xc.length - yc.length < 0) {
                    t = yc;
                    yc = xc;
                    xc = t;
                  }

                  e = yc.length; // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.

                  for (k = 0; e; xc[e] %= 10) {
                    k = (xc[--e] = xc[e] + yc[e] + k) / 10 | 0;
                  } // No need to check for zero, as +x + +y != 0 && -x + -y != 0


                  if (k) {
                    xc.unshift(k);
                    ++ye;
                  } // Remove trailing zeros.


                  for (e = xc.length; xc[--e] === 0;) {
                    xc.pop();
                  }

                  y.c = xc;
                  y.e = ye;
                  return y;
                };
                /*
                 * Return a Big whose value is the value of this Big raised to the power n.
                 * If n is negative, round to a maximum of Big.DP decimal places using rounding
                 * mode Big.RM.
                 *
                 * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.
                 */


                P.pow = function (n) {
                  var x = this,
                      one = new x.constructor('1'),
                      y = one,
                      isneg = n < 0;

                  if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {
                    throw Error(INVALID + 'exponent');
                  }

                  if (isneg) n = -n;

                  for (;;) {
                    if (n & 1) y = y.times(x);
                    n >>= 1;
                    if (!n) break;
                    x = x.times(x);
                  }

                  return isneg ? one.div(y) : y;
                };
                /*
                 * Return a new Big whose value is the value of this Big rounded to a maximum precision of sd
                 * significant digits using rounding mode rm, or Big.RM if rm is not specified.
                 *
                 * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.
                 * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
                 */


                P.prec = function (sd, rm) {
                  if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
                    throw Error(INVALID + 'precision');
                  }

                  return round(new this.constructor(this), sd, rm);
                };
                /*
                 * Return a new Big whose value is the value of this Big rounded to a maximum of dp decimal places
                 * using rounding mode rm, or Big.RM if rm is not specified.
                 * If dp is negative, round to an integer which is a multiple of 10**-dp.
                 * If dp is not specified, round to 0 decimal places.
                 *
                 * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.
                 * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
                 */


                P.round = function (dp, rm) {
                  if (dp === UNDEFINED) dp = 0;else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {
                    throw Error(INVALID_DP);
                  }
                  return round(new this.constructor(this), dp + this.e + 1, rm);
                };
                /*
                 * Return a new Big whose value is the square root of the value of this Big, rounded, if
                 * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.
                 */


                P.sqrt = function () {
                  var r,
                      c,
                      t,
                      x = this,
                      Big = x.constructor,
                      s = x.s,
                      e = x.e,
                      half = new Big('0.5'); // Zero?

                  if (!x.c[0]) return new Big(x); // Negative?

                  if (s < 0) {
                    throw Error(NAME + 'No square root');
                  } // Estimate.


                  s = Math.sqrt(x + ''); // Math.sqrt underflow/overflow?
                  // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.

                  if (s === 0 || s === 1 / 0) {
                    c = x.c.join('');
                    if (!(c.length + e & 1)) c += '0';
                    s = Math.sqrt(c);
                    e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);
                    r = new Big((s == 1 / 0 ? '5e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);
                  } else {
                    r = new Big(s + '');
                  }

                  e = r.e + (Big.DP += 4); // Newton-Raphson iteration.

                  do {
                    t = r;
                    r = half.times(t.plus(x.div(t)));
                  } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));

                  return round(r, (Big.DP -= 4) + r.e + 1, Big.RM);
                };
                /*
                 * Return a new Big whose value is the value of this Big times the value of Big y.
                 */


                P.times = P.mul = function (y) {
                  var c,
                      x = this,
                      Big = x.constructor,
                      xc = x.c,
                      yc = (y = new Big(y)).c,
                      a = xc.length,
                      b = yc.length,
                      i = x.e,
                      j = y.e; // Determine sign of result.

                  y.s = x.s == y.s ? 1 : -1; // Return signed 0 if either 0.

                  if (!xc[0] || !yc[0]) {
                    y.c = [y.e = 0];
                    return y;
                  } // Initialise exponent of result as x.e + y.e.


                  y.e = i + j; // If array xc has fewer digits than yc, swap xc and yc, and lengths.

                  if (a < b) {
                    c = xc;
                    xc = yc;
                    yc = c;
                    j = a;
                    a = b;
                    b = j;
                  } // Initialise coefficient array of result with zeros.


                  for (c = new Array(j = a + b); j--;) {
                    c[j] = 0;
                  } // Multiply.
                  // i is initially xc.length.


                  for (i = b; i--;) {
                    b = 0; // a is yc.length.

                    for (j = a + i; j > i;) {
                      // Current sum of products at this digit position, plus carry.
                      b = c[j] + yc[i] * xc[j - i - 1] + b;
                      c[j--] = b % 10; // carry

                      b = b / 10 | 0;
                    }

                    c[j] = b;
                  } // Increment result exponent if there is a final carry, otherwise remove leading zero.


                  if (b) ++y.e;else c.shift(); // Remove trailing zeros.

                  for (i = c.length; !c[--i];) {
                    c.pop();
                  }

                  y.c = c;
                  return y;
                };
                /*
                 * Return a string representing the value of this Big in exponential notation rounded to dp fixed
                 * decimal places using rounding mode rm, or Big.RM if rm is not specified.
                 *
                 * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.
                 * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
                 */


                P.toExponential = function (dp, rm) {
                  var x = this,
                      n = x.c[0];

                  if (dp !== UNDEFINED) {
                    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
                      throw Error(INVALID_DP);
                    }

                    x = round(new x.constructor(x), ++dp, rm);

                    for (; x.c.length < dp;) {
                      x.c.push(0);
                    }
                  }

                  return stringify(x, true, !!n);
                };
                /*
                 * Return a string representing the value of this Big in normal notation rounded to dp fixed
                 * decimal places using rounding mode rm, or Big.RM if rm is not specified.
                 *
                 * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.
                 * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
                 *
                 * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
                 * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
                 */


                P.toFixed = function (dp, rm) {
                  var x = this,
                      n = x.c[0];

                  if (dp !== UNDEFINED) {
                    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
                      throw Error(INVALID_DP);
                    }

                    x = round(new x.constructor(x), dp + x.e + 1, rm); // x.e may have changed if the value is rounded up.

                    for (dp = dp + x.e + 1; x.c.length < dp;) {
                      x.c.push(0);
                    }
                  }

                  return stringify(x, false, !!n);
                };
                /*
                 * Return a string representing the value of this Big.
                 * Return exponential notation if this Big has a positive exponent equal to or greater than
                 * Big.PE, or a negative exponent equal to or less than Big.NE.
                 * Omit the sign for negative zero.
                 */


                P.toJSON = P.toString = function () {
                  var x = this,
                      Big = x.constructor;
                  return stringify(x, x.e <= Big.NE || x.e >= Big.PE, !!x.c[0]);
                };
                /*
                 * Return the value of this Big as a primitve number.
                 */


                P.toNumber = function () {
                  var n = Number(stringify(this, true, true));

                  if (this.constructor.strict === true && !this.eq(n.toString())) {
                    throw Error(NAME + 'Imprecise conversion');
                  }

                  return n;
                };
                /*
                 * Return a string representing the value of this Big rounded to sd significant digits using
                 * rounding mode rm, or Big.RM if rm is not specified.
                 * Use exponential notation if sd is less than the number of digits necessary to represent
                 * the integer part of the value in normal notation.
                 *
                 * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.
                 * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
                 */


                P.toPrecision = function (sd, rm) {
                  var x = this,
                      Big = x.constructor,
                      n = x.c[0];

                  if (sd !== UNDEFINED) {
                    if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
                      throw Error(INVALID + 'precision');
                    }

                    x = round(new Big(x), sd, rm);

                    for (; x.c.length < sd;) {
                      x.c.push(0);
                    }
                  }

                  return stringify(x, sd <= x.e || x.e <= Big.NE || x.e >= Big.PE, !!n);
                };
                /*
                 * Return a string representing the value of this Big.
                 * Return exponential notation if this Big has a positive exponent equal to or greater than
                 * Big.PE, or a negative exponent equal to or less than Big.NE.
                 * Include the sign for negative zero.
                 */


                P.valueOf = function () {
                  var x = this,
                      Big = x.constructor;

                  if (Big.strict === true) {
                    throw Error(NAME + 'valueOf disallowed');
                  }

                  return stringify(x, x.e <= Big.NE || x.e >= Big.PE, true);
                }; // Export


                Big = _Big_();
                Big['default'] = Big.Big = Big; //AMD.

                if (module.exports) {
                  module.exports = Big; //Browser.
                } else {
                  GLOBAL.Big = Big;
                }
              })(commonjsGlobal);
            })(big);

            var Big = big.exports;

            /* eslint-disable unicorn/prevent-abbreviations */
            // Rounds towards nearest neighbour. If equidistant, rounds towards even neighbour.

            Big.RM = 2;
            var DECIMALS = 18;
            /**
             * @param {number,string,Big} num
             * @param {'pip'|'bip'} to
             * @param {'hex'} [format]
             * @return {string}
             */

            function convert(num, to, format) {
              if (to === 'bip' && format === 'hex') {
                throw new Error('Converting from pip to hex format doesn\'t supported');
              }

              var numBig = numberToBig(num);
              var pow = new Big(10).pow(DECIMALS);
              var result;

              if (to === 'pip') {
                result = numBig.times(pow).toFixed(0);

                if (format === 'hex') {
                  return lib$1.padToEven(new BN(result, 10).toString(16));
                } else {
                  return result;
                }
              } else if (to === 'bip') {
                // eslint-disable-next-line unicorn/require-number-to-fixed-digits-argument
                return numBig.round().div(pow).toFixed();
              } else {
                throw new Error('Unknown type');
              }
            }
            /**
             * Multiply value by 10^18
             * @param {number,string,Big} num
             * @param {'hex'} [format]
             * @return {string}
             */

            function convertToPip(num, format) {
              return convert(num, 'pip', format);
            }
            /**
             * Multiply value by 10^-18
             * @param {number,string,Big} num
             * @return {string}
             */

            function convertFromPip(num) {
              return convert(num, 'bip');
            }
            /**
             * @param {string} str
             * @return {boolean}
             */
            // function isNumericString(str) {
            //     const NUMERIC = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;
            //     return NUMERIC.test(str);
            // }

            /**
             *
             * @param {number,string,Big} num
             * @return {Big}
             */

            function numberToBig(num) {
              // if num is prefixed hex string
              if (typeof num === 'string' && num.indexOf('0x') === 0) {
                if (num === '0x') {
                  num = '0x0';
                } // convert prefixed hex to decimal string


                num = new BN(num.slice(2), 16).toString(10);
              } // `big.js` already throws on invalid numbers
              // if num is not numeric string
              // if (typeof num === 'string' && !isNumericString(num)) {
              //     throw new Error('Invalid number');
              // }


              return new Big(num);
            }

            function _defineProperty(obj, key, value) {
              if (key in obj) {
                Object.defineProperty(obj, key, {
                  value: value,
                  enumerable: true,
                  configurable: true,
                  writable: true
                });
              } else {
                obj[key] = value;
              }

              return obj;
            }

            /**
             * @enum {string} TX_TYPE
             */

            var TX_TYPE = {
              SEND: '0x01',
              SELL: '0x02',
              SELL_ALL: '0x03',
              BUY: '0x04',
              CREATE_COIN: '0x05',
              DECLARE_CANDIDACY: '0x06',
              DELEGATE: '0x07',
              UNBOND: '0x08',
              REDEEM_CHECK: '0x09',
              SET_CANDIDATE_ON: '0x0A',
              SET_CANDIDATE_OFF: '0x0B',
              CREATE_MULTISIG: '0x0C',
              MULTISEND: '0x0D',
              EDIT_CANDIDATE: '0x0E',
              SET_HALT_BLOCK: '0x0F',
              RECREATE_COIN: '0x10',
              EDIT_TICKER_OWNER: '0x11',
              EDIT_MULTISIG: '0x12',
              PRICE_VOTE: '0x13',
              EDIT_CANDIDATE_PUBLIC_KEY: '0x14',
              ADD_LIQUIDITY: '0x15',
              REMOVE_LIQUIDITY: '0x16',
              SELL_SWAP_POOL: '0x17',
              BUY_SWAP_POOL: '0x18',
              SELL_ALL_SWAP_POOL: '0x19',
              EDIT_CANDIDATE_COMMISSION: '0x1A',
              MOVE_STAKE: '0x1B',
              MINT_TOKEN: '0x1C',
              BURN_TOKEN: '0x1D',
              CREATE_TOKEN: '0x1E',
              RECREATE_TOKEN: '0x1F',
              VOTE_COMMISSION: '0x20',
              VOTE_UPDATE: '0x21',
              CREATE_SWAP_POOL: '0x22',
              ADD_LIMIT_ORDER: '0x23',
              REMOVE_LIMIT_ORDER: '0x24'
            };
            /** @type {Array<{hex: string, name: string, number: number}>} */

            var txTypeList = [];
            /**
             * @param hex
             * @param name
             */

            function fillList(hex, name) {
              var result = {};
              result.name = name;
              result.number = Number(hex);
              result.hex = hex;
              txTypeList[result.number] = result;
              return result;
            }

            fillList(TX_TYPE.SEND, 'send');
            fillList(TX_TYPE.SELL, 'sell');
            fillList(TX_TYPE.SELL_ALL, 'sell all');
            fillList(TX_TYPE.BUY, 'buy');
            fillList(TX_TYPE.CREATE_COIN, 'create coin');
            fillList(TX_TYPE.DECLARE_CANDIDACY, 'declare candidacy');
            fillList(TX_TYPE.DELEGATE, 'delegate');
            fillList(TX_TYPE.UNBOND, 'unbond');
            fillList(TX_TYPE.REDEEM_CHECK, 'redeem check');
            fillList(TX_TYPE.SET_CANDIDATE_ON, 'set candidate on');
            fillList(TX_TYPE.SET_CANDIDATE_OFF, 'set candidate off');
            fillList(TX_TYPE.CREATE_MULTISIG, 'create multisig');
            fillList(TX_TYPE.MULTISEND, 'multisend');
            fillList(TX_TYPE.EDIT_CANDIDATE, 'edit candidate');
            fillList(TX_TYPE.SET_HALT_BLOCK, 'vote for halt block');
            fillList(TX_TYPE.RECREATE_COIN, 'recreate coin');
            fillList(TX_TYPE.EDIT_TICKER_OWNER, 'edit ticker owner');
            fillList(TX_TYPE.EDIT_MULTISIG, 'edit multisig');
            fillList(TX_TYPE.PRICE_VOTE, 'price vote');
            fillList(TX_TYPE.EDIT_CANDIDATE_PUBLIC_KEY, 'edit candidate public key');
            fillList(TX_TYPE.ADD_LIQUIDITY, 'add liquidity to pool');
            fillList(TX_TYPE.REMOVE_LIQUIDITY, 'remove liquidity from pool');
            fillList(TX_TYPE.SELL_SWAP_POOL, 'sell within pool');
            fillList(TX_TYPE.BUY_SWAP_POOL, 'buy within pool');
            fillList(TX_TYPE.SELL_ALL_SWAP_POOL, 'sell all within pool');
            fillList(TX_TYPE.EDIT_CANDIDATE_COMMISSION, 'edit candidate commission');
            fillList(TX_TYPE.MOVE_STAKE, 'move stake');
            fillList(TX_TYPE.MINT_TOKEN, 'mint token');
            fillList(TX_TYPE.BURN_TOKEN, 'burn token');
            fillList(TX_TYPE.CREATE_TOKEN, 'create token');
            fillList(TX_TYPE.RECREATE_TOKEN, 'recreate token');
            fillList(TX_TYPE.VOTE_COMMISSION, 'vote for commission price');
            fillList(TX_TYPE.VOTE_UPDATE, 'vote for network update');
            fillList(TX_TYPE.CREATE_SWAP_POOL, 'create swap pool');
            fillList(TX_TYPE.ADD_LIMIT_ORDER, 'add limit order');
            fillList(TX_TYPE.REMOVE_LIMIT_ORDER, 'remove limit order');
            /**
             *
             * @param {TX_TYPE|number|string|Buffer|Uint8Array} txType
             * @return {TX_TYPE}
             */

            function normalizeTxType(txType) {
              // Buffer or Uint8Array to TX_TYPE
              if (txType.length > 0 && typeof txType !== 'string') {
                txType = Buffer$i.from(txType).toString('hex');
                txType = "0x".concat(txType);
              } // invalid string to number


              if (typeof txType === 'string' && txType.indexOf('0x') !== 0 && txType.indexOf('0X') !== 0) {
                txType = Number.parseInt(txType, 10);
              } // number to TX_TYPE


              if (typeof txType === 'number') {
                txType = lib$1.padToEven(txType.toString(16));
                txType = "0x".concat(txType);
              }

              txType = txType.toUpperCase();
              txType = txType.replace(/^0X/, '0x');

              if (!Object.values(TX_TYPE).includes(txType)) {
                throw new Error('Invalid tx type');
              }

              return txType;
            }

            /**
             * Accept current network fee values in pips.
             * Provide instance to calculate fee for particular transaction based on its params.
             *
             * @param {CommissionPriceData} commissionPriceData
             * @constructor
             */

            function FeePrice(commissionPriceData) {
              var _this = this;

              var _mapApiData = mapApiData(commissionPriceData),
                  baseFeeList = _mapApiData.baseFeeList,
                  deltaFeeList = _mapApiData.deltaFeeList,
                  tickerFeeList = _mapApiData.tickerFeeList,
                  payloadByteFee = _mapApiData.payloadByteFee;

              this.baseFeeList = baseFeeList;
              this.deltaFeeList = deltaFeeList;
              this.tickerFeeList = tickerFeeList;
              this.payloadByteFee = payloadByteFee;
              /**
               * @param {TX_TYPE} txType
               * @param {FeePriceOptions} [options]
               * @return {number|string}
               */

              this.getFeeValue = function (txType) {
                var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                    payload = _ref.payload,
                    _ref$payloadLength = _ref.payloadLength,
                    payloadLength = _ref$payloadLength === void 0 ? 0 : _ref$payloadLength,
                    coinSymbol = _ref.coinSymbol,
                    coinSymbolLength = _ref.coinSymbolLength,
                    deltaItemCount = _ref.deltaItemCount;

                // txType to string
                txType = normalizeTxType(txType);
                var isDeltaType = txType === TX_TYPE.MULTISEND || txType === TX_TYPE.BUY_SWAP_POOL || txType === TX_TYPE.SELL_SWAP_POOL || txType === TX_TYPE.SELL_ALL_SWAP_POOL;

                if (isDeltaType && !(deltaItemCount >= 1)) {
                  throw new Error("`deltaItemCount` should be positive integer when tx type is ".concat(txType, " (").concat(txTypeList[Number(txType)].name, ")"));
                }

                if (isBuffer$2(payload)) {
                  payloadLength = payload.length;
                } else if (payload) {
                  payloadLength = lib$1.getBinarySize(payload.toString());
                }

                var baseFee = _this.baseFeeList[txType];

                if (isFeeInvalid(baseFee)) {
                  // eslint-disable-next-line no-console
                  console.warn("No base commission price specified for ".concat(txType, " tx type (").concat(txTypeList[Number(txType)].name, ")"));
                  baseFee = 0;
                }

                var deltaFee = _this.deltaFeeList[txType];

                if (isDeltaType && isFeeInvalid(deltaFee)) {
                  // eslint-disable-next-line no-console
                  console.warn("No delta commission price specified for ".concat(txType, " tx type (").concat(txTypeList[Number(txType)].name, ")"));
                  deltaFee = 0;
                } // extra fee based on count


                var deltaTotalFee = isDeltaType ? new Big(deltaItemCount - 1).times(deltaFee) : 0; // coin symbol extra fee

                var tickerLengthFee = txType === TX_TYPE.CREATE_COIN || txType === TX_TYPE.CREATE_TOKEN ? _this.getCoinSymbolFee(coinSymbol, coinSymbolLength) : 0;
                var payloadFee = new Big(_this.payloadByteFee).times(payloadLength);
                return convertFromPip(new Big(baseFee).plus(payloadFee).plus(deltaTotalFee).plus(tickerLengthFee));
              };
              /**
               * @param {string} [ticker]
               * @param {number} [length]
               * @return {number|string} - value in pip
               */


              this.getCoinSymbolFee = function (ticker, length) {
                length = ticker ? ticker.length : length;

                if (!isValidLength(length)) {
                  length = 7;
                }

                return _this.tickerFeeList[length]; // eslint-disable-next-line unicorn/consistent-function-scoping, no-shadow

                function isValidLength(length) {
                  return length >= 3 && length <= 7;
                }
              };
            }

            function isFeeInvalid(fee) {
              return typeof fee !== 'number' && typeof fee !== 'string' || typeof fee === 'string' && fee.length === 0;
            }
            /**
             * @typedef {Object} FeePriceOptions
             * @param {string|Buffer} [payload]
             * @param {number} [payloadLength]
             * @param {string} [coinSymbol]
             * @param {number} [coinSymbolLength]
             * @param {number} [deltaItemCount]
             */

            /**
             * @typedef {Object} TickerFeeList
             * @type {{'3': number|string, '4': number|string, '5': number|string, '6': number|string, '7': number|string}}
             */

            /**
             * @typedef {Object} FeeList
             * @type {{TX_TYPE: number|string}}
             */

            /**
             * @param {CommissionPriceData} data
             * @return {CommissionPriceMapped}
             */


            function mapApiData(data) {
              var _baseFeeList, _deltaFeeList;

              var coin = data.coin;
              var payloadByteFee = data.payload_byte;
              var tickerFeeList = {
                3: data.create_ticker3,
                4: data.create_ticker4,
                5: data.create_ticker5,
                6: data.create_ticker6,
                7: data.create_ticker7_10
              };
              var baseFeeList = (_baseFeeList = {}, _defineProperty(_baseFeeList, TX_TYPE.SEND, data.send), _defineProperty(_baseFeeList, TX_TYPE.SELL, data.sell_bancor), _defineProperty(_baseFeeList, TX_TYPE.SELL_ALL, data.sell_all_bancor), _defineProperty(_baseFeeList, TX_TYPE.BUY, data.buy_bancor), _defineProperty(_baseFeeList, TX_TYPE.CREATE_COIN, data.create_coin), _defineProperty(_baseFeeList, TX_TYPE.DECLARE_CANDIDACY, data.declare_candidacy), _defineProperty(_baseFeeList, TX_TYPE.DELEGATE, data.delegate), _defineProperty(_baseFeeList, TX_TYPE.UNBOND, data.unbond), _defineProperty(_baseFeeList, TX_TYPE.REDEEM_CHECK, data.redeem_check), _defineProperty(_baseFeeList, TX_TYPE.SET_CANDIDATE_ON, data.set_candidate_on), _defineProperty(_baseFeeList, TX_TYPE.SET_CANDIDATE_OFF, data.set_candidate_off), _defineProperty(_baseFeeList, TX_TYPE.CREATE_MULTISIG, data.create_multisig), _defineProperty(_baseFeeList, TX_TYPE.MULTISEND, data.multisend_base), _defineProperty(_baseFeeList, TX_TYPE.EDIT_CANDIDATE, data.edit_candidate), _defineProperty(_baseFeeList, TX_TYPE.SET_HALT_BLOCK, data.set_halt_block), _defineProperty(_baseFeeList, TX_TYPE.RECREATE_COIN, data.recreate_coin), _defineProperty(_baseFeeList, TX_TYPE.EDIT_TICKER_OWNER, data.edit_ticker_owner), _defineProperty(_baseFeeList, TX_TYPE.EDIT_MULTISIG, data.edit_multisig), _defineProperty(_baseFeeList, TX_TYPE.PRICE_VOTE, data.price_vote), _defineProperty(_baseFeeList, TX_TYPE.EDIT_CANDIDATE_PUBLIC_KEY, data.edit_candidate_public_key), _defineProperty(_baseFeeList, TX_TYPE.ADD_LIQUIDITY, data.add_liquidity), _defineProperty(_baseFeeList, TX_TYPE.REMOVE_LIQUIDITY, data.remove_liquidity), _defineProperty(_baseFeeList, TX_TYPE.SELL_SWAP_POOL, data.sell_pool_base), _defineProperty(_baseFeeList, TX_TYPE.BUY_SWAP_POOL, data.buy_pool_base), _defineProperty(_baseFeeList, TX_TYPE.SELL_ALL_SWAP_POOL, data.sell_all_pool_base), _defineProperty(_baseFeeList, TX_TYPE.EDIT_CANDIDATE_COMMISSION, data.edit_candidate_commission), _defineProperty(_baseFeeList, TX_TYPE.MOVE_STAKE, data.move_stake), _defineProperty(_baseFeeList, TX_TYPE.MINT_TOKEN, data.mint_token), _defineProperty(_baseFeeList, TX_TYPE.BURN_TOKEN, data.burn_token), _defineProperty(_baseFeeList, TX_TYPE.CREATE_TOKEN, data.create_token), _defineProperty(_baseFeeList, TX_TYPE.RECREATE_TOKEN, data.recreate_token), _defineProperty(_baseFeeList, TX_TYPE.VOTE_COMMISSION, data.vote_commission), _defineProperty(_baseFeeList, TX_TYPE.VOTE_UPDATE, data.vote_update), _defineProperty(_baseFeeList, TX_TYPE.CREATE_SWAP_POOL, data.create_swap_pool), _defineProperty(_baseFeeList, TX_TYPE.ADD_LIMIT_ORDER, data.add_limit_order), _defineProperty(_baseFeeList, TX_TYPE.REMOVE_LIMIT_ORDER, data.remove_limit_order), _baseFeeList);
              var deltaFeeList = (_deltaFeeList = {}, _defineProperty(_deltaFeeList, TX_TYPE.MULTISEND, data.multisend_delta), _defineProperty(_deltaFeeList, TX_TYPE.SELL_SWAP_POOL, data.sell_pool_delta), _defineProperty(_deltaFeeList, TX_TYPE.BUY_SWAP_POOL, data.buy_pool_delta), _defineProperty(_deltaFeeList, TX_TYPE.SELL_ALL_SWAP_POOL, data.sell_all_pool_delta), _deltaFeeList);
              return {
                coin: coin,
                baseFeeList: baseFeeList,
                deltaFeeList: deltaFeeList,
                tickerFeeList: tickerFeeList,
                payloadByteFee: payloadByteFee
              };
            }
            /**
             * @typedef {Object} CommissionPriceMapped
             * @property {Coin} coin
             * @property {FeeList} baseFeeList
             * @property {FeeList} deltaFeeList
             * @property {TickerFeeList} tickerFeeList
             * @property {number|string} payloadByteFee
             */

            /**
             * @typedef {Object} CommissionPriceData
             * @property {Coin} coin
             * @property {string|number} payload_byte
             * @property {string|number} send
             * @property {string|number} buy_bancor
             * @property {string|number} sell_bancor
             * @property {string|number} sell_all_bancor
             * @property {string|number} buy_pool_base
             * @property {string|number} buy_pool_delta
             * @property {string|number} sell_pool_base
             * @property {string|number} sell_pool_delta
             * @property {string|number} sell_all_pool_base
             * @property {string|number} sell_all_pool_delta
             * @property {string|number} create_ticker3
             * @property {string|number} create_ticker4
             * @property {string|number} create_ticker5
             * @property {string|number} create_ticker6
             * @property {string|number} create_ticker7_10
             * @property {string|number} create_coin
             * @property {string|number} create_token
             * @property {string|number} recreate_coin
             * @property {string|number} recreate_token
             * @property {string|number} declare_candidacy
             * @property {string|number} delegate
             * @property {string|number} unbond
             * @property {string|number} redeem_check
             * @property {string|number} set_candidate_on
             * @property {string|number} set_candidate_off
             * @property {string|number} create_multisig
             * @property {string|number} multisend_delta
             * @property {string|number} multisend_base
             * @property {string|number} edit_candidate
             * @property {string|number} set_halt_block
             * @property {string|number} edit_ticker_owner
             * @property {string|number} edit_multisig
             * @property {string|number} [price_vote]
             * @property {string|number} edit_candidate_public_key
             * @property {string|number} add_liquidity
             * @property {string|number} remove_liquidity
             * @property {string|number} edit_candidate_commission
             * @property {string|number} [move_stake]
             * @property {string|number} mint_token
             * @property {string|number} burn_token
             * @property {string|number} vote_commission
             * @property {string|number} vote_update
             * @property {string|number} create_swap_pool
             * @property {string|number} failed_tx
             * @property {string|number} add_limit_order
             * @property {string|number} remove_limit_order
             */

            Big.RM = 2;
            /**
             * @typedef {Object} BancorCoinParams
             * @property {number|null} supply
             * @property {number|null} crr
             * @property {number|null} reserve - from 0 to 1
             */

            /**
             * Make 10 bytes padded Buffer from coin symbol string
             * @param {string} coinSymbol
             * @returns {Buffer}
             */

            function coinToBuffer(coinSymbol) {
              var buf = Buffer$i.alloc(10);
              Buffer$i.from(coinSymbol.toUpperCase()).copy(buf, 0, 0, 10);
              return buf;
            }
            /**
             * Convert 10 bytes padded Buffer to string of coin symbol
             * @param {Buffer} buf
             * @return {string}
             */

            function bufferToCoin(buf) {
              var sliceEnd = buf.length;

              while (buf[sliceEnd - 1] === 0) {
                sliceEnd -= 1;
              }

              buf = buf.slice(0, sliceEnd);
              return buf.toString('utf-8');
            }

            /**
             * @deprecated
             * Maximum amount of any coin
             * @type {number}
             */
            var COIN_MAX_AMOUNT = Math.pow(10, 15);
            /**
             * Coin's maximum `maxSupply` value (in BIP)
             * @type {number}
             */

            var COIN_MAX_MAX_SUPPLY = Math.pow(10, 15);
            /**
             * Coin's minimum `maxSupply` value (in BIP)
             * @type {number}
             */

            var COIN_MIN_MAX_SUPPLY = 1;

            var API_TYPE_GATE = 'gate';
            var API_TYPE_NODE = 'node';
            /**
             * @enum {string}
             */

            var ESTIMATE_SWAP_TYPE = {
              OPTIMAL: 'optimal',
              POOL: 'pool',
              BANCOR: 'bancor'
            };

            var axios$2 = {exports: {}};

            var bind$4 = function bind(fn, thisArg) {
              return function wrap() {
                var args = new Array(arguments.length);

                for (var i = 0; i < args.length; i++) {
                  args[i] = arguments[i];
                }

                return fn.apply(thisArg, args);
              };
            };

            var bind$3 = bind$4; // utils is a library of generic helper functions non-specific to axios

            var toString$1 = Object.prototype.toString;
            /**
             * Determine if a value is an Array
             *
             * @param {Object} val The value to test
             * @returns {boolean} True if value is an Array, otherwise false
             */

            function isArray$6(val) {
              return toString$1.call(val) === '[object Array]';
            }
            /**
             * Determine if a value is undefined
             *
             * @param {Object} val The value to test
             * @returns {boolean} True if the value is undefined, otherwise false
             */


            function isUndefined(val) {
              return typeof val === 'undefined';
            }
            /**
             * Determine if a value is a Buffer
             *
             * @param {Object} val The value to test
             * @returns {boolean} True if value is a Buffer, otherwise false
             */


            function isBuffer$1(val) {
              return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
            }
            /**
             * Determine if a value is an ArrayBuffer
             *
             * @param {Object} val The value to test
             * @returns {boolean} True if value is an ArrayBuffer, otherwise false
             */


            function isArrayBuffer(val) {
              return toString$1.call(val) === '[object ArrayBuffer]';
            }
            /**
             * Determine if a value is a FormData
             *
             * @param {Object} val The value to test
             * @returns {boolean} True if value is an FormData, otherwise false
             */


            function isFormData(val) {
              return typeof FormData !== 'undefined' && val instanceof FormData;
            }
            /**
             * Determine if a value is a view on an ArrayBuffer
             *
             * @param {Object} val The value to test
             * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
             */


            function isArrayBufferView(val) {
              var result;

              if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
                result = ArrayBuffer.isView(val);
              } else {
                result = val && val.buffer && val.buffer instanceof ArrayBuffer;
              }

              return result;
            }
            /**
             * Determine if a value is a String
             *
             * @param {Object} val The value to test
             * @returns {boolean} True if value is a String, otherwise false
             */


            function isString$1(val) {
              return typeof val === 'string';
            }
            /**
             * Determine if a value is a Number
             *
             * @param {Object} val The value to test
             * @returns {boolean} True if value is a Number, otherwise false
             */


            function isNumber$1(val) {
              return typeof val === 'number';
            }
            /**
             * Determine if a value is an Object
             *
             * @param {Object} val The value to test
             * @returns {boolean} True if value is an Object, otherwise false
             */


            function isObject$1(val) {
              return val !== null && _typeof$1(val) === 'object';
            }
            /**
             * Determine if a value is a plain Object
             *
             * @param {Object} val The value to test
             * @return {boolean} True if value is a plain Object, otherwise false
             */


            function isPlainObject(val) {
              if (toString$1.call(val) !== '[object Object]') {
                return false;
              }

              var prototype = Object.getPrototypeOf(val);
              return prototype === null || prototype === Object.prototype;
            }
            /**
             * Determine if a value is a Date
             *
             * @param {Object} val The value to test
             * @returns {boolean} True if value is a Date, otherwise false
             */


            function isDate$1(val) {
              return toString$1.call(val) === '[object Date]';
            }
            /**
             * Determine if a value is a File
             *
             * @param {Object} val The value to test
             * @returns {boolean} True if value is a File, otherwise false
             */


            function isFile(val) {
              return toString$1.call(val) === '[object File]';
            }
            /**
             * Determine if a value is a Blob
             *
             * @param {Object} val The value to test
             * @returns {boolean} True if value is a Blob, otherwise false
             */


            function isBlob(val) {
              return toString$1.call(val) === '[object Blob]';
            }
            /**
             * Determine if a value is a Function
             *
             * @param {Object} val The value to test
             * @returns {boolean} True if value is a Function, otherwise false
             */


            function isFunction$1(val) {
              return toString$1.call(val) === '[object Function]';
            }
            /**
             * Determine if a value is a Stream
             *
             * @param {Object} val The value to test
             * @returns {boolean} True if value is a Stream, otherwise false
             */


            function isStream(val) {
              return isObject$1(val) && isFunction$1(val.pipe);
            }
            /**
             * Determine if a value is a URLSearchParams object
             *
             * @param {Object} val The value to test
             * @returns {boolean} True if value is a URLSearchParams object, otherwise false
             */


            function isURLSearchParams(val) {
              return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
            }
            /**
             * Trim excess whitespace off the beginning and end of a string
             *
             * @param {String} str The String to trim
             * @returns {String} The String freed of excess whitespace
             */


            function trim(str) {
              return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
            }
            /**
             * Determine if we're running in a standard browser environment
             *
             * This allows axios to run in a web worker, and react-native.
             * Both environments support XMLHttpRequest, but not fully standard globals.
             *
             * web workers:
             *  typeof window -> undefined
             *  typeof document -> undefined
             *
             * react-native:
             *  navigator.product -> 'ReactNative'
             * nativescript
             *  navigator.product -> 'NativeScript' or 'NS'
             */


            function isStandardBrowserEnv() {
              if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' || navigator.product === 'NativeScript' || navigator.product === 'NS')) {
                return false;
              }

              return typeof window !== 'undefined' && typeof document !== 'undefined';
            }
            /**
             * Iterate over an Array or an Object invoking a function for each item.
             *
             * If `obj` is an Array callback will be called passing
             * the value, index, and complete array for each item.
             *
             * If 'obj' is an Object callback will be called passing
             * the value, key, and complete object for each property.
             *
             * @param {Object|Array} obj The object to iterate
             * @param {Function} fn The callback to invoke for each item
             */


            function forEach(obj, fn) {
              // Don't bother if no value provided
              if (obj === null || typeof obj === 'undefined') {
                return;
              } // Force an array if not already something iterable


              if (_typeof$1(obj) !== 'object') {
                /*eslint no-param-reassign:0*/
                obj = [obj];
              }

              if (isArray$6(obj)) {
                // Iterate over array values
                for (var i = 0, l = obj.length; i < l; i++) {
                  fn.call(null, obj[i], i, obj);
                }
              } else {
                // Iterate over object keys
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    fn.call(null, obj[key], key, obj);
                  }
                }
              }
            }
            /**
             * Accepts varargs expecting each argument to be an object, then
             * immutably merges the properties of each object and returns result.
             *
             * When multiple objects contain the same key the later object in
             * the arguments list will take precedence.
             *
             * Example:
             *
             * ```js
             * var result = merge({foo: 123}, {foo: 456});
             * console.log(result.foo); // outputs 456
             * ```
             *
             * @param {Object} obj1 Object to merge
             * @returns {Object} Result of all merge properties
             */


            function
            /* obj1, obj2, obj3, ... */
            merge$1() {
              var result = {};

              function assignValue(val, key) {
                if (isPlainObject(result[key]) && isPlainObject(val)) {
                  result[key] = merge$1(result[key], val);
                } else if (isPlainObject(val)) {
                  result[key] = merge$1({}, val);
                } else if (isArray$6(val)) {
                  result[key] = val.slice();
                } else {
                  result[key] = val;
                }
              }

              for (var i = 0, l = arguments.length; i < l; i++) {
                forEach(arguments[i], assignValue);
              }

              return result;
            }
            /**
             * Extends object a by mutably adding to it the properties of object b.
             *
             * @param {Object} a The object to be extended
             * @param {Object} b The object to copy properties from
             * @param {Object} thisArg The object to bind function to
             * @return {Object} The resulting value of object a
             */


            function extend(a, b, thisArg) {
              forEach(b, function assignValue(val, key) {
                if (thisArg && typeof val === 'function') {
                  a[key] = bind$3(val, thisArg);
                } else {
                  a[key] = val;
                }
              });
              return a;
            }
            /**
             * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
             *
             * @param {string} content with BOM
             * @return {string} content value without BOM
             */


            function stripBOM(content) {
              if (content.charCodeAt(0) === 0xFEFF) {
                content = content.slice(1);
              }

              return content;
            }

            var utils$g = {
              isArray: isArray$6,
              isArrayBuffer: isArrayBuffer,
              isBuffer: isBuffer$1,
              isFormData: isFormData,
              isArrayBufferView: isArrayBufferView,
              isString: isString$1,
              isNumber: isNumber$1,
              isObject: isObject$1,
              isPlainObject: isPlainObject,
              isUndefined: isUndefined,
              isDate: isDate$1,
              isFile: isFile,
              isBlob: isBlob,
              isFunction: isFunction$1,
              isStream: isStream,
              isURLSearchParams: isURLSearchParams,
              isStandardBrowserEnv: isStandardBrowserEnv,
              forEach: forEach,
              merge: merge$1,
              extend: extend,
              trim: trim,
              stripBOM: stripBOM
            };

            var utils$f = utils$g;

            function encode$1(val) {
              return encodeURIComponent(val).replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');
            }
            /**
             * Build a URL by appending params to the end
             *
             * @param {string} url The base of the url (e.g., http://www.google.com)
             * @param {object} [params] The params to be appended
             * @returns {string} The formatted url
             */


            var buildURL$2 = function buildURL(url, params, paramsSerializer) {
              /*eslint no-param-reassign:0*/
              if (!params) {
                return url;
              }

              var serializedParams;

              if (paramsSerializer) {
                serializedParams = paramsSerializer(params);
              } else if (utils$f.isURLSearchParams(params)) {
                serializedParams = params.toString();
              } else {
                var parts = [];
                utils$f.forEach(params, function serialize(val, key) {
                  if (val === null || typeof val === 'undefined') {
                    return;
                  }

                  if (utils$f.isArray(val)) {
                    key = key + '[]';
                  } else {
                    val = [val];
                  }

                  utils$f.forEach(val, function parseValue(v) {
                    if (utils$f.isDate(v)) {
                      v = v.toISOString();
                    } else if (utils$f.isObject(v)) {
                      v = JSON.stringify(v);
                    }

                    parts.push(encode$1(key) + '=' + encode$1(v));
                  });
                });
                serializedParams = parts.join('&');
              }

              if (serializedParams) {
                var hashmarkIndex = url.indexOf('#');

                if (hashmarkIndex !== -1) {
                  url = url.slice(0, hashmarkIndex);
                }

                url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
              }

              return url;
            };

            var utils$e = utils$g;

            function InterceptorManager$1() {
              this.handlers = [];
            }
            /**
             * Add a new interceptor to the stack
             *
             * @param {Function} fulfilled The function to handle `then` for a `Promise`
             * @param {Function} rejected The function to handle `reject` for a `Promise`
             *
             * @return {Number} An ID used to remove interceptor later
             */


            InterceptorManager$1.prototype.use = function use(fulfilled, rejected, options) {
              this.handlers.push({
                fulfilled: fulfilled,
                rejected: rejected,
                synchronous: options ? options.synchronous : false,
                runWhen: options ? options.runWhen : null
              });
              return this.handlers.length - 1;
            };
            /**
             * Remove an interceptor from the stack
             *
             * @param {Number} id The ID that was returned by `use`
             */


            InterceptorManager$1.prototype.eject = function eject(id) {
              if (this.handlers[id]) {
                this.handlers[id] = null;
              }
            };
            /**
             * Iterate over all the registered interceptors
             *
             * This method is particularly useful for skipping over any
             * interceptors that may have become `null` calling `eject`.
             *
             * @param {Function} fn The function to call for each interceptor
             */


            InterceptorManager$1.prototype.forEach = function forEach(fn) {
              utils$e.forEach(this.handlers, function forEachHandler(h) {
                if (h !== null) {
                  fn(h);
                }
              });
            };

            var InterceptorManager_1 = InterceptorManager$1;

            var utils$d = utils$g;

            var normalizeHeaderName$1 = function normalizeHeaderName(headers, normalizedName) {
              utils$d.forEach(headers, function processHeader(value, name) {
                if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
                  headers[normalizedName] = value;
                  delete headers[name];
                }
              });
            };

            /**
             * Update an Error with the specified config, error code, and response.
             *
             * @param {Error} error The error to update.
             * @param {Object} config The config.
             * @param {string} [code] The error code (for example, 'ECONNABORTED').
             * @param {Object} [request] The request.
             * @param {Object} [response] The response.
             * @returns {Error} The error.
             */


            var enhanceError$2 = function enhanceError(error, config, code, request, response) {
              error.config = config;

              if (code) {
                error.code = code;
              }

              error.request = request;
              error.response = response;
              error.isAxiosError = true;

              error.toJSON = function toJSON() {
                return {
                  // Standard
                  message: this.message,
                  name: this.name,
                  // Microsoft
                  description: this.description,
                  number: this.number,
                  // Mozilla
                  fileName: this.fileName,
                  lineNumber: this.lineNumber,
                  columnNumber: this.columnNumber,
                  stack: this.stack,
                  // Axios
                  config: this.config,
                  code: this.code,
                  status: this.response && this.response.status ? this.response.status : null
                };
              };

              return error;
            };

            var enhanceError$1 = enhanceError$2;
            /**
             * Create an Error with the specified message, config, error code, request and response.
             *
             * @param {string} message The error message.
             * @param {Object} config The config.
             * @param {string} [code] The error code (for example, 'ECONNABORTED').
             * @param {Object} [request] The request.
             * @param {Object} [response] The response.
             * @returns {Error} The created error.
             */

            var createError$2 = function createError(message, config, code, request, response) {
              var error = new Error(message);
              return enhanceError$1(error, config, code, request, response);
            };

            var createError$1 = createError$2;
            /**
             * Resolve or reject a Promise based on response status.
             *
             * @param {Function} resolve A function that resolves the promise.
             * @param {Function} reject A function that rejects the promise.
             * @param {object} response The response.
             */

            var settle$1 = function settle(resolve, reject, response) {
              var validateStatus = response.config.validateStatus;

              if (!response.status || !validateStatus || validateStatus(response.status)) {
                resolve(response);
              } else {
                reject(createError$1('Request failed with status code ' + response.status, response.config, null, response.request, response));
              }
            };

            var utils$c = utils$g;
            var cookies$1 = utils$c.isStandardBrowserEnv() ? // Standard browser envs support document.cookie
            function standardBrowserEnv() {
              return {
                write: function write(name, value, expires, path, domain, secure) {
                  var cookie = [];
                  cookie.push(name + '=' + encodeURIComponent(value));

                  if (utils$c.isNumber(expires)) {
                    cookie.push('expires=' + new Date(expires).toGMTString());
                  }

                  if (utils$c.isString(path)) {
                    cookie.push('path=' + path);
                  }

                  if (utils$c.isString(domain)) {
                    cookie.push('domain=' + domain);
                  }

                  if (secure === true) {
                    cookie.push('secure');
                  }

                  document.cookie = cookie.join('; ');
                },
                read: function read(name) {
                  var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
                  return match ? decodeURIComponent(match[3]) : null;
                },
                remove: function remove(name) {
                  this.write(name, '', Date.now() - 86400000);
                }
              };
            }() : // Non standard browser env (web workers, react-native) lack needed support.
            function nonStandardBrowserEnv() {
              return {
                write: function write() {},
                read: function read() {
                  return null;
                },
                remove: function remove() {}
              };
            }();

            /**
             * Determines whether the specified URL is absolute
             *
             * @param {string} url The URL to test
             * @returns {boolean} True if the specified URL is absolute, otherwise false
             */


            var isAbsoluteURL$1 = function isAbsoluteURL(url) {
              // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
              // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
              // by any combination of letters, digits, plus, period, or hyphen.
              return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
            };

            /**
             * Creates a new URL by combining the specified URLs
             *
             * @param {string} baseURL The base URL
             * @param {string} relativeURL The relative URL
             * @returns {string} The combined URL
             */


            var combineURLs$1 = function combineURLs(baseURL, relativeURL) {
              return relativeURL ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '') : baseURL;
            };

            var isAbsoluteURL = isAbsoluteURL$1;
            var combineURLs = combineURLs$1;
            /**
             * Creates a new URL by combining the baseURL with the requestedURL,
             * only when the requestedURL is not already an absolute URL.
             * If the requestURL is absolute, this function returns the requestedURL untouched.
             *
             * @param {string} baseURL The base URL
             * @param {string} requestedURL Absolute or relative URL to combine
             * @returns {string} The combined full path
             */

            var buildFullPath$1 = function buildFullPath(baseURL, requestedURL) {
              if (baseURL && !isAbsoluteURL(requestedURL)) {
                return combineURLs(baseURL, requestedURL);
              }

              return requestedURL;
            };

            var utils$b = utils$g; // Headers whose duplicates are ignored by node
            // c.f. https://nodejs.org/api/http.html#http_message_headers

            var ignoreDuplicateOf = ['age', 'authorization', 'content-length', 'content-type', 'etag', 'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since', 'last-modified', 'location', 'max-forwards', 'proxy-authorization', 'referer', 'retry-after', 'user-agent'];
            /**
             * Parse headers into an object
             *
             * ```
             * Date: Wed, 27 Aug 2014 08:58:49 GMT
             * Content-Type: application/json
             * Connection: keep-alive
             * Transfer-Encoding: chunked
             * ```
             *
             * @param {String} headers Headers needing to be parsed
             * @returns {Object} Headers parsed into an object
             */

            var parseHeaders$1 = function parseHeaders(headers) {
              var parsed = {};
              var key;
              var val;
              var i;

              if (!headers) {
                return parsed;
              }

              utils$b.forEach(headers.split('\n'), function parser(line) {
                i = line.indexOf(':');
                key = utils$b.trim(line.substr(0, i)).toLowerCase();
                val = utils$b.trim(line.substr(i + 1));

                if (key) {
                  if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
                    return;
                  }

                  if (key === 'set-cookie') {
                    parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
                  } else {
                    parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
                  }
                }
              });
              return parsed;
            };

            var utils$a = utils$g;
            var isURLSameOrigin$1 = utils$a.isStandardBrowserEnv() ? // Standard browser envs have full support of the APIs needed to test
            // whether the request URL is of the same origin as current location.
            function standardBrowserEnv() {
              var msie = /(msie|trident)/i.test(navigator.userAgent);
              var urlParsingNode = document.createElement('a');
              var originURL;
              /**
              * Parse a URL to discover it's components
              *
              * @param {String} url The URL to be parsed
              * @returns {Object}
              */

              function resolveURL(url) {
                var href = url;

                if (msie) {
                  // IE needs attribute set twice to normalize properties
                  urlParsingNode.setAttribute('href', href);
                  href = urlParsingNode.href;
                }

                urlParsingNode.setAttribute('href', href); // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils

                return {
                  href: urlParsingNode.href,
                  protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
                  host: urlParsingNode.host,
                  search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
                  hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
                  hostname: urlParsingNode.hostname,
                  port: urlParsingNode.port,
                  pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
                };
              }

              originURL = resolveURL(window.location.href);
              /**
              * Determine if a URL shares the same origin as the current location
              *
              * @param {String} requestURL The URL to test
              * @returns {boolean} True if URL shares the same origin, otherwise false
              */

              return function isURLSameOrigin(requestURL) {
                var parsed = utils$a.isString(requestURL) ? resolveURL(requestURL) : requestURL;
                return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
              };
            }() : // Non standard browser envs (web workers, react-native) lack needed support.
            function nonStandardBrowserEnv() {
              return function isURLSameOrigin() {
                return true;
              };
            }();

            /**
             * A `Cancel` is an object that is thrown when an operation is canceled.
             *
             * @class
             * @param {string=} message The message.
             */


            function Cancel$3(message) {
              this.message = message;
            }

            Cancel$3.prototype.toString = function toString() {
              return 'Cancel' + (this.message ? ': ' + this.message : '');
            };

            Cancel$3.prototype.__CANCEL__ = true;
            var Cancel_1 = Cancel$3;

            var utils$9 = utils$g;
            var settle = settle$1;
            var cookies = cookies$1;
            var buildURL$1 = buildURL$2;
            var buildFullPath = buildFullPath$1;
            var parseHeaders = parseHeaders$1;
            var isURLSameOrigin = isURLSameOrigin$1;
            var createError = createError$2;
            var defaults$6 = defaults_1;
            var Cancel$2 = Cancel_1;

            var xhr = function xhrAdapter(config) {
              return new Promise(function dispatchXhrRequest(resolve, reject) {
                var requestData = config.data;
                var requestHeaders = config.headers;
                var responseType = config.responseType;
                var onCanceled;

                function done() {
                  if (config.cancelToken) {
                    config.cancelToken.unsubscribe(onCanceled);
                  }

                  if (config.signal) {
                    config.signal.removeEventListener('abort', onCanceled);
                  }
                }

                if (utils$9.isFormData(requestData)) {
                  delete requestHeaders['Content-Type']; // Let the browser set it
                }

                var request = new XMLHttpRequest(); // HTTP basic authentication

                if (config.auth) {
                  var username = config.auth.username || '';
                  var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
                  requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
                }

                var fullPath = buildFullPath(config.baseURL, config.url);
                request.open(config.method.toUpperCase(), buildURL$1(fullPath, config.params, config.paramsSerializer), true); // Set the request timeout in MS

                request.timeout = config.timeout;

                function onloadend() {
                  if (!request) {
                    return;
                  } // Prepare the response


                  var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
                  var responseData = !responseType || responseType === 'text' || responseType === 'json' ? request.responseText : request.response;
                  var response = {
                    data: responseData,
                    status: request.status,
                    statusText: request.statusText,
                    headers: responseHeaders,
                    config: config,
                    request: request
                  };
                  settle(function _resolve(value) {
                    resolve(value);
                    done();
                  }, function _reject(err) {
                    reject(err);
                    done();
                  }, response); // Clean up request

                  request = null;
                }

                if ('onloadend' in request) {
                  // Use onloadend if available
                  request.onloadend = onloadend;
                } else {
                  // Listen for ready state to emulate onloadend
                  request.onreadystatechange = function handleLoad() {
                    if (!request || request.readyState !== 4) {
                      return;
                    } // The request errored out and we didn't get a response, this will be
                    // handled by onerror instead
                    // With one exception: request that using file: protocol, most browsers
                    // will return status as 0 even though it's a successful request


                    if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
                      return;
                    } // readystate handler is calling before onerror or ontimeout handlers,
                    // so we should call onloadend on the next 'tick'


                    setTimeout(onloadend);
                  };
                } // Handle browser request cancellation (as opposed to a manual cancellation)


                request.onabort = function handleAbort() {
                  if (!request) {
                    return;
                  }

                  reject(createError('Request aborted', config, 'ECONNABORTED', request)); // Clean up request

                  request = null;
                }; // Handle low level network errors


                request.onerror = function handleError() {
                  // Real errors are hidden from us by the browser
                  // onerror should only fire if it's a network error
                  reject(createError('Network Error', config, null, request)); // Clean up request

                  request = null;
                }; // Handle timeout


                request.ontimeout = function handleTimeout() {
                  var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
                  var transitional = config.transitional || defaults$6.transitional;

                  if (config.timeoutErrorMessage) {
                    timeoutErrorMessage = config.timeoutErrorMessage;
                  }

                  reject(createError(timeoutErrorMessage, config, transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED', request)); // Clean up request

                  request = null;
                }; // Add xsrf header
                // This is only done if running in a standard browser environment.
                // Specifically not if we're in a web worker, or react-native.


                if (utils$9.isStandardBrowserEnv()) {
                  // Add xsrf header
                  var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;

                  if (xsrfValue) {
                    requestHeaders[config.xsrfHeaderName] = xsrfValue;
                  }
                } // Add headers to the request


                if ('setRequestHeader' in request) {
                  utils$9.forEach(requestHeaders, function setRequestHeader(val, key) {
                    if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
                      // Remove Content-Type if data is undefined
                      delete requestHeaders[key];
                    } else {
                      // Otherwise add header to the request
                      request.setRequestHeader(key, val);
                    }
                  });
                } // Add withCredentials to request if needed


                if (!utils$9.isUndefined(config.withCredentials)) {
                  request.withCredentials = !!config.withCredentials;
                } // Add responseType to request if needed


                if (responseType && responseType !== 'json') {
                  request.responseType = config.responseType;
                } // Handle progress if needed


                if (typeof config.onDownloadProgress === 'function') {
                  request.addEventListener('progress', config.onDownloadProgress);
                } // Not all browsers support upload events


                if (typeof config.onUploadProgress === 'function' && request.upload) {
                  request.upload.addEventListener('progress', config.onUploadProgress);
                }

                if (config.cancelToken || config.signal) {
                  // Handle cancellation
                  // eslint-disable-next-line func-names
                  onCanceled = function onCanceled(cancel) {
                    if (!request) {
                      return;
                    }

                    reject(!cancel || cancel && cancel.type ? new Cancel$2('canceled') : cancel);
                    request.abort();
                    request = null;
                  };

                  config.cancelToken && config.cancelToken.subscribe(onCanceled);

                  if (config.signal) {
                    config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
                  }
                }

                if (!requestData) {
                  requestData = null;
                } // Send the request


                request.send(requestData);
              });
            };

            var utils$8 = utils$g;
            var normalizeHeaderName = normalizeHeaderName$1;
            var enhanceError = enhanceError$2;
            var DEFAULT_CONTENT_TYPE = {
              'Content-Type': 'application/x-www-form-urlencoded'
            };

            function setContentTypeIfUnset(headers, value) {
              if (!utils$8.isUndefined(headers) && utils$8.isUndefined(headers['Content-Type'])) {
                headers['Content-Type'] = value;
              }
            }

            function getDefaultAdapter() {
              var adapter;

              if (typeof XMLHttpRequest !== 'undefined') {
                // For browsers use XHR adapter
                adapter = xhr;
              } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
                // For node use HTTP adapter
                adapter = xhr;
              }

              return adapter;
            }

            function stringifySafely(rawValue, parser, encoder) {
              if (utils$8.isString(rawValue)) {
                try {
                  (parser || JSON.parse)(rawValue);
                  return utils$8.trim(rawValue);
                } catch (e) {
                  if (e.name !== 'SyntaxError') {
                    throw e;
                  }
                }
              }

              return (encoder || JSON.stringify)(rawValue);
            }

            var defaults$5 = {
              transitional: {
                silentJSONParsing: true,
                forcedJSONParsing: true,
                clarifyTimeoutError: false
              },
              adapter: getDefaultAdapter(),
              transformRequest: [function transformRequest(data, headers) {
                normalizeHeaderName(headers, 'Accept');
                normalizeHeaderName(headers, 'Content-Type');

                if (utils$8.isFormData(data) || utils$8.isArrayBuffer(data) || utils$8.isBuffer(data) || utils$8.isStream(data) || utils$8.isFile(data) || utils$8.isBlob(data)) {
                  return data;
                }

                if (utils$8.isArrayBufferView(data)) {
                  return data.buffer;
                }

                if (utils$8.isURLSearchParams(data)) {
                  setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
                  return data.toString();
                }

                if (utils$8.isObject(data) || headers && headers['Content-Type'] === 'application/json') {
                  setContentTypeIfUnset(headers, 'application/json');
                  return stringifySafely(data);
                }

                return data;
              }],
              transformResponse: [function transformResponse(data) {
                var transitional = this.transitional || defaults$5.transitional;
                var silentJSONParsing = transitional && transitional.silentJSONParsing;
                var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
                var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

                if (strictJSONParsing || forcedJSONParsing && utils$8.isString(data) && data.length) {
                  try {
                    return JSON.parse(data);
                  } catch (e) {
                    if (strictJSONParsing) {
                      if (e.name === 'SyntaxError') {
                        throw enhanceError(e, this, 'E_JSON_PARSE');
                      }

                      throw e;
                    }
                  }
                }

                return data;
              }],

              /**
               * A timeout in milliseconds to abort a request. If set to 0 (default) a
               * timeout is not created.
               */
              timeout: 0,
              xsrfCookieName: 'XSRF-TOKEN',
              xsrfHeaderName: 'X-XSRF-TOKEN',
              maxContentLength: -1,
              maxBodyLength: -1,
              validateStatus: function validateStatus(status) {
                return status >= 200 && status < 300;
              },
              headers: {
                common: {
                  'Accept': 'application/json, text/plain, */*'
                }
              }
            };
            utils$8.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
              defaults$5.headers[method] = {};
            });
            utils$8.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
              defaults$5.headers[method] = utils$8.merge(DEFAULT_CONTENT_TYPE);
            });
            var defaults_1 = defaults$5;

            var utils$7 = utils$g;
            var defaults$4 = defaults_1;
            /**
             * Transform the data for a request or a response
             *
             * @param {Object|String} data The data to be transformed
             * @param {Array} headers The headers for the request or response
             * @param {Array|Function} fns A single function or Array of functions
             * @returns {*} The resulting transformed data
             */

            var transformData$1 = function transformData(data, headers, fns) {
              var context = this || defaults$4;
              /*eslint no-param-reassign:0*/

              utils$7.forEach(fns, function transform(fn) {
                data = fn.call(context, data, headers);
              });
              return data;
            };

            var isCancel$1 = function isCancel(value) {
              return !!(value && value.__CANCEL__);
            };

            var utils$6 = utils$g;
            var transformData = transformData$1;
            var isCancel = isCancel$1;
            var defaults$3 = defaults_1;
            var Cancel$1 = Cancel_1;
            /**
             * Throws a `Cancel` if cancellation has been requested.
             */

            function throwIfCancellationRequested(config) {
              if (config.cancelToken) {
                config.cancelToken.throwIfRequested();
              }

              if (config.signal && config.signal.aborted) {
                throw new Cancel$1('canceled');
              }
            }
            /**
             * Dispatch a request to the server using the configured adapter.
             *
             * @param {object} config The config that is to be used for the request
             * @returns {Promise} The Promise to be fulfilled
             */


            var dispatchRequest$1 = function dispatchRequest(config) {
              throwIfCancellationRequested(config); // Ensure headers exist

              config.headers = config.headers || {}; // Transform request data

              config.data = transformData.call(config, config.data, config.headers, config.transformRequest); // Flatten headers

              config.headers = utils$6.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
              utils$6.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) {
                delete config.headers[method];
              });
              var adapter = config.adapter || defaults$3.adapter;
              return adapter(config).then(function onAdapterResolution(response) {
                throwIfCancellationRequested(config); // Transform response data

                response.data = transformData.call(config, response.data, response.headers, config.transformResponse);
                return response;
              }, function onAdapterRejection(reason) {
                if (!isCancel(reason)) {
                  throwIfCancellationRequested(config); // Transform response data

                  if (reason && reason.response) {
                    reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, config.transformResponse);
                  }
                }

                return Promise.reject(reason);
              });
            };

            var utils$5 = utils$g;
            /**
             * Config-specific merge-function which creates a new config-object
             * by merging two configuration objects together.
             *
             * @param {Object} config1
             * @param {Object} config2
             * @returns {Object} New object resulting from merging config2 to config1
             */

            var mergeConfig$2 = function mergeConfig(config1, config2) {
              // eslint-disable-next-line no-param-reassign
              config2 = config2 || {};
              var config = {};

              function getMergedValue(target, source) {
                if (utils$5.isPlainObject(target) && utils$5.isPlainObject(source)) {
                  return utils$5.merge(target, source);
                } else if (utils$5.isPlainObject(source)) {
                  return utils$5.merge({}, source);
                } else if (utils$5.isArray(source)) {
                  return source.slice();
                }

                return source;
              } // eslint-disable-next-line consistent-return


              function mergeDeepProperties(prop) {
                if (!utils$5.isUndefined(config2[prop])) {
                  return getMergedValue(config1[prop], config2[prop]);
                } else if (!utils$5.isUndefined(config1[prop])) {
                  return getMergedValue(undefined, config1[prop]);
                }
              } // eslint-disable-next-line consistent-return


              function valueFromConfig2(prop) {
                if (!utils$5.isUndefined(config2[prop])) {
                  return getMergedValue(undefined, config2[prop]);
                }
              } // eslint-disable-next-line consistent-return


              function defaultToConfig2(prop) {
                if (!utils$5.isUndefined(config2[prop])) {
                  return getMergedValue(undefined, config2[prop]);
                } else if (!utils$5.isUndefined(config1[prop])) {
                  return getMergedValue(undefined, config1[prop]);
                }
              } // eslint-disable-next-line consistent-return


              function mergeDirectKeys(prop) {
                if (prop in config2) {
                  return getMergedValue(config1[prop], config2[prop]);
                } else if (prop in config1) {
                  return getMergedValue(undefined, config1[prop]);
                }
              }

              var mergeMap = {
                'url': valueFromConfig2,
                'method': valueFromConfig2,
                'data': valueFromConfig2,
                'baseURL': defaultToConfig2,
                'transformRequest': defaultToConfig2,
                'transformResponse': defaultToConfig2,
                'paramsSerializer': defaultToConfig2,
                'timeout': defaultToConfig2,
                'timeoutMessage': defaultToConfig2,
                'withCredentials': defaultToConfig2,
                'adapter': defaultToConfig2,
                'responseType': defaultToConfig2,
                'xsrfCookieName': defaultToConfig2,
                'xsrfHeaderName': defaultToConfig2,
                'onUploadProgress': defaultToConfig2,
                'onDownloadProgress': defaultToConfig2,
                'decompress': defaultToConfig2,
                'maxContentLength': defaultToConfig2,
                'maxBodyLength': defaultToConfig2,
                'transport': defaultToConfig2,
                'httpAgent': defaultToConfig2,
                'httpsAgent': defaultToConfig2,
                'cancelToken': defaultToConfig2,
                'socketPath': defaultToConfig2,
                'responseEncoding': defaultToConfig2,
                'validateStatus': mergeDirectKeys
              };
              utils$5.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
                var merge = mergeMap[prop] || mergeDeepProperties;
                var configValue = merge(prop);
                utils$5.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
              });
              return config;
            };

            var data = {
              "version": "0.24.0"
            };

            var VERSION = data.version;
            var validators$1 = {}; // eslint-disable-next-line func-names

            ['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function (type, i) {
              validators$1[type] = function validator(thing) {
                return _typeof$1(thing) === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
              };
            });
            var deprecatedWarnings = {};
            /**
             * Transitional option validator
             * @param {function|boolean?} validator - set to false if the transitional option has been removed
             * @param {string?} version - deprecated version / removed since version
             * @param {string?} message - some message with additional info
             * @returns {function}
             */

            validators$1.transitional = function transitional(validator, version, message) {
              function formatMessage(opt, desc) {
                return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
              } // eslint-disable-next-line func-names


              return function (value, opt, opts) {
                if (validator === false) {
                  throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));
                }

                if (version && !deprecatedWarnings[opt]) {
                  deprecatedWarnings[opt] = true; // eslint-disable-next-line no-console

                  console.warn(formatMessage(opt, ' has been deprecated since v' + version + ' and will be removed in the near future'));
                }

                return validator ? validator(value, opt, opts) : true;
              };
            };
            /**
             * Assert object's properties type
             * @param {object} options
             * @param {object} schema
             * @param {boolean?} allowUnknown
             */


            function assertOptions(options, schema, allowUnknown) {
              if (_typeof$1(options) !== 'object') {
                throw new TypeError('options must be an object');
              }

              var keys = Object.keys(options);
              var i = keys.length;

              while (i-- > 0) {
                var opt = keys[i];
                var validator = schema[opt];

                if (validator) {
                  var value = options[opt];
                  var result = value === undefined || validator(value, opt, options);

                  if (result !== true) {
                    throw new TypeError('option ' + opt + ' must be ' + result);
                  }

                  continue;
                }

                if (allowUnknown !== true) {
                  throw Error('Unknown option ' + opt);
                }
              }
            }

            var validator$1 = {
              assertOptions: assertOptions,
              validators: validators$1
            };

            var utils$4 = utils$g;
            var buildURL = buildURL$2;
            var InterceptorManager = InterceptorManager_1;
            var dispatchRequest = dispatchRequest$1;
            var mergeConfig$1 = mergeConfig$2;
            var validator = validator$1;
            var validators = validator.validators;
            /**
             * Create a new instance of Axios
             *
             * @param {Object} instanceConfig The default config for the instance
             */

            function Axios$1(instanceConfig) {
              this.defaults = instanceConfig;
              this.interceptors = {
                request: new InterceptorManager(),
                response: new InterceptorManager()
              };
            }
            /**
             * Dispatch a request
             *
             * @param {Object} config The config specific for this request (merged with this.defaults)
             */


            Axios$1.prototype.request = function request(config) {
              /*eslint no-param-reassign:0*/
              // Allow for axios('example/url'[, config]) a la fetch API
              if (typeof config === 'string') {
                config = arguments[1] || {};
                config.url = arguments[0];
              } else {
                config = config || {};
              }

              config = mergeConfig$1(this.defaults, config); // Set config.method

              if (config.method) {
                config.method = config.method.toLowerCase();
              } else if (this.defaults.method) {
                config.method = this.defaults.method.toLowerCase();
              } else {
                config.method = 'get';
              }

              var transitional = config.transitional;

              if (transitional !== undefined) {
                validator.assertOptions(transitional, {
                  silentJSONParsing: validators.transitional(validators["boolean"]),
                  forcedJSONParsing: validators.transitional(validators["boolean"]),
                  clarifyTimeoutError: validators.transitional(validators["boolean"])
                }, false);
              } // filter out skipped interceptors


              var requestInterceptorChain = [];
              var synchronousRequestInterceptors = true;
              this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
                if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
                  return;
                }

                synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
                requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
              });
              var responseInterceptorChain = [];
              this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
                responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
              });
              var promise;

              if (!synchronousRequestInterceptors) {
                var chain = [dispatchRequest, undefined];
                Array.prototype.unshift.apply(chain, requestInterceptorChain);
                chain = chain.concat(responseInterceptorChain);
                promise = Promise.resolve(config);

                while (chain.length) {
                  promise = promise.then(chain.shift(), chain.shift());
                }

                return promise;
              }

              var newConfig = config;

              while (requestInterceptorChain.length) {
                var onFulfilled = requestInterceptorChain.shift();
                var onRejected = requestInterceptorChain.shift();

                try {
                  newConfig = onFulfilled(newConfig);
                } catch (error) {
                  onRejected(error);
                  break;
                }
              }

              try {
                promise = dispatchRequest(newConfig);
              } catch (error) {
                return Promise.reject(error);
              }

              while (responseInterceptorChain.length) {
                promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
              }

              return promise;
            };

            Axios$1.prototype.getUri = function getUri(config) {
              config = mergeConfig$1(this.defaults, config);
              return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
            }; // Provide aliases for supported request methods


            utils$4.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
              /*eslint func-names:0*/
              Axios$1.prototype[method] = function (url, config) {
                return this.request(mergeConfig$1(config || {}, {
                  method: method,
                  url: url,
                  data: (config || {}).data
                }));
              };
            });
            utils$4.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
              /*eslint func-names:0*/
              Axios$1.prototype[method] = function (url, data, config) {
                return this.request(mergeConfig$1(config || {}, {
                  method: method,
                  url: url,
                  data: data
                }));
              };
            });
            var Axios_1 = Axios$1;

            var Cancel = Cancel_1;
            /**
             * A `CancelToken` is an object that can be used to request cancellation of an operation.
             *
             * @class
             * @param {Function} executor The executor function.
             */

            function CancelToken(executor) {
              if (typeof executor !== 'function') {
                throw new TypeError('executor must be a function.');
              }

              var resolvePromise;
              this.promise = new Promise(function promiseExecutor(resolve) {
                resolvePromise = resolve;
              });
              var token = this; // eslint-disable-next-line func-names

              this.promise.then(function (cancel) {
                if (!token._listeners) return;
                var i;
                var l = token._listeners.length;

                for (i = 0; i < l; i++) {
                  token._listeners[i](cancel);
                }

                token._listeners = null;
              }); // eslint-disable-next-line func-names

              this.promise.then = function (onfulfilled) {
                var _resolve; // eslint-disable-next-line func-names


                var promise = new Promise(function (resolve) {
                  token.subscribe(resolve);
                  _resolve = resolve;
                }).then(onfulfilled);

                promise.cancel = function reject() {
                  token.unsubscribe(_resolve);
                };

                return promise;
              };

              executor(function cancel(message) {
                if (token.reason) {
                  // Cancellation has already been requested
                  return;
                }

                token.reason = new Cancel(message);
                resolvePromise(token.reason);
              });
            }
            /**
             * Throws a `Cancel` if cancellation has been requested.
             */


            CancelToken.prototype.throwIfRequested = function throwIfRequested() {
              if (this.reason) {
                throw this.reason;
              }
            };
            /**
             * Subscribe to the cancel signal
             */


            CancelToken.prototype.subscribe = function subscribe(listener) {
              if (this.reason) {
                listener(this.reason);
                return;
              }

              if (this._listeners) {
                this._listeners.push(listener);
              } else {
                this._listeners = [listener];
              }
            };
            /**
             * Unsubscribe from the cancel signal
             */


            CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
              if (!this._listeners) {
                return;
              }

              var index = this._listeners.indexOf(listener);

              if (index !== -1) {
                this._listeners.splice(index, 1);
              }
            };
            /**
             * Returns an object that contains a new `CancelToken` and a function that, when called,
             * cancels the `CancelToken`.
             */


            CancelToken.source = function source() {
              var cancel;
              var token = new CancelToken(function executor(c) {
                cancel = c;
              });
              return {
                token: token,
                cancel: cancel
              };
            };

            var CancelToken_1 = CancelToken;

            /**
             * Syntactic sugar for invoking a function and expanding an array for arguments.
             *
             * Common use case would be to use `Function.prototype.apply`.
             *
             *  ```js
             *  function f(x, y, z) {}
             *  var args = [1, 2, 3];
             *  f.apply(null, args);
             *  ```
             *
             * With `spread` this example can be re-written.
             *
             *  ```js
             *  spread(function(x, y, z) {})([1, 2, 3]);
             *  ```
             *
             * @param {Function} callback
             * @returns {Function}
             */


            var spread = function spread(callback) {
              return function wrap(arr) {
                return callback.apply(null, arr);
              };
            };

            /**
             * Determines whether the payload is an error thrown by Axios
             *
             * @param {*} payload The value to test
             * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
             */


            var isAxiosError = function isAxiosError(payload) {
              return _typeof$1(payload) === 'object' && payload.isAxiosError === true;
            };

            var utils$3 = utils$g;
            var bind$2 = bind$4;
            var Axios = Axios_1;
            var mergeConfig = mergeConfig$2;
            var defaults$2 = defaults_1;
            /**
             * Create an instance of Axios
             *
             * @param {Object} defaultConfig The default config for the instance
             * @return {Axios} A new instance of Axios
             */

            function createInstance(defaultConfig) {
              var context = new Axios(defaultConfig);
              var instance = bind$2(Axios.prototype.request, context); // Copy axios.prototype to instance

              utils$3.extend(instance, Axios.prototype, context); // Copy context to instance

              utils$3.extend(instance, context); // Factory for creating new instances

              instance.create = function create(instanceConfig) {
                return createInstance(mergeConfig(defaultConfig, instanceConfig));
              };

              return instance;
            } // Create the default instance to be exported


            var axios$1 = createInstance(defaults$2); // Expose Axios class to allow class inheritance

            axios$1.Axios = Axios; // Expose Cancel & CancelToken

            axios$1.Cancel = Cancel_1;
            axios$1.CancelToken = CancelToken_1;
            axios$1.isCancel = isCancel$1;
            axios$1.VERSION = data.version; // Expose all/spread

            axios$1.all = function all(promises) {
              return Promise.all(promises);
            };

            axios$1.spread = spread; // Expose isAxiosError

            axios$1.isAxiosError = isAxiosError;
            axios$2.exports = axios$1; // Allow use of default import syntax in TypeScript

            axios$2.exports["default"] = axios$1;

            var axios = axios$2.exports;

            /**
             * @typedef {Object} MinterApiInstanceType
             * @property {string} defaults.apiType
             *
             * @typedef {AxiosInstance | MinterApiInstanceType} MinterApiInstance
             */

            /**
             * @param {Object} [options]
             * @param {string} [options.apiType]
             * @param {number} [options.chainId]
             * @param {string} [options.baseURL]
             * @param {...import('axios').AxiosRequestConfig} [options.*]
             * @return {MinterApiInstance}
             */

            function MinterApi() {
              var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

              if (!options.apiType) {
                options.apiType = API_TYPE_NODE;
              } // ensure error payload will be rejected
              // options.adapter = thenableToRejectedAdapter;
              // ensure `options.transformResponse` is array


              if (!Array.isArray(options.transformResponse)) {
                options.transformResponse = options.transformResponse ? [options.transformResponse] : [];
              } // @TODO duplication with getData
              // transform response from gate to minter-node api format
              // if (options.apiType === API_TYPE_GATE) {
              //     options.transformResponse.push((data) => {
              //         data = parseData(data);
              //         // transform `then`
              //         // `data: {data: {}}` to `data: {result: {}}`
              //         // if (data.data) {
              //         //     data.result = data.data;
              //         // }
              //
              //         return data;
              //     });
              // }
              // ensure, that error.message exists


              options.transformResponse.push(function (data) {
                var _data$error;

                data = parseData(data);

                if ((_data$error = data.error) !== null && _data$error !== void 0 && _data$error.details) {
                  data.error.data = data.error.details;
                } // transform `result` to `error` if its failed
                // if (data.result && data.result.log) {
                //     data.error = data.result;
                // }
                // rename error.log
                // if (data.error && data.error.log && !data.error.message) {
                //     data.error.message = data.error.log;
                // }
                // rename error.tx_result.log
                // if (data.error && data.error.tx_result && data.error.tx_result.log && !data.error.tx_result.message) {
                //     data.error.tx_result.message = data.error.tx_result.log;
                // }


                return data;
              });
              var instance = axios.create(options);
              instance.defaults.apiType = options.apiType;
              instance.defaults.chainId = options.chainId; // ensure trailing slash on baseURL

              instance.interceptors.request.use(function (config) {
                if (config.baseURL[config.baseURL.length - 1] !== '/') {
                  config.baseURL += '/';
                }

                return config;
              });
              return instance;
            } // transform thenable response with error payload into rejected

            /*
            function thenableToRejectedAdapter(config) {
                const adapter = (thenableToRejectedAdapter !== config.adapter && config.adapter) || axios.defaults.adapter;

                return new Promise((resolve, reject) => {
                    adapter(config)
                        .then((response) => {
                            response.data = parseData(response.data);
                            if (response.data.error || (response.data.result && response.data.result.message)) {
                                reject(createError(
                                    `Request failed with status code ${response.status}`,
                                    response.config,
                                    null,
                                    response.request,
                                    response,
                                ));
                            }

                            resolve(response);
                        })
                        .catch(reject);
                });
            }
            */

            function parseData(data) {
              if (typeof data === 'string') {
                try {
                  data = JSON.parse(data);
                } catch (error) {
                  // eslint-disable-next-line no-console
                  console.log(error); // eslint-disable-next-line no-console

                  console.log(data);
                  data = {
                    error: {
                      message: 'Invalid response: failed to parse JSON data. Looks like request URL is invalid.'
                    }
                  };
                }
              }

              return data;
            }

            /**
             * @param {MinterApiInstance} apiInstance
             * @return {function(*): (Promise<number>)}
             */

            function GetNonce(apiInstance) {
              /**
               * Get nonce for new transaction: last transaction number + 1
               * @param {string} address
               * @param {import('axios').AxiosRequestConfig} [axiosOptions]
               * @return {Promise<number>}
               */
              return function getNonce(address, axiosOptions) {
                var nonceUrl = apiInstance.defaults.apiType === API_TYPE_GATE ? "nonce/".concat(address) : "address/".concat(address);
                return apiInstance.get(nonceUrl, axiosOptions).then(function (response) {
                  var resData = response.data;
                  var nonce = apiInstance.defaults.apiType === API_TYPE_GATE ? resData.nonce : resData.transaction_count;
                  var newNonce = Number(nonce) + 1;

                  if (Number.isNaN(newNonce)) {
                    // eslint-disable-next-line unicorn/prefer-type-error
                    throw new Error("Can't get nonce, API returns '".concat(nonce, "'"));
                  }

                  return newNonce;
                });
              };
            }

            var src$2 = {};

            var browser$1 = {};

            var MAX_ALLOC = Math.pow(2, 30) - 1; // default in iojs

            function checkBuffer(buf, name) {
              if (typeof buf !== 'string' && !isBuffer$2(buf)) {
                throw new TypeError(name + ' must be a buffer or string');
              }
            }

            var precondition = function precondition(password, salt, iterations, keylen) {
              checkBuffer(password, 'Password');
              checkBuffer(salt, 'Salt');

              if (typeof iterations !== 'number') {
                throw new TypeError('Iterations not a number');
              }

              if (iterations < 0) {
                throw new TypeError('Bad iterations');
              }

              if (typeof keylen !== 'number') {
                throw new TypeError('Key length not a number');
              }

              if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) {
                /* eslint no-self-compare: 0 */
                throw new TypeError('Bad key length');
              }
            };

            var defaultEncoding$2;
            /* istanbul ignore next */

            {
              defaultEncoding$2 = 'utf-8';
            }

            var defaultEncoding_1 = defaultEncoding$2;

            var MD5 = md5_js;

            var md5$2 = function md5(buffer) {
              return new MD5().update(buffer).digest();
            };

            var md5$1 = md5$2;
            var RIPEMD160$1 = ripemd160$1;
            var sha$1 = sha_js.exports;
            var checkParameters$1 = precondition;
            var defaultEncoding$1 = defaultEncoding_1;
            var Buffer$5 = safeBuffer$1.exports.Buffer;
            var ZEROS$2 = Buffer$5.alloc(128);
            var sizes = {
              md5: 16,
              sha1: 20,
              sha224: 28,
              sha256: 32,
              sha384: 48,
              sha512: 64,
              rmd160: 20,
              ripemd160: 20
            };

            function Hmac$2(alg, key, saltLen) {
              var hash = getDigest(alg);
              var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;

              if (key.length > blocksize) {
                key = hash(key);
              } else if (key.length < blocksize) {
                key = Buffer$5.concat([key, ZEROS$2], blocksize);
              }

              var ipad = Buffer$5.allocUnsafe(blocksize + sizes[alg]);
              var opad = Buffer$5.allocUnsafe(blocksize + sizes[alg]);

              for (var i = 0; i < blocksize; i++) {
                ipad[i] = key[i] ^ 0x36;
                opad[i] = key[i] ^ 0x5C;
              }

              var ipad1 = Buffer$5.allocUnsafe(blocksize + saltLen + 4);
              ipad.copy(ipad1, 0, 0, blocksize);
              this.ipad1 = ipad1;
              this.ipad2 = ipad;
              this.opad = opad;
              this.alg = alg;
              this.blocksize = blocksize;
              this.hash = hash;
              this.size = sizes[alg];
            }

            Hmac$2.prototype.run = function (data, ipad) {
              data.copy(ipad, this.blocksize);
              var h = this.hash(ipad);
              h.copy(this.opad, this.blocksize);
              return this.hash(this.opad);
            };

            function getDigest(alg) {
              function shaFunc(data) {
                return sha$1(alg).update(data).digest();
              }

              function rmd160Func(data) {
                return new RIPEMD160$1().update(data).digest();
              }

              if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func;
              if (alg === 'md5') return md5$1;
              return shaFunc;
            }

            function pbkdf2(password, salt, iterations, keylen, digest) {
              checkParameters$1(password, salt, iterations, keylen);
              if (!Buffer$5.isBuffer(password)) password = Buffer$5.from(password, defaultEncoding$1);
              if (!Buffer$5.isBuffer(salt)) salt = Buffer$5.from(salt, defaultEncoding$1);
              digest = digest || 'sha1';
              var hmac = new Hmac$2(digest, password, salt.length);
              var DK = Buffer$5.allocUnsafe(keylen);
              var block1 = Buffer$5.allocUnsafe(salt.length + 4);
              salt.copy(block1, 0, 0, salt.length);
              var destPos = 0;
              var hLen = sizes[digest];
              var l = Math.ceil(keylen / hLen);

              for (var i = 1; i <= l; i++) {
                block1.writeUInt32BE(i, salt.length);
                var T = hmac.run(block1, hmac.ipad1);
                var U = T;

                for (var j = 1; j < iterations; j++) {
                  U = hmac.run(U, hmac.ipad2);

                  for (var k = 0; k < hLen; k++) {
                    T[k] ^= U[k];
                  }
                }

                T.copy(DK, destPos);
                destPos += hLen;
              }

              return DK;
            }

            var syncBrowser = pbkdf2;

            var checkParameters = precondition;
            var defaultEncoding = defaultEncoding_1;
            var sync = syncBrowser;
            var Buffer$4 = safeBuffer$1.exports.Buffer;
            var ZERO_BUF;
            var subtle = commonjsGlobal.crypto && commonjsGlobal.crypto.subtle;
            var toBrowser = {
              'sha': 'SHA-1',
              'sha-1': 'SHA-1',
              'sha1': 'SHA-1',
              'sha256': 'SHA-256',
              'sha-256': 'SHA-256',
              'sha384': 'SHA-384',
              'sha-384': 'SHA-384',
              'sha-512': 'SHA-512',
              'sha512': 'SHA-512'
            };
            var checks = [];

            function checkNative(algo) {
              if (commonjsGlobal.process && !commonjsGlobal.process.browser) {
                return Promise.resolve(false);
              }

              if (!subtle || !subtle.importKey || !subtle.deriveBits) {
                return Promise.resolve(false);
              }

              if (checks[algo] !== undefined) {
                return checks[algo];
              }

              ZERO_BUF = ZERO_BUF || Buffer$4.alloc(8);
              var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo).then(function () {
                return true;
              })["catch"](function () {
                return false;
              });
              checks[algo] = prom;
              return prom;
            }

            function browserPbkdf2(password, salt, iterations, length, algo) {
              return subtle.importKey('raw', password, {
                name: 'PBKDF2'
              }, false, ['deriveBits']).then(function (key) {
                return subtle.deriveBits({
                  name: 'PBKDF2',
                  salt: salt,
                  iterations: iterations,
                  hash: {
                    name: algo
                  }
                }, key, length << 3);
              }).then(function (res) {
                return Buffer$4.from(res);
              });
            }

            function resolvePromise(promise, callback) {
              promise.then(function (out) {
                nextTick(function () {
                  callback(null, out);
                });
              }, function (e) {
                nextTick(function () {
                  callback(e);
                });
              });
            }

            var async = function async(password, salt, iterations, keylen, digest, callback) {
              if (typeof digest === 'function') {
                callback = digest;
                digest = undefined;
              }

              digest = digest || 'sha1';
              var algo = toBrowser[digest.toLowerCase()];

              if (!algo || typeof commonjsGlobal.Promise !== 'function') {
                return nextTick(function () {
                  var out;

                  try {
                    out = sync(password, salt, iterations, keylen, digest);
                  } catch (e) {
                    return callback(e);
                  }

                  callback(null, out);
                });
              }

              checkParameters(password, salt, iterations, keylen);
              if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2');
              if (!Buffer$4.isBuffer(password)) password = Buffer$4.from(password, defaultEncoding);
              if (!Buffer$4.isBuffer(salt)) salt = Buffer$4.from(salt, defaultEncoding);
              resolvePromise(checkNative(algo).then(function (resp) {
                if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo);
                return sync(password, salt, iterations, keylen, digest);
              }), callback);
            };

            browser$1.pbkdf2 = async;
            browser$1.pbkdf2Sync = syncBrowser;

            var _wordlists = {};

            var require$$0$1 = [
            	"abdikace",
            	"abeceda",
            	"adresa",
            	"agrese",
            	"akce",
            	"aktovka",
            	"alej",
            	"alkohol",
            	"amputace",
            	"ananas",
            	"andulka",
            	"anekdota",
            	"anketa",
            	"antika",
            	"anulovat",
            	"archa",
            	"arogance",
            	"asfalt",
            	"asistent",
            	"aspirace",
            	"astma",
            	"astronom",
            	"atlas",
            	"atletika",
            	"atol",
            	"autobus",
            	"azyl",
            	"babka",
            	"bachor",
            	"bacil",
            	"baculka",
            	"badatel",
            	"bageta",
            	"bagr",
            	"bahno",
            	"bakterie",
            	"balada",
            	"baletka",
            	"balkon",
            	"balonek",
            	"balvan",
            	"balza",
            	"bambus",
            	"bankomat",
            	"barbar",
            	"baret",
            	"barman",
            	"baroko",
            	"barva",
            	"baterka",
            	"batoh",
            	"bavlna",
            	"bazalka",
            	"bazilika",
            	"bazuka",
            	"bedna",
            	"beran",
            	"beseda",
            	"bestie",
            	"beton",
            	"bezinka",
            	"bezmoc",
            	"beztak",
            	"bicykl",
            	"bidlo",
            	"biftek",
            	"bikiny",
            	"bilance",
            	"biograf",
            	"biolog",
            	"bitva",
            	"bizon",
            	"blahobyt",
            	"blatouch",
            	"blecha",
            	"bledule",
            	"blesk",
            	"blikat",
            	"blizna",
            	"blokovat",
            	"bloudit",
            	"blud",
            	"bobek",
            	"bobr",
            	"bodlina",
            	"bodnout",
            	"bohatost",
            	"bojkot",
            	"bojovat",
            	"bokorys",
            	"bolest",
            	"borec",
            	"borovice",
            	"bota",
            	"boubel",
            	"bouchat",
            	"bouda",
            	"boule",
            	"bourat",
            	"boxer",
            	"bradavka",
            	"brambora",
            	"branka",
            	"bratr",
            	"brepta",
            	"briketa",
            	"brko",
            	"brloh",
            	"bronz",
            	"broskev",
            	"brunetka",
            	"brusinka",
            	"brzda",
            	"brzy",
            	"bublina",
            	"bubnovat",
            	"buchta",
            	"buditel",
            	"budka",
            	"budova",
            	"bufet",
            	"bujarost",
            	"bukvice",
            	"buldok",
            	"bulva",
            	"bunda",
            	"bunkr",
            	"burza",
            	"butik",
            	"buvol",
            	"buzola",
            	"bydlet",
            	"bylina",
            	"bytovka",
            	"bzukot",
            	"capart",
            	"carevna",
            	"cedr",
            	"cedule",
            	"cejch",
            	"cejn",
            	"cela",
            	"celer",
            	"celkem",
            	"celnice",
            	"cenina",
            	"cennost",
            	"cenovka",
            	"centrum",
            	"cenzor",
            	"cestopis",
            	"cetka",
            	"chalupa",
            	"chapadlo",
            	"charita",
            	"chata",
            	"chechtat",
            	"chemie",
            	"chichot",
            	"chirurg",
            	"chlad",
            	"chleba",
            	"chlubit",
            	"chmel",
            	"chmura",
            	"chobot",
            	"chochol",
            	"chodba",
            	"cholera",
            	"chomout",
            	"chopit",
            	"choroba",
            	"chov",
            	"chrapot",
            	"chrlit",
            	"chrt",
            	"chrup",
            	"chtivost",
            	"chudina",
            	"chutnat",
            	"chvat",
            	"chvilka",
            	"chvost",
            	"chyba",
            	"chystat",
            	"chytit",
            	"cibule",
            	"cigareta",
            	"cihelna",
            	"cihla",
            	"cinkot",
            	"cirkus",
            	"cisterna",
            	"citace",
            	"citrus",
            	"cizinec",
            	"cizost",
            	"clona",
            	"cokoliv",
            	"couvat",
            	"ctitel",
            	"ctnost",
            	"cudnost",
            	"cuketa",
            	"cukr",
            	"cupot",
            	"cvaknout",
            	"cval",
            	"cvik",
            	"cvrkot",
            	"cyklista",
            	"daleko",
            	"dareba",
            	"datel",
            	"datum",
            	"dcera",
            	"debata",
            	"dechovka",
            	"decibel",
            	"deficit",
            	"deflace",
            	"dekl",
            	"dekret",
            	"demokrat",
            	"deprese",
            	"derby",
            	"deska",
            	"detektiv",
            	"dikobraz",
            	"diktovat",
            	"dioda",
            	"diplom",
            	"disk",
            	"displej",
            	"divadlo",
            	"divoch",
            	"dlaha",
            	"dlouho",
            	"dluhopis",
            	"dnes",
            	"dobro",
            	"dobytek",
            	"docent",
            	"dochutit",
            	"dodnes",
            	"dohled",
            	"dohoda",
            	"dohra",
            	"dojem",
            	"dojnice",
            	"doklad",
            	"dokola",
            	"doktor",
            	"dokument",
            	"dolar",
            	"doleva",
            	"dolina",
            	"doma",
            	"dominant",
            	"domluvit",
            	"domov",
            	"donutit",
            	"dopad",
            	"dopis",
            	"doplnit",
            	"doposud",
            	"doprovod",
            	"dopustit",
            	"dorazit",
            	"dorost",
            	"dort",
            	"dosah",
            	"doslov",
            	"dostatek",
            	"dosud",
            	"dosyta",
            	"dotaz",
            	"dotek",
            	"dotknout",
            	"doufat",
            	"doutnat",
            	"dovozce",
            	"dozadu",
            	"doznat",
            	"dozorce",
            	"drahota",
            	"drak",
            	"dramatik",
            	"dravec",
            	"draze",
            	"drdol",
            	"drobnost",
            	"drogerie",
            	"drozd",
            	"drsnost",
            	"drtit",
            	"drzost",
            	"duben",
            	"duchovno",
            	"dudek",
            	"duha",
            	"duhovka",
            	"dusit",
            	"dusno",
            	"dutost",
            	"dvojice",
            	"dvorec",
            	"dynamit",
            	"ekolog",
            	"ekonomie",
            	"elektron",
            	"elipsa",
            	"email",
            	"emise",
            	"emoce",
            	"empatie",
            	"epizoda",
            	"epocha",
            	"epopej",
            	"epos",
            	"esej",
            	"esence",
            	"eskorta",
            	"eskymo",
            	"etiketa",
            	"euforie",
            	"evoluce",
            	"exekuce",
            	"exkurze",
            	"expedice",
            	"exploze",
            	"export",
            	"extrakt",
            	"facka",
            	"fajfka",
            	"fakulta",
            	"fanatik",
            	"fantazie",
            	"farmacie",
            	"favorit",
            	"fazole",
            	"federace",
            	"fejeton",
            	"fenka",
            	"fialka",
            	"figurant",
            	"filozof",
            	"filtr",
            	"finance",
            	"finta",
            	"fixace",
            	"fjord",
            	"flanel",
            	"flirt",
            	"flotila",
            	"fond",
            	"fosfor",
            	"fotbal",
            	"fotka",
            	"foton",
            	"frakce",
            	"freska",
            	"fronta",
            	"fukar",
            	"funkce",
            	"fyzika",
            	"galeje",
            	"garant",
            	"genetika",
            	"geolog",
            	"gilotina",
            	"glazura",
            	"glejt",
            	"golem",
            	"golfista",
            	"gotika",
            	"graf",
            	"gramofon",
            	"granule",
            	"grep",
            	"gril",
            	"grog",
            	"groteska",
            	"guma",
            	"hadice",
            	"hadr",
            	"hala",
            	"halenka",
            	"hanba",
            	"hanopis",
            	"harfa",
            	"harpuna",
            	"havran",
            	"hebkost",
            	"hejkal",
            	"hejno",
            	"hejtman",
            	"hektar",
            	"helma",
            	"hematom",
            	"herec",
            	"herna",
            	"heslo",
            	"hezky",
            	"historik",
            	"hladovka",
            	"hlasivky",
            	"hlava",
            	"hledat",
            	"hlen",
            	"hlodavec",
            	"hloh",
            	"hloupost",
            	"hltat",
            	"hlubina",
            	"hluchota",
            	"hmat",
            	"hmota",
            	"hmyz",
            	"hnis",
            	"hnojivo",
            	"hnout",
            	"hoblina",
            	"hoboj",
            	"hoch",
            	"hodiny",
            	"hodlat",
            	"hodnota",
            	"hodovat",
            	"hojnost",
            	"hokej",
            	"holinka",
            	"holka",
            	"holub",
            	"homole",
            	"honitba",
            	"honorace",
            	"horal",
            	"horda",
            	"horizont",
            	"horko",
            	"horlivec",
            	"hormon",
            	"hornina",
            	"horoskop",
            	"horstvo",
            	"hospoda",
            	"hostina",
            	"hotovost",
            	"houba",
            	"houf",
            	"houpat",
            	"houska",
            	"hovor",
            	"hradba",
            	"hranice",
            	"hravost",
            	"hrazda",
            	"hrbolek",
            	"hrdina",
            	"hrdlo",
            	"hrdost",
            	"hrnek",
            	"hrobka",
            	"hromada",
            	"hrot",
            	"hrouda",
            	"hrozen",
            	"hrstka",
            	"hrubost",
            	"hryzat",
            	"hubenost",
            	"hubnout",
            	"hudba",
            	"hukot",
            	"humr",
            	"husita",
            	"hustota",
            	"hvozd",
            	"hybnost",
            	"hydrant",
            	"hygiena",
            	"hymna",
            	"hysterik",
            	"idylka",
            	"ihned",
            	"ikona",
            	"iluze",
            	"imunita",
            	"infekce",
            	"inflace",
            	"inkaso",
            	"inovace",
            	"inspekce",
            	"internet",
            	"invalida",
            	"investor",
            	"inzerce",
            	"ironie",
            	"jablko",
            	"jachta",
            	"jahoda",
            	"jakmile",
            	"jakost",
            	"jalovec",
            	"jantar",
            	"jarmark",
            	"jaro",
            	"jasan",
            	"jasno",
            	"jatka",
            	"javor",
            	"jazyk",
            	"jedinec",
            	"jedle",
            	"jednatel",
            	"jehlan",
            	"jekot",
            	"jelen",
            	"jelito",
            	"jemnost",
            	"jenom",
            	"jepice",
            	"jeseter",
            	"jevit",
            	"jezdec",
            	"jezero",
            	"jinak",
            	"jindy",
            	"jinoch",
            	"jiskra",
            	"jistota",
            	"jitrnice",
            	"jizva",
            	"jmenovat",
            	"jogurt",
            	"jurta",
            	"kabaret",
            	"kabel",
            	"kabinet",
            	"kachna",
            	"kadet",
            	"kadidlo",
            	"kahan",
            	"kajak",
            	"kajuta",
            	"kakao",
            	"kaktus",
            	"kalamita",
            	"kalhoty",
            	"kalibr",
            	"kalnost",
            	"kamera",
            	"kamkoliv",
            	"kamna",
            	"kanibal",
            	"kanoe",
            	"kantor",
            	"kapalina",
            	"kapela",
            	"kapitola",
            	"kapka",
            	"kaple",
            	"kapota",
            	"kapr",
            	"kapusta",
            	"kapybara",
            	"karamel",
            	"karotka",
            	"karton",
            	"kasa",
            	"katalog",
            	"katedra",
            	"kauce",
            	"kauza",
            	"kavalec",
            	"kazajka",
            	"kazeta",
            	"kazivost",
            	"kdekoliv",
            	"kdesi",
            	"kedluben",
            	"kemp",
            	"keramika",
            	"kino",
            	"klacek",
            	"kladivo",
            	"klam",
            	"klapot",
            	"klasika",
            	"klaun",
            	"klec",
            	"klenba",
            	"klepat",
            	"klesnout",
            	"klid",
            	"klima",
            	"klisna",
            	"klobouk",
            	"klokan",
            	"klopa",
            	"kloub",
            	"klubovna",
            	"klusat",
            	"kluzkost",
            	"kmen",
            	"kmitat",
            	"kmotr",
            	"kniha",
            	"knot",
            	"koalice",
            	"koberec",
            	"kobka",
            	"kobliha",
            	"kobyla",
            	"kocour",
            	"kohout",
            	"kojenec",
            	"kokos",
            	"koktejl",
            	"kolaps",
            	"koleda",
            	"kolize",
            	"kolo",
            	"komando",
            	"kometa",
            	"komik",
            	"komnata",
            	"komora",
            	"kompas",
            	"komunita",
            	"konat",
            	"koncept",
            	"kondice",
            	"konec",
            	"konfese",
            	"kongres",
            	"konina",
            	"konkurs",
            	"kontakt",
            	"konzerva",
            	"kopanec",
            	"kopie",
            	"kopnout",
            	"koprovka",
            	"korbel",
            	"korektor",
            	"kormidlo",
            	"koroptev",
            	"korpus",
            	"koruna",
            	"koryto",
            	"korzet",
            	"kosatec",
            	"kostka",
            	"kotel",
            	"kotleta",
            	"kotoul",
            	"koukat",
            	"koupelna",
            	"kousek",
            	"kouzlo",
            	"kovboj",
            	"koza",
            	"kozoroh",
            	"krabice",
            	"krach",
            	"krajina",
            	"kralovat",
            	"krasopis",
            	"kravata",
            	"kredit",
            	"krejcar",
            	"kresba",
            	"kreveta",
            	"kriket",
            	"kritik",
            	"krize",
            	"krkavec",
            	"krmelec",
            	"krmivo",
            	"krocan",
            	"krok",
            	"kronika",
            	"kropit",
            	"kroupa",
            	"krovka",
            	"krtek",
            	"kruhadlo",
            	"krupice",
            	"krutost",
            	"krvinka",
            	"krychle",
            	"krypta",
            	"krystal",
            	"kryt",
            	"kudlanka",
            	"kufr",
            	"kujnost",
            	"kukla",
            	"kulajda",
            	"kulich",
            	"kulka",
            	"kulomet",
            	"kultura",
            	"kuna",
            	"kupodivu",
            	"kurt",
            	"kurzor",
            	"kutil",
            	"kvalita",
            	"kvasinka",
            	"kvestor",
            	"kynolog",
            	"kyselina",
            	"kytara",
            	"kytice",
            	"kytka",
            	"kytovec",
            	"kyvadlo",
            	"labrador",
            	"lachtan",
            	"ladnost",
            	"laik",
            	"lakomec",
            	"lamela",
            	"lampa",
            	"lanovka",
            	"lasice",
            	"laso",
            	"lastura",
            	"latinka",
            	"lavina",
            	"lebka",
            	"leckdy",
            	"leden",
            	"lednice",
            	"ledovka",
            	"ledvina",
            	"legenda",
            	"legie",
            	"legrace",
            	"lehce",
            	"lehkost",
            	"lehnout",
            	"lektvar",
            	"lenochod",
            	"lentilka",
            	"lepenka",
            	"lepidlo",
            	"letadlo",
            	"letec",
            	"letmo",
            	"letokruh",
            	"levhart",
            	"levitace",
            	"levobok",
            	"libra",
            	"lichotka",
            	"lidojed",
            	"lidskost",
            	"lihovina",
            	"lijavec",
            	"lilek",
            	"limetka",
            	"linie",
            	"linka",
            	"linoleum",
            	"listopad",
            	"litina",
            	"litovat",
            	"lobista",
            	"lodivod",
            	"logika",
            	"logoped",
            	"lokalita",
            	"loket",
            	"lomcovat",
            	"lopata",
            	"lopuch",
            	"lord",
            	"losos",
            	"lotr",
            	"loudal",
            	"louh",
            	"louka",
            	"louskat",
            	"lovec",
            	"lstivost",
            	"lucerna",
            	"lucifer",
            	"lump",
            	"lusk",
            	"lustrace",
            	"lvice",
            	"lyra",
            	"lyrika",
            	"lysina",
            	"madam",
            	"madlo",
            	"magistr",
            	"mahagon",
            	"majetek",
            	"majitel",
            	"majorita",
            	"makak",
            	"makovice",
            	"makrela",
            	"malba",
            	"malina",
            	"malovat",
            	"malvice",
            	"maminka",
            	"mandle",
            	"manko",
            	"marnost",
            	"masakr",
            	"maskot",
            	"masopust",
            	"matice",
            	"matrika",
            	"maturita",
            	"mazanec",
            	"mazivo",
            	"mazlit",
            	"mazurka",
            	"mdloba",
            	"mechanik",
            	"meditace",
            	"medovina",
            	"melasa",
            	"meloun",
            	"mentolka",
            	"metla",
            	"metoda",
            	"metr",
            	"mezera",
            	"migrace",
            	"mihnout",
            	"mihule",
            	"mikina",
            	"mikrofon",
            	"milenec",
            	"milimetr",
            	"milost",
            	"mimika",
            	"mincovna",
            	"minibar",
            	"minomet",
            	"minulost",
            	"miska",
            	"mistr",
            	"mixovat",
            	"mladost",
            	"mlha",
            	"mlhovina",
            	"mlok",
            	"mlsat",
            	"mluvit",
            	"mnich",
            	"mnohem",
            	"mobil",
            	"mocnost",
            	"modelka",
            	"modlitba",
            	"mohyla",
            	"mokro",
            	"molekula",
            	"momentka",
            	"monarcha",
            	"monokl",
            	"monstrum",
            	"montovat",
            	"monzun",
            	"mosaz",
            	"moskyt",
            	"most",
            	"motivace",
            	"motorka",
            	"motyka",
            	"moucha",
            	"moudrost",
            	"mozaika",
            	"mozek",
            	"mozol",
            	"mramor",
            	"mravenec",
            	"mrkev",
            	"mrtvola",
            	"mrzet",
            	"mrzutost",
            	"mstitel",
            	"mudrc",
            	"muflon",
            	"mulat",
            	"mumie",
            	"munice",
            	"muset",
            	"mutace",
            	"muzeum",
            	"muzikant",
            	"myslivec",
            	"mzda",
            	"nabourat",
            	"nachytat",
            	"nadace",
            	"nadbytek",
            	"nadhoz",
            	"nadobro",
            	"nadpis",
            	"nahlas",
            	"nahnat",
            	"nahodile",
            	"nahradit",
            	"naivita",
            	"najednou",
            	"najisto",
            	"najmout",
            	"naklonit",
            	"nakonec",
            	"nakrmit",
            	"nalevo",
            	"namazat",
            	"namluvit",
            	"nanometr",
            	"naoko",
            	"naopak",
            	"naostro",
            	"napadat",
            	"napevno",
            	"naplnit",
            	"napnout",
            	"naposled",
            	"naprosto",
            	"narodit",
            	"naruby",
            	"narychlo",
            	"nasadit",
            	"nasekat",
            	"naslepo",
            	"nastat",
            	"natolik",
            	"navenek",
            	"navrch",
            	"navzdory",
            	"nazvat",
            	"nebe",
            	"nechat",
            	"necky",
            	"nedaleko",
            	"nedbat",
            	"neduh",
            	"negace",
            	"nehet",
            	"nehoda",
            	"nejen",
            	"nejprve",
            	"neklid",
            	"nelibost",
            	"nemilost",
            	"nemoc",
            	"neochota",
            	"neonka",
            	"nepokoj",
            	"nerost",
            	"nerv",
            	"nesmysl",
            	"nesoulad",
            	"netvor",
            	"neuron",
            	"nevina",
            	"nezvykle",
            	"nicota",
            	"nijak",
            	"nikam",
            	"nikdy",
            	"nikl",
            	"nikterak",
            	"nitro",
            	"nocleh",
            	"nohavice",
            	"nominace",
            	"nora",
            	"norek",
            	"nositel",
            	"nosnost",
            	"nouze",
            	"noviny",
            	"novota",
            	"nozdra",
            	"nuda",
            	"nudle",
            	"nuget",
            	"nutit",
            	"nutnost",
            	"nutrie",
            	"nymfa",
            	"obal",
            	"obarvit",
            	"obava",
            	"obdiv",
            	"obec",
            	"obehnat",
            	"obejmout",
            	"obezita",
            	"obhajoba",
            	"obilnice",
            	"objasnit",
            	"objekt",
            	"obklopit",
            	"oblast",
            	"oblek",
            	"obliba",
            	"obloha",
            	"obluda",
            	"obnos",
            	"obohatit",
            	"obojek",
            	"obout",
            	"obrazec",
            	"obrna",
            	"obruba",
            	"obrys",
            	"obsah",
            	"obsluha",
            	"obstarat",
            	"obuv",
            	"obvaz",
            	"obvinit",
            	"obvod",
            	"obvykle",
            	"obyvatel",
            	"obzor",
            	"ocas",
            	"ocel",
            	"ocenit",
            	"ochladit",
            	"ochota",
            	"ochrana",
            	"ocitnout",
            	"odboj",
            	"odbyt",
            	"odchod",
            	"odcizit",
            	"odebrat",
            	"odeslat",
            	"odevzdat",
            	"odezva",
            	"odhadce",
            	"odhodit",
            	"odjet",
            	"odjinud",
            	"odkaz",
            	"odkoupit",
            	"odliv",
            	"odluka",
            	"odmlka",
            	"odolnost",
            	"odpad",
            	"odpis",
            	"odplout",
            	"odpor",
            	"odpustit",
            	"odpykat",
            	"odrazka",
            	"odsoudit",
            	"odstup",
            	"odsun",
            	"odtok",
            	"odtud",
            	"odvaha",
            	"odveta",
            	"odvolat",
            	"odvracet",
            	"odznak",
            	"ofina",
            	"ofsajd",
            	"ohlas",
            	"ohnisko",
            	"ohrada",
            	"ohrozit",
            	"ohryzek",
            	"okap",
            	"okenice",
            	"oklika",
            	"okno",
            	"okouzlit",
            	"okovy",
            	"okrasa",
            	"okres",
            	"okrsek",
            	"okruh",
            	"okupant",
            	"okurka",
            	"okusit",
            	"olejnina",
            	"olizovat",
            	"omak",
            	"omeleta",
            	"omezit",
            	"omladina",
            	"omlouvat",
            	"omluva",
            	"omyl",
            	"onehdy",
            	"opakovat",
            	"opasek",
            	"operace",
            	"opice",
            	"opilost",
            	"opisovat",
            	"opora",
            	"opozice",
            	"opravdu",
            	"oproti",
            	"orbital",
            	"orchestr",
            	"orgie",
            	"orlice",
            	"orloj",
            	"ortel",
            	"osada",
            	"oschnout",
            	"osika",
            	"osivo",
            	"oslava",
            	"oslepit",
            	"oslnit",
            	"oslovit",
            	"osnova",
            	"osoba",
            	"osolit",
            	"ospalec",
            	"osten",
            	"ostraha",
            	"ostuda",
            	"ostych",
            	"osvojit",
            	"oteplit",
            	"otisk",
            	"otop",
            	"otrhat",
            	"otrlost",
            	"otrok",
            	"otruby",
            	"otvor",
            	"ovanout",
            	"ovar",
            	"oves",
            	"ovlivnit",
            	"ovoce",
            	"oxid",
            	"ozdoba",
            	"pachatel",
            	"pacient",
            	"padouch",
            	"pahorek",
            	"pakt",
            	"palanda",
            	"palec",
            	"palivo",
            	"paluba",
            	"pamflet",
            	"pamlsek",
            	"panenka",
            	"panika",
            	"panna",
            	"panovat",
            	"panstvo",
            	"pantofle",
            	"paprika",
            	"parketa",
            	"parodie",
            	"parta",
            	"paruka",
            	"paryba",
            	"paseka",
            	"pasivita",
            	"pastelka",
            	"patent",
            	"patrona",
            	"pavouk",
            	"pazneht",
            	"pazourek",
            	"pecka",
            	"pedagog",
            	"pejsek",
            	"peklo",
            	"peloton",
            	"penalta",
            	"pendrek",
            	"penze",
            	"periskop",
            	"pero",
            	"pestrost",
            	"petarda",
            	"petice",
            	"petrolej",
            	"pevnina",
            	"pexeso",
            	"pianista",
            	"piha",
            	"pijavice",
            	"pikle",
            	"piknik",
            	"pilina",
            	"pilnost",
            	"pilulka",
            	"pinzeta",
            	"pipeta",
            	"pisatel",
            	"pistole",
            	"pitevna",
            	"pivnice",
            	"pivovar",
            	"placenta",
            	"plakat",
            	"plamen",
            	"planeta",
            	"plastika",
            	"platit",
            	"plavidlo",
            	"plaz",
            	"plech",
            	"plemeno",
            	"plenta",
            	"ples",
            	"pletivo",
            	"plevel",
            	"plivat",
            	"plnit",
            	"plno",
            	"plocha",
            	"plodina",
            	"plomba",
            	"plout",
            	"pluk",
            	"plyn",
            	"pobavit",
            	"pobyt",
            	"pochod",
            	"pocit",
            	"poctivec",
            	"podat",
            	"podcenit",
            	"podepsat",
            	"podhled",
            	"podivit",
            	"podklad",
            	"podmanit",
            	"podnik",
            	"podoba",
            	"podpora",
            	"podraz",
            	"podstata",
            	"podvod",
            	"podzim",
            	"poezie",
            	"pohanka",
            	"pohnutka",
            	"pohovor",
            	"pohroma",
            	"pohyb",
            	"pointa",
            	"pojistka",
            	"pojmout",
            	"pokazit",
            	"pokles",
            	"pokoj",
            	"pokrok",
            	"pokuta",
            	"pokyn",
            	"poledne",
            	"polibek",
            	"polknout",
            	"poloha",
            	"polynom",
            	"pomalu",
            	"pominout",
            	"pomlka",
            	"pomoc",
            	"pomsta",
            	"pomyslet",
            	"ponechat",
            	"ponorka",
            	"ponurost",
            	"popadat",
            	"popel",
            	"popisek",
            	"poplach",
            	"poprosit",
            	"popsat",
            	"popud",
            	"poradce",
            	"porce",
            	"porod",
            	"porucha",
            	"poryv",
            	"posadit",
            	"posed",
            	"posila",
            	"poskok",
            	"poslanec",
            	"posoudit",
            	"pospolu",
            	"postava",
            	"posudek",
            	"posyp",
            	"potah",
            	"potkan",
            	"potlesk",
            	"potomek",
            	"potrava",
            	"potupa",
            	"potvora",
            	"poukaz",
            	"pouto",
            	"pouzdro",
            	"povaha",
            	"povidla",
            	"povlak",
            	"povoz",
            	"povrch",
            	"povstat",
            	"povyk",
            	"povzdech",
            	"pozdrav",
            	"pozemek",
            	"poznatek",
            	"pozor",
            	"pozvat",
            	"pracovat",
            	"prahory",
            	"praktika",
            	"prales",
            	"praotec",
            	"praporek",
            	"prase",
            	"pravda",
            	"princip",
            	"prkno",
            	"probudit",
            	"procento",
            	"prodej",
            	"profese",
            	"prohra",
            	"projekt",
            	"prolomit",
            	"promile",
            	"pronikat",
            	"propad",
            	"prorok",
            	"prosba",
            	"proton",
            	"proutek",
            	"provaz",
            	"prskavka",
            	"prsten",
            	"prudkost",
            	"prut",
            	"prvek",
            	"prvohory",
            	"psanec",
            	"psovod",
            	"pstruh",
            	"ptactvo",
            	"puberta",
            	"puch",
            	"pudl",
            	"pukavec",
            	"puklina",
            	"pukrle",
            	"pult",
            	"pumpa",
            	"punc",
            	"pupen",
            	"pusa",
            	"pusinka",
            	"pustina",
            	"putovat",
            	"putyka",
            	"pyramida",
            	"pysk",
            	"pytel",
            	"racek",
            	"rachot",
            	"radiace",
            	"radnice",
            	"radon",
            	"raft",
            	"ragby",
            	"raketa",
            	"rakovina",
            	"rameno",
            	"rampouch",
            	"rande",
            	"rarach",
            	"rarita",
            	"rasovna",
            	"rastr",
            	"ratolest",
            	"razance",
            	"razidlo",
            	"reagovat",
            	"reakce",
            	"recept",
            	"redaktor",
            	"referent",
            	"reflex",
            	"rejnok",
            	"reklama",
            	"rekord",
            	"rekrut",
            	"rektor",
            	"reputace",
            	"revize",
            	"revma",
            	"revolver",
            	"rezerva",
            	"riskovat",
            	"riziko",
            	"robotika",
            	"rodokmen",
            	"rohovka",
            	"rokle",
            	"rokoko",
            	"romaneto",
            	"ropovod",
            	"ropucha",
            	"rorejs",
            	"rosol",
            	"rostlina",
            	"rotmistr",
            	"rotoped",
            	"rotunda",
            	"roubenka",
            	"roucho",
            	"roup",
            	"roura",
            	"rovina",
            	"rovnice",
            	"rozbor",
            	"rozchod",
            	"rozdat",
            	"rozeznat",
            	"rozhodce",
            	"rozinka",
            	"rozjezd",
            	"rozkaz",
            	"rozloha",
            	"rozmar",
            	"rozpad",
            	"rozruch",
            	"rozsah",
            	"roztok",
            	"rozum",
            	"rozvod",
            	"rubrika",
            	"ruchadlo",
            	"rukavice",
            	"rukopis",
            	"ryba",
            	"rybolov",
            	"rychlost",
            	"rydlo",
            	"rypadlo",
            	"rytina",
            	"ryzost",
            	"sadista",
            	"sahat",
            	"sako",
            	"samec",
            	"samizdat",
            	"samota",
            	"sanitka",
            	"sardinka",
            	"sasanka",
            	"satelit",
            	"sazba",
            	"sazenice",
            	"sbor",
            	"schovat",
            	"sebranka",
            	"secese",
            	"sedadlo",
            	"sediment",
            	"sedlo",
            	"sehnat",
            	"sejmout",
            	"sekera",
            	"sekta",
            	"sekunda",
            	"sekvoje",
            	"semeno",
            	"seno",
            	"servis",
            	"sesadit",
            	"seshora",
            	"seskok",
            	"seslat",
            	"sestra",
            	"sesuv",
            	"sesypat",
            	"setba",
            	"setina",
            	"setkat",
            	"setnout",
            	"setrvat",
            	"sever",
            	"seznam",
            	"shoda",
            	"shrnout",
            	"sifon",
            	"silnice",
            	"sirka",
            	"sirotek",
            	"sirup",
            	"situace",
            	"skafandr",
            	"skalisko",
            	"skanzen",
            	"skaut",
            	"skeptik",
            	"skica",
            	"skladba",
            	"sklenice",
            	"sklo",
            	"skluz",
            	"skoba",
            	"skokan",
            	"skoro",
            	"skripta",
            	"skrz",
            	"skupina",
            	"skvost",
            	"skvrna",
            	"slabika",
            	"sladidlo",
            	"slanina",
            	"slast",
            	"slavnost",
            	"sledovat",
            	"slepec",
            	"sleva",
            	"slezina",
            	"slib",
            	"slina",
            	"sliznice",
            	"slon",
            	"sloupek",
            	"slovo",
            	"sluch",
            	"sluha",
            	"slunce",
            	"slupka",
            	"slza",
            	"smaragd",
            	"smetana",
            	"smilstvo",
            	"smlouva",
            	"smog",
            	"smrad",
            	"smrk",
            	"smrtka",
            	"smutek",
            	"smysl",
            	"snad",
            	"snaha",
            	"snob",
            	"sobota",
            	"socha",
            	"sodovka",
            	"sokol",
            	"sopka",
            	"sotva",
            	"souboj",
            	"soucit",
            	"soudce",
            	"souhlas",
            	"soulad",
            	"soumrak",
            	"souprava",
            	"soused",
            	"soutok",
            	"souviset",
            	"spalovna",
            	"spasitel",
            	"spis",
            	"splav",
            	"spodek",
            	"spojenec",
            	"spolu",
            	"sponzor",
            	"spornost",
            	"spousta",
            	"sprcha",
            	"spustit",
            	"sranda",
            	"sraz",
            	"srdce",
            	"srna",
            	"srnec",
            	"srovnat",
            	"srpen",
            	"srst",
            	"srub",
            	"stanice",
            	"starosta",
            	"statika",
            	"stavba",
            	"stehno",
            	"stezka",
            	"stodola",
            	"stolek",
            	"stopa",
            	"storno",
            	"stoupat",
            	"strach",
            	"stres",
            	"strhnout",
            	"strom",
            	"struna",
            	"studna",
            	"stupnice",
            	"stvol",
            	"styk",
            	"subjekt",
            	"subtropy",
            	"suchar",
            	"sudost",
            	"sukno",
            	"sundat",
            	"sunout",
            	"surikata",
            	"surovina",
            	"svah",
            	"svalstvo",
            	"svetr",
            	"svatba",
            	"svazek",
            	"svisle",
            	"svitek",
            	"svoboda",
            	"svodidlo",
            	"svorka",
            	"svrab",
            	"sykavka",
            	"sykot",
            	"synek",
            	"synovec",
            	"sypat",
            	"sypkost",
            	"syrovost",
            	"sysel",
            	"sytost",
            	"tabletka",
            	"tabule",
            	"tahoun",
            	"tajemno",
            	"tajfun",
            	"tajga",
            	"tajit",
            	"tajnost",
            	"taktika",
            	"tamhle",
            	"tampon",
            	"tancovat",
            	"tanec",
            	"tanker",
            	"tapeta",
            	"tavenina",
            	"tazatel",
            	"technika",
            	"tehdy",
            	"tekutina",
            	"telefon",
            	"temnota",
            	"tendence",
            	"tenista",
            	"tenor",
            	"teplota",
            	"tepna",
            	"teprve",
            	"terapie",
            	"termoska",
            	"textil",
            	"ticho",
            	"tiskopis",
            	"titulek",
            	"tkadlec",
            	"tkanina",
            	"tlapka",
            	"tleskat",
            	"tlukot",
            	"tlupa",
            	"tmel",
            	"toaleta",
            	"topinka",
            	"topol",
            	"torzo",
            	"touha",
            	"toulec",
            	"tradice",
            	"traktor",
            	"tramp",
            	"trasa",
            	"traverza",
            	"trefit",
            	"trest",
            	"trezor",
            	"trhavina",
            	"trhlina",
            	"trochu",
            	"trojice",
            	"troska",
            	"trouba",
            	"trpce",
            	"trpitel",
            	"trpkost",
            	"trubec",
            	"truchlit",
            	"truhlice",
            	"trus",
            	"trvat",
            	"tudy",
            	"tuhnout",
            	"tuhost",
            	"tundra",
            	"turista",
            	"turnaj",
            	"tuzemsko",
            	"tvaroh",
            	"tvorba",
            	"tvrdost",
            	"tvrz",
            	"tygr",
            	"tykev",
            	"ubohost",
            	"uboze",
            	"ubrat",
            	"ubrousek",
            	"ubrus",
            	"ubytovna",
            	"ucho",
            	"uctivost",
            	"udivit",
            	"uhradit",
            	"ujednat",
            	"ujistit",
            	"ujmout",
            	"ukazatel",
            	"uklidnit",
            	"uklonit",
            	"ukotvit",
            	"ukrojit",
            	"ulice",
            	"ulita",
            	"ulovit",
            	"umyvadlo",
            	"unavit",
            	"uniforma",
            	"uniknout",
            	"upadnout",
            	"uplatnit",
            	"uplynout",
            	"upoutat",
            	"upravit",
            	"uran",
            	"urazit",
            	"usednout",
            	"usilovat",
            	"usmrtit",
            	"usnadnit",
            	"usnout",
            	"usoudit",
            	"ustlat",
            	"ustrnout",
            	"utahovat",
            	"utkat",
            	"utlumit",
            	"utonout",
            	"utopenec",
            	"utrousit",
            	"uvalit",
            	"uvolnit",
            	"uvozovka",
            	"uzdravit",
            	"uzel",
            	"uzenina",
            	"uzlina",
            	"uznat",
            	"vagon",
            	"valcha",
            	"valoun",
            	"vana",
            	"vandal",
            	"vanilka",
            	"varan",
            	"varhany",
            	"varovat",
            	"vcelku",
            	"vchod",
            	"vdova",
            	"vedro",
            	"vegetace",
            	"vejce",
            	"velbloud",
            	"veletrh",
            	"velitel",
            	"velmoc",
            	"velryba",
            	"venkov",
            	"veranda",
            	"verze",
            	"veselka",
            	"veskrze",
            	"vesnice",
            	"vespodu",
            	"vesta",
            	"veterina",
            	"veverka",
            	"vibrace",
            	"vichr",
            	"videohra",
            	"vidina",
            	"vidle",
            	"vila",
            	"vinice",
            	"viset",
            	"vitalita",
            	"vize",
            	"vizitka",
            	"vjezd",
            	"vklad",
            	"vkus",
            	"vlajka",
            	"vlak",
            	"vlasec",
            	"vlevo",
            	"vlhkost",
            	"vliv",
            	"vlnovka",
            	"vloupat",
            	"vnucovat",
            	"vnuk",
            	"voda",
            	"vodivost",
            	"vodoznak",
            	"vodstvo",
            	"vojensky",
            	"vojna",
            	"vojsko",
            	"volant",
            	"volba",
            	"volit",
            	"volno",
            	"voskovka",
            	"vozidlo",
            	"vozovna",
            	"vpravo",
            	"vrabec",
            	"vracet",
            	"vrah",
            	"vrata",
            	"vrba",
            	"vrcholek",
            	"vrhat",
            	"vrstva",
            	"vrtule",
            	"vsadit",
            	"vstoupit",
            	"vstup",
            	"vtip",
            	"vybavit",
            	"vybrat",
            	"vychovat",
            	"vydat",
            	"vydra",
            	"vyfotit",
            	"vyhledat",
            	"vyhnout",
            	"vyhodit",
            	"vyhradit",
            	"vyhubit",
            	"vyjasnit",
            	"vyjet",
            	"vyjmout",
            	"vyklopit",
            	"vykonat",
            	"vylekat",
            	"vymazat",
            	"vymezit",
            	"vymizet",
            	"vymyslet",
            	"vynechat",
            	"vynikat",
            	"vynutit",
            	"vypadat",
            	"vyplatit",
            	"vypravit",
            	"vypustit",
            	"vyrazit",
            	"vyrovnat",
            	"vyrvat",
            	"vyslovit",
            	"vysoko",
            	"vystavit",
            	"vysunout",
            	"vysypat",
            	"vytasit",
            	"vytesat",
            	"vytratit",
            	"vyvinout",
            	"vyvolat",
            	"vyvrhel",
            	"vyzdobit",
            	"vyznat",
            	"vzadu",
            	"vzbudit",
            	"vzchopit",
            	"vzdor",
            	"vzduch",
            	"vzdychat",
            	"vzestup",
            	"vzhledem",
            	"vzkaz",
            	"vzlykat",
            	"vznik",
            	"vzorek",
            	"vzpoura",
            	"vztah",
            	"vztek",
            	"xylofon",
            	"zabrat",
            	"zabydlet",
            	"zachovat",
            	"zadarmo",
            	"zadusit",
            	"zafoukat",
            	"zahltit",
            	"zahodit",
            	"zahrada",
            	"zahynout",
            	"zajatec",
            	"zajet",
            	"zajistit",
            	"zaklepat",
            	"zakoupit",
            	"zalepit",
            	"zamezit",
            	"zamotat",
            	"zamyslet",
            	"zanechat",
            	"zanikat",
            	"zaplatit",
            	"zapojit",
            	"zapsat",
            	"zarazit",
            	"zastavit",
            	"zasunout",
            	"zatajit",
            	"zatemnit",
            	"zatknout",
            	"zaujmout",
            	"zavalit",
            	"zavelet",
            	"zavinit",
            	"zavolat",
            	"zavrtat",
            	"zazvonit",
            	"zbavit",
            	"zbrusu",
            	"zbudovat",
            	"zbytek",
            	"zdaleka",
            	"zdarma",
            	"zdatnost",
            	"zdivo",
            	"zdobit",
            	"zdroj",
            	"zdvih",
            	"zdymadlo",
            	"zelenina",
            	"zeman",
            	"zemina",
            	"zeptat",
            	"zezadu",
            	"zezdola",
            	"zhatit",
            	"zhltnout",
            	"zhluboka",
            	"zhotovit",
            	"zhruba",
            	"zima",
            	"zimnice",
            	"zjemnit",
            	"zklamat",
            	"zkoumat",
            	"zkratka",
            	"zkumavka",
            	"zlato",
            	"zlehka",
            	"zloba",
            	"zlom",
            	"zlost",
            	"zlozvyk",
            	"zmapovat",
            	"zmar",
            	"zmatek",
            	"zmije",
            	"zmizet",
            	"zmocnit",
            	"zmodrat",
            	"zmrzlina",
            	"zmutovat",
            	"znak",
            	"znalost",
            	"znamenat",
            	"znovu",
            	"zobrazit",
            	"zotavit",
            	"zoubek",
            	"zoufale",
            	"zplodit",
            	"zpomalit",
            	"zprava",
            	"zprostit",
            	"zprudka",
            	"zprvu",
            	"zrada",
            	"zranit",
            	"zrcadlo",
            	"zrnitost",
            	"zrno",
            	"zrovna",
            	"zrychlit",
            	"zrzavost",
            	"zticha",
            	"ztratit",
            	"zubovina",
            	"zubr",
            	"zvednout",
            	"zvenku",
            	"zvesela",
            	"zvon",
            	"zvrat",
            	"zvukovod",
            	"zvyk"
            ];

            var require$$1 = [
            	"的",
            	"一",
            	"是",
            	"在",
            	"不",
            	"了",
            	"有",
            	"和",
            	"人",
            	"这",
            	"中",
            	"大",
            	"为",
            	"上",
            	"个",
            	"国",
            	"我",
            	"以",
            	"要",
            	"他",
            	"时",
            	"来",
            	"用",
            	"们",
            	"生",
            	"到",
            	"作",
            	"地",
            	"于",
            	"出",
            	"就",
            	"分",
            	"对",
            	"成",
            	"会",
            	"可",
            	"主",
            	"发",
            	"年",
            	"动",
            	"同",
            	"工",
            	"也",
            	"能",
            	"下",
            	"过",
            	"子",
            	"说",
            	"产",
            	"种",
            	"面",
            	"而",
            	"方",
            	"后",
            	"多",
            	"定",
            	"行",
            	"学",
            	"法",
            	"所",
            	"民",
            	"得",
            	"经",
            	"十",
            	"三",
            	"之",
            	"进",
            	"着",
            	"等",
            	"部",
            	"度",
            	"家",
            	"电",
            	"力",
            	"里",
            	"如",
            	"水",
            	"化",
            	"高",
            	"自",
            	"二",
            	"理",
            	"起",
            	"小",
            	"物",
            	"现",
            	"实",
            	"加",
            	"量",
            	"都",
            	"两",
            	"体",
            	"制",
            	"机",
            	"当",
            	"使",
            	"点",
            	"从",
            	"业",
            	"本",
            	"去",
            	"把",
            	"性",
            	"好",
            	"应",
            	"开",
            	"它",
            	"合",
            	"还",
            	"因",
            	"由",
            	"其",
            	"些",
            	"然",
            	"前",
            	"外",
            	"天",
            	"政",
            	"四",
            	"日",
            	"那",
            	"社",
            	"义",
            	"事",
            	"平",
            	"形",
            	"相",
            	"全",
            	"表",
            	"间",
            	"样",
            	"与",
            	"关",
            	"各",
            	"重",
            	"新",
            	"线",
            	"内",
            	"数",
            	"正",
            	"心",
            	"反",
            	"你",
            	"明",
            	"看",
            	"原",
            	"又",
            	"么",
            	"利",
            	"比",
            	"或",
            	"但",
            	"质",
            	"气",
            	"第",
            	"向",
            	"道",
            	"命",
            	"此",
            	"变",
            	"条",
            	"只",
            	"没",
            	"结",
            	"解",
            	"问",
            	"意",
            	"建",
            	"月",
            	"公",
            	"无",
            	"系",
            	"军",
            	"很",
            	"情",
            	"者",
            	"最",
            	"立",
            	"代",
            	"想",
            	"已",
            	"通",
            	"并",
            	"提",
            	"直",
            	"题",
            	"党",
            	"程",
            	"展",
            	"五",
            	"果",
            	"料",
            	"象",
            	"员",
            	"革",
            	"位",
            	"入",
            	"常",
            	"文",
            	"总",
            	"次",
            	"品",
            	"式",
            	"活",
            	"设",
            	"及",
            	"管",
            	"特",
            	"件",
            	"长",
            	"求",
            	"老",
            	"头",
            	"基",
            	"资",
            	"边",
            	"流",
            	"路",
            	"级",
            	"少",
            	"图",
            	"山",
            	"统",
            	"接",
            	"知",
            	"较",
            	"将",
            	"组",
            	"见",
            	"计",
            	"别",
            	"她",
            	"手",
            	"角",
            	"期",
            	"根",
            	"论",
            	"运",
            	"农",
            	"指",
            	"几",
            	"九",
            	"区",
            	"强",
            	"放",
            	"决",
            	"西",
            	"被",
            	"干",
            	"做",
            	"必",
            	"战",
            	"先",
            	"回",
            	"则",
            	"任",
            	"取",
            	"据",
            	"处",
            	"队",
            	"南",
            	"给",
            	"色",
            	"光",
            	"门",
            	"即",
            	"保",
            	"治",
            	"北",
            	"造",
            	"百",
            	"规",
            	"热",
            	"领",
            	"七",
            	"海",
            	"口",
            	"东",
            	"导",
            	"器",
            	"压",
            	"志",
            	"世",
            	"金",
            	"增",
            	"争",
            	"济",
            	"阶",
            	"油",
            	"思",
            	"术",
            	"极",
            	"交",
            	"受",
            	"联",
            	"什",
            	"认",
            	"六",
            	"共",
            	"权",
            	"收",
            	"证",
            	"改",
            	"清",
            	"美",
            	"再",
            	"采",
            	"转",
            	"更",
            	"单",
            	"风",
            	"切",
            	"打",
            	"白",
            	"教",
            	"速",
            	"花",
            	"带",
            	"安",
            	"场",
            	"身",
            	"车",
            	"例",
            	"真",
            	"务",
            	"具",
            	"万",
            	"每",
            	"目",
            	"至",
            	"达",
            	"走",
            	"积",
            	"示",
            	"议",
            	"声",
            	"报",
            	"斗",
            	"完",
            	"类",
            	"八",
            	"离",
            	"华",
            	"名",
            	"确",
            	"才",
            	"科",
            	"张",
            	"信",
            	"马",
            	"节",
            	"话",
            	"米",
            	"整",
            	"空",
            	"元",
            	"况",
            	"今",
            	"集",
            	"温",
            	"传",
            	"土",
            	"许",
            	"步",
            	"群",
            	"广",
            	"石",
            	"记",
            	"需",
            	"段",
            	"研",
            	"界",
            	"拉",
            	"林",
            	"律",
            	"叫",
            	"且",
            	"究",
            	"观",
            	"越",
            	"织",
            	"装",
            	"影",
            	"算",
            	"低",
            	"持",
            	"音",
            	"众",
            	"书",
            	"布",
            	"复",
            	"容",
            	"儿",
            	"须",
            	"际",
            	"商",
            	"非",
            	"验",
            	"连",
            	"断",
            	"深",
            	"难",
            	"近",
            	"矿",
            	"千",
            	"周",
            	"委",
            	"素",
            	"技",
            	"备",
            	"半",
            	"办",
            	"青",
            	"省",
            	"列",
            	"习",
            	"响",
            	"约",
            	"支",
            	"般",
            	"史",
            	"感",
            	"劳",
            	"便",
            	"团",
            	"往",
            	"酸",
            	"历",
            	"市",
            	"克",
            	"何",
            	"除",
            	"消",
            	"构",
            	"府",
            	"称",
            	"太",
            	"准",
            	"精",
            	"值",
            	"号",
            	"率",
            	"族",
            	"维",
            	"划",
            	"选",
            	"标",
            	"写",
            	"存",
            	"候",
            	"毛",
            	"亲",
            	"快",
            	"效",
            	"斯",
            	"院",
            	"查",
            	"江",
            	"型",
            	"眼",
            	"王",
            	"按",
            	"格",
            	"养",
            	"易",
            	"置",
            	"派",
            	"层",
            	"片",
            	"始",
            	"却",
            	"专",
            	"状",
            	"育",
            	"厂",
            	"京",
            	"识",
            	"适",
            	"属",
            	"圆",
            	"包",
            	"火",
            	"住",
            	"调",
            	"满",
            	"县",
            	"局",
            	"照",
            	"参",
            	"红",
            	"细",
            	"引",
            	"听",
            	"该",
            	"铁",
            	"价",
            	"严",
            	"首",
            	"底",
            	"液",
            	"官",
            	"德",
            	"随",
            	"病",
            	"苏",
            	"失",
            	"尔",
            	"死",
            	"讲",
            	"配",
            	"女",
            	"黄",
            	"推",
            	"显",
            	"谈",
            	"罪",
            	"神",
            	"艺",
            	"呢",
            	"席",
            	"含",
            	"企",
            	"望",
            	"密",
            	"批",
            	"营",
            	"项",
            	"防",
            	"举",
            	"球",
            	"英",
            	"氧",
            	"势",
            	"告",
            	"李",
            	"台",
            	"落",
            	"木",
            	"帮",
            	"轮",
            	"破",
            	"亚",
            	"师",
            	"围",
            	"注",
            	"远",
            	"字",
            	"材",
            	"排",
            	"供",
            	"河",
            	"态",
            	"封",
            	"另",
            	"施",
            	"减",
            	"树",
            	"溶",
            	"怎",
            	"止",
            	"案",
            	"言",
            	"士",
            	"均",
            	"武",
            	"固",
            	"叶",
            	"鱼",
            	"波",
            	"视",
            	"仅",
            	"费",
            	"紧",
            	"爱",
            	"左",
            	"章",
            	"早",
            	"朝",
            	"害",
            	"续",
            	"轻",
            	"服",
            	"试",
            	"食",
            	"充",
            	"兵",
            	"源",
            	"判",
            	"护",
            	"司",
            	"足",
            	"某",
            	"练",
            	"差",
            	"致",
            	"板",
            	"田",
            	"降",
            	"黑",
            	"犯",
            	"负",
            	"击",
            	"范",
            	"继",
            	"兴",
            	"似",
            	"余",
            	"坚",
            	"曲",
            	"输",
            	"修",
            	"故",
            	"城",
            	"夫",
            	"够",
            	"送",
            	"笔",
            	"船",
            	"占",
            	"右",
            	"财",
            	"吃",
            	"富",
            	"春",
            	"职",
            	"觉",
            	"汉",
            	"画",
            	"功",
            	"巴",
            	"跟",
            	"虽",
            	"杂",
            	"飞",
            	"检",
            	"吸",
            	"助",
            	"升",
            	"阳",
            	"互",
            	"初",
            	"创",
            	"抗",
            	"考",
            	"投",
            	"坏",
            	"策",
            	"古",
            	"径",
            	"换",
            	"未",
            	"跑",
            	"留",
            	"钢",
            	"曾",
            	"端",
            	"责",
            	"站",
            	"简",
            	"述",
            	"钱",
            	"副",
            	"尽",
            	"帝",
            	"射",
            	"草",
            	"冲",
            	"承",
            	"独",
            	"令",
            	"限",
            	"阿",
            	"宣",
            	"环",
            	"双",
            	"请",
            	"超",
            	"微",
            	"让",
            	"控",
            	"州",
            	"良",
            	"轴",
            	"找",
            	"否",
            	"纪",
            	"益",
            	"依",
            	"优",
            	"顶",
            	"础",
            	"载",
            	"倒",
            	"房",
            	"突",
            	"坐",
            	"粉",
            	"敌",
            	"略",
            	"客",
            	"袁",
            	"冷",
            	"胜",
            	"绝",
            	"析",
            	"块",
            	"剂",
            	"测",
            	"丝",
            	"协",
            	"诉",
            	"念",
            	"陈",
            	"仍",
            	"罗",
            	"盐",
            	"友",
            	"洋",
            	"错",
            	"苦",
            	"夜",
            	"刑",
            	"移",
            	"频",
            	"逐",
            	"靠",
            	"混",
            	"母",
            	"短",
            	"皮",
            	"终",
            	"聚",
            	"汽",
            	"村",
            	"云",
            	"哪",
            	"既",
            	"距",
            	"卫",
            	"停",
            	"烈",
            	"央",
            	"察",
            	"烧",
            	"迅",
            	"境",
            	"若",
            	"印",
            	"洲",
            	"刻",
            	"括",
            	"激",
            	"孔",
            	"搞",
            	"甚",
            	"室",
            	"待",
            	"核",
            	"校",
            	"散",
            	"侵",
            	"吧",
            	"甲",
            	"游",
            	"久",
            	"菜",
            	"味",
            	"旧",
            	"模",
            	"湖",
            	"货",
            	"损",
            	"预",
            	"阻",
            	"毫",
            	"普",
            	"稳",
            	"乙",
            	"妈",
            	"植",
            	"息",
            	"扩",
            	"银",
            	"语",
            	"挥",
            	"酒",
            	"守",
            	"拿",
            	"序",
            	"纸",
            	"医",
            	"缺",
            	"雨",
            	"吗",
            	"针",
            	"刘",
            	"啊",
            	"急",
            	"唱",
            	"误",
            	"训",
            	"愿",
            	"审",
            	"附",
            	"获",
            	"茶",
            	"鲜",
            	"粮",
            	"斤",
            	"孩",
            	"脱",
            	"硫",
            	"肥",
            	"善",
            	"龙",
            	"演",
            	"父",
            	"渐",
            	"血",
            	"欢",
            	"械",
            	"掌",
            	"歌",
            	"沙",
            	"刚",
            	"攻",
            	"谓",
            	"盾",
            	"讨",
            	"晚",
            	"粒",
            	"乱",
            	"燃",
            	"矛",
            	"乎",
            	"杀",
            	"药",
            	"宁",
            	"鲁",
            	"贵",
            	"钟",
            	"煤",
            	"读",
            	"班",
            	"伯",
            	"香",
            	"介",
            	"迫",
            	"句",
            	"丰",
            	"培",
            	"握",
            	"兰",
            	"担",
            	"弦",
            	"蛋",
            	"沉",
            	"假",
            	"穿",
            	"执",
            	"答",
            	"乐",
            	"谁",
            	"顺",
            	"烟",
            	"缩",
            	"征",
            	"脸",
            	"喜",
            	"松",
            	"脚",
            	"困",
            	"异",
            	"免",
            	"背",
            	"星",
            	"福",
            	"买",
            	"染",
            	"井",
            	"概",
            	"慢",
            	"怕",
            	"磁",
            	"倍",
            	"祖",
            	"皇",
            	"促",
            	"静",
            	"补",
            	"评",
            	"翻",
            	"肉",
            	"践",
            	"尼",
            	"衣",
            	"宽",
            	"扬",
            	"棉",
            	"希",
            	"伤",
            	"操",
            	"垂",
            	"秋",
            	"宜",
            	"氢",
            	"套",
            	"督",
            	"振",
            	"架",
            	"亮",
            	"末",
            	"宪",
            	"庆",
            	"编",
            	"牛",
            	"触",
            	"映",
            	"雷",
            	"销",
            	"诗",
            	"座",
            	"居",
            	"抓",
            	"裂",
            	"胞",
            	"呼",
            	"娘",
            	"景",
            	"威",
            	"绿",
            	"晶",
            	"厚",
            	"盟",
            	"衡",
            	"鸡",
            	"孙",
            	"延",
            	"危",
            	"胶",
            	"屋",
            	"乡",
            	"临",
            	"陆",
            	"顾",
            	"掉",
            	"呀",
            	"灯",
            	"岁",
            	"措",
            	"束",
            	"耐",
            	"剧",
            	"玉",
            	"赵",
            	"跳",
            	"哥",
            	"季",
            	"课",
            	"凯",
            	"胡",
            	"额",
            	"款",
            	"绍",
            	"卷",
            	"齐",
            	"伟",
            	"蒸",
            	"殖",
            	"永",
            	"宗",
            	"苗",
            	"川",
            	"炉",
            	"岩",
            	"弱",
            	"零",
            	"杨",
            	"奏",
            	"沿",
            	"露",
            	"杆",
            	"探",
            	"滑",
            	"镇",
            	"饭",
            	"浓",
            	"航",
            	"怀",
            	"赶",
            	"库",
            	"夺",
            	"伊",
            	"灵",
            	"税",
            	"途",
            	"灭",
            	"赛",
            	"归",
            	"召",
            	"鼓",
            	"播",
            	"盘",
            	"裁",
            	"险",
            	"康",
            	"唯",
            	"录",
            	"菌",
            	"纯",
            	"借",
            	"糖",
            	"盖",
            	"横",
            	"符",
            	"私",
            	"努",
            	"堂",
            	"域",
            	"枪",
            	"润",
            	"幅",
            	"哈",
            	"竟",
            	"熟",
            	"虫",
            	"泽",
            	"脑",
            	"壤",
            	"碳",
            	"欧",
            	"遍",
            	"侧",
            	"寨",
            	"敢",
            	"彻",
            	"虑",
            	"斜",
            	"薄",
            	"庭",
            	"纳",
            	"弹",
            	"饲",
            	"伸",
            	"折",
            	"麦",
            	"湿",
            	"暗",
            	"荷",
            	"瓦",
            	"塞",
            	"床",
            	"筑",
            	"恶",
            	"户",
            	"访",
            	"塔",
            	"奇",
            	"透",
            	"梁",
            	"刀",
            	"旋",
            	"迹",
            	"卡",
            	"氯",
            	"遇",
            	"份",
            	"毒",
            	"泥",
            	"退",
            	"洗",
            	"摆",
            	"灰",
            	"彩",
            	"卖",
            	"耗",
            	"夏",
            	"择",
            	"忙",
            	"铜",
            	"献",
            	"硬",
            	"予",
            	"繁",
            	"圈",
            	"雪",
            	"函",
            	"亦",
            	"抽",
            	"篇",
            	"阵",
            	"阴",
            	"丁",
            	"尺",
            	"追",
            	"堆",
            	"雄",
            	"迎",
            	"泛",
            	"爸",
            	"楼",
            	"避",
            	"谋",
            	"吨",
            	"野",
            	"猪",
            	"旗",
            	"累",
            	"偏",
            	"典",
            	"馆",
            	"索",
            	"秦",
            	"脂",
            	"潮",
            	"爷",
            	"豆",
            	"忽",
            	"托",
            	"惊",
            	"塑",
            	"遗",
            	"愈",
            	"朱",
            	"替",
            	"纤",
            	"粗",
            	"倾",
            	"尚",
            	"痛",
            	"楚",
            	"谢",
            	"奋",
            	"购",
            	"磨",
            	"君",
            	"池",
            	"旁",
            	"碎",
            	"骨",
            	"监",
            	"捕",
            	"弟",
            	"暴",
            	"割",
            	"贯",
            	"殊",
            	"释",
            	"词",
            	"亡",
            	"壁",
            	"顿",
            	"宝",
            	"午",
            	"尘",
            	"闻",
            	"揭",
            	"炮",
            	"残",
            	"冬",
            	"桥",
            	"妇",
            	"警",
            	"综",
            	"招",
            	"吴",
            	"付",
            	"浮",
            	"遭",
            	"徐",
            	"您",
            	"摇",
            	"谷",
            	"赞",
            	"箱",
            	"隔",
            	"订",
            	"男",
            	"吹",
            	"园",
            	"纷",
            	"唐",
            	"败",
            	"宋",
            	"玻",
            	"巨",
            	"耕",
            	"坦",
            	"荣",
            	"闭",
            	"湾",
            	"键",
            	"凡",
            	"驻",
            	"锅",
            	"救",
            	"恩",
            	"剥",
            	"凝",
            	"碱",
            	"齿",
            	"截",
            	"炼",
            	"麻",
            	"纺",
            	"禁",
            	"废",
            	"盛",
            	"版",
            	"缓",
            	"净",
            	"睛",
            	"昌",
            	"婚",
            	"涉",
            	"筒",
            	"嘴",
            	"插",
            	"岸",
            	"朗",
            	"庄",
            	"街",
            	"藏",
            	"姑",
            	"贸",
            	"腐",
            	"奴",
            	"啦",
            	"惯",
            	"乘",
            	"伙",
            	"恢",
            	"匀",
            	"纱",
            	"扎",
            	"辩",
            	"耳",
            	"彪",
            	"臣",
            	"亿",
            	"璃",
            	"抵",
            	"脉",
            	"秀",
            	"萨",
            	"俄",
            	"网",
            	"舞",
            	"店",
            	"喷",
            	"纵",
            	"寸",
            	"汗",
            	"挂",
            	"洪",
            	"贺",
            	"闪",
            	"柬",
            	"爆",
            	"烯",
            	"津",
            	"稻",
            	"墙",
            	"软",
            	"勇",
            	"像",
            	"滚",
            	"厘",
            	"蒙",
            	"芳",
            	"肯",
            	"坡",
            	"柱",
            	"荡",
            	"腿",
            	"仪",
            	"旅",
            	"尾",
            	"轧",
            	"冰",
            	"贡",
            	"登",
            	"黎",
            	"削",
            	"钻",
            	"勒",
            	"逃",
            	"障",
            	"氨",
            	"郭",
            	"峰",
            	"币",
            	"港",
            	"伏",
            	"轨",
            	"亩",
            	"毕",
            	"擦",
            	"莫",
            	"刺",
            	"浪",
            	"秘",
            	"援",
            	"株",
            	"健",
            	"售",
            	"股",
            	"岛",
            	"甘",
            	"泡",
            	"睡",
            	"童",
            	"铸",
            	"汤",
            	"阀",
            	"休",
            	"汇",
            	"舍",
            	"牧",
            	"绕",
            	"炸",
            	"哲",
            	"磷",
            	"绩",
            	"朋",
            	"淡",
            	"尖",
            	"启",
            	"陷",
            	"柴",
            	"呈",
            	"徒",
            	"颜",
            	"泪",
            	"稍",
            	"忘",
            	"泵",
            	"蓝",
            	"拖",
            	"洞",
            	"授",
            	"镜",
            	"辛",
            	"壮",
            	"锋",
            	"贫",
            	"虚",
            	"弯",
            	"摩",
            	"泰",
            	"幼",
            	"廷",
            	"尊",
            	"窗",
            	"纲",
            	"弄",
            	"隶",
            	"疑",
            	"氏",
            	"宫",
            	"姐",
            	"震",
            	"瑞",
            	"怪",
            	"尤",
            	"琴",
            	"循",
            	"描",
            	"膜",
            	"违",
            	"夹",
            	"腰",
            	"缘",
            	"珠",
            	"穷",
            	"森",
            	"枝",
            	"竹",
            	"沟",
            	"催",
            	"绳",
            	"忆",
            	"邦",
            	"剩",
            	"幸",
            	"浆",
            	"栏",
            	"拥",
            	"牙",
            	"贮",
            	"礼",
            	"滤",
            	"钠",
            	"纹",
            	"罢",
            	"拍",
            	"咱",
            	"喊",
            	"袖",
            	"埃",
            	"勤",
            	"罚",
            	"焦",
            	"潜",
            	"伍",
            	"墨",
            	"欲",
            	"缝",
            	"姓",
            	"刊",
            	"饱",
            	"仿",
            	"奖",
            	"铝",
            	"鬼",
            	"丽",
            	"跨",
            	"默",
            	"挖",
            	"链",
            	"扫",
            	"喝",
            	"袋",
            	"炭",
            	"污",
            	"幕",
            	"诸",
            	"弧",
            	"励",
            	"梅",
            	"奶",
            	"洁",
            	"灾",
            	"舟",
            	"鉴",
            	"苯",
            	"讼",
            	"抱",
            	"毁",
            	"懂",
            	"寒",
            	"智",
            	"埔",
            	"寄",
            	"届",
            	"跃",
            	"渡",
            	"挑",
            	"丹",
            	"艰",
            	"贝",
            	"碰",
            	"拔",
            	"爹",
            	"戴",
            	"码",
            	"梦",
            	"芽",
            	"熔",
            	"赤",
            	"渔",
            	"哭",
            	"敬",
            	"颗",
            	"奔",
            	"铅",
            	"仲",
            	"虎",
            	"稀",
            	"妹",
            	"乏",
            	"珍",
            	"申",
            	"桌",
            	"遵",
            	"允",
            	"隆",
            	"螺",
            	"仓",
            	"魏",
            	"锐",
            	"晓",
            	"氮",
            	"兼",
            	"隐",
            	"碍",
            	"赫",
            	"拨",
            	"忠",
            	"肃",
            	"缸",
            	"牵",
            	"抢",
            	"博",
            	"巧",
            	"壳",
            	"兄",
            	"杜",
            	"讯",
            	"诚",
            	"碧",
            	"祥",
            	"柯",
            	"页",
            	"巡",
            	"矩",
            	"悲",
            	"灌",
            	"龄",
            	"伦",
            	"票",
            	"寻",
            	"桂",
            	"铺",
            	"圣",
            	"恐",
            	"恰",
            	"郑",
            	"趣",
            	"抬",
            	"荒",
            	"腾",
            	"贴",
            	"柔",
            	"滴",
            	"猛",
            	"阔",
            	"辆",
            	"妻",
            	"填",
            	"撤",
            	"储",
            	"签",
            	"闹",
            	"扰",
            	"紫",
            	"砂",
            	"递",
            	"戏",
            	"吊",
            	"陶",
            	"伐",
            	"喂",
            	"疗",
            	"瓶",
            	"婆",
            	"抚",
            	"臂",
            	"摸",
            	"忍",
            	"虾",
            	"蜡",
            	"邻",
            	"胸",
            	"巩",
            	"挤",
            	"偶",
            	"弃",
            	"槽",
            	"劲",
            	"乳",
            	"邓",
            	"吉",
            	"仁",
            	"烂",
            	"砖",
            	"租",
            	"乌",
            	"舰",
            	"伴",
            	"瓜",
            	"浅",
            	"丙",
            	"暂",
            	"燥",
            	"橡",
            	"柳",
            	"迷",
            	"暖",
            	"牌",
            	"秧",
            	"胆",
            	"详",
            	"簧",
            	"踏",
            	"瓷",
            	"谱",
            	"呆",
            	"宾",
            	"糊",
            	"洛",
            	"辉",
            	"愤",
            	"竞",
            	"隙",
            	"怒",
            	"粘",
            	"乃",
            	"绪",
            	"肩",
            	"籍",
            	"敏",
            	"涂",
            	"熙",
            	"皆",
            	"侦",
            	"悬",
            	"掘",
            	"享",
            	"纠",
            	"醒",
            	"狂",
            	"锁",
            	"淀",
            	"恨",
            	"牲",
            	"霸",
            	"爬",
            	"赏",
            	"逆",
            	"玩",
            	"陵",
            	"祝",
            	"秒",
            	"浙",
            	"貌",
            	"役",
            	"彼",
            	"悉",
            	"鸭",
            	"趋",
            	"凤",
            	"晨",
            	"畜",
            	"辈",
            	"秩",
            	"卵",
            	"署",
            	"梯",
            	"炎",
            	"滩",
            	"棋",
            	"驱",
            	"筛",
            	"峡",
            	"冒",
            	"啥",
            	"寿",
            	"译",
            	"浸",
            	"泉",
            	"帽",
            	"迟",
            	"硅",
            	"疆",
            	"贷",
            	"漏",
            	"稿",
            	"冠",
            	"嫩",
            	"胁",
            	"芯",
            	"牢",
            	"叛",
            	"蚀",
            	"奥",
            	"鸣",
            	"岭",
            	"羊",
            	"凭",
            	"串",
            	"塘",
            	"绘",
            	"酵",
            	"融",
            	"盆",
            	"锡",
            	"庙",
            	"筹",
            	"冻",
            	"辅",
            	"摄",
            	"袭",
            	"筋",
            	"拒",
            	"僚",
            	"旱",
            	"钾",
            	"鸟",
            	"漆",
            	"沈",
            	"眉",
            	"疏",
            	"添",
            	"棒",
            	"穗",
            	"硝",
            	"韩",
            	"逼",
            	"扭",
            	"侨",
            	"凉",
            	"挺",
            	"碗",
            	"栽",
            	"炒",
            	"杯",
            	"患",
            	"馏",
            	"劝",
            	"豪",
            	"辽",
            	"勃",
            	"鸿",
            	"旦",
            	"吏",
            	"拜",
            	"狗",
            	"埋",
            	"辊",
            	"掩",
            	"饮",
            	"搬",
            	"骂",
            	"辞",
            	"勾",
            	"扣",
            	"估",
            	"蒋",
            	"绒",
            	"雾",
            	"丈",
            	"朵",
            	"姆",
            	"拟",
            	"宇",
            	"辑",
            	"陕",
            	"雕",
            	"偿",
            	"蓄",
            	"崇",
            	"剪",
            	"倡",
            	"厅",
            	"咬",
            	"驶",
            	"薯",
            	"刷",
            	"斥",
            	"番",
            	"赋",
            	"奉",
            	"佛",
            	"浇",
            	"漫",
            	"曼",
            	"扇",
            	"钙",
            	"桃",
            	"扶",
            	"仔",
            	"返",
            	"俗",
            	"亏",
            	"腔",
            	"鞋",
            	"棱",
            	"覆",
            	"框",
            	"悄",
            	"叔",
            	"撞",
            	"骗",
            	"勘",
            	"旺",
            	"沸",
            	"孤",
            	"吐",
            	"孟",
            	"渠",
            	"屈",
            	"疾",
            	"妙",
            	"惜",
            	"仰",
            	"狠",
            	"胀",
            	"谐",
            	"抛",
            	"霉",
            	"桑",
            	"岗",
            	"嘛",
            	"衰",
            	"盗",
            	"渗",
            	"脏",
            	"赖",
            	"涌",
            	"甜",
            	"曹",
            	"阅",
            	"肌",
            	"哩",
            	"厉",
            	"烃",
            	"纬",
            	"毅",
            	"昨",
            	"伪",
            	"症",
            	"煮",
            	"叹",
            	"钉",
            	"搭",
            	"茎",
            	"笼",
            	"酷",
            	"偷",
            	"弓",
            	"锥",
            	"恒",
            	"杰",
            	"坑",
            	"鼻",
            	"翼",
            	"纶",
            	"叙",
            	"狱",
            	"逮",
            	"罐",
            	"络",
            	"棚",
            	"抑",
            	"膨",
            	"蔬",
            	"寺",
            	"骤",
            	"穆",
            	"冶",
            	"枯",
            	"册",
            	"尸",
            	"凸",
            	"绅",
            	"坯",
            	"牺",
            	"焰",
            	"轰",
            	"欣",
            	"晋",
            	"瘦",
            	"御",
            	"锭",
            	"锦",
            	"丧",
            	"旬",
            	"锻",
            	"垄",
            	"搜",
            	"扑",
            	"邀",
            	"亭",
            	"酯",
            	"迈",
            	"舒",
            	"脆",
            	"酶",
            	"闲",
            	"忧",
            	"酚",
            	"顽",
            	"羽",
            	"涨",
            	"卸",
            	"仗",
            	"陪",
            	"辟",
            	"惩",
            	"杭",
            	"姚",
            	"肚",
            	"捉",
            	"飘",
            	"漂",
            	"昆",
            	"欺",
            	"吾",
            	"郎",
            	"烷",
            	"汁",
            	"呵",
            	"饰",
            	"萧",
            	"雅",
            	"邮",
            	"迁",
            	"燕",
            	"撒",
            	"姻",
            	"赴",
            	"宴",
            	"烦",
            	"债",
            	"帐",
            	"斑",
            	"铃",
            	"旨",
            	"醇",
            	"董",
            	"饼",
            	"雏",
            	"姿",
            	"拌",
            	"傅",
            	"腹",
            	"妥",
            	"揉",
            	"贤",
            	"拆",
            	"歪",
            	"葡",
            	"胺",
            	"丢",
            	"浩",
            	"徽",
            	"昂",
            	"垫",
            	"挡",
            	"览",
            	"贪",
            	"慰",
            	"缴",
            	"汪",
            	"慌",
            	"冯",
            	"诺",
            	"姜",
            	"谊",
            	"凶",
            	"劣",
            	"诬",
            	"耀",
            	"昏",
            	"躺",
            	"盈",
            	"骑",
            	"乔",
            	"溪",
            	"丛",
            	"卢",
            	"抹",
            	"闷",
            	"咨",
            	"刮",
            	"驾",
            	"缆",
            	"悟",
            	"摘",
            	"铒",
            	"掷",
            	"颇",
            	"幻",
            	"柄",
            	"惠",
            	"惨",
            	"佳",
            	"仇",
            	"腊",
            	"窝",
            	"涤",
            	"剑",
            	"瞧",
            	"堡",
            	"泼",
            	"葱",
            	"罩",
            	"霍",
            	"捞",
            	"胎",
            	"苍",
            	"滨",
            	"俩",
            	"捅",
            	"湘",
            	"砍",
            	"霞",
            	"邵",
            	"萄",
            	"疯",
            	"淮",
            	"遂",
            	"熊",
            	"粪",
            	"烘",
            	"宿",
            	"档",
            	"戈",
            	"驳",
            	"嫂",
            	"裕",
            	"徙",
            	"箭",
            	"捐",
            	"肠",
            	"撑",
            	"晒",
            	"辨",
            	"殿",
            	"莲",
            	"摊",
            	"搅",
            	"酱",
            	"屏",
            	"疫",
            	"哀",
            	"蔡",
            	"堵",
            	"沫",
            	"皱",
            	"畅",
            	"叠",
            	"阁",
            	"莱",
            	"敲",
            	"辖",
            	"钩",
            	"痕",
            	"坝",
            	"巷",
            	"饿",
            	"祸",
            	"丘",
            	"玄",
            	"溜",
            	"曰",
            	"逻",
            	"彭",
            	"尝",
            	"卿",
            	"妨",
            	"艇",
            	"吞",
            	"韦",
            	"怨",
            	"矮",
            	"歇"
            ];

            var require$$2 = [
            	"的",
            	"一",
            	"是",
            	"在",
            	"不",
            	"了",
            	"有",
            	"和",
            	"人",
            	"這",
            	"中",
            	"大",
            	"為",
            	"上",
            	"個",
            	"國",
            	"我",
            	"以",
            	"要",
            	"他",
            	"時",
            	"來",
            	"用",
            	"們",
            	"生",
            	"到",
            	"作",
            	"地",
            	"於",
            	"出",
            	"就",
            	"分",
            	"對",
            	"成",
            	"會",
            	"可",
            	"主",
            	"發",
            	"年",
            	"動",
            	"同",
            	"工",
            	"也",
            	"能",
            	"下",
            	"過",
            	"子",
            	"說",
            	"產",
            	"種",
            	"面",
            	"而",
            	"方",
            	"後",
            	"多",
            	"定",
            	"行",
            	"學",
            	"法",
            	"所",
            	"民",
            	"得",
            	"經",
            	"十",
            	"三",
            	"之",
            	"進",
            	"著",
            	"等",
            	"部",
            	"度",
            	"家",
            	"電",
            	"力",
            	"裡",
            	"如",
            	"水",
            	"化",
            	"高",
            	"自",
            	"二",
            	"理",
            	"起",
            	"小",
            	"物",
            	"現",
            	"實",
            	"加",
            	"量",
            	"都",
            	"兩",
            	"體",
            	"制",
            	"機",
            	"當",
            	"使",
            	"點",
            	"從",
            	"業",
            	"本",
            	"去",
            	"把",
            	"性",
            	"好",
            	"應",
            	"開",
            	"它",
            	"合",
            	"還",
            	"因",
            	"由",
            	"其",
            	"些",
            	"然",
            	"前",
            	"外",
            	"天",
            	"政",
            	"四",
            	"日",
            	"那",
            	"社",
            	"義",
            	"事",
            	"平",
            	"形",
            	"相",
            	"全",
            	"表",
            	"間",
            	"樣",
            	"與",
            	"關",
            	"各",
            	"重",
            	"新",
            	"線",
            	"內",
            	"數",
            	"正",
            	"心",
            	"反",
            	"你",
            	"明",
            	"看",
            	"原",
            	"又",
            	"麼",
            	"利",
            	"比",
            	"或",
            	"但",
            	"質",
            	"氣",
            	"第",
            	"向",
            	"道",
            	"命",
            	"此",
            	"變",
            	"條",
            	"只",
            	"沒",
            	"結",
            	"解",
            	"問",
            	"意",
            	"建",
            	"月",
            	"公",
            	"無",
            	"系",
            	"軍",
            	"很",
            	"情",
            	"者",
            	"最",
            	"立",
            	"代",
            	"想",
            	"已",
            	"通",
            	"並",
            	"提",
            	"直",
            	"題",
            	"黨",
            	"程",
            	"展",
            	"五",
            	"果",
            	"料",
            	"象",
            	"員",
            	"革",
            	"位",
            	"入",
            	"常",
            	"文",
            	"總",
            	"次",
            	"品",
            	"式",
            	"活",
            	"設",
            	"及",
            	"管",
            	"特",
            	"件",
            	"長",
            	"求",
            	"老",
            	"頭",
            	"基",
            	"資",
            	"邊",
            	"流",
            	"路",
            	"級",
            	"少",
            	"圖",
            	"山",
            	"統",
            	"接",
            	"知",
            	"較",
            	"將",
            	"組",
            	"見",
            	"計",
            	"別",
            	"她",
            	"手",
            	"角",
            	"期",
            	"根",
            	"論",
            	"運",
            	"農",
            	"指",
            	"幾",
            	"九",
            	"區",
            	"強",
            	"放",
            	"決",
            	"西",
            	"被",
            	"幹",
            	"做",
            	"必",
            	"戰",
            	"先",
            	"回",
            	"則",
            	"任",
            	"取",
            	"據",
            	"處",
            	"隊",
            	"南",
            	"給",
            	"色",
            	"光",
            	"門",
            	"即",
            	"保",
            	"治",
            	"北",
            	"造",
            	"百",
            	"規",
            	"熱",
            	"領",
            	"七",
            	"海",
            	"口",
            	"東",
            	"導",
            	"器",
            	"壓",
            	"志",
            	"世",
            	"金",
            	"增",
            	"爭",
            	"濟",
            	"階",
            	"油",
            	"思",
            	"術",
            	"極",
            	"交",
            	"受",
            	"聯",
            	"什",
            	"認",
            	"六",
            	"共",
            	"權",
            	"收",
            	"證",
            	"改",
            	"清",
            	"美",
            	"再",
            	"採",
            	"轉",
            	"更",
            	"單",
            	"風",
            	"切",
            	"打",
            	"白",
            	"教",
            	"速",
            	"花",
            	"帶",
            	"安",
            	"場",
            	"身",
            	"車",
            	"例",
            	"真",
            	"務",
            	"具",
            	"萬",
            	"每",
            	"目",
            	"至",
            	"達",
            	"走",
            	"積",
            	"示",
            	"議",
            	"聲",
            	"報",
            	"鬥",
            	"完",
            	"類",
            	"八",
            	"離",
            	"華",
            	"名",
            	"確",
            	"才",
            	"科",
            	"張",
            	"信",
            	"馬",
            	"節",
            	"話",
            	"米",
            	"整",
            	"空",
            	"元",
            	"況",
            	"今",
            	"集",
            	"溫",
            	"傳",
            	"土",
            	"許",
            	"步",
            	"群",
            	"廣",
            	"石",
            	"記",
            	"需",
            	"段",
            	"研",
            	"界",
            	"拉",
            	"林",
            	"律",
            	"叫",
            	"且",
            	"究",
            	"觀",
            	"越",
            	"織",
            	"裝",
            	"影",
            	"算",
            	"低",
            	"持",
            	"音",
            	"眾",
            	"書",
            	"布",
            	"复",
            	"容",
            	"兒",
            	"須",
            	"際",
            	"商",
            	"非",
            	"驗",
            	"連",
            	"斷",
            	"深",
            	"難",
            	"近",
            	"礦",
            	"千",
            	"週",
            	"委",
            	"素",
            	"技",
            	"備",
            	"半",
            	"辦",
            	"青",
            	"省",
            	"列",
            	"習",
            	"響",
            	"約",
            	"支",
            	"般",
            	"史",
            	"感",
            	"勞",
            	"便",
            	"團",
            	"往",
            	"酸",
            	"歷",
            	"市",
            	"克",
            	"何",
            	"除",
            	"消",
            	"構",
            	"府",
            	"稱",
            	"太",
            	"準",
            	"精",
            	"值",
            	"號",
            	"率",
            	"族",
            	"維",
            	"劃",
            	"選",
            	"標",
            	"寫",
            	"存",
            	"候",
            	"毛",
            	"親",
            	"快",
            	"效",
            	"斯",
            	"院",
            	"查",
            	"江",
            	"型",
            	"眼",
            	"王",
            	"按",
            	"格",
            	"養",
            	"易",
            	"置",
            	"派",
            	"層",
            	"片",
            	"始",
            	"卻",
            	"專",
            	"狀",
            	"育",
            	"廠",
            	"京",
            	"識",
            	"適",
            	"屬",
            	"圓",
            	"包",
            	"火",
            	"住",
            	"調",
            	"滿",
            	"縣",
            	"局",
            	"照",
            	"參",
            	"紅",
            	"細",
            	"引",
            	"聽",
            	"該",
            	"鐵",
            	"價",
            	"嚴",
            	"首",
            	"底",
            	"液",
            	"官",
            	"德",
            	"隨",
            	"病",
            	"蘇",
            	"失",
            	"爾",
            	"死",
            	"講",
            	"配",
            	"女",
            	"黃",
            	"推",
            	"顯",
            	"談",
            	"罪",
            	"神",
            	"藝",
            	"呢",
            	"席",
            	"含",
            	"企",
            	"望",
            	"密",
            	"批",
            	"營",
            	"項",
            	"防",
            	"舉",
            	"球",
            	"英",
            	"氧",
            	"勢",
            	"告",
            	"李",
            	"台",
            	"落",
            	"木",
            	"幫",
            	"輪",
            	"破",
            	"亞",
            	"師",
            	"圍",
            	"注",
            	"遠",
            	"字",
            	"材",
            	"排",
            	"供",
            	"河",
            	"態",
            	"封",
            	"另",
            	"施",
            	"減",
            	"樹",
            	"溶",
            	"怎",
            	"止",
            	"案",
            	"言",
            	"士",
            	"均",
            	"武",
            	"固",
            	"葉",
            	"魚",
            	"波",
            	"視",
            	"僅",
            	"費",
            	"緊",
            	"愛",
            	"左",
            	"章",
            	"早",
            	"朝",
            	"害",
            	"續",
            	"輕",
            	"服",
            	"試",
            	"食",
            	"充",
            	"兵",
            	"源",
            	"判",
            	"護",
            	"司",
            	"足",
            	"某",
            	"練",
            	"差",
            	"致",
            	"板",
            	"田",
            	"降",
            	"黑",
            	"犯",
            	"負",
            	"擊",
            	"范",
            	"繼",
            	"興",
            	"似",
            	"餘",
            	"堅",
            	"曲",
            	"輸",
            	"修",
            	"故",
            	"城",
            	"夫",
            	"夠",
            	"送",
            	"筆",
            	"船",
            	"佔",
            	"右",
            	"財",
            	"吃",
            	"富",
            	"春",
            	"職",
            	"覺",
            	"漢",
            	"畫",
            	"功",
            	"巴",
            	"跟",
            	"雖",
            	"雜",
            	"飛",
            	"檢",
            	"吸",
            	"助",
            	"昇",
            	"陽",
            	"互",
            	"初",
            	"創",
            	"抗",
            	"考",
            	"投",
            	"壞",
            	"策",
            	"古",
            	"徑",
            	"換",
            	"未",
            	"跑",
            	"留",
            	"鋼",
            	"曾",
            	"端",
            	"責",
            	"站",
            	"簡",
            	"述",
            	"錢",
            	"副",
            	"盡",
            	"帝",
            	"射",
            	"草",
            	"衝",
            	"承",
            	"獨",
            	"令",
            	"限",
            	"阿",
            	"宣",
            	"環",
            	"雙",
            	"請",
            	"超",
            	"微",
            	"讓",
            	"控",
            	"州",
            	"良",
            	"軸",
            	"找",
            	"否",
            	"紀",
            	"益",
            	"依",
            	"優",
            	"頂",
            	"礎",
            	"載",
            	"倒",
            	"房",
            	"突",
            	"坐",
            	"粉",
            	"敵",
            	"略",
            	"客",
            	"袁",
            	"冷",
            	"勝",
            	"絕",
            	"析",
            	"塊",
            	"劑",
            	"測",
            	"絲",
            	"協",
            	"訴",
            	"念",
            	"陳",
            	"仍",
            	"羅",
            	"鹽",
            	"友",
            	"洋",
            	"錯",
            	"苦",
            	"夜",
            	"刑",
            	"移",
            	"頻",
            	"逐",
            	"靠",
            	"混",
            	"母",
            	"短",
            	"皮",
            	"終",
            	"聚",
            	"汽",
            	"村",
            	"雲",
            	"哪",
            	"既",
            	"距",
            	"衛",
            	"停",
            	"烈",
            	"央",
            	"察",
            	"燒",
            	"迅",
            	"境",
            	"若",
            	"印",
            	"洲",
            	"刻",
            	"括",
            	"激",
            	"孔",
            	"搞",
            	"甚",
            	"室",
            	"待",
            	"核",
            	"校",
            	"散",
            	"侵",
            	"吧",
            	"甲",
            	"遊",
            	"久",
            	"菜",
            	"味",
            	"舊",
            	"模",
            	"湖",
            	"貨",
            	"損",
            	"預",
            	"阻",
            	"毫",
            	"普",
            	"穩",
            	"乙",
            	"媽",
            	"植",
            	"息",
            	"擴",
            	"銀",
            	"語",
            	"揮",
            	"酒",
            	"守",
            	"拿",
            	"序",
            	"紙",
            	"醫",
            	"缺",
            	"雨",
            	"嗎",
            	"針",
            	"劉",
            	"啊",
            	"急",
            	"唱",
            	"誤",
            	"訓",
            	"願",
            	"審",
            	"附",
            	"獲",
            	"茶",
            	"鮮",
            	"糧",
            	"斤",
            	"孩",
            	"脫",
            	"硫",
            	"肥",
            	"善",
            	"龍",
            	"演",
            	"父",
            	"漸",
            	"血",
            	"歡",
            	"械",
            	"掌",
            	"歌",
            	"沙",
            	"剛",
            	"攻",
            	"謂",
            	"盾",
            	"討",
            	"晚",
            	"粒",
            	"亂",
            	"燃",
            	"矛",
            	"乎",
            	"殺",
            	"藥",
            	"寧",
            	"魯",
            	"貴",
            	"鐘",
            	"煤",
            	"讀",
            	"班",
            	"伯",
            	"香",
            	"介",
            	"迫",
            	"句",
            	"豐",
            	"培",
            	"握",
            	"蘭",
            	"擔",
            	"弦",
            	"蛋",
            	"沉",
            	"假",
            	"穿",
            	"執",
            	"答",
            	"樂",
            	"誰",
            	"順",
            	"煙",
            	"縮",
            	"徵",
            	"臉",
            	"喜",
            	"松",
            	"腳",
            	"困",
            	"異",
            	"免",
            	"背",
            	"星",
            	"福",
            	"買",
            	"染",
            	"井",
            	"概",
            	"慢",
            	"怕",
            	"磁",
            	"倍",
            	"祖",
            	"皇",
            	"促",
            	"靜",
            	"補",
            	"評",
            	"翻",
            	"肉",
            	"踐",
            	"尼",
            	"衣",
            	"寬",
            	"揚",
            	"棉",
            	"希",
            	"傷",
            	"操",
            	"垂",
            	"秋",
            	"宜",
            	"氫",
            	"套",
            	"督",
            	"振",
            	"架",
            	"亮",
            	"末",
            	"憲",
            	"慶",
            	"編",
            	"牛",
            	"觸",
            	"映",
            	"雷",
            	"銷",
            	"詩",
            	"座",
            	"居",
            	"抓",
            	"裂",
            	"胞",
            	"呼",
            	"娘",
            	"景",
            	"威",
            	"綠",
            	"晶",
            	"厚",
            	"盟",
            	"衡",
            	"雞",
            	"孫",
            	"延",
            	"危",
            	"膠",
            	"屋",
            	"鄉",
            	"臨",
            	"陸",
            	"顧",
            	"掉",
            	"呀",
            	"燈",
            	"歲",
            	"措",
            	"束",
            	"耐",
            	"劇",
            	"玉",
            	"趙",
            	"跳",
            	"哥",
            	"季",
            	"課",
            	"凱",
            	"胡",
            	"額",
            	"款",
            	"紹",
            	"卷",
            	"齊",
            	"偉",
            	"蒸",
            	"殖",
            	"永",
            	"宗",
            	"苗",
            	"川",
            	"爐",
            	"岩",
            	"弱",
            	"零",
            	"楊",
            	"奏",
            	"沿",
            	"露",
            	"桿",
            	"探",
            	"滑",
            	"鎮",
            	"飯",
            	"濃",
            	"航",
            	"懷",
            	"趕",
            	"庫",
            	"奪",
            	"伊",
            	"靈",
            	"稅",
            	"途",
            	"滅",
            	"賽",
            	"歸",
            	"召",
            	"鼓",
            	"播",
            	"盤",
            	"裁",
            	"險",
            	"康",
            	"唯",
            	"錄",
            	"菌",
            	"純",
            	"借",
            	"糖",
            	"蓋",
            	"橫",
            	"符",
            	"私",
            	"努",
            	"堂",
            	"域",
            	"槍",
            	"潤",
            	"幅",
            	"哈",
            	"竟",
            	"熟",
            	"蟲",
            	"澤",
            	"腦",
            	"壤",
            	"碳",
            	"歐",
            	"遍",
            	"側",
            	"寨",
            	"敢",
            	"徹",
            	"慮",
            	"斜",
            	"薄",
            	"庭",
            	"納",
            	"彈",
            	"飼",
            	"伸",
            	"折",
            	"麥",
            	"濕",
            	"暗",
            	"荷",
            	"瓦",
            	"塞",
            	"床",
            	"築",
            	"惡",
            	"戶",
            	"訪",
            	"塔",
            	"奇",
            	"透",
            	"梁",
            	"刀",
            	"旋",
            	"跡",
            	"卡",
            	"氯",
            	"遇",
            	"份",
            	"毒",
            	"泥",
            	"退",
            	"洗",
            	"擺",
            	"灰",
            	"彩",
            	"賣",
            	"耗",
            	"夏",
            	"擇",
            	"忙",
            	"銅",
            	"獻",
            	"硬",
            	"予",
            	"繁",
            	"圈",
            	"雪",
            	"函",
            	"亦",
            	"抽",
            	"篇",
            	"陣",
            	"陰",
            	"丁",
            	"尺",
            	"追",
            	"堆",
            	"雄",
            	"迎",
            	"泛",
            	"爸",
            	"樓",
            	"避",
            	"謀",
            	"噸",
            	"野",
            	"豬",
            	"旗",
            	"累",
            	"偏",
            	"典",
            	"館",
            	"索",
            	"秦",
            	"脂",
            	"潮",
            	"爺",
            	"豆",
            	"忽",
            	"托",
            	"驚",
            	"塑",
            	"遺",
            	"愈",
            	"朱",
            	"替",
            	"纖",
            	"粗",
            	"傾",
            	"尚",
            	"痛",
            	"楚",
            	"謝",
            	"奮",
            	"購",
            	"磨",
            	"君",
            	"池",
            	"旁",
            	"碎",
            	"骨",
            	"監",
            	"捕",
            	"弟",
            	"暴",
            	"割",
            	"貫",
            	"殊",
            	"釋",
            	"詞",
            	"亡",
            	"壁",
            	"頓",
            	"寶",
            	"午",
            	"塵",
            	"聞",
            	"揭",
            	"炮",
            	"殘",
            	"冬",
            	"橋",
            	"婦",
            	"警",
            	"綜",
            	"招",
            	"吳",
            	"付",
            	"浮",
            	"遭",
            	"徐",
            	"您",
            	"搖",
            	"谷",
            	"贊",
            	"箱",
            	"隔",
            	"訂",
            	"男",
            	"吹",
            	"園",
            	"紛",
            	"唐",
            	"敗",
            	"宋",
            	"玻",
            	"巨",
            	"耕",
            	"坦",
            	"榮",
            	"閉",
            	"灣",
            	"鍵",
            	"凡",
            	"駐",
            	"鍋",
            	"救",
            	"恩",
            	"剝",
            	"凝",
            	"鹼",
            	"齒",
            	"截",
            	"煉",
            	"麻",
            	"紡",
            	"禁",
            	"廢",
            	"盛",
            	"版",
            	"緩",
            	"淨",
            	"睛",
            	"昌",
            	"婚",
            	"涉",
            	"筒",
            	"嘴",
            	"插",
            	"岸",
            	"朗",
            	"莊",
            	"街",
            	"藏",
            	"姑",
            	"貿",
            	"腐",
            	"奴",
            	"啦",
            	"慣",
            	"乘",
            	"夥",
            	"恢",
            	"勻",
            	"紗",
            	"扎",
            	"辯",
            	"耳",
            	"彪",
            	"臣",
            	"億",
            	"璃",
            	"抵",
            	"脈",
            	"秀",
            	"薩",
            	"俄",
            	"網",
            	"舞",
            	"店",
            	"噴",
            	"縱",
            	"寸",
            	"汗",
            	"掛",
            	"洪",
            	"賀",
            	"閃",
            	"柬",
            	"爆",
            	"烯",
            	"津",
            	"稻",
            	"牆",
            	"軟",
            	"勇",
            	"像",
            	"滾",
            	"厘",
            	"蒙",
            	"芳",
            	"肯",
            	"坡",
            	"柱",
            	"盪",
            	"腿",
            	"儀",
            	"旅",
            	"尾",
            	"軋",
            	"冰",
            	"貢",
            	"登",
            	"黎",
            	"削",
            	"鑽",
            	"勒",
            	"逃",
            	"障",
            	"氨",
            	"郭",
            	"峰",
            	"幣",
            	"港",
            	"伏",
            	"軌",
            	"畝",
            	"畢",
            	"擦",
            	"莫",
            	"刺",
            	"浪",
            	"秘",
            	"援",
            	"株",
            	"健",
            	"售",
            	"股",
            	"島",
            	"甘",
            	"泡",
            	"睡",
            	"童",
            	"鑄",
            	"湯",
            	"閥",
            	"休",
            	"匯",
            	"舍",
            	"牧",
            	"繞",
            	"炸",
            	"哲",
            	"磷",
            	"績",
            	"朋",
            	"淡",
            	"尖",
            	"啟",
            	"陷",
            	"柴",
            	"呈",
            	"徒",
            	"顏",
            	"淚",
            	"稍",
            	"忘",
            	"泵",
            	"藍",
            	"拖",
            	"洞",
            	"授",
            	"鏡",
            	"辛",
            	"壯",
            	"鋒",
            	"貧",
            	"虛",
            	"彎",
            	"摩",
            	"泰",
            	"幼",
            	"廷",
            	"尊",
            	"窗",
            	"綱",
            	"弄",
            	"隸",
            	"疑",
            	"氏",
            	"宮",
            	"姐",
            	"震",
            	"瑞",
            	"怪",
            	"尤",
            	"琴",
            	"循",
            	"描",
            	"膜",
            	"違",
            	"夾",
            	"腰",
            	"緣",
            	"珠",
            	"窮",
            	"森",
            	"枝",
            	"竹",
            	"溝",
            	"催",
            	"繩",
            	"憶",
            	"邦",
            	"剩",
            	"幸",
            	"漿",
            	"欄",
            	"擁",
            	"牙",
            	"貯",
            	"禮",
            	"濾",
            	"鈉",
            	"紋",
            	"罷",
            	"拍",
            	"咱",
            	"喊",
            	"袖",
            	"埃",
            	"勤",
            	"罰",
            	"焦",
            	"潛",
            	"伍",
            	"墨",
            	"欲",
            	"縫",
            	"姓",
            	"刊",
            	"飽",
            	"仿",
            	"獎",
            	"鋁",
            	"鬼",
            	"麗",
            	"跨",
            	"默",
            	"挖",
            	"鏈",
            	"掃",
            	"喝",
            	"袋",
            	"炭",
            	"污",
            	"幕",
            	"諸",
            	"弧",
            	"勵",
            	"梅",
            	"奶",
            	"潔",
            	"災",
            	"舟",
            	"鑑",
            	"苯",
            	"訟",
            	"抱",
            	"毀",
            	"懂",
            	"寒",
            	"智",
            	"埔",
            	"寄",
            	"屆",
            	"躍",
            	"渡",
            	"挑",
            	"丹",
            	"艱",
            	"貝",
            	"碰",
            	"拔",
            	"爹",
            	"戴",
            	"碼",
            	"夢",
            	"芽",
            	"熔",
            	"赤",
            	"漁",
            	"哭",
            	"敬",
            	"顆",
            	"奔",
            	"鉛",
            	"仲",
            	"虎",
            	"稀",
            	"妹",
            	"乏",
            	"珍",
            	"申",
            	"桌",
            	"遵",
            	"允",
            	"隆",
            	"螺",
            	"倉",
            	"魏",
            	"銳",
            	"曉",
            	"氮",
            	"兼",
            	"隱",
            	"礙",
            	"赫",
            	"撥",
            	"忠",
            	"肅",
            	"缸",
            	"牽",
            	"搶",
            	"博",
            	"巧",
            	"殼",
            	"兄",
            	"杜",
            	"訊",
            	"誠",
            	"碧",
            	"祥",
            	"柯",
            	"頁",
            	"巡",
            	"矩",
            	"悲",
            	"灌",
            	"齡",
            	"倫",
            	"票",
            	"尋",
            	"桂",
            	"鋪",
            	"聖",
            	"恐",
            	"恰",
            	"鄭",
            	"趣",
            	"抬",
            	"荒",
            	"騰",
            	"貼",
            	"柔",
            	"滴",
            	"猛",
            	"闊",
            	"輛",
            	"妻",
            	"填",
            	"撤",
            	"儲",
            	"簽",
            	"鬧",
            	"擾",
            	"紫",
            	"砂",
            	"遞",
            	"戲",
            	"吊",
            	"陶",
            	"伐",
            	"餵",
            	"療",
            	"瓶",
            	"婆",
            	"撫",
            	"臂",
            	"摸",
            	"忍",
            	"蝦",
            	"蠟",
            	"鄰",
            	"胸",
            	"鞏",
            	"擠",
            	"偶",
            	"棄",
            	"槽",
            	"勁",
            	"乳",
            	"鄧",
            	"吉",
            	"仁",
            	"爛",
            	"磚",
            	"租",
            	"烏",
            	"艦",
            	"伴",
            	"瓜",
            	"淺",
            	"丙",
            	"暫",
            	"燥",
            	"橡",
            	"柳",
            	"迷",
            	"暖",
            	"牌",
            	"秧",
            	"膽",
            	"詳",
            	"簧",
            	"踏",
            	"瓷",
            	"譜",
            	"呆",
            	"賓",
            	"糊",
            	"洛",
            	"輝",
            	"憤",
            	"競",
            	"隙",
            	"怒",
            	"粘",
            	"乃",
            	"緒",
            	"肩",
            	"籍",
            	"敏",
            	"塗",
            	"熙",
            	"皆",
            	"偵",
            	"懸",
            	"掘",
            	"享",
            	"糾",
            	"醒",
            	"狂",
            	"鎖",
            	"淀",
            	"恨",
            	"牲",
            	"霸",
            	"爬",
            	"賞",
            	"逆",
            	"玩",
            	"陵",
            	"祝",
            	"秒",
            	"浙",
            	"貌",
            	"役",
            	"彼",
            	"悉",
            	"鴨",
            	"趨",
            	"鳳",
            	"晨",
            	"畜",
            	"輩",
            	"秩",
            	"卵",
            	"署",
            	"梯",
            	"炎",
            	"灘",
            	"棋",
            	"驅",
            	"篩",
            	"峽",
            	"冒",
            	"啥",
            	"壽",
            	"譯",
            	"浸",
            	"泉",
            	"帽",
            	"遲",
            	"矽",
            	"疆",
            	"貸",
            	"漏",
            	"稿",
            	"冠",
            	"嫩",
            	"脅",
            	"芯",
            	"牢",
            	"叛",
            	"蝕",
            	"奧",
            	"鳴",
            	"嶺",
            	"羊",
            	"憑",
            	"串",
            	"塘",
            	"繪",
            	"酵",
            	"融",
            	"盆",
            	"錫",
            	"廟",
            	"籌",
            	"凍",
            	"輔",
            	"攝",
            	"襲",
            	"筋",
            	"拒",
            	"僚",
            	"旱",
            	"鉀",
            	"鳥",
            	"漆",
            	"沈",
            	"眉",
            	"疏",
            	"添",
            	"棒",
            	"穗",
            	"硝",
            	"韓",
            	"逼",
            	"扭",
            	"僑",
            	"涼",
            	"挺",
            	"碗",
            	"栽",
            	"炒",
            	"杯",
            	"患",
            	"餾",
            	"勸",
            	"豪",
            	"遼",
            	"勃",
            	"鴻",
            	"旦",
            	"吏",
            	"拜",
            	"狗",
            	"埋",
            	"輥",
            	"掩",
            	"飲",
            	"搬",
            	"罵",
            	"辭",
            	"勾",
            	"扣",
            	"估",
            	"蔣",
            	"絨",
            	"霧",
            	"丈",
            	"朵",
            	"姆",
            	"擬",
            	"宇",
            	"輯",
            	"陝",
            	"雕",
            	"償",
            	"蓄",
            	"崇",
            	"剪",
            	"倡",
            	"廳",
            	"咬",
            	"駛",
            	"薯",
            	"刷",
            	"斥",
            	"番",
            	"賦",
            	"奉",
            	"佛",
            	"澆",
            	"漫",
            	"曼",
            	"扇",
            	"鈣",
            	"桃",
            	"扶",
            	"仔",
            	"返",
            	"俗",
            	"虧",
            	"腔",
            	"鞋",
            	"棱",
            	"覆",
            	"框",
            	"悄",
            	"叔",
            	"撞",
            	"騙",
            	"勘",
            	"旺",
            	"沸",
            	"孤",
            	"吐",
            	"孟",
            	"渠",
            	"屈",
            	"疾",
            	"妙",
            	"惜",
            	"仰",
            	"狠",
            	"脹",
            	"諧",
            	"拋",
            	"黴",
            	"桑",
            	"崗",
            	"嘛",
            	"衰",
            	"盜",
            	"滲",
            	"臟",
            	"賴",
            	"湧",
            	"甜",
            	"曹",
            	"閱",
            	"肌",
            	"哩",
            	"厲",
            	"烴",
            	"緯",
            	"毅",
            	"昨",
            	"偽",
            	"症",
            	"煮",
            	"嘆",
            	"釘",
            	"搭",
            	"莖",
            	"籠",
            	"酷",
            	"偷",
            	"弓",
            	"錐",
            	"恆",
            	"傑",
            	"坑",
            	"鼻",
            	"翼",
            	"綸",
            	"敘",
            	"獄",
            	"逮",
            	"罐",
            	"絡",
            	"棚",
            	"抑",
            	"膨",
            	"蔬",
            	"寺",
            	"驟",
            	"穆",
            	"冶",
            	"枯",
            	"冊",
            	"屍",
            	"凸",
            	"紳",
            	"坯",
            	"犧",
            	"焰",
            	"轟",
            	"欣",
            	"晉",
            	"瘦",
            	"禦",
            	"錠",
            	"錦",
            	"喪",
            	"旬",
            	"鍛",
            	"壟",
            	"搜",
            	"撲",
            	"邀",
            	"亭",
            	"酯",
            	"邁",
            	"舒",
            	"脆",
            	"酶",
            	"閒",
            	"憂",
            	"酚",
            	"頑",
            	"羽",
            	"漲",
            	"卸",
            	"仗",
            	"陪",
            	"闢",
            	"懲",
            	"杭",
            	"姚",
            	"肚",
            	"捉",
            	"飄",
            	"漂",
            	"昆",
            	"欺",
            	"吾",
            	"郎",
            	"烷",
            	"汁",
            	"呵",
            	"飾",
            	"蕭",
            	"雅",
            	"郵",
            	"遷",
            	"燕",
            	"撒",
            	"姻",
            	"赴",
            	"宴",
            	"煩",
            	"債",
            	"帳",
            	"斑",
            	"鈴",
            	"旨",
            	"醇",
            	"董",
            	"餅",
            	"雛",
            	"姿",
            	"拌",
            	"傅",
            	"腹",
            	"妥",
            	"揉",
            	"賢",
            	"拆",
            	"歪",
            	"葡",
            	"胺",
            	"丟",
            	"浩",
            	"徽",
            	"昂",
            	"墊",
            	"擋",
            	"覽",
            	"貪",
            	"慰",
            	"繳",
            	"汪",
            	"慌",
            	"馮",
            	"諾",
            	"姜",
            	"誼",
            	"兇",
            	"劣",
            	"誣",
            	"耀",
            	"昏",
            	"躺",
            	"盈",
            	"騎",
            	"喬",
            	"溪",
            	"叢",
            	"盧",
            	"抹",
            	"悶",
            	"諮",
            	"刮",
            	"駕",
            	"纜",
            	"悟",
            	"摘",
            	"鉺",
            	"擲",
            	"頗",
            	"幻",
            	"柄",
            	"惠",
            	"慘",
            	"佳",
            	"仇",
            	"臘",
            	"窩",
            	"滌",
            	"劍",
            	"瞧",
            	"堡",
            	"潑",
            	"蔥",
            	"罩",
            	"霍",
            	"撈",
            	"胎",
            	"蒼",
            	"濱",
            	"倆",
            	"捅",
            	"湘",
            	"砍",
            	"霞",
            	"邵",
            	"萄",
            	"瘋",
            	"淮",
            	"遂",
            	"熊",
            	"糞",
            	"烘",
            	"宿",
            	"檔",
            	"戈",
            	"駁",
            	"嫂",
            	"裕",
            	"徙",
            	"箭",
            	"捐",
            	"腸",
            	"撐",
            	"曬",
            	"辨",
            	"殿",
            	"蓮",
            	"攤",
            	"攪",
            	"醬",
            	"屏",
            	"疫",
            	"哀",
            	"蔡",
            	"堵",
            	"沫",
            	"皺",
            	"暢",
            	"疊",
            	"閣",
            	"萊",
            	"敲",
            	"轄",
            	"鉤",
            	"痕",
            	"壩",
            	"巷",
            	"餓",
            	"禍",
            	"丘",
            	"玄",
            	"溜",
            	"曰",
            	"邏",
            	"彭",
            	"嘗",
            	"卿",
            	"妨",
            	"艇",
            	"吞",
            	"韋",
            	"怨",
            	"矮",
            	"歇"
            ];

            var require$$3 = [
            	"가격",
            	"가끔",
            	"가난",
            	"가능",
            	"가득",
            	"가르침",
            	"가뭄",
            	"가방",
            	"가상",
            	"가슴",
            	"가운데",
            	"가을",
            	"가이드",
            	"가입",
            	"가장",
            	"가정",
            	"가족",
            	"가죽",
            	"각오",
            	"각자",
            	"간격",
            	"간부",
            	"간섭",
            	"간장",
            	"간접",
            	"간판",
            	"갈등",
            	"갈비",
            	"갈색",
            	"갈증",
            	"감각",
            	"감기",
            	"감소",
            	"감수성",
            	"감자",
            	"감정",
            	"갑자기",
            	"강남",
            	"강당",
            	"강도",
            	"강력히",
            	"강변",
            	"강북",
            	"강사",
            	"강수량",
            	"강아지",
            	"강원도",
            	"강의",
            	"강제",
            	"강조",
            	"같이",
            	"개구리",
            	"개나리",
            	"개방",
            	"개별",
            	"개선",
            	"개성",
            	"개인",
            	"객관적",
            	"거실",
            	"거액",
            	"거울",
            	"거짓",
            	"거품",
            	"걱정",
            	"건강",
            	"건물",
            	"건설",
            	"건조",
            	"건축",
            	"걸음",
            	"검사",
            	"검토",
            	"게시판",
            	"게임",
            	"겨울",
            	"견해",
            	"결과",
            	"결국",
            	"결론",
            	"결석",
            	"결승",
            	"결심",
            	"결정",
            	"결혼",
            	"경계",
            	"경고",
            	"경기",
            	"경력",
            	"경복궁",
            	"경비",
            	"경상도",
            	"경영",
            	"경우",
            	"경쟁",
            	"경제",
            	"경주",
            	"경찰",
            	"경치",
            	"경향",
            	"경험",
            	"계곡",
            	"계단",
            	"계란",
            	"계산",
            	"계속",
            	"계약",
            	"계절",
            	"계층",
            	"계획",
            	"고객",
            	"고구려",
            	"고궁",
            	"고급",
            	"고등학생",
            	"고무신",
            	"고민",
            	"고양이",
            	"고장",
            	"고전",
            	"고집",
            	"고춧가루",
            	"고통",
            	"고향",
            	"곡식",
            	"골목",
            	"골짜기",
            	"골프",
            	"공간",
            	"공개",
            	"공격",
            	"공군",
            	"공급",
            	"공기",
            	"공동",
            	"공무원",
            	"공부",
            	"공사",
            	"공식",
            	"공업",
            	"공연",
            	"공원",
            	"공장",
            	"공짜",
            	"공책",
            	"공통",
            	"공포",
            	"공항",
            	"공휴일",
            	"과목",
            	"과일",
            	"과장",
            	"과정",
            	"과학",
            	"관객",
            	"관계",
            	"관광",
            	"관념",
            	"관람",
            	"관련",
            	"관리",
            	"관습",
            	"관심",
            	"관점",
            	"관찰",
            	"광경",
            	"광고",
            	"광장",
            	"광주",
            	"괴로움",
            	"굉장히",
            	"교과서",
            	"교문",
            	"교복",
            	"교실",
            	"교양",
            	"교육",
            	"교장",
            	"교직",
            	"교통",
            	"교환",
            	"교훈",
            	"구경",
            	"구름",
            	"구멍",
            	"구별",
            	"구분",
            	"구석",
            	"구성",
            	"구속",
            	"구역",
            	"구입",
            	"구청",
            	"구체적",
            	"국가",
            	"국기",
            	"국내",
            	"국립",
            	"국물",
            	"국민",
            	"국수",
            	"국어",
            	"국왕",
            	"국적",
            	"국제",
            	"국회",
            	"군대",
            	"군사",
            	"군인",
            	"궁극적",
            	"권리",
            	"권위",
            	"권투",
            	"귀국",
            	"귀신",
            	"규정",
            	"규칙",
            	"균형",
            	"그날",
            	"그냥",
            	"그늘",
            	"그러나",
            	"그룹",
            	"그릇",
            	"그림",
            	"그제서야",
            	"그토록",
            	"극복",
            	"극히",
            	"근거",
            	"근교",
            	"근래",
            	"근로",
            	"근무",
            	"근본",
            	"근원",
            	"근육",
            	"근처",
            	"글씨",
            	"글자",
            	"금강산",
            	"금고",
            	"금년",
            	"금메달",
            	"금액",
            	"금연",
            	"금요일",
            	"금지",
            	"긍정적",
            	"기간",
            	"기관",
            	"기념",
            	"기능",
            	"기독교",
            	"기둥",
            	"기록",
            	"기름",
            	"기법",
            	"기본",
            	"기분",
            	"기쁨",
            	"기숙사",
            	"기술",
            	"기억",
            	"기업",
            	"기온",
            	"기운",
            	"기원",
            	"기적",
            	"기준",
            	"기침",
            	"기혼",
            	"기획",
            	"긴급",
            	"긴장",
            	"길이",
            	"김밥",
            	"김치",
            	"김포공항",
            	"깍두기",
            	"깜빡",
            	"깨달음",
            	"깨소금",
            	"껍질",
            	"꼭대기",
            	"꽃잎",
            	"나들이",
            	"나란히",
            	"나머지",
            	"나물",
            	"나침반",
            	"나흘",
            	"낙엽",
            	"난방",
            	"날개",
            	"날씨",
            	"날짜",
            	"남녀",
            	"남대문",
            	"남매",
            	"남산",
            	"남자",
            	"남편",
            	"남학생",
            	"낭비",
            	"낱말",
            	"내년",
            	"내용",
            	"내일",
            	"냄비",
            	"냄새",
            	"냇물",
            	"냉동",
            	"냉면",
            	"냉방",
            	"냉장고",
            	"넥타이",
            	"넷째",
            	"노동",
            	"노란색",
            	"노력",
            	"노인",
            	"녹음",
            	"녹차",
            	"녹화",
            	"논리",
            	"논문",
            	"논쟁",
            	"놀이",
            	"농구",
            	"농담",
            	"농민",
            	"농부",
            	"농업",
            	"농장",
            	"농촌",
            	"높이",
            	"눈동자",
            	"눈물",
            	"눈썹",
            	"뉴욕",
            	"느낌",
            	"늑대",
            	"능동적",
            	"능력",
            	"다방",
            	"다양성",
            	"다음",
            	"다이어트",
            	"다행",
            	"단계",
            	"단골",
            	"단독",
            	"단맛",
            	"단순",
            	"단어",
            	"단위",
            	"단점",
            	"단체",
            	"단추",
            	"단편",
            	"단풍",
            	"달걀",
            	"달러",
            	"달력",
            	"달리",
            	"닭고기",
            	"담당",
            	"담배",
            	"담요",
            	"담임",
            	"답변",
            	"답장",
            	"당근",
            	"당분간",
            	"당연히",
            	"당장",
            	"대규모",
            	"대낮",
            	"대단히",
            	"대답",
            	"대도시",
            	"대략",
            	"대량",
            	"대륙",
            	"대문",
            	"대부분",
            	"대신",
            	"대응",
            	"대장",
            	"대전",
            	"대접",
            	"대중",
            	"대책",
            	"대출",
            	"대충",
            	"대통령",
            	"대학",
            	"대한민국",
            	"대합실",
            	"대형",
            	"덩어리",
            	"데이트",
            	"도대체",
            	"도덕",
            	"도둑",
            	"도망",
            	"도서관",
            	"도심",
            	"도움",
            	"도입",
            	"도자기",
            	"도저히",
            	"도전",
            	"도중",
            	"도착",
            	"독감",
            	"독립",
            	"독서",
            	"독일",
            	"독창적",
            	"동화책",
            	"뒷모습",
            	"뒷산",
            	"딸아이",
            	"마누라",
            	"마늘",
            	"마당",
            	"마라톤",
            	"마련",
            	"마무리",
            	"마사지",
            	"마약",
            	"마요네즈",
            	"마을",
            	"마음",
            	"마이크",
            	"마중",
            	"마지막",
            	"마찬가지",
            	"마찰",
            	"마흔",
            	"막걸리",
            	"막내",
            	"막상",
            	"만남",
            	"만두",
            	"만세",
            	"만약",
            	"만일",
            	"만점",
            	"만족",
            	"만화",
            	"많이",
            	"말기",
            	"말씀",
            	"말투",
            	"맘대로",
            	"망원경",
            	"매년",
            	"매달",
            	"매력",
            	"매번",
            	"매스컴",
            	"매일",
            	"매장",
            	"맥주",
            	"먹이",
            	"먼저",
            	"먼지",
            	"멀리",
            	"메일",
            	"며느리",
            	"며칠",
            	"면담",
            	"멸치",
            	"명단",
            	"명령",
            	"명예",
            	"명의",
            	"명절",
            	"명칭",
            	"명함",
            	"모금",
            	"모니터",
            	"모델",
            	"모든",
            	"모범",
            	"모습",
            	"모양",
            	"모임",
            	"모조리",
            	"모집",
            	"모퉁이",
            	"목걸이",
            	"목록",
            	"목사",
            	"목소리",
            	"목숨",
            	"목적",
            	"목표",
            	"몰래",
            	"몸매",
            	"몸무게",
            	"몸살",
            	"몸속",
            	"몸짓",
            	"몸통",
            	"몹시",
            	"무관심",
            	"무궁화",
            	"무더위",
            	"무덤",
            	"무릎",
            	"무슨",
            	"무엇",
            	"무역",
            	"무용",
            	"무조건",
            	"무지개",
            	"무척",
            	"문구",
            	"문득",
            	"문법",
            	"문서",
            	"문제",
            	"문학",
            	"문화",
            	"물가",
            	"물건",
            	"물결",
            	"물고기",
            	"물론",
            	"물리학",
            	"물음",
            	"물질",
            	"물체",
            	"미국",
            	"미디어",
            	"미사일",
            	"미술",
            	"미역",
            	"미용실",
            	"미움",
            	"미인",
            	"미팅",
            	"미혼",
            	"민간",
            	"민족",
            	"민주",
            	"믿음",
            	"밀가루",
            	"밀리미터",
            	"밑바닥",
            	"바가지",
            	"바구니",
            	"바나나",
            	"바늘",
            	"바닥",
            	"바닷가",
            	"바람",
            	"바이러스",
            	"바탕",
            	"박물관",
            	"박사",
            	"박수",
            	"반대",
            	"반드시",
            	"반말",
            	"반발",
            	"반성",
            	"반응",
            	"반장",
            	"반죽",
            	"반지",
            	"반찬",
            	"받침",
            	"발가락",
            	"발걸음",
            	"발견",
            	"발달",
            	"발레",
            	"발목",
            	"발바닥",
            	"발생",
            	"발음",
            	"발자국",
            	"발전",
            	"발톱",
            	"발표",
            	"밤하늘",
            	"밥그릇",
            	"밥맛",
            	"밥상",
            	"밥솥",
            	"방금",
            	"방면",
            	"방문",
            	"방바닥",
            	"방법",
            	"방송",
            	"방식",
            	"방안",
            	"방울",
            	"방지",
            	"방학",
            	"방해",
            	"방향",
            	"배경",
            	"배꼽",
            	"배달",
            	"배드민턴",
            	"백두산",
            	"백색",
            	"백성",
            	"백인",
            	"백제",
            	"백화점",
            	"버릇",
            	"버섯",
            	"버튼",
            	"번개",
            	"번역",
            	"번지",
            	"번호",
            	"벌금",
            	"벌레",
            	"벌써",
            	"범위",
            	"범인",
            	"범죄",
            	"법률",
            	"법원",
            	"법적",
            	"법칙",
            	"베이징",
            	"벨트",
            	"변경",
            	"변동",
            	"변명",
            	"변신",
            	"변호사",
            	"변화",
            	"별도",
            	"별명",
            	"별일",
            	"병실",
            	"병아리",
            	"병원",
            	"보관",
            	"보너스",
            	"보라색",
            	"보람",
            	"보름",
            	"보상",
            	"보안",
            	"보자기",
            	"보장",
            	"보전",
            	"보존",
            	"보통",
            	"보편적",
            	"보험",
            	"복도",
            	"복사",
            	"복숭아",
            	"복습",
            	"볶음",
            	"본격적",
            	"본래",
            	"본부",
            	"본사",
            	"본성",
            	"본인",
            	"본질",
            	"볼펜",
            	"봉사",
            	"봉지",
            	"봉투",
            	"부근",
            	"부끄러움",
            	"부담",
            	"부동산",
            	"부문",
            	"부분",
            	"부산",
            	"부상",
            	"부엌",
            	"부인",
            	"부작용",
            	"부장",
            	"부정",
            	"부족",
            	"부지런히",
            	"부친",
            	"부탁",
            	"부품",
            	"부회장",
            	"북부",
            	"북한",
            	"분노",
            	"분량",
            	"분리",
            	"분명",
            	"분석",
            	"분야",
            	"분위기",
            	"분필",
            	"분홍색",
            	"불고기",
            	"불과",
            	"불교",
            	"불꽃",
            	"불만",
            	"불법",
            	"불빛",
            	"불안",
            	"불이익",
            	"불행",
            	"브랜드",
            	"비극",
            	"비난",
            	"비닐",
            	"비둘기",
            	"비디오",
            	"비로소",
            	"비만",
            	"비명",
            	"비밀",
            	"비바람",
            	"비빔밥",
            	"비상",
            	"비용",
            	"비율",
            	"비중",
            	"비타민",
            	"비판",
            	"빌딩",
            	"빗물",
            	"빗방울",
            	"빗줄기",
            	"빛깔",
            	"빨간색",
            	"빨래",
            	"빨리",
            	"사건",
            	"사계절",
            	"사나이",
            	"사냥",
            	"사람",
            	"사랑",
            	"사립",
            	"사모님",
            	"사물",
            	"사방",
            	"사상",
            	"사생활",
            	"사설",
            	"사슴",
            	"사실",
            	"사업",
            	"사용",
            	"사월",
            	"사장",
            	"사전",
            	"사진",
            	"사촌",
            	"사춘기",
            	"사탕",
            	"사투리",
            	"사흘",
            	"산길",
            	"산부인과",
            	"산업",
            	"산책",
            	"살림",
            	"살인",
            	"살짝",
            	"삼계탕",
            	"삼국",
            	"삼십",
            	"삼월",
            	"삼촌",
            	"상관",
            	"상금",
            	"상대",
            	"상류",
            	"상반기",
            	"상상",
            	"상식",
            	"상업",
            	"상인",
            	"상자",
            	"상점",
            	"상처",
            	"상추",
            	"상태",
            	"상표",
            	"상품",
            	"상황",
            	"새벽",
            	"색깔",
            	"색연필",
            	"생각",
            	"생명",
            	"생물",
            	"생방송",
            	"생산",
            	"생선",
            	"생신",
            	"생일",
            	"생활",
            	"서랍",
            	"서른",
            	"서명",
            	"서민",
            	"서비스",
            	"서양",
            	"서울",
            	"서적",
            	"서점",
            	"서쪽",
            	"서클",
            	"석사",
            	"석유",
            	"선거",
            	"선물",
            	"선배",
            	"선생",
            	"선수",
            	"선원",
            	"선장",
            	"선전",
            	"선택",
            	"선풍기",
            	"설거지",
            	"설날",
            	"설렁탕",
            	"설명",
            	"설문",
            	"설사",
            	"설악산",
            	"설치",
            	"설탕",
            	"섭씨",
            	"성공",
            	"성당",
            	"성명",
            	"성별",
            	"성인",
            	"성장",
            	"성적",
            	"성질",
            	"성함",
            	"세금",
            	"세미나",
            	"세상",
            	"세월",
            	"세종대왕",
            	"세탁",
            	"센터",
            	"센티미터",
            	"셋째",
            	"소규모",
            	"소극적",
            	"소금",
            	"소나기",
            	"소년",
            	"소득",
            	"소망",
            	"소문",
            	"소설",
            	"소속",
            	"소아과",
            	"소용",
            	"소원",
            	"소음",
            	"소중히",
            	"소지품",
            	"소질",
            	"소풍",
            	"소형",
            	"속담",
            	"속도",
            	"속옷",
            	"손가락",
            	"손길",
            	"손녀",
            	"손님",
            	"손등",
            	"손목",
            	"손뼉",
            	"손실",
            	"손질",
            	"손톱",
            	"손해",
            	"솔직히",
            	"솜씨",
            	"송아지",
            	"송이",
            	"송편",
            	"쇠고기",
            	"쇼핑",
            	"수건",
            	"수년",
            	"수단",
            	"수돗물",
            	"수동적",
            	"수면",
            	"수명",
            	"수박",
            	"수상",
            	"수석",
            	"수술",
            	"수시로",
            	"수업",
            	"수염",
            	"수영",
            	"수입",
            	"수준",
            	"수집",
            	"수출",
            	"수컷",
            	"수필",
            	"수학",
            	"수험생",
            	"수화기",
            	"숙녀",
            	"숙소",
            	"숙제",
            	"순간",
            	"순서",
            	"순수",
            	"순식간",
            	"순위",
            	"숟가락",
            	"술병",
            	"술집",
            	"숫자",
            	"스님",
            	"스물",
            	"스스로",
            	"스승",
            	"스웨터",
            	"스위치",
            	"스케이트",
            	"스튜디오",
            	"스트레스",
            	"스포츠",
            	"슬쩍",
            	"슬픔",
            	"습관",
            	"습기",
            	"승객",
            	"승리",
            	"승부",
            	"승용차",
            	"승진",
            	"시각",
            	"시간",
            	"시골",
            	"시금치",
            	"시나리오",
            	"시댁",
            	"시리즈",
            	"시멘트",
            	"시민",
            	"시부모",
            	"시선",
            	"시설",
            	"시스템",
            	"시아버지",
            	"시어머니",
            	"시월",
            	"시인",
            	"시일",
            	"시작",
            	"시장",
            	"시절",
            	"시점",
            	"시중",
            	"시즌",
            	"시집",
            	"시청",
            	"시합",
            	"시험",
            	"식구",
            	"식기",
            	"식당",
            	"식량",
            	"식료품",
            	"식물",
            	"식빵",
            	"식사",
            	"식생활",
            	"식초",
            	"식탁",
            	"식품",
            	"신고",
            	"신규",
            	"신념",
            	"신문",
            	"신발",
            	"신비",
            	"신사",
            	"신세",
            	"신용",
            	"신제품",
            	"신청",
            	"신체",
            	"신화",
            	"실감",
            	"실내",
            	"실력",
            	"실례",
            	"실망",
            	"실수",
            	"실습",
            	"실시",
            	"실장",
            	"실정",
            	"실질적",
            	"실천",
            	"실체",
            	"실컷",
            	"실태",
            	"실패",
            	"실험",
            	"실현",
            	"심리",
            	"심부름",
            	"심사",
            	"심장",
            	"심정",
            	"심판",
            	"쌍둥이",
            	"씨름",
            	"씨앗",
            	"아가씨",
            	"아나운서",
            	"아드님",
            	"아들",
            	"아쉬움",
            	"아스팔트",
            	"아시아",
            	"아울러",
            	"아저씨",
            	"아줌마",
            	"아직",
            	"아침",
            	"아파트",
            	"아프리카",
            	"아픔",
            	"아홉",
            	"아흔",
            	"악기",
            	"악몽",
            	"악수",
            	"안개",
            	"안경",
            	"안과",
            	"안내",
            	"안녕",
            	"안동",
            	"안방",
            	"안부",
            	"안주",
            	"알루미늄",
            	"알코올",
            	"암시",
            	"암컷",
            	"압력",
            	"앞날",
            	"앞문",
            	"애인",
            	"애정",
            	"액수",
            	"앨범",
            	"야간",
            	"야단",
            	"야옹",
            	"약간",
            	"약국",
            	"약속",
            	"약수",
            	"약점",
            	"약품",
            	"약혼녀",
            	"양념",
            	"양력",
            	"양말",
            	"양배추",
            	"양주",
            	"양파",
            	"어둠",
            	"어려움",
            	"어른",
            	"어젯밤",
            	"어쨌든",
            	"어쩌다가",
            	"어쩐지",
            	"언니",
            	"언덕",
            	"언론",
            	"언어",
            	"얼굴",
            	"얼른",
            	"얼음",
            	"얼핏",
            	"엄마",
            	"업무",
            	"업종",
            	"업체",
            	"엉덩이",
            	"엉망",
            	"엉터리",
            	"엊그제",
            	"에너지",
            	"에어컨",
            	"엔진",
            	"여건",
            	"여고생",
            	"여관",
            	"여군",
            	"여권",
            	"여대생",
            	"여덟",
            	"여동생",
            	"여든",
            	"여론",
            	"여름",
            	"여섯",
            	"여성",
            	"여왕",
            	"여인",
            	"여전히",
            	"여직원",
            	"여학생",
            	"여행",
            	"역사",
            	"역시",
            	"역할",
            	"연결",
            	"연구",
            	"연극",
            	"연기",
            	"연락",
            	"연설",
            	"연세",
            	"연속",
            	"연습",
            	"연애",
            	"연예인",
            	"연인",
            	"연장",
            	"연주",
            	"연출",
            	"연필",
            	"연합",
            	"연휴",
            	"열기",
            	"열매",
            	"열쇠",
            	"열심히",
            	"열정",
            	"열차",
            	"열흘",
            	"염려",
            	"엽서",
            	"영국",
            	"영남",
            	"영상",
            	"영양",
            	"영역",
            	"영웅",
            	"영원히",
            	"영하",
            	"영향",
            	"영혼",
            	"영화",
            	"옆구리",
            	"옆방",
            	"옆집",
            	"예감",
            	"예금",
            	"예방",
            	"예산",
            	"예상",
            	"예선",
            	"예술",
            	"예습",
            	"예식장",
            	"예약",
            	"예전",
            	"예절",
            	"예정",
            	"예컨대",
            	"옛날",
            	"오늘",
            	"오락",
            	"오랫동안",
            	"오렌지",
            	"오로지",
            	"오른발",
            	"오븐",
            	"오십",
            	"오염",
            	"오월",
            	"오전",
            	"오직",
            	"오징어",
            	"오페라",
            	"오피스텔",
            	"오히려",
            	"옥상",
            	"옥수수",
            	"온갖",
            	"온라인",
            	"온몸",
            	"온종일",
            	"온통",
            	"올가을",
            	"올림픽",
            	"올해",
            	"옷차림",
            	"와이셔츠",
            	"와인",
            	"완성",
            	"완전",
            	"왕비",
            	"왕자",
            	"왜냐하면",
            	"왠지",
            	"외갓집",
            	"외국",
            	"외로움",
            	"외삼촌",
            	"외출",
            	"외침",
            	"외할머니",
            	"왼발",
            	"왼손",
            	"왼쪽",
            	"요금",
            	"요일",
            	"요즘",
            	"요청",
            	"용기",
            	"용서",
            	"용어",
            	"우산",
            	"우선",
            	"우승",
            	"우연히",
            	"우정",
            	"우체국",
            	"우편",
            	"운동",
            	"운명",
            	"운반",
            	"운전",
            	"운행",
            	"울산",
            	"울음",
            	"움직임",
            	"웃어른",
            	"웃음",
            	"워낙",
            	"원고",
            	"원래",
            	"원서",
            	"원숭이",
            	"원인",
            	"원장",
            	"원피스",
            	"월급",
            	"월드컵",
            	"월세",
            	"월요일",
            	"웨이터",
            	"위반",
            	"위법",
            	"위성",
            	"위원",
            	"위험",
            	"위협",
            	"윗사람",
            	"유난히",
            	"유럽",
            	"유명",
            	"유물",
            	"유산",
            	"유적",
            	"유치원",
            	"유학",
            	"유행",
            	"유형",
            	"육군",
            	"육상",
            	"육십",
            	"육체",
            	"은행",
            	"음력",
            	"음료",
            	"음반",
            	"음성",
            	"음식",
            	"음악",
            	"음주",
            	"의견",
            	"의논",
            	"의문",
            	"의복",
            	"의식",
            	"의심",
            	"의외로",
            	"의욕",
            	"의원",
            	"의학",
            	"이것",
            	"이곳",
            	"이념",
            	"이놈",
            	"이달",
            	"이대로",
            	"이동",
            	"이렇게",
            	"이력서",
            	"이론적",
            	"이름",
            	"이민",
            	"이발소",
            	"이별",
            	"이불",
            	"이빨",
            	"이상",
            	"이성",
            	"이슬",
            	"이야기",
            	"이용",
            	"이웃",
            	"이월",
            	"이윽고",
            	"이익",
            	"이전",
            	"이중",
            	"이튿날",
            	"이틀",
            	"이혼",
            	"인간",
            	"인격",
            	"인공",
            	"인구",
            	"인근",
            	"인기",
            	"인도",
            	"인류",
            	"인물",
            	"인생",
            	"인쇄",
            	"인연",
            	"인원",
            	"인재",
            	"인종",
            	"인천",
            	"인체",
            	"인터넷",
            	"인하",
            	"인형",
            	"일곱",
            	"일기",
            	"일단",
            	"일대",
            	"일등",
            	"일반",
            	"일본",
            	"일부",
            	"일상",
            	"일생",
            	"일손",
            	"일요일",
            	"일월",
            	"일정",
            	"일종",
            	"일주일",
            	"일찍",
            	"일체",
            	"일치",
            	"일행",
            	"일회용",
            	"임금",
            	"임무",
            	"입대",
            	"입력",
            	"입맛",
            	"입사",
            	"입술",
            	"입시",
            	"입원",
            	"입장",
            	"입학",
            	"자가용",
            	"자격",
            	"자극",
            	"자동",
            	"자랑",
            	"자부심",
            	"자식",
            	"자신",
            	"자연",
            	"자원",
            	"자율",
            	"자전거",
            	"자정",
            	"자존심",
            	"자판",
            	"작가",
            	"작년",
            	"작성",
            	"작업",
            	"작용",
            	"작은딸",
            	"작품",
            	"잔디",
            	"잔뜩",
            	"잔치",
            	"잘못",
            	"잠깐",
            	"잠수함",
            	"잠시",
            	"잠옷",
            	"잠자리",
            	"잡지",
            	"장관",
            	"장군",
            	"장기간",
            	"장래",
            	"장례",
            	"장르",
            	"장마",
            	"장면",
            	"장모",
            	"장미",
            	"장비",
            	"장사",
            	"장소",
            	"장식",
            	"장애인",
            	"장인",
            	"장점",
            	"장차",
            	"장학금",
            	"재능",
            	"재빨리",
            	"재산",
            	"재생",
            	"재작년",
            	"재정",
            	"재채기",
            	"재판",
            	"재학",
            	"재활용",
            	"저것",
            	"저고리",
            	"저곳",
            	"저녁",
            	"저런",
            	"저렇게",
            	"저번",
            	"저울",
            	"저절로",
            	"저축",
            	"적극",
            	"적당히",
            	"적성",
            	"적용",
            	"적응",
            	"전개",
            	"전공",
            	"전기",
            	"전달",
            	"전라도",
            	"전망",
            	"전문",
            	"전반",
            	"전부",
            	"전세",
            	"전시",
            	"전용",
            	"전자",
            	"전쟁",
            	"전주",
            	"전철",
            	"전체",
            	"전통",
            	"전혀",
            	"전후",
            	"절대",
            	"절망",
            	"절반",
            	"절약",
            	"절차",
            	"점검",
            	"점수",
            	"점심",
            	"점원",
            	"점점",
            	"점차",
            	"접근",
            	"접시",
            	"접촉",
            	"젓가락",
            	"정거장",
            	"정도",
            	"정류장",
            	"정리",
            	"정말",
            	"정면",
            	"정문",
            	"정반대",
            	"정보",
            	"정부",
            	"정비",
            	"정상",
            	"정성",
            	"정오",
            	"정원",
            	"정장",
            	"정지",
            	"정치",
            	"정확히",
            	"제공",
            	"제과점",
            	"제대로",
            	"제목",
            	"제발",
            	"제법",
            	"제삿날",
            	"제안",
            	"제일",
            	"제작",
            	"제주도",
            	"제출",
            	"제품",
            	"제한",
            	"조각",
            	"조건",
            	"조금",
            	"조깅",
            	"조명",
            	"조미료",
            	"조상",
            	"조선",
            	"조용히",
            	"조절",
            	"조정",
            	"조직",
            	"존댓말",
            	"존재",
            	"졸업",
            	"졸음",
            	"종교",
            	"종로",
            	"종류",
            	"종소리",
            	"종업원",
            	"종종",
            	"종합",
            	"좌석",
            	"죄인",
            	"주관적",
            	"주름",
            	"주말",
            	"주머니",
            	"주먹",
            	"주문",
            	"주민",
            	"주방",
            	"주변",
            	"주식",
            	"주인",
            	"주일",
            	"주장",
            	"주전자",
            	"주택",
            	"준비",
            	"줄거리",
            	"줄기",
            	"줄무늬",
            	"중간",
            	"중계방송",
            	"중국",
            	"중년",
            	"중단",
            	"중독",
            	"중반",
            	"중부",
            	"중세",
            	"중소기업",
            	"중순",
            	"중앙",
            	"중요",
            	"중학교",
            	"즉석",
            	"즉시",
            	"즐거움",
            	"증가",
            	"증거",
            	"증권",
            	"증상",
            	"증세",
            	"지각",
            	"지갑",
            	"지경",
            	"지극히",
            	"지금",
            	"지급",
            	"지능",
            	"지름길",
            	"지리산",
            	"지방",
            	"지붕",
            	"지식",
            	"지역",
            	"지우개",
            	"지원",
            	"지적",
            	"지점",
            	"지진",
            	"지출",
            	"직선",
            	"직업",
            	"직원",
            	"직장",
            	"진급",
            	"진동",
            	"진로",
            	"진료",
            	"진리",
            	"진짜",
            	"진찰",
            	"진출",
            	"진통",
            	"진행",
            	"질문",
            	"질병",
            	"질서",
            	"짐작",
            	"집단",
            	"집안",
            	"집중",
            	"짜증",
            	"찌꺼기",
            	"차남",
            	"차라리",
            	"차량",
            	"차림",
            	"차별",
            	"차선",
            	"차츰",
            	"착각",
            	"찬물",
            	"찬성",
            	"참가",
            	"참기름",
            	"참새",
            	"참석",
            	"참여",
            	"참외",
            	"참조",
            	"찻잔",
            	"창가",
            	"창고",
            	"창구",
            	"창문",
            	"창밖",
            	"창작",
            	"창조",
            	"채널",
            	"채점",
            	"책가방",
            	"책방",
            	"책상",
            	"책임",
            	"챔피언",
            	"처벌",
            	"처음",
            	"천국",
            	"천둥",
            	"천장",
            	"천재",
            	"천천히",
            	"철도",
            	"철저히",
            	"철학",
            	"첫날",
            	"첫째",
            	"청년",
            	"청바지",
            	"청소",
            	"청춘",
            	"체계",
            	"체력",
            	"체온",
            	"체육",
            	"체중",
            	"체험",
            	"초등학생",
            	"초반",
            	"초밥",
            	"초상화",
            	"초순",
            	"초여름",
            	"초원",
            	"초저녁",
            	"초점",
            	"초청",
            	"초콜릿",
            	"촛불",
            	"총각",
            	"총리",
            	"총장",
            	"촬영",
            	"최근",
            	"최상",
            	"최선",
            	"최신",
            	"최악",
            	"최종",
            	"추석",
            	"추억",
            	"추진",
            	"추천",
            	"추측",
            	"축구",
            	"축소",
            	"축제",
            	"축하",
            	"출근",
            	"출발",
            	"출산",
            	"출신",
            	"출연",
            	"출입",
            	"출장",
            	"출판",
            	"충격",
            	"충고",
            	"충돌",
            	"충분히",
            	"충청도",
            	"취업",
            	"취직",
            	"취향",
            	"치약",
            	"친구",
            	"친척",
            	"칠십",
            	"칠월",
            	"칠판",
            	"침대",
            	"침묵",
            	"침실",
            	"칫솔",
            	"칭찬",
            	"카메라",
            	"카운터",
            	"칼국수",
            	"캐릭터",
            	"캠퍼스",
            	"캠페인",
            	"커튼",
            	"컨디션",
            	"컬러",
            	"컴퓨터",
            	"코끼리",
            	"코미디",
            	"콘서트",
            	"콜라",
            	"콤플렉스",
            	"콩나물",
            	"쾌감",
            	"쿠데타",
            	"크림",
            	"큰길",
            	"큰딸",
            	"큰소리",
            	"큰아들",
            	"큰어머니",
            	"큰일",
            	"큰절",
            	"클래식",
            	"클럽",
            	"킬로",
            	"타입",
            	"타자기",
            	"탁구",
            	"탁자",
            	"탄생",
            	"태권도",
            	"태양",
            	"태풍",
            	"택시",
            	"탤런트",
            	"터널",
            	"터미널",
            	"테니스",
            	"테스트",
            	"테이블",
            	"텔레비전",
            	"토론",
            	"토마토",
            	"토요일",
            	"통계",
            	"통과",
            	"통로",
            	"통신",
            	"통역",
            	"통일",
            	"통장",
            	"통제",
            	"통증",
            	"통합",
            	"통화",
            	"퇴근",
            	"퇴원",
            	"퇴직금",
            	"튀김",
            	"트럭",
            	"특급",
            	"특별",
            	"특성",
            	"특수",
            	"특징",
            	"특히",
            	"튼튼히",
            	"티셔츠",
            	"파란색",
            	"파일",
            	"파출소",
            	"판결",
            	"판단",
            	"판매",
            	"판사",
            	"팔십",
            	"팔월",
            	"팝송",
            	"패션",
            	"팩스",
            	"팩시밀리",
            	"팬티",
            	"퍼센트",
            	"페인트",
            	"편견",
            	"편의",
            	"편지",
            	"편히",
            	"평가",
            	"평균",
            	"평생",
            	"평소",
            	"평양",
            	"평일",
            	"평화",
            	"포스터",
            	"포인트",
            	"포장",
            	"포함",
            	"표면",
            	"표정",
            	"표준",
            	"표현",
            	"품목",
            	"품질",
            	"풍경",
            	"풍속",
            	"풍습",
            	"프랑스",
            	"프린터",
            	"플라스틱",
            	"피곤",
            	"피망",
            	"피아노",
            	"필름",
            	"필수",
            	"필요",
            	"필자",
            	"필통",
            	"핑계",
            	"하느님",
            	"하늘",
            	"하드웨어",
            	"하룻밤",
            	"하반기",
            	"하숙집",
            	"하순",
            	"하여튼",
            	"하지만",
            	"하천",
            	"하품",
            	"하필",
            	"학과",
            	"학교",
            	"학급",
            	"학기",
            	"학년",
            	"학력",
            	"학번",
            	"학부모",
            	"학비",
            	"학생",
            	"학술",
            	"학습",
            	"학용품",
            	"학원",
            	"학위",
            	"학자",
            	"학점",
            	"한계",
            	"한글",
            	"한꺼번에",
            	"한낮",
            	"한눈",
            	"한동안",
            	"한때",
            	"한라산",
            	"한마디",
            	"한문",
            	"한번",
            	"한복",
            	"한식",
            	"한여름",
            	"한쪽",
            	"할머니",
            	"할아버지",
            	"할인",
            	"함께",
            	"함부로",
            	"합격",
            	"합리적",
            	"항공",
            	"항구",
            	"항상",
            	"항의",
            	"해결",
            	"해군",
            	"해답",
            	"해당",
            	"해물",
            	"해석",
            	"해설",
            	"해수욕장",
            	"해안",
            	"핵심",
            	"핸드백",
            	"햄버거",
            	"햇볕",
            	"햇살",
            	"행동",
            	"행복",
            	"행사",
            	"행운",
            	"행위",
            	"향기",
            	"향상",
            	"향수",
            	"허락",
            	"허용",
            	"헬기",
            	"현관",
            	"현금",
            	"현대",
            	"현상",
            	"현실",
            	"현장",
            	"현재",
            	"현지",
            	"혈액",
            	"협력",
            	"형부",
            	"형사",
            	"형수",
            	"형식",
            	"형제",
            	"형태",
            	"형편",
            	"혜택",
            	"호기심",
            	"호남",
            	"호랑이",
            	"호박",
            	"호텔",
            	"호흡",
            	"혹시",
            	"홀로",
            	"홈페이지",
            	"홍보",
            	"홍수",
            	"홍차",
            	"화면",
            	"화분",
            	"화살",
            	"화요일",
            	"화장",
            	"화학",
            	"확보",
            	"확인",
            	"확장",
            	"확정",
            	"환갑",
            	"환경",
            	"환영",
            	"환율",
            	"환자",
            	"활기",
            	"활동",
            	"활발히",
            	"활용",
            	"활짝",
            	"회견",
            	"회관",
            	"회복",
            	"회색",
            	"회원",
            	"회장",
            	"회전",
            	"횟수",
            	"횡단보도",
            	"효율적",
            	"후반",
            	"후춧가루",
            	"훈련",
            	"훨씬",
            	"휴식",
            	"휴일",
            	"흉내",
            	"흐름",
            	"흑백",
            	"흑인",
            	"흔적",
            	"흔히",
            	"흥미",
            	"흥분",
            	"희곡",
            	"희망",
            	"희생",
            	"흰색",
            	"힘껏"
            ];

            var require$$4 = [
            	"abaisser",
            	"abandon",
            	"abdiquer",
            	"abeille",
            	"abolir",
            	"aborder",
            	"aboutir",
            	"aboyer",
            	"abrasif",
            	"abreuver",
            	"abriter",
            	"abroger",
            	"abrupt",
            	"absence",
            	"absolu",
            	"absurde",
            	"abusif",
            	"abyssal",
            	"académie",
            	"acajou",
            	"acarien",
            	"accabler",
            	"accepter",
            	"acclamer",
            	"accolade",
            	"accroche",
            	"accuser",
            	"acerbe",
            	"achat",
            	"acheter",
            	"aciduler",
            	"acier",
            	"acompte",
            	"acquérir",
            	"acronyme",
            	"acteur",
            	"actif",
            	"actuel",
            	"adepte",
            	"adéquat",
            	"adhésif",
            	"adjectif",
            	"adjuger",
            	"admettre",
            	"admirer",
            	"adopter",
            	"adorer",
            	"adoucir",
            	"adresse",
            	"adroit",
            	"adulte",
            	"adverbe",
            	"aérer",
            	"aéronef",
            	"affaire",
            	"affecter",
            	"affiche",
            	"affreux",
            	"affubler",
            	"agacer",
            	"agencer",
            	"agile",
            	"agiter",
            	"agrafer",
            	"agréable",
            	"agrume",
            	"aider",
            	"aiguille",
            	"ailier",
            	"aimable",
            	"aisance",
            	"ajouter",
            	"ajuster",
            	"alarmer",
            	"alchimie",
            	"alerte",
            	"algèbre",
            	"algue",
            	"aliéner",
            	"aliment",
            	"alléger",
            	"alliage",
            	"allouer",
            	"allumer",
            	"alourdir",
            	"alpaga",
            	"altesse",
            	"alvéole",
            	"amateur",
            	"ambigu",
            	"ambre",
            	"aménager",
            	"amertume",
            	"amidon",
            	"amiral",
            	"amorcer",
            	"amour",
            	"amovible",
            	"amphibie",
            	"ampleur",
            	"amusant",
            	"analyse",
            	"anaphore",
            	"anarchie",
            	"anatomie",
            	"ancien",
            	"anéantir",
            	"angle",
            	"angoisse",
            	"anguleux",
            	"animal",
            	"annexer",
            	"annonce",
            	"annuel",
            	"anodin",
            	"anomalie",
            	"anonyme",
            	"anormal",
            	"antenne",
            	"antidote",
            	"anxieux",
            	"apaiser",
            	"apéritif",
            	"aplanir",
            	"apologie",
            	"appareil",
            	"appeler",
            	"apporter",
            	"appuyer",
            	"aquarium",
            	"aqueduc",
            	"arbitre",
            	"arbuste",
            	"ardeur",
            	"ardoise",
            	"argent",
            	"arlequin",
            	"armature",
            	"armement",
            	"armoire",
            	"armure",
            	"arpenter",
            	"arracher",
            	"arriver",
            	"arroser",
            	"arsenic",
            	"artériel",
            	"article",
            	"aspect",
            	"asphalte",
            	"aspirer",
            	"assaut",
            	"asservir",
            	"assiette",
            	"associer",
            	"assurer",
            	"asticot",
            	"astre",
            	"astuce",
            	"atelier",
            	"atome",
            	"atrium",
            	"atroce",
            	"attaque",
            	"attentif",
            	"attirer",
            	"attraper",
            	"aubaine",
            	"auberge",
            	"audace",
            	"audible",
            	"augurer",
            	"aurore",
            	"automne",
            	"autruche",
            	"avaler",
            	"avancer",
            	"avarice",
            	"avenir",
            	"averse",
            	"aveugle",
            	"aviateur",
            	"avide",
            	"avion",
            	"aviser",
            	"avoine",
            	"avouer",
            	"avril",
            	"axial",
            	"axiome",
            	"badge",
            	"bafouer",
            	"bagage",
            	"baguette",
            	"baignade",
            	"balancer",
            	"balcon",
            	"baleine",
            	"balisage",
            	"bambin",
            	"bancaire",
            	"bandage",
            	"banlieue",
            	"bannière",
            	"banquier",
            	"barbier",
            	"baril",
            	"baron",
            	"barque",
            	"barrage",
            	"bassin",
            	"bastion",
            	"bataille",
            	"bateau",
            	"batterie",
            	"baudrier",
            	"bavarder",
            	"belette",
            	"bélier",
            	"belote",
            	"bénéfice",
            	"berceau",
            	"berger",
            	"berline",
            	"bermuda",
            	"besace",
            	"besogne",
            	"bétail",
            	"beurre",
            	"biberon",
            	"bicycle",
            	"bidule",
            	"bijou",
            	"bilan",
            	"bilingue",
            	"billard",
            	"binaire",
            	"biologie",
            	"biopsie",
            	"biotype",
            	"biscuit",
            	"bison",
            	"bistouri",
            	"bitume",
            	"bizarre",
            	"blafard",
            	"blague",
            	"blanchir",
            	"blessant",
            	"blinder",
            	"blond",
            	"bloquer",
            	"blouson",
            	"bobard",
            	"bobine",
            	"boire",
            	"boiser",
            	"bolide",
            	"bonbon",
            	"bondir",
            	"bonheur",
            	"bonifier",
            	"bonus",
            	"bordure",
            	"borne",
            	"botte",
            	"boucle",
            	"boueux",
            	"bougie",
            	"boulon",
            	"bouquin",
            	"bourse",
            	"boussole",
            	"boutique",
            	"boxeur",
            	"branche",
            	"brasier",
            	"brave",
            	"brebis",
            	"brèche",
            	"breuvage",
            	"bricoler",
            	"brigade",
            	"brillant",
            	"brioche",
            	"brique",
            	"brochure",
            	"broder",
            	"bronzer",
            	"brousse",
            	"broyeur",
            	"brume",
            	"brusque",
            	"brutal",
            	"bruyant",
            	"buffle",
            	"buisson",
            	"bulletin",
            	"bureau",
            	"burin",
            	"bustier",
            	"butiner",
            	"butoir",
            	"buvable",
            	"buvette",
            	"cabanon",
            	"cabine",
            	"cachette",
            	"cadeau",
            	"cadre",
            	"caféine",
            	"caillou",
            	"caisson",
            	"calculer",
            	"calepin",
            	"calibre",
            	"calmer",
            	"calomnie",
            	"calvaire",
            	"camarade",
            	"caméra",
            	"camion",
            	"campagne",
            	"canal",
            	"caneton",
            	"canon",
            	"cantine",
            	"canular",
            	"capable",
            	"caporal",
            	"caprice",
            	"capsule",
            	"capter",
            	"capuche",
            	"carabine",
            	"carbone",
            	"caresser",
            	"caribou",
            	"carnage",
            	"carotte",
            	"carreau",
            	"carton",
            	"cascade",
            	"casier",
            	"casque",
            	"cassure",
            	"causer",
            	"caution",
            	"cavalier",
            	"caverne",
            	"caviar",
            	"cédille",
            	"ceinture",
            	"céleste",
            	"cellule",
            	"cendrier",
            	"censurer",
            	"central",
            	"cercle",
            	"cérébral",
            	"cerise",
            	"cerner",
            	"cerveau",
            	"cesser",
            	"chagrin",
            	"chaise",
            	"chaleur",
            	"chambre",
            	"chance",
            	"chapitre",
            	"charbon",
            	"chasseur",
            	"chaton",
            	"chausson",
            	"chavirer",
            	"chemise",
            	"chenille",
            	"chéquier",
            	"chercher",
            	"cheval",
            	"chien",
            	"chiffre",
            	"chignon",
            	"chimère",
            	"chiot",
            	"chlorure",
            	"chocolat",
            	"choisir",
            	"chose",
            	"chouette",
            	"chrome",
            	"chute",
            	"cigare",
            	"cigogne",
            	"cimenter",
            	"cinéma",
            	"cintrer",
            	"circuler",
            	"cirer",
            	"cirque",
            	"citerne",
            	"citoyen",
            	"citron",
            	"civil",
            	"clairon",
            	"clameur",
            	"claquer",
            	"classe",
            	"clavier",
            	"client",
            	"cligner",
            	"climat",
            	"clivage",
            	"cloche",
            	"clonage",
            	"cloporte",
            	"cobalt",
            	"cobra",
            	"cocasse",
            	"cocotier",
            	"coder",
            	"codifier",
            	"coffre",
            	"cogner",
            	"cohésion",
            	"coiffer",
            	"coincer",
            	"colère",
            	"colibri",
            	"colline",
            	"colmater",
            	"colonel",
            	"combat",
            	"comédie",
            	"commande",
            	"compact",
            	"concert",
            	"conduire",
            	"confier",
            	"congeler",
            	"connoter",
            	"consonne",
            	"contact",
            	"convexe",
            	"copain",
            	"copie",
            	"corail",
            	"corbeau",
            	"cordage",
            	"corniche",
            	"corpus",
            	"correct",
            	"cortège",
            	"cosmique",
            	"costume",
            	"coton",
            	"coude",
            	"coupure",
            	"courage",
            	"couteau",
            	"couvrir",
            	"coyote",
            	"crabe",
            	"crainte",
            	"cravate",
            	"crayon",
            	"créature",
            	"créditer",
            	"crémeux",
            	"creuser",
            	"crevette",
            	"cribler",
            	"crier",
            	"cristal",
            	"critère",
            	"croire",
            	"croquer",
            	"crotale",
            	"crucial",
            	"cruel",
            	"crypter",
            	"cubique",
            	"cueillir",
            	"cuillère",
            	"cuisine",
            	"cuivre",
            	"culminer",
            	"cultiver",
            	"cumuler",
            	"cupide",
            	"curatif",
            	"curseur",
            	"cyanure",
            	"cycle",
            	"cylindre",
            	"cynique",
            	"daigner",
            	"damier",
            	"danger",
            	"danseur",
            	"dauphin",
            	"débattre",
            	"débiter",
            	"déborder",
            	"débrider",
            	"débutant",
            	"décaler",
            	"décembre",
            	"déchirer",
            	"décider",
            	"déclarer",
            	"décorer",
            	"décrire",
            	"décupler",
            	"dédale",
            	"déductif",
            	"déesse",
            	"défensif",
            	"défiler",
            	"défrayer",
            	"dégager",
            	"dégivrer",
            	"déglutir",
            	"dégrafer",
            	"déjeuner",
            	"délice",
            	"déloger",
            	"demander",
            	"demeurer",
            	"démolir",
            	"dénicher",
            	"dénouer",
            	"dentelle",
            	"dénuder",
            	"départ",
            	"dépenser",
            	"déphaser",
            	"déplacer",
            	"déposer",
            	"déranger",
            	"dérober",
            	"désastre",
            	"descente",
            	"désert",
            	"désigner",
            	"désobéir",
            	"dessiner",
            	"destrier",
            	"détacher",
            	"détester",
            	"détourer",
            	"détresse",
            	"devancer",
            	"devenir",
            	"deviner",
            	"devoir",
            	"diable",
            	"dialogue",
            	"diamant",
            	"dicter",
            	"différer",
            	"digérer",
            	"digital",
            	"digne",
            	"diluer",
            	"dimanche",
            	"diminuer",
            	"dioxyde",
            	"directif",
            	"diriger",
            	"discuter",
            	"disposer",
            	"dissiper",
            	"distance",
            	"divertir",
            	"diviser",
            	"docile",
            	"docteur",
            	"dogme",
            	"doigt",
            	"domaine",
            	"domicile",
            	"dompter",
            	"donateur",
            	"donjon",
            	"donner",
            	"dopamine",
            	"dortoir",
            	"dorure",
            	"dosage",
            	"doseur",
            	"dossier",
            	"dotation",
            	"douanier",
            	"double",
            	"douceur",
            	"douter",
            	"doyen",
            	"dragon",
            	"draper",
            	"dresser",
            	"dribbler",
            	"droiture",
            	"duperie",
            	"duplexe",
            	"durable",
            	"durcir",
            	"dynastie",
            	"éblouir",
            	"écarter",
            	"écharpe",
            	"échelle",
            	"éclairer",
            	"éclipse",
            	"éclore",
            	"écluse",
            	"école",
            	"économie",
            	"écorce",
            	"écouter",
            	"écraser",
            	"écrémer",
            	"écrivain",
            	"écrou",
            	"écume",
            	"écureuil",
            	"édifier",
            	"éduquer",
            	"effacer",
            	"effectif",
            	"effigie",
            	"effort",
            	"effrayer",
            	"effusion",
            	"égaliser",
            	"égarer",
            	"éjecter",
            	"élaborer",
            	"élargir",
            	"électron",
            	"élégant",
            	"éléphant",
            	"élève",
            	"éligible",
            	"élitisme",
            	"éloge",
            	"élucider",
            	"éluder",
            	"emballer",
            	"embellir",
            	"embryon",
            	"émeraude",
            	"émission",
            	"emmener",
            	"émotion",
            	"émouvoir",
            	"empereur",
            	"employer",
            	"emporter",
            	"emprise",
            	"émulsion",
            	"encadrer",
            	"enchère",
            	"enclave",
            	"encoche",
            	"endiguer",
            	"endosser",
            	"endroit",
            	"enduire",
            	"énergie",
            	"enfance",
            	"enfermer",
            	"enfouir",
            	"engager",
            	"engin",
            	"englober",
            	"énigme",
            	"enjamber",
            	"enjeu",
            	"enlever",
            	"ennemi",
            	"ennuyeux",
            	"enrichir",
            	"enrobage",
            	"enseigne",
            	"entasser",
            	"entendre",
            	"entier",
            	"entourer",
            	"entraver",
            	"énumérer",
            	"envahir",
            	"enviable",
            	"envoyer",
            	"enzyme",
            	"éolien",
            	"épaissir",
            	"épargne",
            	"épatant",
            	"épaule",
            	"épicerie",
            	"épidémie",
            	"épier",
            	"épilogue",
            	"épine",
            	"épisode",
            	"épitaphe",
            	"époque",
            	"épreuve",
            	"éprouver",
            	"épuisant",
            	"équerre",
            	"équipe",
            	"ériger",
            	"érosion",
            	"erreur",
            	"éruption",
            	"escalier",
            	"espadon",
            	"espèce",
            	"espiègle",
            	"espoir",
            	"esprit",
            	"esquiver",
            	"essayer",
            	"essence",
            	"essieu",
            	"essorer",
            	"estime",
            	"estomac",
            	"estrade",
            	"étagère",
            	"étaler",
            	"étanche",
            	"étatique",
            	"éteindre",
            	"étendoir",
            	"éternel",
            	"éthanol",
            	"éthique",
            	"ethnie",
            	"étirer",
            	"étoffer",
            	"étoile",
            	"étonnant",
            	"étourdir",
            	"étrange",
            	"étroit",
            	"étude",
            	"euphorie",
            	"évaluer",
            	"évasion",
            	"éventail",
            	"évidence",
            	"éviter",
            	"évolutif",
            	"évoquer",
            	"exact",
            	"exagérer",
            	"exaucer",
            	"exceller",
            	"excitant",
            	"exclusif",
            	"excuse",
            	"exécuter",
            	"exemple",
            	"exercer",
            	"exhaler",
            	"exhorter",
            	"exigence",
            	"exiler",
            	"exister",
            	"exotique",
            	"expédier",
            	"explorer",
            	"exposer",
            	"exprimer",
            	"exquis",
            	"extensif",
            	"extraire",
            	"exulter",
            	"fable",
            	"fabuleux",
            	"facette",
            	"facile",
            	"facture",
            	"faiblir",
            	"falaise",
            	"fameux",
            	"famille",
            	"farceur",
            	"farfelu",
            	"farine",
            	"farouche",
            	"fasciner",
            	"fatal",
            	"fatigue",
            	"faucon",
            	"fautif",
            	"faveur",
            	"favori",
            	"fébrile",
            	"féconder",
            	"fédérer",
            	"félin",
            	"femme",
            	"fémur",
            	"fendoir",
            	"féodal",
            	"fermer",
            	"féroce",
            	"ferveur",
            	"festival",
            	"feuille",
            	"feutre",
            	"février",
            	"fiasco",
            	"ficeler",
            	"fictif",
            	"fidèle",
            	"figure",
            	"filature",
            	"filetage",
            	"filière",
            	"filleul",
            	"filmer",
            	"filou",
            	"filtrer",
            	"financer",
            	"finir",
            	"fiole",
            	"firme",
            	"fissure",
            	"fixer",
            	"flairer",
            	"flamme",
            	"flasque",
            	"flatteur",
            	"fléau",
            	"flèche",
            	"fleur",
            	"flexion",
            	"flocon",
            	"flore",
            	"fluctuer",
            	"fluide",
            	"fluvial",
            	"folie",
            	"fonderie",
            	"fongible",
            	"fontaine",
            	"forcer",
            	"forgeron",
            	"formuler",
            	"fortune",
            	"fossile",
            	"foudre",
            	"fougère",
            	"fouiller",
            	"foulure",
            	"fourmi",
            	"fragile",
            	"fraise",
            	"franchir",
            	"frapper",
            	"frayeur",
            	"frégate",
            	"freiner",
            	"frelon",
            	"frémir",
            	"frénésie",
            	"frère",
            	"friable",
            	"friction",
            	"frisson",
            	"frivole",
            	"froid",
            	"fromage",
            	"frontal",
            	"frotter",
            	"fruit",
            	"fugitif",
            	"fuite",
            	"fureur",
            	"furieux",
            	"furtif",
            	"fusion",
            	"futur",
            	"gagner",
            	"galaxie",
            	"galerie",
            	"gambader",
            	"garantir",
            	"gardien",
            	"garnir",
            	"garrigue",
            	"gazelle",
            	"gazon",
            	"géant",
            	"gélatine",
            	"gélule",
            	"gendarme",
            	"général",
            	"génie",
            	"genou",
            	"gentil",
            	"géologie",
            	"géomètre",
            	"géranium",
            	"germe",
            	"gestuel",
            	"geyser",
            	"gibier",
            	"gicler",
            	"girafe",
            	"givre",
            	"glace",
            	"glaive",
            	"glisser",
            	"globe",
            	"gloire",
            	"glorieux",
            	"golfeur",
            	"gomme",
            	"gonfler",
            	"gorge",
            	"gorille",
            	"goudron",
            	"gouffre",
            	"goulot",
            	"goupille",
            	"gourmand",
            	"goutte",
            	"graduel",
            	"graffiti",
            	"graine",
            	"grand",
            	"grappin",
            	"gratuit",
            	"gravir",
            	"grenat",
            	"griffure",
            	"griller",
            	"grimper",
            	"grogner",
            	"gronder",
            	"grotte",
            	"groupe",
            	"gruger",
            	"grutier",
            	"gruyère",
            	"guépard",
            	"guerrier",
            	"guide",
            	"guimauve",
            	"guitare",
            	"gustatif",
            	"gymnaste",
            	"gyrostat",
            	"habitude",
            	"hachoir",
            	"halte",
            	"hameau",
            	"hangar",
            	"hanneton",
            	"haricot",
            	"harmonie",
            	"harpon",
            	"hasard",
            	"hélium",
            	"hématome",
            	"herbe",
            	"hérisson",
            	"hermine",
            	"héron",
            	"hésiter",
            	"heureux",
            	"hiberner",
            	"hibou",
            	"hilarant",
            	"histoire",
            	"hiver",
            	"homard",
            	"hommage",
            	"homogène",
            	"honneur",
            	"honorer",
            	"honteux",
            	"horde",
            	"horizon",
            	"horloge",
            	"hormone",
            	"horrible",
            	"houleux",
            	"housse",
            	"hublot",
            	"huileux",
            	"humain",
            	"humble",
            	"humide",
            	"humour",
            	"hurler",
            	"hydromel",
            	"hygiène",
            	"hymne",
            	"hypnose",
            	"idylle",
            	"ignorer",
            	"iguane",
            	"illicite",
            	"illusion",
            	"image",
            	"imbiber",
            	"imiter",
            	"immense",
            	"immobile",
            	"immuable",
            	"impact",
            	"impérial",
            	"implorer",
            	"imposer",
            	"imprimer",
            	"imputer",
            	"incarner",
            	"incendie",
            	"incident",
            	"incliner",
            	"incolore",
            	"indexer",
            	"indice",
            	"inductif",
            	"inédit",
            	"ineptie",
            	"inexact",
            	"infini",
            	"infliger",
            	"informer",
            	"infusion",
            	"ingérer",
            	"inhaler",
            	"inhiber",
            	"injecter",
            	"injure",
            	"innocent",
            	"inoculer",
            	"inonder",
            	"inscrire",
            	"insecte",
            	"insigne",
            	"insolite",
            	"inspirer",
            	"instinct",
            	"insulter",
            	"intact",
            	"intense",
            	"intime",
            	"intrigue",
            	"intuitif",
            	"inutile",
            	"invasion",
            	"inventer",
            	"inviter",
            	"invoquer",
            	"ironique",
            	"irradier",
            	"irréel",
            	"irriter",
            	"isoler",
            	"ivoire",
            	"ivresse",
            	"jaguar",
            	"jaillir",
            	"jambe",
            	"janvier",
            	"jardin",
            	"jauger",
            	"jaune",
            	"javelot",
            	"jetable",
            	"jeton",
            	"jeudi",
            	"jeunesse",
            	"joindre",
            	"joncher",
            	"jongler",
            	"joueur",
            	"jouissif",
            	"journal",
            	"jovial",
            	"joyau",
            	"joyeux",
            	"jubiler",
            	"jugement",
            	"junior",
            	"jupon",
            	"juriste",
            	"justice",
            	"juteux",
            	"juvénile",
            	"kayak",
            	"kimono",
            	"kiosque",
            	"label",
            	"labial",
            	"labourer",
            	"lacérer",
            	"lactose",
            	"lagune",
            	"laine",
            	"laisser",
            	"laitier",
            	"lambeau",
            	"lamelle",
            	"lampe",
            	"lanceur",
            	"langage",
            	"lanterne",
            	"lapin",
            	"largeur",
            	"larme",
            	"laurier",
            	"lavabo",
            	"lavoir",
            	"lecture",
            	"légal",
            	"léger",
            	"légume",
            	"lessive",
            	"lettre",
            	"levier",
            	"lexique",
            	"lézard",
            	"liasse",
            	"libérer",
            	"libre",
            	"licence",
            	"licorne",
            	"liège",
            	"lièvre",
            	"ligature",
            	"ligoter",
            	"ligue",
            	"limer",
            	"limite",
            	"limonade",
            	"limpide",
            	"linéaire",
            	"lingot",
            	"lionceau",
            	"liquide",
            	"lisière",
            	"lister",
            	"lithium",
            	"litige",
            	"littoral",
            	"livreur",
            	"logique",
            	"lointain",
            	"loisir",
            	"lombric",
            	"loterie",
            	"louer",
            	"lourd",
            	"loutre",
            	"louve",
            	"loyal",
            	"lubie",
            	"lucide",
            	"lucratif",
            	"lueur",
            	"lugubre",
            	"luisant",
            	"lumière",
            	"lunaire",
            	"lundi",
            	"luron",
            	"lutter",
            	"luxueux",
            	"machine",
            	"magasin",
            	"magenta",
            	"magique",
            	"maigre",
            	"maillon",
            	"maintien",
            	"mairie",
            	"maison",
            	"majorer",
            	"malaxer",
            	"maléfice",
            	"malheur",
            	"malice",
            	"mallette",
            	"mammouth",
            	"mandater",
            	"maniable",
            	"manquant",
            	"manteau",
            	"manuel",
            	"marathon",
            	"marbre",
            	"marchand",
            	"mardi",
            	"maritime",
            	"marqueur",
            	"marron",
            	"marteler",
            	"mascotte",
            	"massif",
            	"matériel",
            	"matière",
            	"matraque",
            	"maudire",
            	"maussade",
            	"mauve",
            	"maximal",
            	"méchant",
            	"méconnu",
            	"médaille",
            	"médecin",
            	"méditer",
            	"méduse",
            	"meilleur",
            	"mélange",
            	"mélodie",
            	"membre",
            	"mémoire",
            	"menacer",
            	"mener",
            	"menhir",
            	"mensonge",
            	"mentor",
            	"mercredi",
            	"mérite",
            	"merle",
            	"messager",
            	"mesure",
            	"métal",
            	"météore",
            	"méthode",
            	"métier",
            	"meuble",
            	"miauler",
            	"microbe",
            	"miette",
            	"mignon",
            	"migrer",
            	"milieu",
            	"million",
            	"mimique",
            	"mince",
            	"minéral",
            	"minimal",
            	"minorer",
            	"minute",
            	"miracle",
            	"miroiter",
            	"missile",
            	"mixte",
            	"mobile",
            	"moderne",
            	"moelleux",
            	"mondial",
            	"moniteur",
            	"monnaie",
            	"monotone",
            	"monstre",
            	"montagne",
            	"monument",
            	"moqueur",
            	"morceau",
            	"morsure",
            	"mortier",
            	"moteur",
            	"motif",
            	"mouche",
            	"moufle",
            	"moulin",
            	"mousson",
            	"mouton",
            	"mouvant",
            	"multiple",
            	"munition",
            	"muraille",
            	"murène",
            	"murmure",
            	"muscle",
            	"muséum",
            	"musicien",
            	"mutation",
            	"muter",
            	"mutuel",
            	"myriade",
            	"myrtille",
            	"mystère",
            	"mythique",
            	"nageur",
            	"nappe",
            	"narquois",
            	"narrer",
            	"natation",
            	"nation",
            	"nature",
            	"naufrage",
            	"nautique",
            	"navire",
            	"nébuleux",
            	"nectar",
            	"néfaste",
            	"négation",
            	"négliger",
            	"négocier",
            	"neige",
            	"nerveux",
            	"nettoyer",
            	"neurone",
            	"neutron",
            	"neveu",
            	"niche",
            	"nickel",
            	"nitrate",
            	"niveau",
            	"noble",
            	"nocif",
            	"nocturne",
            	"noirceur",
            	"noisette",
            	"nomade",
            	"nombreux",
            	"nommer",
            	"normatif",
            	"notable",
            	"notifier",
            	"notoire",
            	"nourrir",
            	"nouveau",
            	"novateur",
            	"novembre",
            	"novice",
            	"nuage",
            	"nuancer",
            	"nuire",
            	"nuisible",
            	"numéro",
            	"nuptial",
            	"nuque",
            	"nutritif",
            	"obéir",
            	"objectif",
            	"obliger",
            	"obscur",
            	"observer",
            	"obstacle",
            	"obtenir",
            	"obturer",
            	"occasion",
            	"occuper",
            	"océan",
            	"octobre",
            	"octroyer",
            	"octupler",
            	"oculaire",
            	"odeur",
            	"odorant",
            	"offenser",
            	"officier",
            	"offrir",
            	"ogive",
            	"oiseau",
            	"oisillon",
            	"olfactif",
            	"olivier",
            	"ombrage",
            	"omettre",
            	"onctueux",
            	"onduler",
            	"onéreux",
            	"onirique",
            	"opale",
            	"opaque",
            	"opérer",
            	"opinion",
            	"opportun",
            	"opprimer",
            	"opter",
            	"optique",
            	"orageux",
            	"orange",
            	"orbite",
            	"ordonner",
            	"oreille",
            	"organe",
            	"orgueil",
            	"orifice",
            	"ornement",
            	"orque",
            	"ortie",
            	"osciller",
            	"osmose",
            	"ossature",
            	"otarie",
            	"ouragan",
            	"ourson",
            	"outil",
            	"outrager",
            	"ouvrage",
            	"ovation",
            	"oxyde",
            	"oxygène",
            	"ozone",
            	"paisible",
            	"palace",
            	"palmarès",
            	"palourde",
            	"palper",
            	"panache",
            	"panda",
            	"pangolin",
            	"paniquer",
            	"panneau",
            	"panorama",
            	"pantalon",
            	"papaye",
            	"papier",
            	"papoter",
            	"papyrus",
            	"paradoxe",
            	"parcelle",
            	"paresse",
            	"parfumer",
            	"parler",
            	"parole",
            	"parrain",
            	"parsemer",
            	"partager",
            	"parure",
            	"parvenir",
            	"passion",
            	"pastèque",
            	"paternel",
            	"patience",
            	"patron",
            	"pavillon",
            	"pavoiser",
            	"payer",
            	"paysage",
            	"peigne",
            	"peintre",
            	"pelage",
            	"pélican",
            	"pelle",
            	"pelouse",
            	"peluche",
            	"pendule",
            	"pénétrer",
            	"pénible",
            	"pensif",
            	"pénurie",
            	"pépite",
            	"péplum",
            	"perdrix",
            	"perforer",
            	"période",
            	"permuter",
            	"perplexe",
            	"persil",
            	"perte",
            	"peser",
            	"pétale",
            	"petit",
            	"pétrir",
            	"peuple",
            	"pharaon",
            	"phobie",
            	"phoque",
            	"photon",
            	"phrase",
            	"physique",
            	"piano",
            	"pictural",
            	"pièce",
            	"pierre",
            	"pieuvre",
            	"pilote",
            	"pinceau",
            	"pipette",
            	"piquer",
            	"pirogue",
            	"piscine",
            	"piston",
            	"pivoter",
            	"pixel",
            	"pizza",
            	"placard",
            	"plafond",
            	"plaisir",
            	"planer",
            	"plaque",
            	"plastron",
            	"plateau",
            	"pleurer",
            	"plexus",
            	"pliage",
            	"plomb",
            	"plonger",
            	"pluie",
            	"plumage",
            	"pochette",
            	"poésie",
            	"poète",
            	"pointe",
            	"poirier",
            	"poisson",
            	"poivre",
            	"polaire",
            	"policier",
            	"pollen",
            	"polygone",
            	"pommade",
            	"pompier",
            	"ponctuel",
            	"pondérer",
            	"poney",
            	"portique",
            	"position",
            	"posséder",
            	"posture",
            	"potager",
            	"poteau",
            	"potion",
            	"pouce",
            	"poulain",
            	"poumon",
            	"pourpre",
            	"poussin",
            	"pouvoir",
            	"prairie",
            	"pratique",
            	"précieux",
            	"prédire",
            	"préfixe",
            	"prélude",
            	"prénom",
            	"présence",
            	"prétexte",
            	"prévoir",
            	"primitif",
            	"prince",
            	"prison",
            	"priver",
            	"problème",
            	"procéder",
            	"prodige",
            	"profond",
            	"progrès",
            	"proie",
            	"projeter",
            	"prologue",
            	"promener",
            	"propre",
            	"prospère",
            	"protéger",
            	"prouesse",
            	"proverbe",
            	"prudence",
            	"pruneau",
            	"psychose",
            	"public",
            	"puceron",
            	"puiser",
            	"pulpe",
            	"pulsar",
            	"punaise",
            	"punitif",
            	"pupitre",
            	"purifier",
            	"puzzle",
            	"pyramide",
            	"quasar",
            	"querelle",
            	"question",
            	"quiétude",
            	"quitter",
            	"quotient",
            	"racine",
            	"raconter",
            	"radieux",
            	"ragondin",
            	"raideur",
            	"raisin",
            	"ralentir",
            	"rallonge",
            	"ramasser",
            	"rapide",
            	"rasage",
            	"ratisser",
            	"ravager",
            	"ravin",
            	"rayonner",
            	"réactif",
            	"réagir",
            	"réaliser",
            	"réanimer",
            	"recevoir",
            	"réciter",
            	"réclamer",
            	"récolter",
            	"recruter",
            	"reculer",
            	"recycler",
            	"rédiger",
            	"redouter",
            	"refaire",
            	"réflexe",
            	"réformer",
            	"refrain",
            	"refuge",
            	"régalien",
            	"région",
            	"réglage",
            	"régulier",
            	"réitérer",
            	"rejeter",
            	"rejouer",
            	"relatif",
            	"relever",
            	"relief",
            	"remarque",
            	"remède",
            	"remise",
            	"remonter",
            	"remplir",
            	"remuer",
            	"renard",
            	"renfort",
            	"renifler",
            	"renoncer",
            	"rentrer",
            	"renvoi",
            	"replier",
            	"reporter",
            	"reprise",
            	"reptile",
            	"requin",
            	"réserve",
            	"résineux",
            	"résoudre",
            	"respect",
            	"rester",
            	"résultat",
            	"rétablir",
            	"retenir",
            	"réticule",
            	"retomber",
            	"retracer",
            	"réunion",
            	"réussir",
            	"revanche",
            	"revivre",
            	"révolte",
            	"révulsif",
            	"richesse",
            	"rideau",
            	"rieur",
            	"rigide",
            	"rigoler",
            	"rincer",
            	"riposter",
            	"risible",
            	"risque",
            	"rituel",
            	"rival",
            	"rivière",
            	"rocheux",
            	"romance",
            	"rompre",
            	"ronce",
            	"rondin",
            	"roseau",
            	"rosier",
            	"rotatif",
            	"rotor",
            	"rotule",
            	"rouge",
            	"rouille",
            	"rouleau",
            	"routine",
            	"royaume",
            	"ruban",
            	"rubis",
            	"ruche",
            	"ruelle",
            	"rugueux",
            	"ruiner",
            	"ruisseau",
            	"ruser",
            	"rustique",
            	"rythme",
            	"sabler",
            	"saboter",
            	"sabre",
            	"sacoche",
            	"safari",
            	"sagesse",
            	"saisir",
            	"salade",
            	"salive",
            	"salon",
            	"saluer",
            	"samedi",
            	"sanction",
            	"sanglier",
            	"sarcasme",
            	"sardine",
            	"saturer",
            	"saugrenu",
            	"saumon",
            	"sauter",
            	"sauvage",
            	"savant",
            	"savonner",
            	"scalpel",
            	"scandale",
            	"scélérat",
            	"scénario",
            	"sceptre",
            	"schéma",
            	"science",
            	"scinder",
            	"score",
            	"scrutin",
            	"sculpter",
            	"séance",
            	"sécable",
            	"sécher",
            	"secouer",
            	"sécréter",
            	"sédatif",
            	"séduire",
            	"seigneur",
            	"séjour",
            	"sélectif",
            	"semaine",
            	"sembler",
            	"semence",
            	"séminal",
            	"sénateur",
            	"sensible",
            	"sentence",
            	"séparer",
            	"séquence",
            	"serein",
            	"sergent",
            	"sérieux",
            	"serrure",
            	"sérum",
            	"service",
            	"sésame",
            	"sévir",
            	"sevrage",
            	"sextuple",
            	"sidéral",
            	"siècle",
            	"siéger",
            	"siffler",
            	"sigle",
            	"signal",
            	"silence",
            	"silicium",
            	"simple",
            	"sincère",
            	"sinistre",
            	"siphon",
            	"sirop",
            	"sismique",
            	"situer",
            	"skier",
            	"social",
            	"socle",
            	"sodium",
            	"soigneux",
            	"soldat",
            	"soleil",
            	"solitude",
            	"soluble",
            	"sombre",
            	"sommeil",
            	"somnoler",
            	"sonde",
            	"songeur",
            	"sonnette",
            	"sonore",
            	"sorcier",
            	"sortir",
            	"sosie",
            	"sottise",
            	"soucieux",
            	"soudure",
            	"souffle",
            	"soulever",
            	"soupape",
            	"source",
            	"soutirer",
            	"souvenir",
            	"spacieux",
            	"spatial",
            	"spécial",
            	"sphère",
            	"spiral",
            	"stable",
            	"station",
            	"sternum",
            	"stimulus",
            	"stipuler",
            	"strict",
            	"studieux",
            	"stupeur",
            	"styliste",
            	"sublime",
            	"substrat",
            	"subtil",
            	"subvenir",
            	"succès",
            	"sucre",
            	"suffixe",
            	"suggérer",
            	"suiveur",
            	"sulfate",
            	"superbe",
            	"supplier",
            	"surface",
            	"suricate",
            	"surmener",
            	"surprise",
            	"sursaut",
            	"survie",
            	"suspect",
            	"syllabe",
            	"symbole",
            	"symétrie",
            	"synapse",
            	"syntaxe",
            	"système",
            	"tabac",
            	"tablier",
            	"tactile",
            	"tailler",
            	"talent",
            	"talisman",
            	"talonner",
            	"tambour",
            	"tamiser",
            	"tangible",
            	"tapis",
            	"taquiner",
            	"tarder",
            	"tarif",
            	"tartine",
            	"tasse",
            	"tatami",
            	"tatouage",
            	"taupe",
            	"taureau",
            	"taxer",
            	"témoin",
            	"temporel",
            	"tenaille",
            	"tendre",
            	"teneur",
            	"tenir",
            	"tension",
            	"terminer",
            	"terne",
            	"terrible",
            	"tétine",
            	"texte",
            	"thème",
            	"théorie",
            	"thérapie",
            	"thorax",
            	"tibia",
            	"tiède",
            	"timide",
            	"tirelire",
            	"tiroir",
            	"tissu",
            	"titane",
            	"titre",
            	"tituber",
            	"toboggan",
            	"tolérant",
            	"tomate",
            	"tonique",
            	"tonneau",
            	"toponyme",
            	"torche",
            	"tordre",
            	"tornade",
            	"torpille",
            	"torrent",
            	"torse",
            	"tortue",
            	"totem",
            	"toucher",
            	"tournage",
            	"tousser",
            	"toxine",
            	"traction",
            	"trafic",
            	"tragique",
            	"trahir",
            	"train",
            	"trancher",
            	"travail",
            	"trèfle",
            	"tremper",
            	"trésor",
            	"treuil",
            	"triage",
            	"tribunal",
            	"tricoter",
            	"trilogie",
            	"triomphe",
            	"tripler",
            	"triturer",
            	"trivial",
            	"trombone",
            	"tronc",
            	"tropical",
            	"troupeau",
            	"tuile",
            	"tulipe",
            	"tumulte",
            	"tunnel",
            	"turbine",
            	"tuteur",
            	"tutoyer",
            	"tuyau",
            	"tympan",
            	"typhon",
            	"typique",
            	"tyran",
            	"ubuesque",
            	"ultime",
            	"ultrason",
            	"unanime",
            	"unifier",
            	"union",
            	"unique",
            	"unitaire",
            	"univers",
            	"uranium",
            	"urbain",
            	"urticant",
            	"usage",
            	"usine",
            	"usuel",
            	"usure",
            	"utile",
            	"utopie",
            	"vacarme",
            	"vaccin",
            	"vagabond",
            	"vague",
            	"vaillant",
            	"vaincre",
            	"vaisseau",
            	"valable",
            	"valise",
            	"vallon",
            	"valve",
            	"vampire",
            	"vanille",
            	"vapeur",
            	"varier",
            	"vaseux",
            	"vassal",
            	"vaste",
            	"vecteur",
            	"vedette",
            	"végétal",
            	"véhicule",
            	"veinard",
            	"véloce",
            	"vendredi",
            	"vénérer",
            	"venger",
            	"venimeux",
            	"ventouse",
            	"verdure",
            	"vérin",
            	"vernir",
            	"verrou",
            	"verser",
            	"vertu",
            	"veston",
            	"vétéran",
            	"vétuste",
            	"vexant",
            	"vexer",
            	"viaduc",
            	"viande",
            	"victoire",
            	"vidange",
            	"vidéo",
            	"vignette",
            	"vigueur",
            	"vilain",
            	"village",
            	"vinaigre",
            	"violon",
            	"vipère",
            	"virement",
            	"virtuose",
            	"virus",
            	"visage",
            	"viseur",
            	"vision",
            	"visqueux",
            	"visuel",
            	"vital",
            	"vitesse",
            	"viticole",
            	"vitrine",
            	"vivace",
            	"vivipare",
            	"vocation",
            	"voguer",
            	"voile",
            	"voisin",
            	"voiture",
            	"volaille",
            	"volcan",
            	"voltiger",
            	"volume",
            	"vorace",
            	"vortex",
            	"voter",
            	"vouloir",
            	"voyage",
            	"voyelle",
            	"wagon",
            	"xénon",
            	"yacht",
            	"zèbre",
            	"zénith",
            	"zeste",
            	"zoologie"
            ];

            var require$$5 = [
            	"abaco",
            	"abbaglio",
            	"abbinato",
            	"abete",
            	"abisso",
            	"abolire",
            	"abrasivo",
            	"abrogato",
            	"accadere",
            	"accenno",
            	"accusato",
            	"acetone",
            	"achille",
            	"acido",
            	"acqua",
            	"acre",
            	"acrilico",
            	"acrobata",
            	"acuto",
            	"adagio",
            	"addebito",
            	"addome",
            	"adeguato",
            	"aderire",
            	"adipe",
            	"adottare",
            	"adulare",
            	"affabile",
            	"affetto",
            	"affisso",
            	"affranto",
            	"aforisma",
            	"afoso",
            	"africano",
            	"agave",
            	"agente",
            	"agevole",
            	"aggancio",
            	"agire",
            	"agitare",
            	"agonismo",
            	"agricolo",
            	"agrumeto",
            	"aguzzo",
            	"alabarda",
            	"alato",
            	"albatro",
            	"alberato",
            	"albo",
            	"albume",
            	"alce",
            	"alcolico",
            	"alettone",
            	"alfa",
            	"algebra",
            	"aliante",
            	"alibi",
            	"alimento",
            	"allagato",
            	"allegro",
            	"allievo",
            	"allodola",
            	"allusivo",
            	"almeno",
            	"alogeno",
            	"alpaca",
            	"alpestre",
            	"altalena",
            	"alterno",
            	"alticcio",
            	"altrove",
            	"alunno",
            	"alveolo",
            	"alzare",
            	"amalgama",
            	"amanita",
            	"amarena",
            	"ambito",
            	"ambrato",
            	"ameba",
            	"america",
            	"ametista",
            	"amico",
            	"ammasso",
            	"ammenda",
            	"ammirare",
            	"ammonito",
            	"amore",
            	"ampio",
            	"ampliare",
            	"amuleto",
            	"anacardo",
            	"anagrafe",
            	"analista",
            	"anarchia",
            	"anatra",
            	"anca",
            	"ancella",
            	"ancora",
            	"andare",
            	"andrea",
            	"anello",
            	"angelo",
            	"angolare",
            	"angusto",
            	"anima",
            	"annegare",
            	"annidato",
            	"anno",
            	"annuncio",
            	"anonimo",
            	"anticipo",
            	"anzi",
            	"apatico",
            	"apertura",
            	"apode",
            	"apparire",
            	"appetito",
            	"appoggio",
            	"approdo",
            	"appunto",
            	"aprile",
            	"arabica",
            	"arachide",
            	"aragosta",
            	"araldica",
            	"arancio",
            	"aratura",
            	"arazzo",
            	"arbitro",
            	"archivio",
            	"ardito",
            	"arenile",
            	"argento",
            	"argine",
            	"arguto",
            	"aria",
            	"armonia",
            	"arnese",
            	"arredato",
            	"arringa",
            	"arrosto",
            	"arsenico",
            	"arso",
            	"artefice",
            	"arzillo",
            	"asciutto",
            	"ascolto",
            	"asepsi",
            	"asettico",
            	"asfalto",
            	"asino",
            	"asola",
            	"aspirato",
            	"aspro",
            	"assaggio",
            	"asse",
            	"assoluto",
            	"assurdo",
            	"asta",
            	"astenuto",
            	"astice",
            	"astratto",
            	"atavico",
            	"ateismo",
            	"atomico",
            	"atono",
            	"attesa",
            	"attivare",
            	"attorno",
            	"attrito",
            	"attuale",
            	"ausilio",
            	"austria",
            	"autista",
            	"autonomo",
            	"autunno",
            	"avanzato",
            	"avere",
            	"avvenire",
            	"avviso",
            	"avvolgere",
            	"azione",
            	"azoto",
            	"azzimo",
            	"azzurro",
            	"babele",
            	"baccano",
            	"bacino",
            	"baco",
            	"badessa",
            	"badilata",
            	"bagnato",
            	"baita",
            	"balcone",
            	"baldo",
            	"balena",
            	"ballata",
            	"balzano",
            	"bambino",
            	"bandire",
            	"baraonda",
            	"barbaro",
            	"barca",
            	"baritono",
            	"barlume",
            	"barocco",
            	"basilico",
            	"basso",
            	"batosta",
            	"battuto",
            	"baule",
            	"bava",
            	"bavosa",
            	"becco",
            	"beffa",
            	"belgio",
            	"belva",
            	"benda",
            	"benevole",
            	"benigno",
            	"benzina",
            	"bere",
            	"berlina",
            	"beta",
            	"bibita",
            	"bici",
            	"bidone",
            	"bifido",
            	"biga",
            	"bilancia",
            	"bimbo",
            	"binocolo",
            	"biologo",
            	"bipede",
            	"bipolare",
            	"birbante",
            	"birra",
            	"biscotto",
            	"bisesto",
            	"bisnonno",
            	"bisonte",
            	"bisturi",
            	"bizzarro",
            	"blando",
            	"blatta",
            	"bollito",
            	"bonifico",
            	"bordo",
            	"bosco",
            	"botanico",
            	"bottino",
            	"bozzolo",
            	"braccio",
            	"bradipo",
            	"brama",
            	"branca",
            	"bravura",
            	"bretella",
            	"brevetto",
            	"brezza",
            	"briglia",
            	"brillante",
            	"brindare",
            	"broccolo",
            	"brodo",
            	"bronzina",
            	"brullo",
            	"bruno",
            	"bubbone",
            	"buca",
            	"budino",
            	"buffone",
            	"buio",
            	"bulbo",
            	"buono",
            	"burlone",
            	"burrasca",
            	"bussola",
            	"busta",
            	"cadetto",
            	"caduco",
            	"calamaro",
            	"calcolo",
            	"calesse",
            	"calibro",
            	"calmo",
            	"caloria",
            	"cambusa",
            	"camerata",
            	"camicia",
            	"cammino",
            	"camola",
            	"campale",
            	"canapa",
            	"candela",
            	"cane",
            	"canino",
            	"canotto",
            	"cantina",
            	"capace",
            	"capello",
            	"capitolo",
            	"capogiro",
            	"cappero",
            	"capra",
            	"capsula",
            	"carapace",
            	"carcassa",
            	"cardo",
            	"carisma",
            	"carovana",
            	"carretto",
            	"cartolina",
            	"casaccio",
            	"cascata",
            	"caserma",
            	"caso",
            	"cassone",
            	"castello",
            	"casuale",
            	"catasta",
            	"catena",
            	"catrame",
            	"cauto",
            	"cavillo",
            	"cedibile",
            	"cedrata",
            	"cefalo",
            	"celebre",
            	"cellulare",
            	"cena",
            	"cenone",
            	"centesimo",
            	"ceramica",
            	"cercare",
            	"certo",
            	"cerume",
            	"cervello",
            	"cesoia",
            	"cespo",
            	"ceto",
            	"chela",
            	"chiaro",
            	"chicca",
            	"chiedere",
            	"chimera",
            	"china",
            	"chirurgo",
            	"chitarra",
            	"ciao",
            	"ciclismo",
            	"cifrare",
            	"cigno",
            	"cilindro",
            	"ciottolo",
            	"circa",
            	"cirrosi",
            	"citrico",
            	"cittadino",
            	"ciuffo",
            	"civetta",
            	"civile",
            	"classico",
            	"clinica",
            	"cloro",
            	"cocco",
            	"codardo",
            	"codice",
            	"coerente",
            	"cognome",
            	"collare",
            	"colmato",
            	"colore",
            	"colposo",
            	"coltivato",
            	"colza",
            	"coma",
            	"cometa",
            	"commando",
            	"comodo",
            	"computer",
            	"comune",
            	"conciso",
            	"condurre",
            	"conferma",
            	"congelare",
            	"coniuge",
            	"connesso",
            	"conoscere",
            	"consumo",
            	"continuo",
            	"convegno",
            	"coperto",
            	"copione",
            	"coppia",
            	"copricapo",
            	"corazza",
            	"cordata",
            	"coricato",
            	"cornice",
            	"corolla",
            	"corpo",
            	"corredo",
            	"corsia",
            	"cortese",
            	"cosmico",
            	"costante",
            	"cottura",
            	"covato",
            	"cratere",
            	"cravatta",
            	"creato",
            	"credere",
            	"cremoso",
            	"crescita",
            	"creta",
            	"criceto",
            	"crinale",
            	"crisi",
            	"critico",
            	"croce",
            	"cronaca",
            	"crostata",
            	"cruciale",
            	"crusca",
            	"cucire",
            	"cuculo",
            	"cugino",
            	"cullato",
            	"cupola",
            	"curatore",
            	"cursore",
            	"curvo",
            	"cuscino",
            	"custode",
            	"dado",
            	"daino",
            	"dalmata",
            	"damerino",
            	"daniela",
            	"dannoso",
            	"danzare",
            	"datato",
            	"davanti",
            	"davvero",
            	"debutto",
            	"decennio",
            	"deciso",
            	"declino",
            	"decollo",
            	"decreto",
            	"dedicato",
            	"definito",
            	"deforme",
            	"degno",
            	"delegare",
            	"delfino",
            	"delirio",
            	"delta",
            	"demenza",
            	"denotato",
            	"dentro",
            	"deposito",
            	"derapata",
            	"derivare",
            	"deroga",
            	"descritto",
            	"deserto",
            	"desiderio",
            	"desumere",
            	"detersivo",
            	"devoto",
            	"diametro",
            	"dicembre",
            	"diedro",
            	"difeso",
            	"diffuso",
            	"digerire",
            	"digitale",
            	"diluvio",
            	"dinamico",
            	"dinnanzi",
            	"dipinto",
            	"diploma",
            	"dipolo",
            	"diradare",
            	"dire",
            	"dirotto",
            	"dirupo",
            	"disagio",
            	"discreto",
            	"disfare",
            	"disgelo",
            	"disposto",
            	"distanza",
            	"disumano",
            	"dito",
            	"divano",
            	"divelto",
            	"dividere",
            	"divorato",
            	"doblone",
            	"docente",
            	"doganale",
            	"dogma",
            	"dolce",
            	"domato",
            	"domenica",
            	"dominare",
            	"dondolo",
            	"dono",
            	"dormire",
            	"dote",
            	"dottore",
            	"dovuto",
            	"dozzina",
            	"drago",
            	"druido",
            	"dubbio",
            	"dubitare",
            	"ducale",
            	"duna",
            	"duomo",
            	"duplice",
            	"duraturo",
            	"ebano",
            	"eccesso",
            	"ecco",
            	"eclissi",
            	"economia",
            	"edera",
            	"edicola",
            	"edile",
            	"editoria",
            	"educare",
            	"egemonia",
            	"egli",
            	"egoismo",
            	"egregio",
            	"elaborato",
            	"elargire",
            	"elegante",
            	"elencato",
            	"eletto",
            	"elevare",
            	"elfico",
            	"elica",
            	"elmo",
            	"elsa",
            	"eluso",
            	"emanato",
            	"emblema",
            	"emesso",
            	"emiro",
            	"emotivo",
            	"emozione",
            	"empirico",
            	"emulo",
            	"endemico",
            	"enduro",
            	"energia",
            	"enfasi",
            	"enoteca",
            	"entrare",
            	"enzima",
            	"epatite",
            	"epilogo",
            	"episodio",
            	"epocale",
            	"eppure",
            	"equatore",
            	"erario",
            	"erba",
            	"erboso",
            	"erede",
            	"eremita",
            	"erigere",
            	"ermetico",
            	"eroe",
            	"erosivo",
            	"errante",
            	"esagono",
            	"esame",
            	"esanime",
            	"esaudire",
            	"esca",
            	"esempio",
            	"esercito",
            	"esibito",
            	"esigente",
            	"esistere",
            	"esito",
            	"esofago",
            	"esortato",
            	"esoso",
            	"espanso",
            	"espresso",
            	"essenza",
            	"esso",
            	"esteso",
            	"estimare",
            	"estonia",
            	"estroso",
            	"esultare",
            	"etilico",
            	"etnico",
            	"etrusco",
            	"etto",
            	"euclideo",
            	"europa",
            	"evaso",
            	"evidenza",
            	"evitato",
            	"evoluto",
            	"evviva",
            	"fabbrica",
            	"faccenda",
            	"fachiro",
            	"falco",
            	"famiglia",
            	"fanale",
            	"fanfara",
            	"fango",
            	"fantasma",
            	"fare",
            	"farfalla",
            	"farinoso",
            	"farmaco",
            	"fascia",
            	"fastoso",
            	"fasullo",
            	"faticare",
            	"fato",
            	"favoloso",
            	"febbre",
            	"fecola",
            	"fede",
            	"fegato",
            	"felpa",
            	"feltro",
            	"femmina",
            	"fendere",
            	"fenomeno",
            	"fermento",
            	"ferro",
            	"fertile",
            	"fessura",
            	"festivo",
            	"fetta",
            	"feudo",
            	"fiaba",
            	"fiducia",
            	"fifa",
            	"figurato",
            	"filo",
            	"finanza",
            	"finestra",
            	"finire",
            	"fiore",
            	"fiscale",
            	"fisico",
            	"fiume",
            	"flacone",
            	"flamenco",
            	"flebo",
            	"flemma",
            	"florido",
            	"fluente",
            	"fluoro",
            	"fobico",
            	"focaccia",
            	"focoso",
            	"foderato",
            	"foglio",
            	"folata",
            	"folclore",
            	"folgore",
            	"fondente",
            	"fonetico",
            	"fonia",
            	"fontana",
            	"forbito",
            	"forchetta",
            	"foresta",
            	"formica",
            	"fornaio",
            	"foro",
            	"fortezza",
            	"forzare",
            	"fosfato",
            	"fosso",
            	"fracasso",
            	"frana",
            	"frassino",
            	"fratello",
            	"freccetta",
            	"frenata",
            	"fresco",
            	"frigo",
            	"frollino",
            	"fronde",
            	"frugale",
            	"frutta",
            	"fucilata",
            	"fucsia",
            	"fuggente",
            	"fulmine",
            	"fulvo",
            	"fumante",
            	"fumetto",
            	"fumoso",
            	"fune",
            	"funzione",
            	"fuoco",
            	"furbo",
            	"furgone",
            	"furore",
            	"fuso",
            	"futile",
            	"gabbiano",
            	"gaffe",
            	"galateo",
            	"gallina",
            	"galoppo",
            	"gambero",
            	"gamma",
            	"garanzia",
            	"garbo",
            	"garofano",
            	"garzone",
            	"gasdotto",
            	"gasolio",
            	"gastrico",
            	"gatto",
            	"gaudio",
            	"gazebo",
            	"gazzella",
            	"geco",
            	"gelatina",
            	"gelso",
            	"gemello",
            	"gemmato",
            	"gene",
            	"genitore",
            	"gennaio",
            	"genotipo",
            	"gergo",
            	"ghepardo",
            	"ghiaccio",
            	"ghisa",
            	"giallo",
            	"gilda",
            	"ginepro",
            	"giocare",
            	"gioiello",
            	"giorno",
            	"giove",
            	"girato",
            	"girone",
            	"gittata",
            	"giudizio",
            	"giurato",
            	"giusto",
            	"globulo",
            	"glutine",
            	"gnomo",
            	"gobba",
            	"golf",
            	"gomito",
            	"gommone",
            	"gonfio",
            	"gonna",
            	"governo",
            	"gracile",
            	"grado",
            	"grafico",
            	"grammo",
            	"grande",
            	"grattare",
            	"gravoso",
            	"grazia",
            	"greca",
            	"gregge",
            	"grifone",
            	"grigio",
            	"grinza",
            	"grotta",
            	"gruppo",
            	"guadagno",
            	"guaio",
            	"guanto",
            	"guardare",
            	"gufo",
            	"guidare",
            	"ibernato",
            	"icona",
            	"identico",
            	"idillio",
            	"idolo",
            	"idra",
            	"idrico",
            	"idrogeno",
            	"igiene",
            	"ignaro",
            	"ignorato",
            	"ilare",
            	"illeso",
            	"illogico",
            	"illudere",
            	"imballo",
            	"imbevuto",
            	"imbocco",
            	"imbuto",
            	"immane",
            	"immerso",
            	"immolato",
            	"impacco",
            	"impeto",
            	"impiego",
            	"importo",
            	"impronta",
            	"inalare",
            	"inarcare",
            	"inattivo",
            	"incanto",
            	"incendio",
            	"inchino",
            	"incisivo",
            	"incluso",
            	"incontro",
            	"incrocio",
            	"incubo",
            	"indagine",
            	"india",
            	"indole",
            	"inedito",
            	"infatti",
            	"infilare",
            	"inflitto",
            	"ingaggio",
            	"ingegno",
            	"inglese",
            	"ingordo",
            	"ingrosso",
            	"innesco",
            	"inodore",
            	"inoltrare",
            	"inondato",
            	"insano",
            	"insetto",
            	"insieme",
            	"insonnia",
            	"insulina",
            	"intasato",
            	"intero",
            	"intonaco",
            	"intuito",
            	"inumidire",
            	"invalido",
            	"invece",
            	"invito",
            	"iperbole",
            	"ipnotico",
            	"ipotesi",
            	"ippica",
            	"iride",
            	"irlanda",
            	"ironico",
            	"irrigato",
            	"irrorare",
            	"isolato",
            	"isotopo",
            	"isterico",
            	"istituto",
            	"istrice",
            	"italia",
            	"iterare",
            	"labbro",
            	"labirinto",
            	"lacca",
            	"lacerato",
            	"lacrima",
            	"lacuna",
            	"laddove",
            	"lago",
            	"lampo",
            	"lancetta",
            	"lanterna",
            	"lardoso",
            	"larga",
            	"laringe",
            	"lastra",
            	"latenza",
            	"latino",
            	"lattuga",
            	"lavagna",
            	"lavoro",
            	"legale",
            	"leggero",
            	"lembo",
            	"lentezza",
            	"lenza",
            	"leone",
            	"lepre",
            	"lesivo",
            	"lessato",
            	"lesto",
            	"letterale",
            	"leva",
            	"levigato",
            	"libero",
            	"lido",
            	"lievito",
            	"lilla",
            	"limatura",
            	"limitare",
            	"limpido",
            	"lineare",
            	"lingua",
            	"liquido",
            	"lira",
            	"lirica",
            	"lisca",
            	"lite",
            	"litigio",
            	"livrea",
            	"locanda",
            	"lode",
            	"logica",
            	"lombare",
            	"londra",
            	"longevo",
            	"loquace",
            	"lorenzo",
            	"loto",
            	"lotteria",
            	"luce",
            	"lucidato",
            	"lumaca",
            	"luminoso",
            	"lungo",
            	"lupo",
            	"luppolo",
            	"lusinga",
            	"lusso",
            	"lutto",
            	"macabro",
            	"macchina",
            	"macero",
            	"macinato",
            	"madama",
            	"magico",
            	"maglia",
            	"magnete",
            	"magro",
            	"maiolica",
            	"malafede",
            	"malgrado",
            	"malinteso",
            	"malsano",
            	"malto",
            	"malumore",
            	"mana",
            	"mancia",
            	"mandorla",
            	"mangiare",
            	"manifesto",
            	"mannaro",
            	"manovra",
            	"mansarda",
            	"mantide",
            	"manubrio",
            	"mappa",
            	"maratona",
            	"marcire",
            	"maretta",
            	"marmo",
            	"marsupio",
            	"maschera",
            	"massaia",
            	"mastino",
            	"materasso",
            	"matricola",
            	"mattone",
            	"maturo",
            	"mazurca",
            	"meandro",
            	"meccanico",
            	"mecenate",
            	"medesimo",
            	"meditare",
            	"mega",
            	"melassa",
            	"melis",
            	"melodia",
            	"meninge",
            	"meno",
            	"mensola",
            	"mercurio",
            	"merenda",
            	"merlo",
            	"meschino",
            	"mese",
            	"messere",
            	"mestolo",
            	"metallo",
            	"metodo",
            	"mettere",
            	"miagolare",
            	"mica",
            	"micelio",
            	"michele",
            	"microbo",
            	"midollo",
            	"miele",
            	"migliore",
            	"milano",
            	"milite",
            	"mimosa",
            	"minerale",
            	"mini",
            	"minore",
            	"mirino",
            	"mirtillo",
            	"miscela",
            	"missiva",
            	"misto",
            	"misurare",
            	"mitezza",
            	"mitigare",
            	"mitra",
            	"mittente",
            	"mnemonico",
            	"modello",
            	"modifica",
            	"modulo",
            	"mogano",
            	"mogio",
            	"mole",
            	"molosso",
            	"monastero",
            	"monco",
            	"mondina",
            	"monetario",
            	"monile",
            	"monotono",
            	"monsone",
            	"montato",
            	"monviso",
            	"mora",
            	"mordere",
            	"morsicato",
            	"mostro",
            	"motivato",
            	"motosega",
            	"motto",
            	"movenza",
            	"movimento",
            	"mozzo",
            	"mucca",
            	"mucosa",
            	"muffa",
            	"mughetto",
            	"mugnaio",
            	"mulatto",
            	"mulinello",
            	"multiplo",
            	"mummia",
            	"munto",
            	"muovere",
            	"murale",
            	"musa",
            	"muscolo",
            	"musica",
            	"mutevole",
            	"muto",
            	"nababbo",
            	"nafta",
            	"nanometro",
            	"narciso",
            	"narice",
            	"narrato",
            	"nascere",
            	"nastrare",
            	"naturale",
            	"nautica",
            	"naviglio",
            	"nebulosa",
            	"necrosi",
            	"negativo",
            	"negozio",
            	"nemmeno",
            	"neofita",
            	"neretto",
            	"nervo",
            	"nessuno",
            	"nettuno",
            	"neutrale",
            	"neve",
            	"nevrotico",
            	"nicchia",
            	"ninfa",
            	"nitido",
            	"nobile",
            	"nocivo",
            	"nodo",
            	"nome",
            	"nomina",
            	"nordico",
            	"normale",
            	"norvegese",
            	"nostrano",
            	"notare",
            	"notizia",
            	"notturno",
            	"novella",
            	"nucleo",
            	"nulla",
            	"numero",
            	"nuovo",
            	"nutrire",
            	"nuvola",
            	"nuziale",
            	"oasi",
            	"obbedire",
            	"obbligo",
            	"obelisco",
            	"oblio",
            	"obolo",
            	"obsoleto",
            	"occasione",
            	"occhio",
            	"occidente",
            	"occorrere",
            	"occultare",
            	"ocra",
            	"oculato",
            	"odierno",
            	"odorare",
            	"offerta",
            	"offrire",
            	"offuscato",
            	"oggetto",
            	"oggi",
            	"ognuno",
            	"olandese",
            	"olfatto",
            	"oliato",
            	"oliva",
            	"ologramma",
            	"oltre",
            	"omaggio",
            	"ombelico",
            	"ombra",
            	"omega",
            	"omissione",
            	"ondoso",
            	"onere",
            	"onice",
            	"onnivoro",
            	"onorevole",
            	"onta",
            	"operato",
            	"opinione",
            	"opposto",
            	"oracolo",
            	"orafo",
            	"ordine",
            	"orecchino",
            	"orefice",
            	"orfano",
            	"organico",
            	"origine",
            	"orizzonte",
            	"orma",
            	"ormeggio",
            	"ornativo",
            	"orologio",
            	"orrendo",
            	"orribile",
            	"ortensia",
            	"ortica",
            	"orzata",
            	"orzo",
            	"osare",
            	"oscurare",
            	"osmosi",
            	"ospedale",
            	"ospite",
            	"ossa",
            	"ossidare",
            	"ostacolo",
            	"oste",
            	"otite",
            	"otre",
            	"ottagono",
            	"ottimo",
            	"ottobre",
            	"ovale",
            	"ovest",
            	"ovino",
            	"oviparo",
            	"ovocito",
            	"ovunque",
            	"ovviare",
            	"ozio",
            	"pacchetto",
            	"pace",
            	"pacifico",
            	"padella",
            	"padrone",
            	"paese",
            	"paga",
            	"pagina",
            	"palazzina",
            	"palesare",
            	"pallido",
            	"palo",
            	"palude",
            	"pandoro",
            	"pannello",
            	"paolo",
            	"paonazzo",
            	"paprica",
            	"parabola",
            	"parcella",
            	"parere",
            	"pargolo",
            	"pari",
            	"parlato",
            	"parola",
            	"partire",
            	"parvenza",
            	"parziale",
            	"passivo",
            	"pasticca",
            	"patacca",
            	"patologia",
            	"pattume",
            	"pavone",
            	"peccato",
            	"pedalare",
            	"pedonale",
            	"peggio",
            	"peloso",
            	"penare",
            	"pendice",
            	"penisola",
            	"pennuto",
            	"penombra",
            	"pensare",
            	"pentola",
            	"pepe",
            	"pepita",
            	"perbene",
            	"percorso",
            	"perdonato",
            	"perforare",
            	"pergamena",
            	"periodo",
            	"permesso",
            	"perno",
            	"perplesso",
            	"persuaso",
            	"pertugio",
            	"pervaso",
            	"pesatore",
            	"pesista",
            	"peso",
            	"pestifero",
            	"petalo",
            	"pettine",
            	"petulante",
            	"pezzo",
            	"piacere",
            	"pianta",
            	"piattino",
            	"piccino",
            	"picozza",
            	"piega",
            	"pietra",
            	"piffero",
            	"pigiama",
            	"pigolio",
            	"pigro",
            	"pila",
            	"pilifero",
            	"pillola",
            	"pilota",
            	"pimpante",
            	"pineta",
            	"pinna",
            	"pinolo",
            	"pioggia",
            	"piombo",
            	"piramide",
            	"piretico",
            	"pirite",
            	"pirolisi",
            	"pitone",
            	"pizzico",
            	"placebo",
            	"planare",
            	"plasma",
            	"platano",
            	"plenario",
            	"pochezza",
            	"poderoso",
            	"podismo",
            	"poesia",
            	"poggiare",
            	"polenta",
            	"poligono",
            	"pollice",
            	"polmonite",
            	"polpetta",
            	"polso",
            	"poltrona",
            	"polvere",
            	"pomice",
            	"pomodoro",
            	"ponte",
            	"popoloso",
            	"porfido",
            	"poroso",
            	"porpora",
            	"porre",
            	"portata",
            	"posa",
            	"positivo",
            	"possesso",
            	"postulato",
            	"potassio",
            	"potere",
            	"pranzo",
            	"prassi",
            	"pratica",
            	"precluso",
            	"predica",
            	"prefisso",
            	"pregiato",
            	"prelievo",
            	"premere",
            	"prenotare",
            	"preparato",
            	"presenza",
            	"pretesto",
            	"prevalso",
            	"prima",
            	"principe",
            	"privato",
            	"problema",
            	"procura",
            	"produrre",
            	"profumo",
            	"progetto",
            	"prolunga",
            	"promessa",
            	"pronome",
            	"proposta",
            	"proroga",
            	"proteso",
            	"prova",
            	"prudente",
            	"prugna",
            	"prurito",
            	"psiche",
            	"pubblico",
            	"pudica",
            	"pugilato",
            	"pugno",
            	"pulce",
            	"pulito",
            	"pulsante",
            	"puntare",
            	"pupazzo",
            	"pupilla",
            	"puro",
            	"quadro",
            	"qualcosa",
            	"quasi",
            	"querela",
            	"quota",
            	"raccolto",
            	"raddoppio",
            	"radicale",
            	"radunato",
            	"raffica",
            	"ragazzo",
            	"ragione",
            	"ragno",
            	"ramarro",
            	"ramingo",
            	"ramo",
            	"randagio",
            	"rantolare",
            	"rapato",
            	"rapina",
            	"rappreso",
            	"rasatura",
            	"raschiato",
            	"rasente",
            	"rassegna",
            	"rastrello",
            	"rata",
            	"ravveduto",
            	"reale",
            	"recepire",
            	"recinto",
            	"recluta",
            	"recondito",
            	"recupero",
            	"reddito",
            	"redimere",
            	"regalato",
            	"registro",
            	"regola",
            	"regresso",
            	"relazione",
            	"remare",
            	"remoto",
            	"renna",
            	"replica",
            	"reprimere",
            	"reputare",
            	"resa",
            	"residente",
            	"responso",
            	"restauro",
            	"rete",
            	"retina",
            	"retorica",
            	"rettifica",
            	"revocato",
            	"riassunto",
            	"ribadire",
            	"ribelle",
            	"ribrezzo",
            	"ricarica",
            	"ricco",
            	"ricevere",
            	"riciclato",
            	"ricordo",
            	"ricreduto",
            	"ridicolo",
            	"ridurre",
            	"rifasare",
            	"riflesso",
            	"riforma",
            	"rifugio",
            	"rigare",
            	"rigettato",
            	"righello",
            	"rilassato",
            	"rilevato",
            	"rimanere",
            	"rimbalzo",
            	"rimedio",
            	"rimorchio",
            	"rinascita",
            	"rincaro",
            	"rinforzo",
            	"rinnovo",
            	"rinomato",
            	"rinsavito",
            	"rintocco",
            	"rinuncia",
            	"rinvenire",
            	"riparato",
            	"ripetuto",
            	"ripieno",
            	"riportare",
            	"ripresa",
            	"ripulire",
            	"risata",
            	"rischio",
            	"riserva",
            	"risibile",
            	"riso",
            	"rispetto",
            	"ristoro",
            	"risultato",
            	"risvolto",
            	"ritardo",
            	"ritegno",
            	"ritmico",
            	"ritrovo",
            	"riunione",
            	"riva",
            	"riverso",
            	"rivincita",
            	"rivolto",
            	"rizoma",
            	"roba",
            	"robotico",
            	"robusto",
            	"roccia",
            	"roco",
            	"rodaggio",
            	"rodere",
            	"roditore",
            	"rogito",
            	"rollio",
            	"romantico",
            	"rompere",
            	"ronzio",
            	"rosolare",
            	"rospo",
            	"rotante",
            	"rotondo",
            	"rotula",
            	"rovescio",
            	"rubizzo",
            	"rubrica",
            	"ruga",
            	"rullino",
            	"rumine",
            	"rumoroso",
            	"ruolo",
            	"rupe",
            	"russare",
            	"rustico",
            	"sabato",
            	"sabbiare",
            	"sabotato",
            	"sagoma",
            	"salasso",
            	"saldatura",
            	"salgemma",
            	"salivare",
            	"salmone",
            	"salone",
            	"saltare",
            	"saluto",
            	"salvo",
            	"sapere",
            	"sapido",
            	"saporito",
            	"saraceno",
            	"sarcasmo",
            	"sarto",
            	"sassoso",
            	"satellite",
            	"satira",
            	"satollo",
            	"saturno",
            	"savana",
            	"savio",
            	"saziato",
            	"sbadiglio",
            	"sbalzo",
            	"sbancato",
            	"sbarra",
            	"sbattere",
            	"sbavare",
            	"sbendare",
            	"sbirciare",
            	"sbloccato",
            	"sbocciato",
            	"sbrinare",
            	"sbruffone",
            	"sbuffare",
            	"scabroso",
            	"scadenza",
            	"scala",
            	"scambiare",
            	"scandalo",
            	"scapola",
            	"scarso",
            	"scatenare",
            	"scavato",
            	"scelto",
            	"scenico",
            	"scettro",
            	"scheda",
            	"schiena",
            	"sciarpa",
            	"scienza",
            	"scindere",
            	"scippo",
            	"sciroppo",
            	"scivolo",
            	"sclerare",
            	"scodella",
            	"scolpito",
            	"scomparto",
            	"sconforto",
            	"scoprire",
            	"scorta",
            	"scossone",
            	"scozzese",
            	"scriba",
            	"scrollare",
            	"scrutinio",
            	"scuderia",
            	"scultore",
            	"scuola",
            	"scuro",
            	"scusare",
            	"sdebitare",
            	"sdoganare",
            	"seccatura",
            	"secondo",
            	"sedano",
            	"seggiola",
            	"segnalato",
            	"segregato",
            	"seguito",
            	"selciato",
            	"selettivo",
            	"sella",
            	"selvaggio",
            	"semaforo",
            	"sembrare",
            	"seme",
            	"seminato",
            	"sempre",
            	"senso",
            	"sentire",
            	"sepolto",
            	"sequenza",
            	"serata",
            	"serbato",
            	"sereno",
            	"serio",
            	"serpente",
            	"serraglio",
            	"servire",
            	"sestina",
            	"setola",
            	"settimana",
            	"sfacelo",
            	"sfaldare",
            	"sfamato",
            	"sfarzoso",
            	"sfaticato",
            	"sfera",
            	"sfida",
            	"sfilato",
            	"sfinge",
            	"sfocato",
            	"sfoderare",
            	"sfogo",
            	"sfoltire",
            	"sforzato",
            	"sfratto",
            	"sfruttato",
            	"sfuggito",
            	"sfumare",
            	"sfuso",
            	"sgabello",
            	"sgarbato",
            	"sgonfiare",
            	"sgorbio",
            	"sgrassato",
            	"sguardo",
            	"sibilo",
            	"siccome",
            	"sierra",
            	"sigla",
            	"signore",
            	"silenzio",
            	"sillaba",
            	"simbolo",
            	"simpatico",
            	"simulato",
            	"sinfonia",
            	"singolo",
            	"sinistro",
            	"sino",
            	"sintesi",
            	"sinusoide",
            	"sipario",
            	"sisma",
            	"sistole",
            	"situato",
            	"slitta",
            	"slogatura",
            	"sloveno",
            	"smarrito",
            	"smemorato",
            	"smentito",
            	"smeraldo",
            	"smilzo",
            	"smontare",
            	"smottato",
            	"smussato",
            	"snellire",
            	"snervato",
            	"snodo",
            	"sobbalzo",
            	"sobrio",
            	"soccorso",
            	"sociale",
            	"sodale",
            	"soffitto",
            	"sogno",
            	"soldato",
            	"solenne",
            	"solido",
            	"sollazzo",
            	"solo",
            	"solubile",
            	"solvente",
            	"somatico",
            	"somma",
            	"sonda",
            	"sonetto",
            	"sonnifero",
            	"sopire",
            	"soppeso",
            	"sopra",
            	"sorgere",
            	"sorpasso",
            	"sorriso",
            	"sorso",
            	"sorteggio",
            	"sorvolato",
            	"sospiro",
            	"sosta",
            	"sottile",
            	"spada",
            	"spalla",
            	"spargere",
            	"spatola",
            	"spavento",
            	"spazzola",
            	"specie",
            	"spedire",
            	"spegnere",
            	"spelatura",
            	"speranza",
            	"spessore",
            	"spettrale",
            	"spezzato",
            	"spia",
            	"spigoloso",
            	"spillato",
            	"spinoso",
            	"spirale",
            	"splendido",
            	"sportivo",
            	"sposo",
            	"spranga",
            	"sprecare",
            	"spronato",
            	"spruzzo",
            	"spuntino",
            	"squillo",
            	"sradicare",
            	"srotolato",
            	"stabile",
            	"stacco",
            	"staffa",
            	"stagnare",
            	"stampato",
            	"stantio",
            	"starnuto",
            	"stasera",
            	"statuto",
            	"stelo",
            	"steppa",
            	"sterzo",
            	"stiletto",
            	"stima",
            	"stirpe",
            	"stivale",
            	"stizzoso",
            	"stonato",
            	"storico",
            	"strappo",
            	"stregato",
            	"stridulo",
            	"strozzare",
            	"strutto",
            	"stuccare",
            	"stufo",
            	"stupendo",
            	"subentro",
            	"succoso",
            	"sudore",
            	"suggerito",
            	"sugo",
            	"sultano",
            	"suonare",
            	"superbo",
            	"supporto",
            	"surgelato",
            	"surrogato",
            	"sussurro",
            	"sutura",
            	"svagare",
            	"svedese",
            	"sveglio",
            	"svelare",
            	"svenuto",
            	"svezia",
            	"sviluppo",
            	"svista",
            	"svizzera",
            	"svolta",
            	"svuotare",
            	"tabacco",
            	"tabulato",
            	"tacciare",
            	"taciturno",
            	"tale",
            	"talismano",
            	"tampone",
            	"tannino",
            	"tara",
            	"tardivo",
            	"targato",
            	"tariffa",
            	"tarpare",
            	"tartaruga",
            	"tasto",
            	"tattico",
            	"taverna",
            	"tavolata",
            	"tazza",
            	"teca",
            	"tecnico",
            	"telefono",
            	"temerario",
            	"tempo",
            	"temuto",
            	"tendone",
            	"tenero",
            	"tensione",
            	"tentacolo",
            	"teorema",
            	"terme",
            	"terrazzo",
            	"terzetto",
            	"tesi",
            	"tesserato",
            	"testato",
            	"tetro",
            	"tettoia",
            	"tifare",
            	"tigella",
            	"timbro",
            	"tinto",
            	"tipico",
            	"tipografo",
            	"tiraggio",
            	"tiro",
            	"titanio",
            	"titolo",
            	"titubante",
            	"tizio",
            	"tizzone",
            	"toccare",
            	"tollerare",
            	"tolto",
            	"tombola",
            	"tomo",
            	"tonfo",
            	"tonsilla",
            	"topazio",
            	"topologia",
            	"toppa",
            	"torba",
            	"tornare",
            	"torrone",
            	"tortora",
            	"toscano",
            	"tossire",
            	"tostatura",
            	"totano",
            	"trabocco",
            	"trachea",
            	"trafila",
            	"tragedia",
            	"tralcio",
            	"tramonto",
            	"transito",
            	"trapano",
            	"trarre",
            	"trasloco",
            	"trattato",
            	"trave",
            	"treccia",
            	"tremolio",
            	"trespolo",
            	"tributo",
            	"tricheco",
            	"trifoglio",
            	"trillo",
            	"trincea",
            	"trio",
            	"tristezza",
            	"triturato",
            	"trivella",
            	"tromba",
            	"trono",
            	"troppo",
            	"trottola",
            	"trovare",
            	"truccato",
            	"tubatura",
            	"tuffato",
            	"tulipano",
            	"tumulto",
            	"tunisia",
            	"turbare",
            	"turchino",
            	"tuta",
            	"tutela",
            	"ubicato",
            	"uccello",
            	"uccisore",
            	"udire",
            	"uditivo",
            	"uffa",
            	"ufficio",
            	"uguale",
            	"ulisse",
            	"ultimato",
            	"umano",
            	"umile",
            	"umorismo",
            	"uncinetto",
            	"ungere",
            	"ungherese",
            	"unicorno",
            	"unificato",
            	"unisono",
            	"unitario",
            	"unte",
            	"uovo",
            	"upupa",
            	"uragano",
            	"urgenza",
            	"urlo",
            	"usanza",
            	"usato",
            	"uscito",
            	"usignolo",
            	"usuraio",
            	"utensile",
            	"utilizzo",
            	"utopia",
            	"vacante",
            	"vaccinato",
            	"vagabondo",
            	"vagliato",
            	"valanga",
            	"valgo",
            	"valico",
            	"valletta",
            	"valoroso",
            	"valutare",
            	"valvola",
            	"vampata",
            	"vangare",
            	"vanitoso",
            	"vano",
            	"vantaggio",
            	"vanvera",
            	"vapore",
            	"varano",
            	"varcato",
            	"variante",
            	"vasca",
            	"vedetta",
            	"vedova",
            	"veduto",
            	"vegetale",
            	"veicolo",
            	"velcro",
            	"velina",
            	"velluto",
            	"veloce",
            	"venato",
            	"vendemmia",
            	"vento",
            	"verace",
            	"verbale",
            	"vergogna",
            	"verifica",
            	"vero",
            	"verruca",
            	"verticale",
            	"vescica",
            	"vessillo",
            	"vestale",
            	"veterano",
            	"vetrina",
            	"vetusto",
            	"viandante",
            	"vibrante",
            	"vicenda",
            	"vichingo",
            	"vicinanza",
            	"vidimare",
            	"vigilia",
            	"vigneto",
            	"vigore",
            	"vile",
            	"villano",
            	"vimini",
            	"vincitore",
            	"viola",
            	"vipera",
            	"virgola",
            	"virologo",
            	"virulento",
            	"viscoso",
            	"visione",
            	"vispo",
            	"vissuto",
            	"visura",
            	"vita",
            	"vitello",
            	"vittima",
            	"vivanda",
            	"vivido",
            	"viziare",
            	"voce",
            	"voga",
            	"volatile",
            	"volere",
            	"volpe",
            	"voragine",
            	"vulcano",
            	"zampogna",
            	"zanna",
            	"zappato",
            	"zattera",
            	"zavorra",
            	"zefiro",
            	"zelante",
            	"zelo",
            	"zenzero",
            	"zerbino",
            	"zibetto",
            	"zinco",
            	"zircone",
            	"zitto",
            	"zolla",
            	"zotico",
            	"zucchero",
            	"zufolo",
            	"zulu",
            	"zuppa"
            ];

            var require$$6 = [
            	"ábaco",
            	"abdomen",
            	"abeja",
            	"abierto",
            	"abogado",
            	"abono",
            	"aborto",
            	"abrazo",
            	"abrir",
            	"abuelo",
            	"abuso",
            	"acabar",
            	"academia",
            	"acceso",
            	"acción",
            	"aceite",
            	"acelga",
            	"acento",
            	"aceptar",
            	"ácido",
            	"aclarar",
            	"acné",
            	"acoger",
            	"acoso",
            	"activo",
            	"acto",
            	"actriz",
            	"actuar",
            	"acudir",
            	"acuerdo",
            	"acusar",
            	"adicto",
            	"admitir",
            	"adoptar",
            	"adorno",
            	"aduana",
            	"adulto",
            	"aéreo",
            	"afectar",
            	"afición",
            	"afinar",
            	"afirmar",
            	"ágil",
            	"agitar",
            	"agonía",
            	"agosto",
            	"agotar",
            	"agregar",
            	"agrio",
            	"agua",
            	"agudo",
            	"águila",
            	"aguja",
            	"ahogo",
            	"ahorro",
            	"aire",
            	"aislar",
            	"ajedrez",
            	"ajeno",
            	"ajuste",
            	"alacrán",
            	"alambre",
            	"alarma",
            	"alba",
            	"álbum",
            	"alcalde",
            	"aldea",
            	"alegre",
            	"alejar",
            	"alerta",
            	"aleta",
            	"alfiler",
            	"alga",
            	"algodón",
            	"aliado",
            	"aliento",
            	"alivio",
            	"alma",
            	"almeja",
            	"almíbar",
            	"altar",
            	"alteza",
            	"altivo",
            	"alto",
            	"altura",
            	"alumno",
            	"alzar",
            	"amable",
            	"amante",
            	"amapola",
            	"amargo",
            	"amasar",
            	"ámbar",
            	"ámbito",
            	"ameno",
            	"amigo",
            	"amistad",
            	"amor",
            	"amparo",
            	"amplio",
            	"ancho",
            	"anciano",
            	"ancla",
            	"andar",
            	"andén",
            	"anemia",
            	"ángulo",
            	"anillo",
            	"ánimo",
            	"anís",
            	"anotar",
            	"antena",
            	"antiguo",
            	"antojo",
            	"anual",
            	"anular",
            	"anuncio",
            	"añadir",
            	"añejo",
            	"año",
            	"apagar",
            	"aparato",
            	"apetito",
            	"apio",
            	"aplicar",
            	"apodo",
            	"aporte",
            	"apoyo",
            	"aprender",
            	"aprobar",
            	"apuesta",
            	"apuro",
            	"arado",
            	"araña",
            	"arar",
            	"árbitro",
            	"árbol",
            	"arbusto",
            	"archivo",
            	"arco",
            	"arder",
            	"ardilla",
            	"arduo",
            	"área",
            	"árido",
            	"aries",
            	"armonía",
            	"arnés",
            	"aroma",
            	"arpa",
            	"arpón",
            	"arreglo",
            	"arroz",
            	"arruga",
            	"arte",
            	"artista",
            	"asa",
            	"asado",
            	"asalto",
            	"ascenso",
            	"asegurar",
            	"aseo",
            	"asesor",
            	"asiento",
            	"asilo",
            	"asistir",
            	"asno",
            	"asombro",
            	"áspero",
            	"astilla",
            	"astro",
            	"astuto",
            	"asumir",
            	"asunto",
            	"atajo",
            	"ataque",
            	"atar",
            	"atento",
            	"ateo",
            	"ático",
            	"atleta",
            	"átomo",
            	"atraer",
            	"atroz",
            	"atún",
            	"audaz",
            	"audio",
            	"auge",
            	"aula",
            	"aumento",
            	"ausente",
            	"autor",
            	"aval",
            	"avance",
            	"avaro",
            	"ave",
            	"avellana",
            	"avena",
            	"avestruz",
            	"avión",
            	"aviso",
            	"ayer",
            	"ayuda",
            	"ayuno",
            	"azafrán",
            	"azar",
            	"azote",
            	"azúcar",
            	"azufre",
            	"azul",
            	"baba",
            	"babor",
            	"bache",
            	"bahía",
            	"baile",
            	"bajar",
            	"balanza",
            	"balcón",
            	"balde",
            	"bambú",
            	"banco",
            	"banda",
            	"baño",
            	"barba",
            	"barco",
            	"barniz",
            	"barro",
            	"báscula",
            	"bastón",
            	"basura",
            	"batalla",
            	"batería",
            	"batir",
            	"batuta",
            	"baúl",
            	"bazar",
            	"bebé",
            	"bebida",
            	"bello",
            	"besar",
            	"beso",
            	"bestia",
            	"bicho",
            	"bien",
            	"bingo",
            	"blanco",
            	"bloque",
            	"blusa",
            	"boa",
            	"bobina",
            	"bobo",
            	"boca",
            	"bocina",
            	"boda",
            	"bodega",
            	"boina",
            	"bola",
            	"bolero",
            	"bolsa",
            	"bomba",
            	"bondad",
            	"bonito",
            	"bono",
            	"bonsái",
            	"borde",
            	"borrar",
            	"bosque",
            	"bote",
            	"botín",
            	"bóveda",
            	"bozal",
            	"bravo",
            	"brazo",
            	"brecha",
            	"breve",
            	"brillo",
            	"brinco",
            	"brisa",
            	"broca",
            	"broma",
            	"bronce",
            	"brote",
            	"bruja",
            	"brusco",
            	"bruto",
            	"buceo",
            	"bucle",
            	"bueno",
            	"buey",
            	"bufanda",
            	"bufón",
            	"búho",
            	"buitre",
            	"bulto",
            	"burbuja",
            	"burla",
            	"burro",
            	"buscar",
            	"butaca",
            	"buzón",
            	"caballo",
            	"cabeza",
            	"cabina",
            	"cabra",
            	"cacao",
            	"cadáver",
            	"cadena",
            	"caer",
            	"café",
            	"caída",
            	"caimán",
            	"caja",
            	"cajón",
            	"cal",
            	"calamar",
            	"calcio",
            	"caldo",
            	"calidad",
            	"calle",
            	"calma",
            	"calor",
            	"calvo",
            	"cama",
            	"cambio",
            	"camello",
            	"camino",
            	"campo",
            	"cáncer",
            	"candil",
            	"canela",
            	"canguro",
            	"canica",
            	"canto",
            	"caña",
            	"cañón",
            	"caoba",
            	"caos",
            	"capaz",
            	"capitán",
            	"capote",
            	"captar",
            	"capucha",
            	"cara",
            	"carbón",
            	"cárcel",
            	"careta",
            	"carga",
            	"cariño",
            	"carne",
            	"carpeta",
            	"carro",
            	"carta",
            	"casa",
            	"casco",
            	"casero",
            	"caspa",
            	"castor",
            	"catorce",
            	"catre",
            	"caudal",
            	"causa",
            	"cazo",
            	"cebolla",
            	"ceder",
            	"cedro",
            	"celda",
            	"célebre",
            	"celoso",
            	"célula",
            	"cemento",
            	"ceniza",
            	"centro",
            	"cerca",
            	"cerdo",
            	"cereza",
            	"cero",
            	"cerrar",
            	"certeza",
            	"césped",
            	"cetro",
            	"chacal",
            	"chaleco",
            	"champú",
            	"chancla",
            	"chapa",
            	"charla",
            	"chico",
            	"chiste",
            	"chivo",
            	"choque",
            	"choza",
            	"chuleta",
            	"chupar",
            	"ciclón",
            	"ciego",
            	"cielo",
            	"cien",
            	"cierto",
            	"cifra",
            	"cigarro",
            	"cima",
            	"cinco",
            	"cine",
            	"cinta",
            	"ciprés",
            	"circo",
            	"ciruela",
            	"cisne",
            	"cita",
            	"ciudad",
            	"clamor",
            	"clan",
            	"claro",
            	"clase",
            	"clave",
            	"cliente",
            	"clima",
            	"clínica",
            	"cobre",
            	"cocción",
            	"cochino",
            	"cocina",
            	"coco",
            	"código",
            	"codo",
            	"cofre",
            	"coger",
            	"cohete",
            	"cojín",
            	"cojo",
            	"cola",
            	"colcha",
            	"colegio",
            	"colgar",
            	"colina",
            	"collar",
            	"colmo",
            	"columna",
            	"combate",
            	"comer",
            	"comida",
            	"cómodo",
            	"compra",
            	"conde",
            	"conejo",
            	"conga",
            	"conocer",
            	"consejo",
            	"contar",
            	"copa",
            	"copia",
            	"corazón",
            	"corbata",
            	"corcho",
            	"cordón",
            	"corona",
            	"correr",
            	"coser",
            	"cosmos",
            	"costa",
            	"cráneo",
            	"cráter",
            	"crear",
            	"crecer",
            	"creído",
            	"crema",
            	"cría",
            	"crimen",
            	"cripta",
            	"crisis",
            	"cromo",
            	"crónica",
            	"croqueta",
            	"crudo",
            	"cruz",
            	"cuadro",
            	"cuarto",
            	"cuatro",
            	"cubo",
            	"cubrir",
            	"cuchara",
            	"cuello",
            	"cuento",
            	"cuerda",
            	"cuesta",
            	"cueva",
            	"cuidar",
            	"culebra",
            	"culpa",
            	"culto",
            	"cumbre",
            	"cumplir",
            	"cuna",
            	"cuneta",
            	"cuota",
            	"cupón",
            	"cúpula",
            	"curar",
            	"curioso",
            	"curso",
            	"curva",
            	"cutis",
            	"dama",
            	"danza",
            	"dar",
            	"dardo",
            	"dátil",
            	"deber",
            	"débil",
            	"década",
            	"decir",
            	"dedo",
            	"defensa",
            	"definir",
            	"dejar",
            	"delfín",
            	"delgado",
            	"delito",
            	"demora",
            	"denso",
            	"dental",
            	"deporte",
            	"derecho",
            	"derrota",
            	"desayuno",
            	"deseo",
            	"desfile",
            	"desnudo",
            	"destino",
            	"desvío",
            	"detalle",
            	"detener",
            	"deuda",
            	"día",
            	"diablo",
            	"diadema",
            	"diamante",
            	"diana",
            	"diario",
            	"dibujo",
            	"dictar",
            	"diente",
            	"dieta",
            	"diez",
            	"difícil",
            	"digno",
            	"dilema",
            	"diluir",
            	"dinero",
            	"directo",
            	"dirigir",
            	"disco",
            	"diseño",
            	"disfraz",
            	"diva",
            	"divino",
            	"doble",
            	"doce",
            	"dolor",
            	"domingo",
            	"don",
            	"donar",
            	"dorado",
            	"dormir",
            	"dorso",
            	"dos",
            	"dosis",
            	"dragón",
            	"droga",
            	"ducha",
            	"duda",
            	"duelo",
            	"dueño",
            	"dulce",
            	"dúo",
            	"duque",
            	"durar",
            	"dureza",
            	"duro",
            	"ébano",
            	"ebrio",
            	"echar",
            	"eco",
            	"ecuador",
            	"edad",
            	"edición",
            	"edificio",
            	"editor",
            	"educar",
            	"efecto",
            	"eficaz",
            	"eje",
            	"ejemplo",
            	"elefante",
            	"elegir",
            	"elemento",
            	"elevar",
            	"elipse",
            	"élite",
            	"elixir",
            	"elogio",
            	"eludir",
            	"embudo",
            	"emitir",
            	"emoción",
            	"empate",
            	"empeño",
            	"empleo",
            	"empresa",
            	"enano",
            	"encargo",
            	"enchufe",
            	"encía",
            	"enemigo",
            	"enero",
            	"enfado",
            	"enfermo",
            	"engaño",
            	"enigma",
            	"enlace",
            	"enorme",
            	"enredo",
            	"ensayo",
            	"enseñar",
            	"entero",
            	"entrar",
            	"envase",
            	"envío",
            	"época",
            	"equipo",
            	"erizo",
            	"escala",
            	"escena",
            	"escolar",
            	"escribir",
            	"escudo",
            	"esencia",
            	"esfera",
            	"esfuerzo",
            	"espada",
            	"espejo",
            	"espía",
            	"esposa",
            	"espuma",
            	"esquí",
            	"estar",
            	"este",
            	"estilo",
            	"estufa",
            	"etapa",
            	"eterno",
            	"ética",
            	"etnia",
            	"evadir",
            	"evaluar",
            	"evento",
            	"evitar",
            	"exacto",
            	"examen",
            	"exceso",
            	"excusa",
            	"exento",
            	"exigir",
            	"exilio",
            	"existir",
            	"éxito",
            	"experto",
            	"explicar",
            	"exponer",
            	"extremo",
            	"fábrica",
            	"fábula",
            	"fachada",
            	"fácil",
            	"factor",
            	"faena",
            	"faja",
            	"falda",
            	"fallo",
            	"falso",
            	"faltar",
            	"fama",
            	"familia",
            	"famoso",
            	"faraón",
            	"farmacia",
            	"farol",
            	"farsa",
            	"fase",
            	"fatiga",
            	"fauna",
            	"favor",
            	"fax",
            	"febrero",
            	"fecha",
            	"feliz",
            	"feo",
            	"feria",
            	"feroz",
            	"fértil",
            	"fervor",
            	"festín",
            	"fiable",
            	"fianza",
            	"fiar",
            	"fibra",
            	"ficción",
            	"ficha",
            	"fideo",
            	"fiebre",
            	"fiel",
            	"fiera",
            	"fiesta",
            	"figura",
            	"fijar",
            	"fijo",
            	"fila",
            	"filete",
            	"filial",
            	"filtro",
            	"fin",
            	"finca",
            	"fingir",
            	"finito",
            	"firma",
            	"flaco",
            	"flauta",
            	"flecha",
            	"flor",
            	"flota",
            	"fluir",
            	"flujo",
            	"flúor",
            	"fobia",
            	"foca",
            	"fogata",
            	"fogón",
            	"folio",
            	"folleto",
            	"fondo",
            	"forma",
            	"forro",
            	"fortuna",
            	"forzar",
            	"fosa",
            	"foto",
            	"fracaso",
            	"frágil",
            	"franja",
            	"frase",
            	"fraude",
            	"freír",
            	"freno",
            	"fresa",
            	"frío",
            	"frito",
            	"fruta",
            	"fuego",
            	"fuente",
            	"fuerza",
            	"fuga",
            	"fumar",
            	"función",
            	"funda",
            	"furgón",
            	"furia",
            	"fusil",
            	"fútbol",
            	"futuro",
            	"gacela",
            	"gafas",
            	"gaita",
            	"gajo",
            	"gala",
            	"galería",
            	"gallo",
            	"gamba",
            	"ganar",
            	"gancho",
            	"ganga",
            	"ganso",
            	"garaje",
            	"garza",
            	"gasolina",
            	"gastar",
            	"gato",
            	"gavilán",
            	"gemelo",
            	"gemir",
            	"gen",
            	"género",
            	"genio",
            	"gente",
            	"geranio",
            	"gerente",
            	"germen",
            	"gesto",
            	"gigante",
            	"gimnasio",
            	"girar",
            	"giro",
            	"glaciar",
            	"globo",
            	"gloria",
            	"gol",
            	"golfo",
            	"goloso",
            	"golpe",
            	"goma",
            	"gordo",
            	"gorila",
            	"gorra",
            	"gota",
            	"goteo",
            	"gozar",
            	"grada",
            	"gráfico",
            	"grano",
            	"grasa",
            	"gratis",
            	"grave",
            	"grieta",
            	"grillo",
            	"gripe",
            	"gris",
            	"grito",
            	"grosor",
            	"grúa",
            	"grueso",
            	"grumo",
            	"grupo",
            	"guante",
            	"guapo",
            	"guardia",
            	"guerra",
            	"guía",
            	"guiño",
            	"guion",
            	"guiso",
            	"guitarra",
            	"gusano",
            	"gustar",
            	"haber",
            	"hábil",
            	"hablar",
            	"hacer",
            	"hacha",
            	"hada",
            	"hallar",
            	"hamaca",
            	"harina",
            	"haz",
            	"hazaña",
            	"hebilla",
            	"hebra",
            	"hecho",
            	"helado",
            	"helio",
            	"hembra",
            	"herir",
            	"hermano",
            	"héroe",
            	"hervir",
            	"hielo",
            	"hierro",
            	"hígado",
            	"higiene",
            	"hijo",
            	"himno",
            	"historia",
            	"hocico",
            	"hogar",
            	"hoguera",
            	"hoja",
            	"hombre",
            	"hongo",
            	"honor",
            	"honra",
            	"hora",
            	"hormiga",
            	"horno",
            	"hostil",
            	"hoyo",
            	"hueco",
            	"huelga",
            	"huerta",
            	"hueso",
            	"huevo",
            	"huida",
            	"huir",
            	"humano",
            	"húmedo",
            	"humilde",
            	"humo",
            	"hundir",
            	"huracán",
            	"hurto",
            	"icono",
            	"ideal",
            	"idioma",
            	"ídolo",
            	"iglesia",
            	"iglú",
            	"igual",
            	"ilegal",
            	"ilusión",
            	"imagen",
            	"imán",
            	"imitar",
            	"impar",
            	"imperio",
            	"imponer",
            	"impulso",
            	"incapaz",
            	"índice",
            	"inerte",
            	"infiel",
            	"informe",
            	"ingenio",
            	"inicio",
            	"inmenso",
            	"inmune",
            	"innato",
            	"insecto",
            	"instante",
            	"interés",
            	"íntimo",
            	"intuir",
            	"inútil",
            	"invierno",
            	"ira",
            	"iris",
            	"ironía",
            	"isla",
            	"islote",
            	"jabalí",
            	"jabón",
            	"jamón",
            	"jarabe",
            	"jardín",
            	"jarra",
            	"jaula",
            	"jazmín",
            	"jefe",
            	"jeringa",
            	"jinete",
            	"jornada",
            	"joroba",
            	"joven",
            	"joya",
            	"juerga",
            	"jueves",
            	"juez",
            	"jugador",
            	"jugo",
            	"juguete",
            	"juicio",
            	"junco",
            	"jungla",
            	"junio",
            	"juntar",
            	"júpiter",
            	"jurar",
            	"justo",
            	"juvenil",
            	"juzgar",
            	"kilo",
            	"koala",
            	"labio",
            	"lacio",
            	"lacra",
            	"lado",
            	"ladrón",
            	"lagarto",
            	"lágrima",
            	"laguna",
            	"laico",
            	"lamer",
            	"lámina",
            	"lámpara",
            	"lana",
            	"lancha",
            	"langosta",
            	"lanza",
            	"lápiz",
            	"largo",
            	"larva",
            	"lástima",
            	"lata",
            	"látex",
            	"latir",
            	"laurel",
            	"lavar",
            	"lazo",
            	"leal",
            	"lección",
            	"leche",
            	"lector",
            	"leer",
            	"legión",
            	"legumbre",
            	"lejano",
            	"lengua",
            	"lento",
            	"leña",
            	"león",
            	"leopardo",
            	"lesión",
            	"letal",
            	"letra",
            	"leve",
            	"leyenda",
            	"libertad",
            	"libro",
            	"licor",
            	"líder",
            	"lidiar",
            	"lienzo",
            	"liga",
            	"ligero",
            	"lima",
            	"límite",
            	"limón",
            	"limpio",
            	"lince",
            	"lindo",
            	"línea",
            	"lingote",
            	"lino",
            	"linterna",
            	"líquido",
            	"liso",
            	"lista",
            	"litera",
            	"litio",
            	"litro",
            	"llaga",
            	"llama",
            	"llanto",
            	"llave",
            	"llegar",
            	"llenar",
            	"llevar",
            	"llorar",
            	"llover",
            	"lluvia",
            	"lobo",
            	"loción",
            	"loco",
            	"locura",
            	"lógica",
            	"logro",
            	"lombriz",
            	"lomo",
            	"lonja",
            	"lote",
            	"lucha",
            	"lucir",
            	"lugar",
            	"lujo",
            	"luna",
            	"lunes",
            	"lupa",
            	"lustro",
            	"luto",
            	"luz",
            	"maceta",
            	"macho",
            	"madera",
            	"madre",
            	"maduro",
            	"maestro",
            	"mafia",
            	"magia",
            	"mago",
            	"maíz",
            	"maldad",
            	"maleta",
            	"malla",
            	"malo",
            	"mamá",
            	"mambo",
            	"mamut",
            	"manco",
            	"mando",
            	"manejar",
            	"manga",
            	"maniquí",
            	"manjar",
            	"mano",
            	"manso",
            	"manta",
            	"mañana",
            	"mapa",
            	"máquina",
            	"mar",
            	"marco",
            	"marea",
            	"marfil",
            	"margen",
            	"marido",
            	"mármol",
            	"marrón",
            	"martes",
            	"marzo",
            	"masa",
            	"máscara",
            	"masivo",
            	"matar",
            	"materia",
            	"matiz",
            	"matriz",
            	"máximo",
            	"mayor",
            	"mazorca",
            	"mecha",
            	"medalla",
            	"medio",
            	"médula",
            	"mejilla",
            	"mejor",
            	"melena",
            	"melón",
            	"memoria",
            	"menor",
            	"mensaje",
            	"mente",
            	"menú",
            	"mercado",
            	"merengue",
            	"mérito",
            	"mes",
            	"mesón",
            	"meta",
            	"meter",
            	"método",
            	"metro",
            	"mezcla",
            	"miedo",
            	"miel",
            	"miembro",
            	"miga",
            	"mil",
            	"milagro",
            	"militar",
            	"millón",
            	"mimo",
            	"mina",
            	"minero",
            	"mínimo",
            	"minuto",
            	"miope",
            	"mirar",
            	"misa",
            	"miseria",
            	"misil",
            	"mismo",
            	"mitad",
            	"mito",
            	"mochila",
            	"moción",
            	"moda",
            	"modelo",
            	"moho",
            	"mojar",
            	"molde",
            	"moler",
            	"molino",
            	"momento",
            	"momia",
            	"monarca",
            	"moneda",
            	"monja",
            	"monto",
            	"moño",
            	"morada",
            	"morder",
            	"moreno",
            	"morir",
            	"morro",
            	"morsa",
            	"mortal",
            	"mosca",
            	"mostrar",
            	"motivo",
            	"mover",
            	"móvil",
            	"mozo",
            	"mucho",
            	"mudar",
            	"mueble",
            	"muela",
            	"muerte",
            	"muestra",
            	"mugre",
            	"mujer",
            	"mula",
            	"muleta",
            	"multa",
            	"mundo",
            	"muñeca",
            	"mural",
            	"muro",
            	"músculo",
            	"museo",
            	"musgo",
            	"música",
            	"muslo",
            	"nácar",
            	"nación",
            	"nadar",
            	"naipe",
            	"naranja",
            	"nariz",
            	"narrar",
            	"nasal",
            	"natal",
            	"nativo",
            	"natural",
            	"náusea",
            	"naval",
            	"nave",
            	"navidad",
            	"necio",
            	"néctar",
            	"negar",
            	"negocio",
            	"negro",
            	"neón",
            	"nervio",
            	"neto",
            	"neutro",
            	"nevar",
            	"nevera",
            	"nicho",
            	"nido",
            	"niebla",
            	"nieto",
            	"niñez",
            	"niño",
            	"nítido",
            	"nivel",
            	"nobleza",
            	"noche",
            	"nómina",
            	"noria",
            	"norma",
            	"norte",
            	"nota",
            	"noticia",
            	"novato",
            	"novela",
            	"novio",
            	"nube",
            	"nuca",
            	"núcleo",
            	"nudillo",
            	"nudo",
            	"nuera",
            	"nueve",
            	"nuez",
            	"nulo",
            	"número",
            	"nutria",
            	"oasis",
            	"obeso",
            	"obispo",
            	"objeto",
            	"obra",
            	"obrero",
            	"observar",
            	"obtener",
            	"obvio",
            	"oca",
            	"ocaso",
            	"océano",
            	"ochenta",
            	"ocho",
            	"ocio",
            	"ocre",
            	"octavo",
            	"octubre",
            	"oculto",
            	"ocupar",
            	"ocurrir",
            	"odiar",
            	"odio",
            	"odisea",
            	"oeste",
            	"ofensa",
            	"oferta",
            	"oficio",
            	"ofrecer",
            	"ogro",
            	"oído",
            	"oír",
            	"ojo",
            	"ola",
            	"oleada",
            	"olfato",
            	"olivo",
            	"olla",
            	"olmo",
            	"olor",
            	"olvido",
            	"ombligo",
            	"onda",
            	"onza",
            	"opaco",
            	"opción",
            	"ópera",
            	"opinar",
            	"oponer",
            	"optar",
            	"óptica",
            	"opuesto",
            	"oración",
            	"orador",
            	"oral",
            	"órbita",
            	"orca",
            	"orden",
            	"oreja",
            	"órgano",
            	"orgía",
            	"orgullo",
            	"oriente",
            	"origen",
            	"orilla",
            	"oro",
            	"orquesta",
            	"oruga",
            	"osadía",
            	"oscuro",
            	"osezno",
            	"oso",
            	"ostra",
            	"otoño",
            	"otro",
            	"oveja",
            	"óvulo",
            	"óxido",
            	"oxígeno",
            	"oyente",
            	"ozono",
            	"pacto",
            	"padre",
            	"paella",
            	"página",
            	"pago",
            	"país",
            	"pájaro",
            	"palabra",
            	"palco",
            	"paleta",
            	"pálido",
            	"palma",
            	"paloma",
            	"palpar",
            	"pan",
            	"panal",
            	"pánico",
            	"pantera",
            	"pañuelo",
            	"papá",
            	"papel",
            	"papilla",
            	"paquete",
            	"parar",
            	"parcela",
            	"pared",
            	"parir",
            	"paro",
            	"párpado",
            	"parque",
            	"párrafo",
            	"parte",
            	"pasar",
            	"paseo",
            	"pasión",
            	"paso",
            	"pasta",
            	"pata",
            	"patio",
            	"patria",
            	"pausa",
            	"pauta",
            	"pavo",
            	"payaso",
            	"peatón",
            	"pecado",
            	"pecera",
            	"pecho",
            	"pedal",
            	"pedir",
            	"pegar",
            	"peine",
            	"pelar",
            	"peldaño",
            	"pelea",
            	"peligro",
            	"pellejo",
            	"pelo",
            	"peluca",
            	"pena",
            	"pensar",
            	"peñón",
            	"peón",
            	"peor",
            	"pepino",
            	"pequeño",
            	"pera",
            	"percha",
            	"perder",
            	"pereza",
            	"perfil",
            	"perico",
            	"perla",
            	"permiso",
            	"perro",
            	"persona",
            	"pesa",
            	"pesca",
            	"pésimo",
            	"pestaña",
            	"pétalo",
            	"petróleo",
            	"pez",
            	"pezuña",
            	"picar",
            	"pichón",
            	"pie",
            	"piedra",
            	"pierna",
            	"pieza",
            	"pijama",
            	"pilar",
            	"piloto",
            	"pimienta",
            	"pino",
            	"pintor",
            	"pinza",
            	"piña",
            	"piojo",
            	"pipa",
            	"pirata",
            	"pisar",
            	"piscina",
            	"piso",
            	"pista",
            	"pitón",
            	"pizca",
            	"placa",
            	"plan",
            	"plata",
            	"playa",
            	"plaza",
            	"pleito",
            	"pleno",
            	"plomo",
            	"pluma",
            	"plural",
            	"pobre",
            	"poco",
            	"poder",
            	"podio",
            	"poema",
            	"poesía",
            	"poeta",
            	"polen",
            	"policía",
            	"pollo",
            	"polvo",
            	"pomada",
            	"pomelo",
            	"pomo",
            	"pompa",
            	"poner",
            	"porción",
            	"portal",
            	"posada",
            	"poseer",
            	"posible",
            	"poste",
            	"potencia",
            	"potro",
            	"pozo",
            	"prado",
            	"precoz",
            	"pregunta",
            	"premio",
            	"prensa",
            	"preso",
            	"previo",
            	"primo",
            	"príncipe",
            	"prisión",
            	"privar",
            	"proa",
            	"probar",
            	"proceso",
            	"producto",
            	"proeza",
            	"profesor",
            	"programa",
            	"prole",
            	"promesa",
            	"pronto",
            	"propio",
            	"próximo",
            	"prueba",
            	"público",
            	"puchero",
            	"pudor",
            	"pueblo",
            	"puerta",
            	"puesto",
            	"pulga",
            	"pulir",
            	"pulmón",
            	"pulpo",
            	"pulso",
            	"puma",
            	"punto",
            	"puñal",
            	"puño",
            	"pupa",
            	"pupila",
            	"puré",
            	"quedar",
            	"queja",
            	"quemar",
            	"querer",
            	"queso",
            	"quieto",
            	"química",
            	"quince",
            	"quitar",
            	"rábano",
            	"rabia",
            	"rabo",
            	"ración",
            	"radical",
            	"raíz",
            	"rama",
            	"rampa",
            	"rancho",
            	"rango",
            	"rapaz",
            	"rápido",
            	"rapto",
            	"rasgo",
            	"raspa",
            	"rato",
            	"rayo",
            	"raza",
            	"razón",
            	"reacción",
            	"realidad",
            	"rebaño",
            	"rebote",
            	"recaer",
            	"receta",
            	"rechazo",
            	"recoger",
            	"recreo",
            	"recto",
            	"recurso",
            	"red",
            	"redondo",
            	"reducir",
            	"reflejo",
            	"reforma",
            	"refrán",
            	"refugio",
            	"regalo",
            	"regir",
            	"regla",
            	"regreso",
            	"rehén",
            	"reino",
            	"reír",
            	"reja",
            	"relato",
            	"relevo",
            	"relieve",
            	"relleno",
            	"reloj",
            	"remar",
            	"remedio",
            	"remo",
            	"rencor",
            	"rendir",
            	"renta",
            	"reparto",
            	"repetir",
            	"reposo",
            	"reptil",
            	"res",
            	"rescate",
            	"resina",
            	"respeto",
            	"resto",
            	"resumen",
            	"retiro",
            	"retorno",
            	"retrato",
            	"reunir",
            	"revés",
            	"revista",
            	"rey",
            	"rezar",
            	"rico",
            	"riego",
            	"rienda",
            	"riesgo",
            	"rifa",
            	"rígido",
            	"rigor",
            	"rincón",
            	"riñón",
            	"río",
            	"riqueza",
            	"risa",
            	"ritmo",
            	"rito",
            	"rizo",
            	"roble",
            	"roce",
            	"rociar",
            	"rodar",
            	"rodeo",
            	"rodilla",
            	"roer",
            	"rojizo",
            	"rojo",
            	"romero",
            	"romper",
            	"ron",
            	"ronco",
            	"ronda",
            	"ropa",
            	"ropero",
            	"rosa",
            	"rosca",
            	"rostro",
            	"rotar",
            	"rubí",
            	"rubor",
            	"rudo",
            	"rueda",
            	"rugir",
            	"ruido",
            	"ruina",
            	"ruleta",
            	"rulo",
            	"rumbo",
            	"rumor",
            	"ruptura",
            	"ruta",
            	"rutina",
            	"sábado",
            	"saber",
            	"sabio",
            	"sable",
            	"sacar",
            	"sagaz",
            	"sagrado",
            	"sala",
            	"saldo",
            	"salero",
            	"salir",
            	"salmón",
            	"salón",
            	"salsa",
            	"salto",
            	"salud",
            	"salvar",
            	"samba",
            	"sanción",
            	"sandía",
            	"sanear",
            	"sangre",
            	"sanidad",
            	"sano",
            	"santo",
            	"sapo",
            	"saque",
            	"sardina",
            	"sartén",
            	"sastre",
            	"satán",
            	"sauna",
            	"saxofón",
            	"sección",
            	"seco",
            	"secreto",
            	"secta",
            	"sed",
            	"seguir",
            	"seis",
            	"sello",
            	"selva",
            	"semana",
            	"semilla",
            	"senda",
            	"sensor",
            	"señal",
            	"señor",
            	"separar",
            	"sepia",
            	"sequía",
            	"ser",
            	"serie",
            	"sermón",
            	"servir",
            	"sesenta",
            	"sesión",
            	"seta",
            	"setenta",
            	"severo",
            	"sexo",
            	"sexto",
            	"sidra",
            	"siesta",
            	"siete",
            	"siglo",
            	"signo",
            	"sílaba",
            	"silbar",
            	"silencio",
            	"silla",
            	"símbolo",
            	"simio",
            	"sirena",
            	"sistema",
            	"sitio",
            	"situar",
            	"sobre",
            	"socio",
            	"sodio",
            	"sol",
            	"solapa",
            	"soldado",
            	"soledad",
            	"sólido",
            	"soltar",
            	"solución",
            	"sombra",
            	"sondeo",
            	"sonido",
            	"sonoro",
            	"sonrisa",
            	"sopa",
            	"soplar",
            	"soporte",
            	"sordo",
            	"sorpresa",
            	"sorteo",
            	"sostén",
            	"sótano",
            	"suave",
            	"subir",
            	"suceso",
            	"sudor",
            	"suegra",
            	"suelo",
            	"sueño",
            	"suerte",
            	"sufrir",
            	"sujeto",
            	"sultán",
            	"sumar",
            	"superar",
            	"suplir",
            	"suponer",
            	"supremo",
            	"sur",
            	"surco",
            	"sureño",
            	"surgir",
            	"susto",
            	"sutil",
            	"tabaco",
            	"tabique",
            	"tabla",
            	"tabú",
            	"taco",
            	"tacto",
            	"tajo",
            	"talar",
            	"talco",
            	"talento",
            	"talla",
            	"talón",
            	"tamaño",
            	"tambor",
            	"tango",
            	"tanque",
            	"tapa",
            	"tapete",
            	"tapia",
            	"tapón",
            	"taquilla",
            	"tarde",
            	"tarea",
            	"tarifa",
            	"tarjeta",
            	"tarot",
            	"tarro",
            	"tarta",
            	"tatuaje",
            	"tauro",
            	"taza",
            	"tazón",
            	"teatro",
            	"techo",
            	"tecla",
            	"técnica",
            	"tejado",
            	"tejer",
            	"tejido",
            	"tela",
            	"teléfono",
            	"tema",
            	"temor",
            	"templo",
            	"tenaz",
            	"tender",
            	"tener",
            	"tenis",
            	"tenso",
            	"teoría",
            	"terapia",
            	"terco",
            	"término",
            	"ternura",
            	"terror",
            	"tesis",
            	"tesoro",
            	"testigo",
            	"tetera",
            	"texto",
            	"tez",
            	"tibio",
            	"tiburón",
            	"tiempo",
            	"tienda",
            	"tierra",
            	"tieso",
            	"tigre",
            	"tijera",
            	"tilde",
            	"timbre",
            	"tímido",
            	"timo",
            	"tinta",
            	"tío",
            	"típico",
            	"tipo",
            	"tira",
            	"tirón",
            	"titán",
            	"títere",
            	"título",
            	"tiza",
            	"toalla",
            	"tobillo",
            	"tocar",
            	"tocino",
            	"todo",
            	"toga",
            	"toldo",
            	"tomar",
            	"tono",
            	"tonto",
            	"topar",
            	"tope",
            	"toque",
            	"tórax",
            	"torero",
            	"tormenta",
            	"torneo",
            	"toro",
            	"torpedo",
            	"torre",
            	"torso",
            	"tortuga",
            	"tos",
            	"tosco",
            	"toser",
            	"tóxico",
            	"trabajo",
            	"tractor",
            	"traer",
            	"tráfico",
            	"trago",
            	"traje",
            	"tramo",
            	"trance",
            	"trato",
            	"trauma",
            	"trazar",
            	"trébol",
            	"tregua",
            	"treinta",
            	"tren",
            	"trepar",
            	"tres",
            	"tribu",
            	"trigo",
            	"tripa",
            	"triste",
            	"triunfo",
            	"trofeo",
            	"trompa",
            	"tronco",
            	"tropa",
            	"trote",
            	"trozo",
            	"truco",
            	"trueno",
            	"trufa",
            	"tubería",
            	"tubo",
            	"tuerto",
            	"tumba",
            	"tumor",
            	"túnel",
            	"túnica",
            	"turbina",
            	"turismo",
            	"turno",
            	"tutor",
            	"ubicar",
            	"úlcera",
            	"umbral",
            	"unidad",
            	"unir",
            	"universo",
            	"uno",
            	"untar",
            	"uña",
            	"urbano",
            	"urbe",
            	"urgente",
            	"urna",
            	"usar",
            	"usuario",
            	"útil",
            	"utopía",
            	"uva",
            	"vaca",
            	"vacío",
            	"vacuna",
            	"vagar",
            	"vago",
            	"vaina",
            	"vajilla",
            	"vale",
            	"válido",
            	"valle",
            	"valor",
            	"válvula",
            	"vampiro",
            	"vara",
            	"variar",
            	"varón",
            	"vaso",
            	"vecino",
            	"vector",
            	"vehículo",
            	"veinte",
            	"vejez",
            	"vela",
            	"velero",
            	"veloz",
            	"vena",
            	"vencer",
            	"venda",
            	"veneno",
            	"vengar",
            	"venir",
            	"venta",
            	"venus",
            	"ver",
            	"verano",
            	"verbo",
            	"verde",
            	"vereda",
            	"verja",
            	"verso",
            	"verter",
            	"vía",
            	"viaje",
            	"vibrar",
            	"vicio",
            	"víctima",
            	"vida",
            	"vídeo",
            	"vidrio",
            	"viejo",
            	"viernes",
            	"vigor",
            	"vil",
            	"villa",
            	"vinagre",
            	"vino",
            	"viñedo",
            	"violín",
            	"viral",
            	"virgo",
            	"virtud",
            	"visor",
            	"víspera",
            	"vista",
            	"vitamina",
            	"viudo",
            	"vivaz",
            	"vivero",
            	"vivir",
            	"vivo",
            	"volcán",
            	"volumen",
            	"volver",
            	"voraz",
            	"votar",
            	"voto",
            	"voz",
            	"vuelo",
            	"vulgar",
            	"yacer",
            	"yate",
            	"yegua",
            	"yema",
            	"yerno",
            	"yeso",
            	"yodo",
            	"yoga",
            	"yogur",
            	"zafiro",
            	"zanja",
            	"zapato",
            	"zarza",
            	"zona",
            	"zorro",
            	"zumo",
            	"zurdo"
            ];

            var require$$7 = [
            	"あいこくしん",
            	"あいさつ",
            	"あいだ",
            	"あおぞら",
            	"あかちゃん",
            	"あきる",
            	"あけがた",
            	"あける",
            	"あこがれる",
            	"あさい",
            	"あさひ",
            	"あしあと",
            	"あじわう",
            	"あずかる",
            	"あずき",
            	"あそぶ",
            	"あたえる",
            	"あたためる",
            	"あたりまえ",
            	"あたる",
            	"あつい",
            	"あつかう",
            	"あっしゅく",
            	"あつまり",
            	"あつめる",
            	"あてな",
            	"あてはまる",
            	"あひる",
            	"あぶら",
            	"あぶる",
            	"あふれる",
            	"あまい",
            	"あまど",
            	"あまやかす",
            	"あまり",
            	"あみもの",
            	"あめりか",
            	"あやまる",
            	"あゆむ",
            	"あらいぐま",
            	"あらし",
            	"あらすじ",
            	"あらためる",
            	"あらゆる",
            	"あらわす",
            	"ありがとう",
            	"あわせる",
            	"あわてる",
            	"あんい",
            	"あんがい",
            	"あんこ",
            	"あんぜん",
            	"あんてい",
            	"あんない",
            	"あんまり",
            	"いいだす",
            	"いおん",
            	"いがい",
            	"いがく",
            	"いきおい",
            	"いきなり",
            	"いきもの",
            	"いきる",
            	"いくじ",
            	"いくぶん",
            	"いけばな",
            	"いけん",
            	"いこう",
            	"いこく",
            	"いこつ",
            	"いさましい",
            	"いさん",
            	"いしき",
            	"いじゅう",
            	"いじょう",
            	"いじわる",
            	"いずみ",
            	"いずれ",
            	"いせい",
            	"いせえび",
            	"いせかい",
            	"いせき",
            	"いぜん",
            	"いそうろう",
            	"いそがしい",
            	"いだい",
            	"いだく",
            	"いたずら",
            	"いたみ",
            	"いたりあ",
            	"いちおう",
            	"いちじ",
            	"いちど",
            	"いちば",
            	"いちぶ",
            	"いちりゅう",
            	"いつか",
            	"いっしゅん",
            	"いっせい",
            	"いっそう",
            	"いったん",
            	"いっち",
            	"いってい",
            	"いっぽう",
            	"いてざ",
            	"いてん",
            	"いどう",
            	"いとこ",
            	"いない",
            	"いなか",
            	"いねむり",
            	"いのち",
            	"いのる",
            	"いはつ",
            	"いばる",
            	"いはん",
            	"いびき",
            	"いひん",
            	"いふく",
            	"いへん",
            	"いほう",
            	"いみん",
            	"いもうと",
            	"いもたれ",
            	"いもり",
            	"いやがる",
            	"いやす",
            	"いよかん",
            	"いよく",
            	"いらい",
            	"いらすと",
            	"いりぐち",
            	"いりょう",
            	"いれい",
            	"いれもの",
            	"いれる",
            	"いろえんぴつ",
            	"いわい",
            	"いわう",
            	"いわかん",
            	"いわば",
            	"いわゆる",
            	"いんげんまめ",
            	"いんさつ",
            	"いんしょう",
            	"いんよう",
            	"うえき",
            	"うえる",
            	"うおざ",
            	"うがい",
            	"うかぶ",
            	"うかべる",
            	"うきわ",
            	"うくらいな",
            	"うくれれ",
            	"うけたまわる",
            	"うけつけ",
            	"うけとる",
            	"うけもつ",
            	"うける",
            	"うごかす",
            	"うごく",
            	"うこん",
            	"うさぎ",
            	"うしなう",
            	"うしろがみ",
            	"うすい",
            	"うすぎ",
            	"うすぐらい",
            	"うすめる",
            	"うせつ",
            	"うちあわせ",
            	"うちがわ",
            	"うちき",
            	"うちゅう",
            	"うっかり",
            	"うつくしい",
            	"うったえる",
            	"うつる",
            	"うどん",
            	"うなぎ",
            	"うなじ",
            	"うなずく",
            	"うなる",
            	"うねる",
            	"うのう",
            	"うぶげ",
            	"うぶごえ",
            	"うまれる",
            	"うめる",
            	"うもう",
            	"うやまう",
            	"うよく",
            	"うらがえす",
            	"うらぐち",
            	"うらない",
            	"うりあげ",
            	"うりきれ",
            	"うるさい",
            	"うれしい",
            	"うれゆき",
            	"うれる",
            	"うろこ",
            	"うわき",
            	"うわさ",
            	"うんこう",
            	"うんちん",
            	"うんてん",
            	"うんどう",
            	"えいえん",
            	"えいが",
            	"えいきょう",
            	"えいご",
            	"えいせい",
            	"えいぶん",
            	"えいよう",
            	"えいわ",
            	"えおり",
            	"えがお",
            	"えがく",
            	"えきたい",
            	"えくせる",
            	"えしゃく",
            	"えすて",
            	"えつらん",
            	"えのぐ",
            	"えほうまき",
            	"えほん",
            	"えまき",
            	"えもじ",
            	"えもの",
            	"えらい",
            	"えらぶ",
            	"えりあ",
            	"えんえん",
            	"えんかい",
            	"えんぎ",
            	"えんげき",
            	"えんしゅう",
            	"えんぜつ",
            	"えんそく",
            	"えんちょう",
            	"えんとつ",
            	"おいかける",
            	"おいこす",
            	"おいしい",
            	"おいつく",
            	"おうえん",
            	"おうさま",
            	"おうじ",
            	"おうせつ",
            	"おうたい",
            	"おうふく",
            	"おうべい",
            	"おうよう",
            	"おえる",
            	"おおい",
            	"おおう",
            	"おおどおり",
            	"おおや",
            	"おおよそ",
            	"おかえり",
            	"おかず",
            	"おがむ",
            	"おかわり",
            	"おぎなう",
            	"おきる",
            	"おくさま",
            	"おくじょう",
            	"おくりがな",
            	"おくる",
            	"おくれる",
            	"おこす",
            	"おこなう",
            	"おこる",
            	"おさえる",
            	"おさない",
            	"おさめる",
            	"おしいれ",
            	"おしえる",
            	"おじぎ",
            	"おじさん",
            	"おしゃれ",
            	"おそらく",
            	"おそわる",
            	"おたがい",
            	"おたく",
            	"おだやか",
            	"おちつく",
            	"おっと",
            	"おつり",
            	"おでかけ",
            	"おとしもの",
            	"おとなしい",
            	"おどり",
            	"おどろかす",
            	"おばさん",
            	"おまいり",
            	"おめでとう",
            	"おもいで",
            	"おもう",
            	"おもたい",
            	"おもちゃ",
            	"おやつ",
            	"おやゆび",
            	"およぼす",
            	"おらんだ",
            	"おろす",
            	"おんがく",
            	"おんけい",
            	"おんしゃ",
            	"おんせん",
            	"おんだん",
            	"おんちゅう",
            	"おんどけい",
            	"かあつ",
            	"かいが",
            	"がいき",
            	"がいけん",
            	"がいこう",
            	"かいさつ",
            	"かいしゃ",
            	"かいすいよく",
            	"かいぜん",
            	"かいぞうど",
            	"かいつう",
            	"かいてん",
            	"かいとう",
            	"かいふく",
            	"がいへき",
            	"かいほう",
            	"かいよう",
            	"がいらい",
            	"かいわ",
            	"かえる",
            	"かおり",
            	"かかえる",
            	"かがく",
            	"かがし",
            	"かがみ",
            	"かくご",
            	"かくとく",
            	"かざる",
            	"がぞう",
            	"かたい",
            	"かたち",
            	"がちょう",
            	"がっきゅう",
            	"がっこう",
            	"がっさん",
            	"がっしょう",
            	"かなざわし",
            	"かのう",
            	"がはく",
            	"かぶか",
            	"かほう",
            	"かほご",
            	"かまう",
            	"かまぼこ",
            	"かめれおん",
            	"かゆい",
            	"かようび",
            	"からい",
            	"かるい",
            	"かろう",
            	"かわく",
            	"かわら",
            	"がんか",
            	"かんけい",
            	"かんこう",
            	"かんしゃ",
            	"かんそう",
            	"かんたん",
            	"かんち",
            	"がんばる",
            	"きあい",
            	"きあつ",
            	"きいろ",
            	"ぎいん",
            	"きうい",
            	"きうん",
            	"きえる",
            	"きおう",
            	"きおく",
            	"きおち",
            	"きおん",
            	"きかい",
            	"きかく",
            	"きかんしゃ",
            	"ききて",
            	"きくばり",
            	"きくらげ",
            	"きけんせい",
            	"きこう",
            	"きこえる",
            	"きこく",
            	"きさい",
            	"きさく",
            	"きさま",
            	"きさらぎ",
            	"ぎじかがく",
            	"ぎしき",
            	"ぎじたいけん",
            	"ぎじにってい",
            	"ぎじゅつしゃ",
            	"きすう",
            	"きせい",
            	"きせき",
            	"きせつ",
            	"きそう",
            	"きぞく",
            	"きぞん",
            	"きたえる",
            	"きちょう",
            	"きつえん",
            	"ぎっちり",
            	"きつつき",
            	"きつね",
            	"きてい",
            	"きどう",
            	"きどく",
            	"きない",
            	"きなが",
            	"きなこ",
            	"きぬごし",
            	"きねん",
            	"きのう",
            	"きのした",
            	"きはく",
            	"きびしい",
            	"きひん",
            	"きふく",
            	"きぶん",
            	"きぼう",
            	"きほん",
            	"きまる",
            	"きみつ",
            	"きむずかしい",
            	"きめる",
            	"きもだめし",
            	"きもち",
            	"きもの",
            	"きゃく",
            	"きやく",
            	"ぎゅうにく",
            	"きよう",
            	"きょうりゅう",
            	"きらい",
            	"きらく",
            	"きりん",
            	"きれい",
            	"きれつ",
            	"きろく",
            	"ぎろん",
            	"きわめる",
            	"ぎんいろ",
            	"きんかくじ",
            	"きんじょ",
            	"きんようび",
            	"ぐあい",
            	"くいず",
            	"くうかん",
            	"くうき",
            	"くうぐん",
            	"くうこう",
            	"ぐうせい",
            	"くうそう",
            	"ぐうたら",
            	"くうふく",
            	"くうぼ",
            	"くかん",
            	"くきょう",
            	"くげん",
            	"ぐこう",
            	"くさい",
            	"くさき",
            	"くさばな",
            	"くさる",
            	"くしゃみ",
            	"くしょう",
            	"くすのき",
            	"くすりゆび",
            	"くせげ",
            	"くせん",
            	"ぐたいてき",
            	"くださる",
            	"くたびれる",
            	"くちこみ",
            	"くちさき",
            	"くつした",
            	"ぐっすり",
            	"くつろぐ",
            	"くとうてん",
            	"くどく",
            	"くなん",
            	"くねくね",
            	"くのう",
            	"くふう",
            	"くみあわせ",
            	"くみたてる",
            	"くめる",
            	"くやくしょ",
            	"くらす",
            	"くらべる",
            	"くるま",
            	"くれる",
            	"くろう",
            	"くわしい",
            	"ぐんかん",
            	"ぐんしょく",
            	"ぐんたい",
            	"ぐんて",
            	"けあな",
            	"けいかく",
            	"けいけん",
            	"けいこ",
            	"けいさつ",
            	"げいじゅつ",
            	"けいたい",
            	"げいのうじん",
            	"けいれき",
            	"けいろ",
            	"けおとす",
            	"けおりもの",
            	"げきか",
            	"げきげん",
            	"げきだん",
            	"げきちん",
            	"げきとつ",
            	"げきは",
            	"げきやく",
            	"げこう",
            	"げこくじょう",
            	"げざい",
            	"けさき",
            	"げざん",
            	"けしき",
            	"けしごむ",
            	"けしょう",
            	"げすと",
            	"けたば",
            	"けちゃっぷ",
            	"けちらす",
            	"けつあつ",
            	"けつい",
            	"けつえき",
            	"けっこん",
            	"けつじょ",
            	"けっせき",
            	"けってい",
            	"けつまつ",
            	"げつようび",
            	"げつれい",
            	"けつろん",
            	"げどく",
            	"けとばす",
            	"けとる",
            	"けなげ",
            	"けなす",
            	"けなみ",
            	"けぬき",
            	"げねつ",
            	"けねん",
            	"けはい",
            	"げひん",
            	"けぶかい",
            	"げぼく",
            	"けまり",
            	"けみかる",
            	"けむし",
            	"けむり",
            	"けもの",
            	"けらい",
            	"けろけろ",
            	"けわしい",
            	"けんい",
            	"けんえつ",
            	"けんお",
            	"けんか",
            	"げんき",
            	"けんげん",
            	"けんこう",
            	"けんさく",
            	"けんしゅう",
            	"けんすう",
            	"げんそう",
            	"けんちく",
            	"けんてい",
            	"けんとう",
            	"けんない",
            	"けんにん",
            	"げんぶつ",
            	"けんま",
            	"けんみん",
            	"けんめい",
            	"けんらん",
            	"けんり",
            	"こあくま",
            	"こいぬ",
            	"こいびと",
            	"ごうい",
            	"こうえん",
            	"こうおん",
            	"こうかん",
            	"ごうきゅう",
            	"ごうけい",
            	"こうこう",
            	"こうさい",
            	"こうじ",
            	"こうすい",
            	"ごうせい",
            	"こうそく",
            	"こうたい",
            	"こうちゃ",
            	"こうつう",
            	"こうてい",
            	"こうどう",
            	"こうない",
            	"こうはい",
            	"ごうほう",
            	"ごうまん",
            	"こうもく",
            	"こうりつ",
            	"こえる",
            	"こおり",
            	"ごかい",
            	"ごがつ",
            	"ごかん",
            	"こくご",
            	"こくさい",
            	"こくとう",
            	"こくない",
            	"こくはく",
            	"こぐま",
            	"こけい",
            	"こける",
            	"ここのか",
            	"こころ",
            	"こさめ",
            	"こしつ",
            	"こすう",
            	"こせい",
            	"こせき",
            	"こぜん",
            	"こそだて",
            	"こたい",
            	"こたえる",
            	"こたつ",
            	"こちょう",
            	"こっか",
            	"こつこつ",
            	"こつばん",
            	"こつぶ",
            	"こてい",
            	"こてん",
            	"ことがら",
            	"ことし",
            	"ことば",
            	"ことり",
            	"こなごな",
            	"こねこね",
            	"このまま",
            	"このみ",
            	"このよ",
            	"ごはん",
            	"こひつじ",
            	"こふう",
            	"こふん",
            	"こぼれる",
            	"ごまあぶら",
            	"こまかい",
            	"ごますり",
            	"こまつな",
            	"こまる",
            	"こむぎこ",
            	"こもじ",
            	"こもち",
            	"こもの",
            	"こもん",
            	"こやく",
            	"こやま",
            	"こゆう",
            	"こゆび",
            	"こよい",
            	"こよう",
            	"こりる",
            	"これくしょん",
            	"ころっけ",
            	"こわもて",
            	"こわれる",
            	"こんいん",
            	"こんかい",
            	"こんき",
            	"こんしゅう",
            	"こんすい",
            	"こんだて",
            	"こんとん",
            	"こんなん",
            	"こんびに",
            	"こんぽん",
            	"こんまけ",
            	"こんや",
            	"こんれい",
            	"こんわく",
            	"ざいえき",
            	"さいかい",
            	"さいきん",
            	"ざいげん",
            	"ざいこ",
            	"さいしょ",
            	"さいせい",
            	"ざいたく",
            	"ざいちゅう",
            	"さいてき",
            	"ざいりょう",
            	"さうな",
            	"さかいし",
            	"さがす",
            	"さかな",
            	"さかみち",
            	"さがる",
            	"さぎょう",
            	"さくし",
            	"さくひん",
            	"さくら",
            	"さこく",
            	"さこつ",
            	"さずかる",
            	"ざせき",
            	"さたん",
            	"さつえい",
            	"ざつおん",
            	"ざっか",
            	"ざつがく",
            	"さっきょく",
            	"ざっし",
            	"さつじん",
            	"ざっそう",
            	"さつたば",
            	"さつまいも",
            	"さてい",
            	"さといも",
            	"さとう",
            	"さとおや",
            	"さとし",
            	"さとる",
            	"さのう",
            	"さばく",
            	"さびしい",
            	"さべつ",
            	"さほう",
            	"さほど",
            	"さます",
            	"さみしい",
            	"さみだれ",
            	"さむけ",
            	"さめる",
            	"さやえんどう",
            	"さゆう",
            	"さよう",
            	"さよく",
            	"さらだ",
            	"ざるそば",
            	"さわやか",
            	"さわる",
            	"さんいん",
            	"さんか",
            	"さんきゃく",
            	"さんこう",
            	"さんさい",
            	"ざんしょ",
            	"さんすう",
            	"さんせい",
            	"さんそ",
            	"さんち",
            	"さんま",
            	"さんみ",
            	"さんらん",
            	"しあい",
            	"しあげ",
            	"しあさって",
            	"しあわせ",
            	"しいく",
            	"しいん",
            	"しうち",
            	"しえい",
            	"しおけ",
            	"しかい",
            	"しかく",
            	"じかん",
            	"しごと",
            	"しすう",
            	"じだい",
            	"したうけ",
            	"したぎ",
            	"したて",
            	"したみ",
            	"しちょう",
            	"しちりん",
            	"しっかり",
            	"しつじ",
            	"しつもん",
            	"してい",
            	"してき",
            	"してつ",
            	"じてん",
            	"じどう",
            	"しなぎれ",
            	"しなもの",
            	"しなん",
            	"しねま",
            	"しねん",
            	"しのぐ",
            	"しのぶ",
            	"しはい",
            	"しばかり",
            	"しはつ",
            	"しはらい",
            	"しはん",
            	"しひょう",
            	"しふく",
            	"じぶん",
            	"しへい",
            	"しほう",
            	"しほん",
            	"しまう",
            	"しまる",
            	"しみん",
            	"しむける",
            	"じむしょ",
            	"しめい",
            	"しめる",
            	"しもん",
            	"しゃいん",
            	"しゃうん",
            	"しゃおん",
            	"じゃがいも",
            	"しやくしょ",
            	"しゃくほう",
            	"しゃけん",
            	"しゃこ",
            	"しゃざい",
            	"しゃしん",
            	"しゃせん",
            	"しゃそう",
            	"しゃたい",
            	"しゃちょう",
            	"しゃっきん",
            	"じゃま",
            	"しゃりん",
            	"しゃれい",
            	"じゆう",
            	"じゅうしょ",
            	"しゅくはく",
            	"じゅしん",
            	"しゅっせき",
            	"しゅみ",
            	"しゅらば",
            	"じゅんばん",
            	"しょうかい",
            	"しょくたく",
            	"しょっけん",
            	"しょどう",
            	"しょもつ",
            	"しらせる",
            	"しらべる",
            	"しんか",
            	"しんこう",
            	"じんじゃ",
            	"しんせいじ",
            	"しんちく",
            	"しんりん",
            	"すあげ",
            	"すあし",
            	"すあな",
            	"ずあん",
            	"すいえい",
            	"すいか",
            	"すいとう",
            	"ずいぶん",
            	"すいようび",
            	"すうがく",
            	"すうじつ",
            	"すうせん",
            	"すおどり",
            	"すきま",
            	"すくう",
            	"すくない",
            	"すける",
            	"すごい",
            	"すこし",
            	"ずさん",
            	"すずしい",
            	"すすむ",
            	"すすめる",
            	"すっかり",
            	"ずっしり",
            	"ずっと",
            	"すてき",
            	"すてる",
            	"すねる",
            	"すのこ",
            	"すはだ",
            	"すばらしい",
            	"ずひょう",
            	"ずぶぬれ",
            	"すぶり",
            	"すふれ",
            	"すべて",
            	"すべる",
            	"ずほう",
            	"すぼん",
            	"すまい",
            	"すめし",
            	"すもう",
            	"すやき",
            	"すらすら",
            	"するめ",
            	"すれちがう",
            	"すろっと",
            	"すわる",
            	"すんぜん",
            	"すんぽう",
            	"せあぶら",
            	"せいかつ",
            	"せいげん",
            	"せいじ",
            	"せいよう",
            	"せおう",
            	"せかいかん",
            	"せきにん",
            	"せきむ",
            	"せきゆ",
            	"せきらんうん",
            	"せけん",
            	"せこう",
            	"せすじ",
            	"せたい",
            	"せたけ",
            	"せっかく",
            	"せっきゃく",
            	"ぜっく",
            	"せっけん",
            	"せっこつ",
            	"せっさたくま",
            	"せつぞく",
            	"せつだん",
            	"せつでん",
            	"せっぱん",
            	"せつび",
            	"せつぶん",
            	"せつめい",
            	"せつりつ",
            	"せなか",
            	"せのび",
            	"せはば",
            	"せびろ",
            	"せぼね",
            	"せまい",
            	"せまる",
            	"せめる",
            	"せもたれ",
            	"せりふ",
            	"ぜんあく",
            	"せんい",
            	"せんえい",
            	"せんか",
            	"せんきょ",
            	"せんく",
            	"せんげん",
            	"ぜんご",
            	"せんさい",
            	"せんしゅ",
            	"せんすい",
            	"せんせい",
            	"せんぞ",
            	"せんたく",
            	"せんちょう",
            	"せんてい",
            	"せんとう",
            	"せんぬき",
            	"せんねん",
            	"せんぱい",
            	"ぜんぶ",
            	"ぜんぽう",
            	"せんむ",
            	"せんめんじょ",
            	"せんもん",
            	"せんやく",
            	"せんゆう",
            	"せんよう",
            	"ぜんら",
            	"ぜんりゃく",
            	"せんれい",
            	"せんろ",
            	"そあく",
            	"そいとげる",
            	"そいね",
            	"そうがんきょう",
            	"そうき",
            	"そうご",
            	"そうしん",
            	"そうだん",
            	"そうなん",
            	"そうび",
            	"そうめん",
            	"そうり",
            	"そえもの",
            	"そえん",
            	"そがい",
            	"そげき",
            	"そこう",
            	"そこそこ",
            	"そざい",
            	"そしな",
            	"そせい",
            	"そせん",
            	"そそぐ",
            	"そだてる",
            	"そつう",
            	"そつえん",
            	"そっかん",
            	"そつぎょう",
            	"そっけつ",
            	"そっこう",
            	"そっせん",
            	"そっと",
            	"そとがわ",
            	"そとづら",
            	"そなえる",
            	"そなた",
            	"そふぼ",
            	"そぼく",
            	"そぼろ",
            	"そまつ",
            	"そまる",
            	"そむく",
            	"そむりえ",
            	"そめる",
            	"そもそも",
            	"そよかぜ",
            	"そらまめ",
            	"そろう",
            	"そんかい",
            	"そんけい",
            	"そんざい",
            	"そんしつ",
            	"そんぞく",
            	"そんちょう",
            	"ぞんび",
            	"ぞんぶん",
            	"そんみん",
            	"たあい",
            	"たいいん",
            	"たいうん",
            	"たいえき",
            	"たいおう",
            	"だいがく",
            	"たいき",
            	"たいぐう",
            	"たいけん",
            	"たいこ",
            	"たいざい",
            	"だいじょうぶ",
            	"だいすき",
            	"たいせつ",
            	"たいそう",
            	"だいたい",
            	"たいちょう",
            	"たいてい",
            	"だいどころ",
            	"たいない",
            	"たいねつ",
            	"たいのう",
            	"たいはん",
            	"だいひょう",
            	"たいふう",
            	"たいへん",
            	"たいほ",
            	"たいまつばな",
            	"たいみんぐ",
            	"たいむ",
            	"たいめん",
            	"たいやき",
            	"たいよう",
            	"たいら",
            	"たいりょく",
            	"たいる",
            	"たいわん",
            	"たうえ",
            	"たえる",
            	"たおす",
            	"たおる",
            	"たおれる",
            	"たかい",
            	"たかね",
            	"たきび",
            	"たくさん",
            	"たこく",
            	"たこやき",
            	"たさい",
            	"たしざん",
            	"だじゃれ",
            	"たすける",
            	"たずさわる",
            	"たそがれ",
            	"たたかう",
            	"たたく",
            	"ただしい",
            	"たたみ",
            	"たちばな",
            	"だっかい",
            	"だっきゃく",
            	"だっこ",
            	"だっしゅつ",
            	"だったい",
            	"たてる",
            	"たとえる",
            	"たなばた",
            	"たにん",
            	"たぬき",
            	"たのしみ",
            	"たはつ",
            	"たぶん",
            	"たべる",
            	"たぼう",
            	"たまご",
            	"たまる",
            	"だむる",
            	"ためいき",
            	"ためす",
            	"ためる",
            	"たもつ",
            	"たやすい",
            	"たよる",
            	"たらす",
            	"たりきほんがん",
            	"たりょう",
            	"たりる",
            	"たると",
            	"たれる",
            	"たれんと",
            	"たろっと",
            	"たわむれる",
            	"だんあつ",
            	"たんい",
            	"たんおん",
            	"たんか",
            	"たんき",
            	"たんけん",
            	"たんご",
            	"たんさん",
            	"たんじょうび",
            	"だんせい",
            	"たんそく",
            	"たんたい",
            	"だんち",
            	"たんてい",
            	"たんとう",
            	"だんな",
            	"たんにん",
            	"だんねつ",
            	"たんのう",
            	"たんぴん",
            	"だんぼう",
            	"たんまつ",
            	"たんめい",
            	"だんれつ",
            	"だんろ",
            	"だんわ",
            	"ちあい",
            	"ちあん",
            	"ちいき",
            	"ちいさい",
            	"ちえん",
            	"ちかい",
            	"ちから",
            	"ちきゅう",
            	"ちきん",
            	"ちけいず",
            	"ちけん",
            	"ちこく",
            	"ちさい",
            	"ちしき",
            	"ちしりょう",
            	"ちせい",
            	"ちそう",
            	"ちたい",
            	"ちたん",
            	"ちちおや",
            	"ちつじょ",
            	"ちてき",
            	"ちてん",
            	"ちぬき",
            	"ちぬり",
            	"ちのう",
            	"ちひょう",
            	"ちへいせん",
            	"ちほう",
            	"ちまた",
            	"ちみつ",
            	"ちみどろ",
            	"ちめいど",
            	"ちゃんこなべ",
            	"ちゅうい",
            	"ちゆりょく",
            	"ちょうし",
            	"ちょさくけん",
            	"ちらし",
            	"ちらみ",
            	"ちりがみ",
            	"ちりょう",
            	"ちるど",
            	"ちわわ",
            	"ちんたい",
            	"ちんもく",
            	"ついか",
            	"ついたち",
            	"つうか",
            	"つうじょう",
            	"つうはん",
            	"つうわ",
            	"つかう",
            	"つかれる",
            	"つくね",
            	"つくる",
            	"つけね",
            	"つける",
            	"つごう",
            	"つたえる",
            	"つづく",
            	"つつじ",
            	"つつむ",
            	"つとめる",
            	"つながる",
            	"つなみ",
            	"つねづね",
            	"つのる",
            	"つぶす",
            	"つまらない",
            	"つまる",
            	"つみき",
            	"つめたい",
            	"つもり",
            	"つもる",
            	"つよい",
            	"つるぼ",
            	"つるみく",
            	"つわもの",
            	"つわり",
            	"てあし",
            	"てあて",
            	"てあみ",
            	"ていおん",
            	"ていか",
            	"ていき",
            	"ていけい",
            	"ていこく",
            	"ていさつ",
            	"ていし",
            	"ていせい",
            	"ていたい",
            	"ていど",
            	"ていねい",
            	"ていひょう",
            	"ていへん",
            	"ていぼう",
            	"てうち",
            	"ておくれ",
            	"てきとう",
            	"てくび",
            	"でこぼこ",
            	"てさぎょう",
            	"てさげ",
            	"てすり",
            	"てそう",
            	"てちがい",
            	"てちょう",
            	"てつがく",
            	"てつづき",
            	"でっぱ",
            	"てつぼう",
            	"てつや",
            	"でぬかえ",
            	"てぬき",
            	"てぬぐい",
            	"てのひら",
            	"てはい",
            	"てぶくろ",
            	"てふだ",
            	"てほどき",
            	"てほん",
            	"てまえ",
            	"てまきずし",
            	"てみじか",
            	"てみやげ",
            	"てらす",
            	"てれび",
            	"てわけ",
            	"てわたし",
            	"でんあつ",
            	"てんいん",
            	"てんかい",
            	"てんき",
            	"てんぐ",
            	"てんけん",
            	"てんごく",
            	"てんさい",
            	"てんし",
            	"てんすう",
            	"でんち",
            	"てんてき",
            	"てんとう",
            	"てんない",
            	"てんぷら",
            	"てんぼうだい",
            	"てんめつ",
            	"てんらんかい",
            	"でんりょく",
            	"でんわ",
            	"どあい",
            	"といれ",
            	"どうかん",
            	"とうきゅう",
            	"どうぐ",
            	"とうし",
            	"とうむぎ",
            	"とおい",
            	"とおか",
            	"とおく",
            	"とおす",
            	"とおる",
            	"とかい",
            	"とかす",
            	"ときおり",
            	"ときどき",
            	"とくい",
            	"とくしゅう",
            	"とくてん",
            	"とくに",
            	"とくべつ",
            	"とけい",
            	"とける",
            	"とこや",
            	"とさか",
            	"としょかん",
            	"とそう",
            	"とたん",
            	"とちゅう",
            	"とっきゅう",
            	"とっくん",
            	"とつぜん",
            	"とつにゅう",
            	"とどける",
            	"ととのえる",
            	"とない",
            	"となえる",
            	"となり",
            	"とのさま",
            	"とばす",
            	"どぶがわ",
            	"とほう",
            	"とまる",
            	"とめる",
            	"ともだち",
            	"ともる",
            	"どようび",
            	"とらえる",
            	"とんかつ",
            	"どんぶり",
            	"ないかく",
            	"ないこう",
            	"ないしょ",
            	"ないす",
            	"ないせん",
            	"ないそう",
            	"なおす",
            	"ながい",
            	"なくす",
            	"なげる",
            	"なこうど",
            	"なさけ",
            	"なたでここ",
            	"なっとう",
            	"なつやすみ",
            	"ななおし",
            	"なにごと",
            	"なにもの",
            	"なにわ",
            	"なのか",
            	"なふだ",
            	"なまいき",
            	"なまえ",
            	"なまみ",
            	"なみだ",
            	"なめらか",
            	"なめる",
            	"なやむ",
            	"ならう",
            	"ならび",
            	"ならぶ",
            	"なれる",
            	"なわとび",
            	"なわばり",
            	"にあう",
            	"にいがた",
            	"にうけ",
            	"におい",
            	"にかい",
            	"にがて",
            	"にきび",
            	"にくしみ",
            	"にくまん",
            	"にげる",
            	"にさんかたんそ",
            	"にしき",
            	"にせもの",
            	"にちじょう",
            	"にちようび",
            	"にっか",
            	"にっき",
            	"にっけい",
            	"にっこう",
            	"にっさん",
            	"にっしょく",
            	"にっすう",
            	"にっせき",
            	"にってい",
            	"になう",
            	"にほん",
            	"にまめ",
            	"にもつ",
            	"にやり",
            	"にゅういん",
            	"にりんしゃ",
            	"にわとり",
            	"にんい",
            	"にんか",
            	"にんき",
            	"にんげん",
            	"にんしき",
            	"にんずう",
            	"にんそう",
            	"にんたい",
            	"にんち",
            	"にんてい",
            	"にんにく",
            	"にんぷ",
            	"にんまり",
            	"にんむ",
            	"にんめい",
            	"にんよう",
            	"ぬいくぎ",
            	"ぬかす",
            	"ぬぐいとる",
            	"ぬぐう",
            	"ぬくもり",
            	"ぬすむ",
            	"ぬまえび",
            	"ぬめり",
            	"ぬらす",
            	"ぬんちゃく",
            	"ねあげ",
            	"ねいき",
            	"ねいる",
            	"ねいろ",
            	"ねぐせ",
            	"ねくたい",
            	"ねくら",
            	"ねこぜ",
            	"ねこむ",
            	"ねさげ",
            	"ねすごす",
            	"ねそべる",
            	"ねだん",
            	"ねつい",
            	"ねっしん",
            	"ねつぞう",
            	"ねったいぎょ",
            	"ねぶそく",
            	"ねふだ",
            	"ねぼう",
            	"ねほりはほり",
            	"ねまき",
            	"ねまわし",
            	"ねみみ",
            	"ねむい",
            	"ねむたい",
            	"ねもと",
            	"ねらう",
            	"ねわざ",
            	"ねんいり",
            	"ねんおし",
            	"ねんかん",
            	"ねんきん",
            	"ねんぐ",
            	"ねんざ",
            	"ねんし",
            	"ねんちゃく",
            	"ねんど",
            	"ねんぴ",
            	"ねんぶつ",
            	"ねんまつ",
            	"ねんりょう",
            	"ねんれい",
            	"のいず",
            	"のおづま",
            	"のがす",
            	"のきなみ",
            	"のこぎり",
            	"のこす",
            	"のこる",
            	"のせる",
            	"のぞく",
            	"のぞむ",
            	"のたまう",
            	"のちほど",
            	"のっく",
            	"のばす",
            	"のはら",
            	"のべる",
            	"のぼる",
            	"のみもの",
            	"のやま",
            	"のらいぬ",
            	"のらねこ",
            	"のりもの",
            	"のりゆき",
            	"のれん",
            	"のんき",
            	"ばあい",
            	"はあく",
            	"ばあさん",
            	"ばいか",
            	"ばいく",
            	"はいけん",
            	"はいご",
            	"はいしん",
            	"はいすい",
            	"はいせん",
            	"はいそう",
            	"はいち",
            	"ばいばい",
            	"はいれつ",
            	"はえる",
            	"はおる",
            	"はかい",
            	"ばかり",
            	"はかる",
            	"はくしゅ",
            	"はけん",
            	"はこぶ",
            	"はさみ",
            	"はさん",
            	"はしご",
            	"ばしょ",
            	"はしる",
            	"はせる",
            	"ぱそこん",
            	"はそん",
            	"はたん",
            	"はちみつ",
            	"はつおん",
            	"はっかく",
            	"はづき",
            	"はっきり",
            	"はっくつ",
            	"はっけん",
            	"はっこう",
            	"はっさん",
            	"はっしん",
            	"はったつ",
            	"はっちゅう",
            	"はってん",
            	"はっぴょう",
            	"はっぽう",
            	"はなす",
            	"はなび",
            	"はにかむ",
            	"はぶらし",
            	"はみがき",
            	"はむかう",
            	"はめつ",
            	"はやい",
            	"はやし",
            	"はらう",
            	"はろうぃん",
            	"はわい",
            	"はんい",
            	"はんえい",
            	"はんおん",
            	"はんかく",
            	"はんきょう",
            	"ばんぐみ",
            	"はんこ",
            	"はんしゃ",
            	"はんすう",
            	"はんだん",
            	"ぱんち",
            	"ぱんつ",
            	"はんてい",
            	"はんとし",
            	"はんのう",
            	"はんぱ",
            	"はんぶん",
            	"はんぺん",
            	"はんぼうき",
            	"はんめい",
            	"はんらん",
            	"はんろん",
            	"ひいき",
            	"ひうん",
            	"ひえる",
            	"ひかく",
            	"ひかり",
            	"ひかる",
            	"ひかん",
            	"ひくい",
            	"ひけつ",
            	"ひこうき",
            	"ひこく",
            	"ひさい",
            	"ひさしぶり",
            	"ひさん",
            	"びじゅつかん",
            	"ひしょ",
            	"ひそか",
            	"ひそむ",
            	"ひたむき",
            	"ひだり",
            	"ひたる",
            	"ひつぎ",
            	"ひっこし",
            	"ひっし",
            	"ひつじゅひん",
            	"ひっす",
            	"ひつぜん",
            	"ぴったり",
            	"ぴっちり",
            	"ひつよう",
            	"ひてい",
            	"ひとごみ",
            	"ひなまつり",
            	"ひなん",
            	"ひねる",
            	"ひはん",
            	"ひびく",
            	"ひひょう",
            	"ひほう",
            	"ひまわり",
            	"ひまん",
            	"ひみつ",
            	"ひめい",
            	"ひめじし",
            	"ひやけ",
            	"ひやす",
            	"ひよう",
            	"びょうき",
            	"ひらがな",
            	"ひらく",
            	"ひりつ",
            	"ひりょう",
            	"ひるま",
            	"ひるやすみ",
            	"ひれい",
            	"ひろい",
            	"ひろう",
            	"ひろき",
            	"ひろゆき",
            	"ひんかく",
            	"ひんけつ",
            	"ひんこん",
            	"ひんしゅ",
            	"ひんそう",
            	"ぴんち",
            	"ひんぱん",
            	"びんぼう",
            	"ふあん",
            	"ふいうち",
            	"ふうけい",
            	"ふうせん",
            	"ぷうたろう",
            	"ふうとう",
            	"ふうふ",
            	"ふえる",
            	"ふおん",
            	"ふかい",
            	"ふきん",
            	"ふくざつ",
            	"ふくぶくろ",
            	"ふこう",
            	"ふさい",
            	"ふしぎ",
            	"ふじみ",
            	"ふすま",
            	"ふせい",
            	"ふせぐ",
            	"ふそく",
            	"ぶたにく",
            	"ふたん",
            	"ふちょう",
            	"ふつう",
            	"ふつか",
            	"ふっかつ",
            	"ふっき",
            	"ふっこく",
            	"ぶどう",
            	"ふとる",
            	"ふとん",
            	"ふのう",
            	"ふはい",
            	"ふひょう",
            	"ふへん",
            	"ふまん",
            	"ふみん",
            	"ふめつ",
            	"ふめん",
            	"ふよう",
            	"ふりこ",
            	"ふりる",
            	"ふるい",
            	"ふんいき",
            	"ぶんがく",
            	"ぶんぐ",
            	"ふんしつ",
            	"ぶんせき",
            	"ふんそう",
            	"ぶんぽう",
            	"へいあん",
            	"へいおん",
            	"へいがい",
            	"へいき",
            	"へいげん",
            	"へいこう",
            	"へいさ",
            	"へいしゃ",
            	"へいせつ",
            	"へいそ",
            	"へいたく",
            	"へいてん",
            	"へいねつ",
            	"へいわ",
            	"へきが",
            	"へこむ",
            	"べにいろ",
            	"べにしょうが",
            	"へらす",
            	"へんかん",
            	"べんきょう",
            	"べんごし",
            	"へんさい",
            	"へんたい",
            	"べんり",
            	"ほあん",
            	"ほいく",
            	"ぼうぎょ",
            	"ほうこく",
            	"ほうそう",
            	"ほうほう",
            	"ほうもん",
            	"ほうりつ",
            	"ほえる",
            	"ほおん",
            	"ほかん",
            	"ほきょう",
            	"ぼきん",
            	"ほくろ",
            	"ほけつ",
            	"ほけん",
            	"ほこう",
            	"ほこる",
            	"ほしい",
            	"ほしつ",
            	"ほしゅ",
            	"ほしょう",
            	"ほせい",
            	"ほそい",
            	"ほそく",
            	"ほたて",
            	"ほたる",
            	"ぽちぶくろ",
            	"ほっきょく",
            	"ほっさ",
            	"ほったん",
            	"ほとんど",
            	"ほめる",
            	"ほんい",
            	"ほんき",
            	"ほんけ",
            	"ほんしつ",
            	"ほんやく",
            	"まいにち",
            	"まかい",
            	"まかせる",
            	"まがる",
            	"まける",
            	"まこと",
            	"まさつ",
            	"まじめ",
            	"ますく",
            	"まぜる",
            	"まつり",
            	"まとめ",
            	"まなぶ",
            	"まぬけ",
            	"まねく",
            	"まほう",
            	"まもる",
            	"まゆげ",
            	"まよう",
            	"まろやか",
            	"まわす",
            	"まわり",
            	"まわる",
            	"まんが",
            	"まんきつ",
            	"まんぞく",
            	"まんなか",
            	"みいら",
            	"みうち",
            	"みえる",
            	"みがく",
            	"みかた",
            	"みかん",
            	"みけん",
            	"みこん",
            	"みじかい",
            	"みすい",
            	"みすえる",
            	"みせる",
            	"みっか",
            	"みつかる",
            	"みつける",
            	"みてい",
            	"みとめる",
            	"みなと",
            	"みなみかさい",
            	"みねらる",
            	"みのう",
            	"みのがす",
            	"みほん",
            	"みもと",
            	"みやげ",
            	"みらい",
            	"みりょく",
            	"みわく",
            	"みんか",
            	"みんぞく",
            	"むいか",
            	"むえき",
            	"むえん",
            	"むかい",
            	"むかう",
            	"むかえ",
            	"むかし",
            	"むぎちゃ",
            	"むける",
            	"むげん",
            	"むさぼる",
            	"むしあつい",
            	"むしば",
            	"むじゅん",
            	"むしろ",
            	"むすう",
            	"むすこ",
            	"むすぶ",
            	"むすめ",
            	"むせる",
            	"むせん",
            	"むちゅう",
            	"むなしい",
            	"むのう",
            	"むやみ",
            	"むよう",
            	"むらさき",
            	"むりょう",
            	"むろん",
            	"めいあん",
            	"めいうん",
            	"めいえん",
            	"めいかく",
            	"めいきょく",
            	"めいさい",
            	"めいし",
            	"めいそう",
            	"めいぶつ",
            	"めいれい",
            	"めいわく",
            	"めぐまれる",
            	"めざす",
            	"めした",
            	"めずらしい",
            	"めだつ",
            	"めまい",
            	"めやす",
            	"めんきょ",
            	"めんせき",
            	"めんどう",
            	"もうしあげる",
            	"もうどうけん",
            	"もえる",
            	"もくし",
            	"もくてき",
            	"もくようび",
            	"もちろん",
            	"もどる",
            	"もらう",
            	"もんく",
            	"もんだい",
            	"やおや",
            	"やける",
            	"やさい",
            	"やさしい",
            	"やすい",
            	"やすたろう",
            	"やすみ",
            	"やせる",
            	"やそう",
            	"やたい",
            	"やちん",
            	"やっと",
            	"やっぱり",
            	"やぶる",
            	"やめる",
            	"ややこしい",
            	"やよい",
            	"やわらかい",
            	"ゆうき",
            	"ゆうびんきょく",
            	"ゆうべ",
            	"ゆうめい",
            	"ゆけつ",
            	"ゆしゅつ",
            	"ゆせん",
            	"ゆそう",
            	"ゆたか",
            	"ゆちゃく",
            	"ゆでる",
            	"ゆにゅう",
            	"ゆびわ",
            	"ゆらい",
            	"ゆれる",
            	"ようい",
            	"ようか",
            	"ようきゅう",
            	"ようじ",
            	"ようす",
            	"ようちえん",
            	"よかぜ",
            	"よかん",
            	"よきん",
            	"よくせい",
            	"よくぼう",
            	"よけい",
            	"よごれる",
            	"よさん",
            	"よしゅう",
            	"よそう",
            	"よそく",
            	"よっか",
            	"よてい",
            	"よどがわく",
            	"よねつ",
            	"よやく",
            	"よゆう",
            	"よろこぶ",
            	"よろしい",
            	"らいう",
            	"らくがき",
            	"らくご",
            	"らくさつ",
            	"らくだ",
            	"らしんばん",
            	"らせん",
            	"らぞく",
            	"らたい",
            	"らっか",
            	"られつ",
            	"りえき",
            	"りかい",
            	"りきさく",
            	"りきせつ",
            	"りくぐん",
            	"りくつ",
            	"りけん",
            	"りこう",
            	"りせい",
            	"りそう",
            	"りそく",
            	"りてん",
            	"りねん",
            	"りゆう",
            	"りゅうがく",
            	"りよう",
            	"りょうり",
            	"りょかん",
            	"りょくちゃ",
            	"りょこう",
            	"りりく",
            	"りれき",
            	"りろん",
            	"りんご",
            	"るいけい",
            	"るいさい",
            	"るいじ",
            	"るいせき",
            	"るすばん",
            	"るりがわら",
            	"れいかん",
            	"れいぎ",
            	"れいせい",
            	"れいぞうこ",
            	"れいとう",
            	"れいぼう",
            	"れきし",
            	"れきだい",
            	"れんあい",
            	"れんけい",
            	"れんこん",
            	"れんさい",
            	"れんしゅう",
            	"れんぞく",
            	"れんらく",
            	"ろうか",
            	"ろうご",
            	"ろうじん",
            	"ろうそく",
            	"ろくが",
            	"ろこつ",
            	"ろじうら",
            	"ろしゅつ",
            	"ろせん",
            	"ろてん",
            	"ろめん",
            	"ろれつ",
            	"ろんぎ",
            	"ろんぱ",
            	"ろんぶん",
            	"ろんり",
            	"わかす",
            	"わかめ",
            	"わかやま",
            	"わかれる",
            	"わしつ",
            	"わじまし",
            	"わすれもの",
            	"わらう",
            	"われる"
            ];

            var require$$8 = [
            	"abacate",
            	"abaixo",
            	"abalar",
            	"abater",
            	"abduzir",
            	"abelha",
            	"aberto",
            	"abismo",
            	"abotoar",
            	"abranger",
            	"abreviar",
            	"abrigar",
            	"abrupto",
            	"absinto",
            	"absoluto",
            	"absurdo",
            	"abutre",
            	"acabado",
            	"acalmar",
            	"acampar",
            	"acanhar",
            	"acaso",
            	"aceitar",
            	"acelerar",
            	"acenar",
            	"acervo",
            	"acessar",
            	"acetona",
            	"achatar",
            	"acidez",
            	"acima",
            	"acionado",
            	"acirrar",
            	"aclamar",
            	"aclive",
            	"acolhida",
            	"acomodar",
            	"acoplar",
            	"acordar",
            	"acumular",
            	"acusador",
            	"adaptar",
            	"adega",
            	"adentro",
            	"adepto",
            	"adequar",
            	"aderente",
            	"adesivo",
            	"adeus",
            	"adiante",
            	"aditivo",
            	"adjetivo",
            	"adjunto",
            	"admirar",
            	"adorar",
            	"adquirir",
            	"adubo",
            	"adverso",
            	"advogado",
            	"aeronave",
            	"afastar",
            	"aferir",
            	"afetivo",
            	"afinador",
            	"afivelar",
            	"aflito",
            	"afluente",
            	"afrontar",
            	"agachar",
            	"agarrar",
            	"agasalho",
            	"agenciar",
            	"agilizar",
            	"agiota",
            	"agitado",
            	"agora",
            	"agradar",
            	"agreste",
            	"agrupar",
            	"aguardar",
            	"agulha",
            	"ajoelhar",
            	"ajudar",
            	"ajustar",
            	"alameda",
            	"alarme",
            	"alastrar",
            	"alavanca",
            	"albergue",
            	"albino",
            	"alcatra",
            	"aldeia",
            	"alecrim",
            	"alegria",
            	"alertar",
            	"alface",
            	"alfinete",
            	"algum",
            	"alheio",
            	"aliar",
            	"alicate",
            	"alienar",
            	"alinhar",
            	"aliviar",
            	"almofada",
            	"alocar",
            	"alpiste",
            	"alterar",
            	"altitude",
            	"alucinar",
            	"alugar",
            	"aluno",
            	"alusivo",
            	"alvo",
            	"amaciar",
            	"amador",
            	"amarelo",
            	"amassar",
            	"ambas",
            	"ambiente",
            	"ameixa",
            	"amenizar",
            	"amido",
            	"amistoso",
            	"amizade",
            	"amolador",
            	"amontoar",
            	"amoroso",
            	"amostra",
            	"amparar",
            	"ampliar",
            	"ampola",
            	"anagrama",
            	"analisar",
            	"anarquia",
            	"anatomia",
            	"andaime",
            	"anel",
            	"anexo",
            	"angular",
            	"animar",
            	"anjo",
            	"anomalia",
            	"anotado",
            	"ansioso",
            	"anterior",
            	"anuidade",
            	"anunciar",
            	"anzol",
            	"apagador",
            	"apalpar",
            	"apanhado",
            	"apego",
            	"apelido",
            	"apertada",
            	"apesar",
            	"apetite",
            	"apito",
            	"aplauso",
            	"aplicada",
            	"apoio",
            	"apontar",
            	"aposta",
            	"aprendiz",
            	"aprovar",
            	"aquecer",
            	"arame",
            	"aranha",
            	"arara",
            	"arcada",
            	"ardente",
            	"areia",
            	"arejar",
            	"arenito",
            	"aresta",
            	"argiloso",
            	"argola",
            	"arma",
            	"arquivo",
            	"arraial",
            	"arrebate",
            	"arriscar",
            	"arroba",
            	"arrumar",
            	"arsenal",
            	"arterial",
            	"artigo",
            	"arvoredo",
            	"asfaltar",
            	"asilado",
            	"aspirar",
            	"assador",
            	"assinar",
            	"assoalho",
            	"assunto",
            	"astral",
            	"atacado",
            	"atadura",
            	"atalho",
            	"atarefar",
            	"atear",
            	"atender",
            	"aterro",
            	"ateu",
            	"atingir",
            	"atirador",
            	"ativo",
            	"atoleiro",
            	"atracar",
            	"atrevido",
            	"atriz",
            	"atual",
            	"atum",
            	"auditor",
            	"aumentar",
            	"aura",
            	"aurora",
            	"autismo",
            	"autoria",
            	"autuar",
            	"avaliar",
            	"avante",
            	"avaria",
            	"avental",
            	"avesso",
            	"aviador",
            	"avisar",
            	"avulso",
            	"axila",
            	"azarar",
            	"azedo",
            	"azeite",
            	"azulejo",
            	"babar",
            	"babosa",
            	"bacalhau",
            	"bacharel",
            	"bacia",
            	"bagagem",
            	"baiano",
            	"bailar",
            	"baioneta",
            	"bairro",
            	"baixista",
            	"bajular",
            	"baleia",
            	"baliza",
            	"balsa",
            	"banal",
            	"bandeira",
            	"banho",
            	"banir",
            	"banquete",
            	"barato",
            	"barbado",
            	"baronesa",
            	"barraca",
            	"barulho",
            	"baseado",
            	"bastante",
            	"batata",
            	"batedor",
            	"batida",
            	"batom",
            	"batucar",
            	"baunilha",
            	"beber",
            	"beijo",
            	"beirada",
            	"beisebol",
            	"beldade",
            	"beleza",
            	"belga",
            	"beliscar",
            	"bendito",
            	"bengala",
            	"benzer",
            	"berimbau",
            	"berlinda",
            	"berro",
            	"besouro",
            	"bexiga",
            	"bezerro",
            	"bico",
            	"bicudo",
            	"bienal",
            	"bifocal",
            	"bifurcar",
            	"bigorna",
            	"bilhete",
            	"bimestre",
            	"bimotor",
            	"biologia",
            	"biombo",
            	"biosfera",
            	"bipolar",
            	"birrento",
            	"biscoito",
            	"bisneto",
            	"bispo",
            	"bissexto",
            	"bitola",
            	"bizarro",
            	"blindado",
            	"bloco",
            	"bloquear",
            	"boato",
            	"bobagem",
            	"bocado",
            	"bocejo",
            	"bochecha",
            	"boicotar",
            	"bolada",
            	"boletim",
            	"bolha",
            	"bolo",
            	"bombeiro",
            	"bonde",
            	"boneco",
            	"bonita",
            	"borbulha",
            	"borda",
            	"boreal",
            	"borracha",
            	"bovino",
            	"boxeador",
            	"branco",
            	"brasa",
            	"braveza",
            	"breu",
            	"briga",
            	"brilho",
            	"brincar",
            	"broa",
            	"brochura",
            	"bronzear",
            	"broto",
            	"bruxo",
            	"bucha",
            	"budismo",
            	"bufar",
            	"bule",
            	"buraco",
            	"busca",
            	"busto",
            	"buzina",
            	"cabana",
            	"cabelo",
            	"cabide",
            	"cabo",
            	"cabrito",
            	"cacau",
            	"cacetada",
            	"cachorro",
            	"cacique",
            	"cadastro",
            	"cadeado",
            	"cafezal",
            	"caiaque",
            	"caipira",
            	"caixote",
            	"cajado",
            	"caju",
            	"calafrio",
            	"calcular",
            	"caldeira",
            	"calibrar",
            	"calmante",
            	"calota",
            	"camada",
            	"cambista",
            	"camisa",
            	"camomila",
            	"campanha",
            	"camuflar",
            	"canavial",
            	"cancelar",
            	"caneta",
            	"canguru",
            	"canhoto",
            	"canivete",
            	"canoa",
            	"cansado",
            	"cantar",
            	"canudo",
            	"capacho",
            	"capela",
            	"capinar",
            	"capotar",
            	"capricho",
            	"captador",
            	"capuz",
            	"caracol",
            	"carbono",
            	"cardeal",
            	"careca",
            	"carimbar",
            	"carneiro",
            	"carpete",
            	"carreira",
            	"cartaz",
            	"carvalho",
            	"casaco",
            	"casca",
            	"casebre",
            	"castelo",
            	"casulo",
            	"catarata",
            	"cativar",
            	"caule",
            	"causador",
            	"cautelar",
            	"cavalo",
            	"caverna",
            	"cebola",
            	"cedilha",
            	"cegonha",
            	"celebrar",
            	"celular",
            	"cenoura",
            	"censo",
            	"centeio",
            	"cercar",
            	"cerrado",
            	"certeiro",
            	"cerveja",
            	"cetim",
            	"cevada",
            	"chacota",
            	"chaleira",
            	"chamado",
            	"chapada",
            	"charme",
            	"chatice",
            	"chave",
            	"chefe",
            	"chegada",
            	"cheiro",
            	"cheque",
            	"chicote",
            	"chifre",
            	"chinelo",
            	"chocalho",
            	"chover",
            	"chumbo",
            	"chutar",
            	"chuva",
            	"cicatriz",
            	"ciclone",
            	"cidade",
            	"cidreira",
            	"ciente",
            	"cigana",
            	"cimento",
            	"cinto",
            	"cinza",
            	"ciranda",
            	"circuito",
            	"cirurgia",
            	"citar",
            	"clareza",
            	"clero",
            	"clicar",
            	"clone",
            	"clube",
            	"coado",
            	"coagir",
            	"cobaia",
            	"cobertor",
            	"cobrar",
            	"cocada",
            	"coelho",
            	"coentro",
            	"coeso",
            	"cogumelo",
            	"coibir",
            	"coifa",
            	"coiote",
            	"colar",
            	"coleira",
            	"colher",
            	"colidir",
            	"colmeia",
            	"colono",
            	"coluna",
            	"comando",
            	"combinar",
            	"comentar",
            	"comitiva",
            	"comover",
            	"complexo",
            	"comum",
            	"concha",
            	"condor",
            	"conectar",
            	"confuso",
            	"congelar",
            	"conhecer",
            	"conjugar",
            	"consumir",
            	"contrato",
            	"convite",
            	"cooperar",
            	"copeiro",
            	"copiador",
            	"copo",
            	"coquetel",
            	"coragem",
            	"cordial",
            	"corneta",
            	"coronha",
            	"corporal",
            	"correio",
            	"cortejo",
            	"coruja",
            	"corvo",
            	"cosseno",
            	"costela",
            	"cotonete",
            	"couro",
            	"couve",
            	"covil",
            	"cozinha",
            	"cratera",
            	"cravo",
            	"creche",
            	"credor",
            	"creme",
            	"crer",
            	"crespo",
            	"criada",
            	"criminal",
            	"crioulo",
            	"crise",
            	"criticar",
            	"crosta",
            	"crua",
            	"cruzeiro",
            	"cubano",
            	"cueca",
            	"cuidado",
            	"cujo",
            	"culatra",
            	"culminar",
            	"culpar",
            	"cultura",
            	"cumprir",
            	"cunhado",
            	"cupido",
            	"curativo",
            	"curral",
            	"cursar",
            	"curto",
            	"cuspir",
            	"custear",
            	"cutelo",
            	"damasco",
            	"datar",
            	"debater",
            	"debitar",
            	"deboche",
            	"debulhar",
            	"decalque",
            	"decimal",
            	"declive",
            	"decote",
            	"decretar",
            	"dedal",
            	"dedicado",
            	"deduzir",
            	"defesa",
            	"defumar",
            	"degelo",
            	"degrau",
            	"degustar",
            	"deitado",
            	"deixar",
            	"delator",
            	"delegado",
            	"delinear",
            	"delonga",
            	"demanda",
            	"demitir",
            	"demolido",
            	"dentista",
            	"depenado",
            	"depilar",
            	"depois",
            	"depressa",
            	"depurar",
            	"deriva",
            	"derramar",
            	"desafio",
            	"desbotar",
            	"descanso",
            	"desenho",
            	"desfiado",
            	"desgaste",
            	"desigual",
            	"deslize",
            	"desmamar",
            	"desova",
            	"despesa",
            	"destaque",
            	"desviar",
            	"detalhar",
            	"detentor",
            	"detonar",
            	"detrito",
            	"deusa",
            	"dever",
            	"devido",
            	"devotado",
            	"dezena",
            	"diagrama",
            	"dialeto",
            	"didata",
            	"difuso",
            	"digitar",
            	"dilatado",
            	"diluente",
            	"diminuir",
            	"dinastia",
            	"dinheiro",
            	"diocese",
            	"direto",
            	"discreta",
            	"disfarce",
            	"disparo",
            	"disquete",
            	"dissipar",
            	"distante",
            	"ditador",
            	"diurno",
            	"diverso",
            	"divisor",
            	"divulgar",
            	"dizer",
            	"dobrador",
            	"dolorido",
            	"domador",
            	"dominado",
            	"donativo",
            	"donzela",
            	"dormente",
            	"dorsal",
            	"dosagem",
            	"dourado",
            	"doutor",
            	"drenagem",
            	"drible",
            	"drogaria",
            	"duelar",
            	"duende",
            	"dueto",
            	"duplo",
            	"duquesa",
            	"durante",
            	"duvidoso",
            	"eclodir",
            	"ecoar",
            	"ecologia",
            	"edificar",
            	"edital",
            	"educado",
            	"efeito",
            	"efetivar",
            	"ejetar",
            	"elaborar",
            	"eleger",
            	"eleitor",
            	"elenco",
            	"elevador",
            	"eliminar",
            	"elogiar",
            	"embargo",
            	"embolado",
            	"embrulho",
            	"embutido",
            	"emenda",
            	"emergir",
            	"emissor",
            	"empatia",
            	"empenho",
            	"empinado",
            	"empolgar",
            	"emprego",
            	"empurrar",
            	"emulador",
            	"encaixe",
            	"encenado",
            	"enchente",
            	"encontro",
            	"endeusar",
            	"endossar",
            	"enfaixar",
            	"enfeite",
            	"enfim",
            	"engajado",
            	"engenho",
            	"englobar",
            	"engomado",
            	"engraxar",
            	"enguia",
            	"enjoar",
            	"enlatar",
            	"enquanto",
            	"enraizar",
            	"enrolado",
            	"enrugar",
            	"ensaio",
            	"enseada",
            	"ensino",
            	"ensopado",
            	"entanto",
            	"enteado",
            	"entidade",
            	"entortar",
            	"entrada",
            	"entulho",
            	"envergar",
            	"enviado",
            	"envolver",
            	"enxame",
            	"enxerto",
            	"enxofre",
            	"enxuto",
            	"epiderme",
            	"equipar",
            	"ereto",
            	"erguido",
            	"errata",
            	"erva",
            	"ervilha",
            	"esbanjar",
            	"esbelto",
            	"escama",
            	"escola",
            	"escrita",
            	"escuta",
            	"esfinge",
            	"esfolar",
            	"esfregar",
            	"esfumado",
            	"esgrima",
            	"esmalte",
            	"espanto",
            	"espelho",
            	"espiga",
            	"esponja",
            	"espreita",
            	"espumar",
            	"esquerda",
            	"estaca",
            	"esteira",
            	"esticar",
            	"estofado",
            	"estrela",
            	"estudo",
            	"esvaziar",
            	"etanol",
            	"etiqueta",
            	"euforia",
            	"europeu",
            	"evacuar",
            	"evaporar",
            	"evasivo",
            	"eventual",
            	"evidente",
            	"evoluir",
            	"exagero",
            	"exalar",
            	"examinar",
            	"exato",
            	"exausto",
            	"excesso",
            	"excitar",
            	"exclamar",
            	"executar",
            	"exemplo",
            	"exibir",
            	"exigente",
            	"exonerar",
            	"expandir",
            	"expelir",
            	"expirar",
            	"explanar",
            	"exposto",
            	"expresso",
            	"expulsar",
            	"externo",
            	"extinto",
            	"extrato",
            	"fabricar",
            	"fabuloso",
            	"faceta",
            	"facial",
            	"fada",
            	"fadiga",
            	"faixa",
            	"falar",
            	"falta",
            	"familiar",
            	"fandango",
            	"fanfarra",
            	"fantoche",
            	"fardado",
            	"farelo",
            	"farinha",
            	"farofa",
            	"farpa",
            	"fartura",
            	"fatia",
            	"fator",
            	"favorita",
            	"faxina",
            	"fazenda",
            	"fechado",
            	"feijoada",
            	"feirante",
            	"felino",
            	"feminino",
            	"fenda",
            	"feno",
            	"fera",
            	"feriado",
            	"ferrugem",
            	"ferver",
            	"festejar",
            	"fetal",
            	"feudal",
            	"fiapo",
            	"fibrose",
            	"ficar",
            	"ficheiro",
            	"figurado",
            	"fileira",
            	"filho",
            	"filme",
            	"filtrar",
            	"firmeza",
            	"fisgada",
            	"fissura",
            	"fita",
            	"fivela",
            	"fixador",
            	"fixo",
            	"flacidez",
            	"flamingo",
            	"flanela",
            	"flechada",
            	"flora",
            	"flutuar",
            	"fluxo",
            	"focal",
            	"focinho",
            	"fofocar",
            	"fogo",
            	"foguete",
            	"foice",
            	"folgado",
            	"folheto",
            	"forjar",
            	"formiga",
            	"forno",
            	"forte",
            	"fosco",
            	"fossa",
            	"fragata",
            	"fralda",
            	"frango",
            	"frasco",
            	"fraterno",
            	"freira",
            	"frente",
            	"fretar",
            	"frieza",
            	"friso",
            	"fritura",
            	"fronha",
            	"frustrar",
            	"fruteira",
            	"fugir",
            	"fulano",
            	"fuligem",
            	"fundar",
            	"fungo",
            	"funil",
            	"furador",
            	"furioso",
            	"futebol",
            	"gabarito",
            	"gabinete",
            	"gado",
            	"gaiato",
            	"gaiola",
            	"gaivota",
            	"galega",
            	"galho",
            	"galinha",
            	"galocha",
            	"ganhar",
            	"garagem",
            	"garfo",
            	"gargalo",
            	"garimpo",
            	"garoupa",
            	"garrafa",
            	"gasoduto",
            	"gasto",
            	"gata",
            	"gatilho",
            	"gaveta",
            	"gazela",
            	"gelado",
            	"geleia",
            	"gelo",
            	"gemada",
            	"gemer",
            	"gemido",
            	"generoso",
            	"gengiva",
            	"genial",
            	"genoma",
            	"genro",
            	"geologia",
            	"gerador",
            	"germinar",
            	"gesso",
            	"gestor",
            	"ginasta",
            	"gincana",
            	"gingado",
            	"girafa",
            	"girino",
            	"glacial",
            	"glicose",
            	"global",
            	"glorioso",
            	"goela",
            	"goiaba",
            	"golfe",
            	"golpear",
            	"gordura",
            	"gorjeta",
            	"gorro",
            	"gostoso",
            	"goteira",
            	"governar",
            	"gracejo",
            	"gradual",
            	"grafite",
            	"gralha",
            	"grampo",
            	"granada",
            	"gratuito",
            	"graveto",
            	"graxa",
            	"grego",
            	"grelhar",
            	"greve",
            	"grilo",
            	"grisalho",
            	"gritaria",
            	"grosso",
            	"grotesco",
            	"grudado",
            	"grunhido",
            	"gruta",
            	"guache",
            	"guarani",
            	"guaxinim",
            	"guerrear",
            	"guiar",
            	"guincho",
            	"guisado",
            	"gula",
            	"guloso",
            	"guru",
            	"habitar",
            	"harmonia",
            	"haste",
            	"haver",
            	"hectare",
            	"herdar",
            	"heresia",
            	"hesitar",
            	"hiato",
            	"hibernar",
            	"hidratar",
            	"hiena",
            	"hino",
            	"hipismo",
            	"hipnose",
            	"hipoteca",
            	"hoje",
            	"holofote",
            	"homem",
            	"honesto",
            	"honrado",
            	"hormonal",
            	"hospedar",
            	"humorado",
            	"iate",
            	"ideia",
            	"idoso",
            	"ignorado",
            	"igreja",
            	"iguana",
            	"ileso",
            	"ilha",
            	"iludido",
            	"iluminar",
            	"ilustrar",
            	"imagem",
            	"imediato",
            	"imenso",
            	"imersivo",
            	"iminente",
            	"imitador",
            	"imortal",
            	"impacto",
            	"impedir",
            	"implante",
            	"impor",
            	"imprensa",
            	"impune",
            	"imunizar",
            	"inalador",
            	"inapto",
            	"inativo",
            	"incenso",
            	"inchar",
            	"incidir",
            	"incluir",
            	"incolor",
            	"indeciso",
            	"indireto",
            	"indutor",
            	"ineficaz",
            	"inerente",
            	"infantil",
            	"infestar",
            	"infinito",
            	"inflamar",
            	"informal",
            	"infrator",
            	"ingerir",
            	"inibido",
            	"inicial",
            	"inimigo",
            	"injetar",
            	"inocente",
            	"inodoro",
            	"inovador",
            	"inox",
            	"inquieto",
            	"inscrito",
            	"inseto",
            	"insistir",
            	"inspetor",
            	"instalar",
            	"insulto",
            	"intacto",
            	"integral",
            	"intimar",
            	"intocado",
            	"intriga",
            	"invasor",
            	"inverno",
            	"invicto",
            	"invocar",
            	"iogurte",
            	"iraniano",
            	"ironizar",
            	"irreal",
            	"irritado",
            	"isca",
            	"isento",
            	"isolado",
            	"isqueiro",
            	"italiano",
            	"janeiro",
            	"jangada",
            	"janta",
            	"jararaca",
            	"jardim",
            	"jarro",
            	"jasmim",
            	"jato",
            	"javali",
            	"jazida",
            	"jejum",
            	"joaninha",
            	"joelhada",
            	"jogador",
            	"joia",
            	"jornal",
            	"jorrar",
            	"jovem",
            	"juba",
            	"judeu",
            	"judoca",
            	"juiz",
            	"julgador",
            	"julho",
            	"jurado",
            	"jurista",
            	"juro",
            	"justa",
            	"labareda",
            	"laboral",
            	"lacre",
            	"lactante",
            	"ladrilho",
            	"lagarta",
            	"lagoa",
            	"laje",
            	"lamber",
            	"lamentar",
            	"laminar",
            	"lampejo",
            	"lanche",
            	"lapidar",
            	"lapso",
            	"laranja",
            	"lareira",
            	"largura",
            	"lasanha",
            	"lastro",
            	"lateral",
            	"latido",
            	"lavanda",
            	"lavoura",
            	"lavrador",
            	"laxante",
            	"lazer",
            	"lealdade",
            	"lebre",
            	"legado",
            	"legendar",
            	"legista",
            	"leigo",
            	"leiloar",
            	"leitura",
            	"lembrete",
            	"leme",
            	"lenhador",
            	"lentilha",
            	"leoa",
            	"lesma",
            	"leste",
            	"letivo",
            	"letreiro",
            	"levar",
            	"leveza",
            	"levitar",
            	"liberal",
            	"libido",
            	"liderar",
            	"ligar",
            	"ligeiro",
            	"limitar",
            	"limoeiro",
            	"limpador",
            	"linda",
            	"linear",
            	"linhagem",
            	"liquidez",
            	"listagem",
            	"lisura",
            	"litoral",
            	"livro",
            	"lixa",
            	"lixeira",
            	"locador",
            	"locutor",
            	"lojista",
            	"lombo",
            	"lona",
            	"longe",
            	"lontra",
            	"lorde",
            	"lotado",
            	"loteria",
            	"loucura",
            	"lousa",
            	"louvar",
            	"luar",
            	"lucidez",
            	"lucro",
            	"luneta",
            	"lustre",
            	"lutador",
            	"luva",
            	"macaco",
            	"macete",
            	"machado",
            	"macio",
            	"madeira",
            	"madrinha",
            	"magnata",
            	"magreza",
            	"maior",
            	"mais",
            	"malandro",
            	"malha",
            	"malote",
            	"maluco",
            	"mamilo",
            	"mamoeiro",
            	"mamute",
            	"manada",
            	"mancha",
            	"mandato",
            	"manequim",
            	"manhoso",
            	"manivela",
            	"manobrar",
            	"mansa",
            	"manter",
            	"manusear",
            	"mapeado",
            	"maquinar",
            	"marcador",
            	"maresia",
            	"marfim",
            	"margem",
            	"marinho",
            	"marmita",
            	"maroto",
            	"marquise",
            	"marreco",
            	"martelo",
            	"marujo",
            	"mascote",
            	"masmorra",
            	"massagem",
            	"mastigar",
            	"matagal",
            	"materno",
            	"matinal",
            	"matutar",
            	"maxilar",
            	"medalha",
            	"medida",
            	"medusa",
            	"megafone",
            	"meiga",
            	"melancia",
            	"melhor",
            	"membro",
            	"memorial",
            	"menino",
            	"menos",
            	"mensagem",
            	"mental",
            	"merecer",
            	"mergulho",
            	"mesada",
            	"mesclar",
            	"mesmo",
            	"mesquita",
            	"mestre",
            	"metade",
            	"meteoro",
            	"metragem",
            	"mexer",
            	"mexicano",
            	"micro",
            	"migalha",
            	"migrar",
            	"milagre",
            	"milenar",
            	"milhar",
            	"mimado",
            	"minerar",
            	"minhoca",
            	"ministro",
            	"minoria",
            	"miolo",
            	"mirante",
            	"mirtilo",
            	"misturar",
            	"mocidade",
            	"moderno",
            	"modular",
            	"moeda",
            	"moer",
            	"moinho",
            	"moita",
            	"moldura",
            	"moleza",
            	"molho",
            	"molinete",
            	"molusco",
            	"montanha",
            	"moqueca",
            	"morango",
            	"morcego",
            	"mordomo",
            	"morena",
            	"mosaico",
            	"mosquete",
            	"mostarda",
            	"motel",
            	"motim",
            	"moto",
            	"motriz",
            	"muda",
            	"muito",
            	"mulata",
            	"mulher",
            	"multar",
            	"mundial",
            	"munido",
            	"muralha",
            	"murcho",
            	"muscular",
            	"museu",
            	"musical",
            	"nacional",
            	"nadador",
            	"naja",
            	"namoro",
            	"narina",
            	"narrado",
            	"nascer",
            	"nativa",
            	"natureza",
            	"navalha",
            	"navegar",
            	"navio",
            	"neblina",
            	"nebuloso",
            	"negativa",
            	"negociar",
            	"negrito",
            	"nervoso",
            	"neta",
            	"neural",
            	"nevasca",
            	"nevoeiro",
            	"ninar",
            	"ninho",
            	"nitidez",
            	"nivelar",
            	"nobreza",
            	"noite",
            	"noiva",
            	"nomear",
            	"nominal",
            	"nordeste",
            	"nortear",
            	"notar",
            	"noticiar",
            	"noturno",
            	"novelo",
            	"novilho",
            	"novo",
            	"nublado",
            	"nudez",
            	"numeral",
            	"nupcial",
            	"nutrir",
            	"nuvem",
            	"obcecado",
            	"obedecer",
            	"objetivo",
            	"obrigado",
            	"obscuro",
            	"obstetra",
            	"obter",
            	"obturar",
            	"ocidente",
            	"ocioso",
            	"ocorrer",
            	"oculista",
            	"ocupado",
            	"ofegante",
            	"ofensiva",
            	"oferenda",
            	"oficina",
            	"ofuscado",
            	"ogiva",
            	"olaria",
            	"oleoso",
            	"olhar",
            	"oliveira",
            	"ombro",
            	"omelete",
            	"omisso",
            	"omitir",
            	"ondulado",
            	"oneroso",
            	"ontem",
            	"opcional",
            	"operador",
            	"oponente",
            	"oportuno",
            	"oposto",
            	"orar",
            	"orbitar",
            	"ordem",
            	"ordinal",
            	"orfanato",
            	"orgasmo",
            	"orgulho",
            	"oriental",
            	"origem",
            	"oriundo",
            	"orla",
            	"ortodoxo",
            	"orvalho",
            	"oscilar",
            	"ossada",
            	"osso",
            	"ostentar",
            	"otimismo",
            	"ousadia",
            	"outono",
            	"outubro",
            	"ouvido",
            	"ovelha",
            	"ovular",
            	"oxidar",
            	"oxigenar",
            	"pacato",
            	"paciente",
            	"pacote",
            	"pactuar",
            	"padaria",
            	"padrinho",
            	"pagar",
            	"pagode",
            	"painel",
            	"pairar",
            	"paisagem",
            	"palavra",
            	"palestra",
            	"palheta",
            	"palito",
            	"palmada",
            	"palpitar",
            	"pancada",
            	"panela",
            	"panfleto",
            	"panqueca",
            	"pantanal",
            	"papagaio",
            	"papelada",
            	"papiro",
            	"parafina",
            	"parcial",
            	"pardal",
            	"parede",
            	"partida",
            	"pasmo",
            	"passado",
            	"pastel",
            	"patamar",
            	"patente",
            	"patinar",
            	"patrono",
            	"paulada",
            	"pausar",
            	"peculiar",
            	"pedalar",
            	"pedestre",
            	"pediatra",
            	"pedra",
            	"pegada",
            	"peitoral",
            	"peixe",
            	"pele",
            	"pelicano",
            	"penca",
            	"pendurar",
            	"peneira",
            	"penhasco",
            	"pensador",
            	"pente",
            	"perceber",
            	"perfeito",
            	"pergunta",
            	"perito",
            	"permitir",
            	"perna",
            	"perplexo",
            	"persiana",
            	"pertence",
            	"peruca",
            	"pescado",
            	"pesquisa",
            	"pessoa",
            	"petiscar",
            	"piada",
            	"picado",
            	"piedade",
            	"pigmento",
            	"pilastra",
            	"pilhado",
            	"pilotar",
            	"pimenta",
            	"pincel",
            	"pinguim",
            	"pinha",
            	"pinote",
            	"pintar",
            	"pioneiro",
            	"pipoca",
            	"piquete",
            	"piranha",
            	"pires",
            	"pirueta",
            	"piscar",
            	"pistola",
            	"pitanga",
            	"pivete",
            	"planta",
            	"plaqueta",
            	"platina",
            	"plebeu",
            	"plumagem",
            	"pluvial",
            	"pneu",
            	"poda",
            	"poeira",
            	"poetisa",
            	"polegada",
            	"policiar",
            	"poluente",
            	"polvilho",
            	"pomar",
            	"pomba",
            	"ponderar",
            	"pontaria",
            	"populoso",
            	"porta",
            	"possuir",
            	"postal",
            	"pote",
            	"poupar",
            	"pouso",
            	"povoar",
            	"praia",
            	"prancha",
            	"prato",
            	"praxe",
            	"prece",
            	"predador",
            	"prefeito",
            	"premiar",
            	"prensar",
            	"preparar",
            	"presilha",
            	"pretexto",
            	"prevenir",
            	"prezar",
            	"primata",
            	"princesa",
            	"prisma",
            	"privado",
            	"processo",
            	"produto",
            	"profeta",
            	"proibido",
            	"projeto",
            	"prometer",
            	"propagar",
            	"prosa",
            	"protetor",
            	"provador",
            	"publicar",
            	"pudim",
            	"pular",
            	"pulmonar",
            	"pulseira",
            	"punhal",
            	"punir",
            	"pupilo",
            	"pureza",
            	"puxador",
            	"quadra",
            	"quantia",
            	"quarto",
            	"quase",
            	"quebrar",
            	"queda",
            	"queijo",
            	"quente",
            	"querido",
            	"quimono",
            	"quina",
            	"quiosque",
            	"rabanada",
            	"rabisco",
            	"rachar",
            	"racionar",
            	"radial",
            	"raiar",
            	"rainha",
            	"raio",
            	"raiva",
            	"rajada",
            	"ralado",
            	"ramal",
            	"ranger",
            	"ranhura",
            	"rapadura",
            	"rapel",
            	"rapidez",
            	"raposa",
            	"raquete",
            	"raridade",
            	"rasante",
            	"rascunho",
            	"rasgar",
            	"raspador",
            	"rasteira",
            	"rasurar",
            	"ratazana",
            	"ratoeira",
            	"realeza",
            	"reanimar",
            	"reaver",
            	"rebaixar",
            	"rebelde",
            	"rebolar",
            	"recado",
            	"recente",
            	"recheio",
            	"recibo",
            	"recordar",
            	"recrutar",
            	"recuar",
            	"rede",
            	"redimir",
            	"redonda",
            	"reduzida",
            	"reenvio",
            	"refinar",
            	"refletir",
            	"refogar",
            	"refresco",
            	"refugiar",
            	"regalia",
            	"regime",
            	"regra",
            	"reinado",
            	"reitor",
            	"rejeitar",
            	"relativo",
            	"remador",
            	"remendo",
            	"remorso",
            	"renovado",
            	"reparo",
            	"repelir",
            	"repleto",
            	"repolho",
            	"represa",
            	"repudiar",
            	"requerer",
            	"resenha",
            	"resfriar",
            	"resgatar",
            	"residir",
            	"resolver",
            	"respeito",
            	"ressaca",
            	"restante",
            	"resumir",
            	"retalho",
            	"reter",
            	"retirar",
            	"retomada",
            	"retratar",
            	"revelar",
            	"revisor",
            	"revolta",
            	"riacho",
            	"rica",
            	"rigidez",
            	"rigoroso",
            	"rimar",
            	"ringue",
            	"risada",
            	"risco",
            	"risonho",
            	"robalo",
            	"rochedo",
            	"rodada",
            	"rodeio",
            	"rodovia",
            	"roedor",
            	"roleta",
            	"romano",
            	"roncar",
            	"rosado",
            	"roseira",
            	"rosto",
            	"rota",
            	"roteiro",
            	"rotina",
            	"rotular",
            	"rouco",
            	"roupa",
            	"roxo",
            	"rubro",
            	"rugido",
            	"rugoso",
            	"ruivo",
            	"rumo",
            	"rupestre",
            	"russo",
            	"sabor",
            	"saciar",
            	"sacola",
            	"sacudir",
            	"sadio",
            	"safira",
            	"saga",
            	"sagrada",
            	"saibro",
            	"salada",
            	"saleiro",
            	"salgado",
            	"saliva",
            	"salpicar",
            	"salsicha",
            	"saltar",
            	"salvador",
            	"sambar",
            	"samurai",
            	"sanar",
            	"sanfona",
            	"sangue",
            	"sanidade",
            	"sapato",
            	"sarda",
            	"sargento",
            	"sarjeta",
            	"saturar",
            	"saudade",
            	"saxofone",
            	"sazonal",
            	"secar",
            	"secular",
            	"seda",
            	"sedento",
            	"sediado",
            	"sedoso",
            	"sedutor",
            	"segmento",
            	"segredo",
            	"segundo",
            	"seiva",
            	"seleto",
            	"selvagem",
            	"semanal",
            	"semente",
            	"senador",
            	"senhor",
            	"sensual",
            	"sentado",
            	"separado",
            	"sereia",
            	"seringa",
            	"serra",
            	"servo",
            	"setembro",
            	"setor",
            	"sigilo",
            	"silhueta",
            	"silicone",
            	"simetria",
            	"simpatia",
            	"simular",
            	"sinal",
            	"sincero",
            	"singular",
            	"sinopse",
            	"sintonia",
            	"sirene",
            	"siri",
            	"situado",
            	"soberano",
            	"sobra",
            	"socorro",
            	"sogro",
            	"soja",
            	"solda",
            	"soletrar",
            	"solteiro",
            	"sombrio",
            	"sonata",
            	"sondar",
            	"sonegar",
            	"sonhador",
            	"sono",
            	"soprano",
            	"soquete",
            	"sorrir",
            	"sorteio",
            	"sossego",
            	"sotaque",
            	"soterrar",
            	"sovado",
            	"sozinho",
            	"suavizar",
            	"subida",
            	"submerso",
            	"subsolo",
            	"subtrair",
            	"sucata",
            	"sucesso",
            	"suco",
            	"sudeste",
            	"sufixo",
            	"sugador",
            	"sugerir",
            	"sujeito",
            	"sulfato",
            	"sumir",
            	"suor",
            	"superior",
            	"suplicar",
            	"suposto",
            	"suprimir",
            	"surdina",
            	"surfista",
            	"surpresa",
            	"surreal",
            	"surtir",
            	"suspiro",
            	"sustento",
            	"tabela",
            	"tablete",
            	"tabuada",
            	"tacho",
            	"tagarela",
            	"talher",
            	"talo",
            	"talvez",
            	"tamanho",
            	"tamborim",
            	"tampa",
            	"tangente",
            	"tanto",
            	"tapar",
            	"tapioca",
            	"tardio",
            	"tarefa",
            	"tarja",
            	"tarraxa",
            	"tatuagem",
            	"taurino",
            	"taxativo",
            	"taxista",
            	"teatral",
            	"tecer",
            	"tecido",
            	"teclado",
            	"tedioso",
            	"teia",
            	"teimar",
            	"telefone",
            	"telhado",
            	"tempero",
            	"tenente",
            	"tensor",
            	"tentar",
            	"termal",
            	"terno",
            	"terreno",
            	"tese",
            	"tesoura",
            	"testado",
            	"teto",
            	"textura",
            	"texugo",
            	"tiara",
            	"tigela",
            	"tijolo",
            	"timbrar",
            	"timidez",
            	"tingido",
            	"tinteiro",
            	"tiragem",
            	"titular",
            	"toalha",
            	"tocha",
            	"tolerar",
            	"tolice",
            	"tomada",
            	"tomilho",
            	"tonel",
            	"tontura",
            	"topete",
            	"tora",
            	"torcido",
            	"torneio",
            	"torque",
            	"torrada",
            	"torto",
            	"tostar",
            	"touca",
            	"toupeira",
            	"toxina",
            	"trabalho",
            	"tracejar",
            	"tradutor",
            	"trafegar",
            	"trajeto",
            	"trama",
            	"trancar",
            	"trapo",
            	"traseiro",
            	"tratador",
            	"travar",
            	"treino",
            	"tremer",
            	"trepidar",
            	"trevo",
            	"triagem",
            	"tribo",
            	"triciclo",
            	"tridente",
            	"trilogia",
            	"trindade",
            	"triplo",
            	"triturar",
            	"triunfal",
            	"trocar",
            	"trombeta",
            	"trova",
            	"trunfo",
            	"truque",
            	"tubular",
            	"tucano",
            	"tudo",
            	"tulipa",
            	"tupi",
            	"turbo",
            	"turma",
            	"turquesa",
            	"tutelar",
            	"tutorial",
            	"uivar",
            	"umbigo",
            	"unha",
            	"unidade",
            	"uniforme",
            	"urologia",
            	"urso",
            	"urtiga",
            	"urubu",
            	"usado",
            	"usina",
            	"usufruir",
            	"vacina",
            	"vadiar",
            	"vagaroso",
            	"vaidoso",
            	"vala",
            	"valente",
            	"validade",
            	"valores",
            	"vantagem",
            	"vaqueiro",
            	"varanda",
            	"vareta",
            	"varrer",
            	"vascular",
            	"vasilha",
            	"vassoura",
            	"vazar",
            	"vazio",
            	"veado",
            	"vedar",
            	"vegetar",
            	"veicular",
            	"veleiro",
            	"velhice",
            	"veludo",
            	"vencedor",
            	"vendaval",
            	"venerar",
            	"ventre",
            	"verbal",
            	"verdade",
            	"vereador",
            	"vergonha",
            	"vermelho",
            	"verniz",
            	"versar",
            	"vertente",
            	"vespa",
            	"vestido",
            	"vetorial",
            	"viaduto",
            	"viagem",
            	"viajar",
            	"viatura",
            	"vibrador",
            	"videira",
            	"vidraria",
            	"viela",
            	"viga",
            	"vigente",
            	"vigiar",
            	"vigorar",
            	"vilarejo",
            	"vinco",
            	"vinheta",
            	"vinil",
            	"violeta",
            	"virada",
            	"virtude",
            	"visitar",
            	"visto",
            	"vitral",
            	"viveiro",
            	"vizinho",
            	"voador",
            	"voar",
            	"vogal",
            	"volante",
            	"voleibol",
            	"voltagem",
            	"volumoso",
            	"vontade",
            	"vulto",
            	"vuvuzela",
            	"xadrez",
            	"xarope",
            	"xeque",
            	"xeretar",
            	"xerife",
            	"xingar",
            	"zangado",
            	"zarpar",
            	"zebu",
            	"zelador",
            	"zombar",
            	"zoologia",
            	"zumbido"
            ];

            var require$$9 = [
            	"abandon",
            	"ability",
            	"able",
            	"about",
            	"above",
            	"absent",
            	"absorb",
            	"abstract",
            	"absurd",
            	"abuse",
            	"access",
            	"accident",
            	"account",
            	"accuse",
            	"achieve",
            	"acid",
            	"acoustic",
            	"acquire",
            	"across",
            	"act",
            	"action",
            	"actor",
            	"actress",
            	"actual",
            	"adapt",
            	"add",
            	"addict",
            	"address",
            	"adjust",
            	"admit",
            	"adult",
            	"advance",
            	"advice",
            	"aerobic",
            	"affair",
            	"afford",
            	"afraid",
            	"again",
            	"age",
            	"agent",
            	"agree",
            	"ahead",
            	"aim",
            	"air",
            	"airport",
            	"aisle",
            	"alarm",
            	"album",
            	"alcohol",
            	"alert",
            	"alien",
            	"all",
            	"alley",
            	"allow",
            	"almost",
            	"alone",
            	"alpha",
            	"already",
            	"also",
            	"alter",
            	"always",
            	"amateur",
            	"amazing",
            	"among",
            	"amount",
            	"amused",
            	"analyst",
            	"anchor",
            	"ancient",
            	"anger",
            	"angle",
            	"angry",
            	"animal",
            	"ankle",
            	"announce",
            	"annual",
            	"another",
            	"answer",
            	"antenna",
            	"antique",
            	"anxiety",
            	"any",
            	"apart",
            	"apology",
            	"appear",
            	"apple",
            	"approve",
            	"april",
            	"arch",
            	"arctic",
            	"area",
            	"arena",
            	"argue",
            	"arm",
            	"armed",
            	"armor",
            	"army",
            	"around",
            	"arrange",
            	"arrest",
            	"arrive",
            	"arrow",
            	"art",
            	"artefact",
            	"artist",
            	"artwork",
            	"ask",
            	"aspect",
            	"assault",
            	"asset",
            	"assist",
            	"assume",
            	"asthma",
            	"athlete",
            	"atom",
            	"attack",
            	"attend",
            	"attitude",
            	"attract",
            	"auction",
            	"audit",
            	"august",
            	"aunt",
            	"author",
            	"auto",
            	"autumn",
            	"average",
            	"avocado",
            	"avoid",
            	"awake",
            	"aware",
            	"away",
            	"awesome",
            	"awful",
            	"awkward",
            	"axis",
            	"baby",
            	"bachelor",
            	"bacon",
            	"badge",
            	"bag",
            	"balance",
            	"balcony",
            	"ball",
            	"bamboo",
            	"banana",
            	"banner",
            	"bar",
            	"barely",
            	"bargain",
            	"barrel",
            	"base",
            	"basic",
            	"basket",
            	"battle",
            	"beach",
            	"bean",
            	"beauty",
            	"because",
            	"become",
            	"beef",
            	"before",
            	"begin",
            	"behave",
            	"behind",
            	"believe",
            	"below",
            	"belt",
            	"bench",
            	"benefit",
            	"best",
            	"betray",
            	"better",
            	"between",
            	"beyond",
            	"bicycle",
            	"bid",
            	"bike",
            	"bind",
            	"biology",
            	"bird",
            	"birth",
            	"bitter",
            	"black",
            	"blade",
            	"blame",
            	"blanket",
            	"blast",
            	"bleak",
            	"bless",
            	"blind",
            	"blood",
            	"blossom",
            	"blouse",
            	"blue",
            	"blur",
            	"blush",
            	"board",
            	"boat",
            	"body",
            	"boil",
            	"bomb",
            	"bone",
            	"bonus",
            	"book",
            	"boost",
            	"border",
            	"boring",
            	"borrow",
            	"boss",
            	"bottom",
            	"bounce",
            	"box",
            	"boy",
            	"bracket",
            	"brain",
            	"brand",
            	"brass",
            	"brave",
            	"bread",
            	"breeze",
            	"brick",
            	"bridge",
            	"brief",
            	"bright",
            	"bring",
            	"brisk",
            	"broccoli",
            	"broken",
            	"bronze",
            	"broom",
            	"brother",
            	"brown",
            	"brush",
            	"bubble",
            	"buddy",
            	"budget",
            	"buffalo",
            	"build",
            	"bulb",
            	"bulk",
            	"bullet",
            	"bundle",
            	"bunker",
            	"burden",
            	"burger",
            	"burst",
            	"bus",
            	"business",
            	"busy",
            	"butter",
            	"buyer",
            	"buzz",
            	"cabbage",
            	"cabin",
            	"cable",
            	"cactus",
            	"cage",
            	"cake",
            	"call",
            	"calm",
            	"camera",
            	"camp",
            	"can",
            	"canal",
            	"cancel",
            	"candy",
            	"cannon",
            	"canoe",
            	"canvas",
            	"canyon",
            	"capable",
            	"capital",
            	"captain",
            	"car",
            	"carbon",
            	"card",
            	"cargo",
            	"carpet",
            	"carry",
            	"cart",
            	"case",
            	"cash",
            	"casino",
            	"castle",
            	"casual",
            	"cat",
            	"catalog",
            	"catch",
            	"category",
            	"cattle",
            	"caught",
            	"cause",
            	"caution",
            	"cave",
            	"ceiling",
            	"celery",
            	"cement",
            	"census",
            	"century",
            	"cereal",
            	"certain",
            	"chair",
            	"chalk",
            	"champion",
            	"change",
            	"chaos",
            	"chapter",
            	"charge",
            	"chase",
            	"chat",
            	"cheap",
            	"check",
            	"cheese",
            	"chef",
            	"cherry",
            	"chest",
            	"chicken",
            	"chief",
            	"child",
            	"chimney",
            	"choice",
            	"choose",
            	"chronic",
            	"chuckle",
            	"chunk",
            	"churn",
            	"cigar",
            	"cinnamon",
            	"circle",
            	"citizen",
            	"city",
            	"civil",
            	"claim",
            	"clap",
            	"clarify",
            	"claw",
            	"clay",
            	"clean",
            	"clerk",
            	"clever",
            	"click",
            	"client",
            	"cliff",
            	"climb",
            	"clinic",
            	"clip",
            	"clock",
            	"clog",
            	"close",
            	"cloth",
            	"cloud",
            	"clown",
            	"club",
            	"clump",
            	"cluster",
            	"clutch",
            	"coach",
            	"coast",
            	"coconut",
            	"code",
            	"coffee",
            	"coil",
            	"coin",
            	"collect",
            	"color",
            	"column",
            	"combine",
            	"come",
            	"comfort",
            	"comic",
            	"common",
            	"company",
            	"concert",
            	"conduct",
            	"confirm",
            	"congress",
            	"connect",
            	"consider",
            	"control",
            	"convince",
            	"cook",
            	"cool",
            	"copper",
            	"copy",
            	"coral",
            	"core",
            	"corn",
            	"correct",
            	"cost",
            	"cotton",
            	"couch",
            	"country",
            	"couple",
            	"course",
            	"cousin",
            	"cover",
            	"coyote",
            	"crack",
            	"cradle",
            	"craft",
            	"cram",
            	"crane",
            	"crash",
            	"crater",
            	"crawl",
            	"crazy",
            	"cream",
            	"credit",
            	"creek",
            	"crew",
            	"cricket",
            	"crime",
            	"crisp",
            	"critic",
            	"crop",
            	"cross",
            	"crouch",
            	"crowd",
            	"crucial",
            	"cruel",
            	"cruise",
            	"crumble",
            	"crunch",
            	"crush",
            	"cry",
            	"crystal",
            	"cube",
            	"culture",
            	"cup",
            	"cupboard",
            	"curious",
            	"current",
            	"curtain",
            	"curve",
            	"cushion",
            	"custom",
            	"cute",
            	"cycle",
            	"dad",
            	"damage",
            	"damp",
            	"dance",
            	"danger",
            	"daring",
            	"dash",
            	"daughter",
            	"dawn",
            	"day",
            	"deal",
            	"debate",
            	"debris",
            	"decade",
            	"december",
            	"decide",
            	"decline",
            	"decorate",
            	"decrease",
            	"deer",
            	"defense",
            	"define",
            	"defy",
            	"degree",
            	"delay",
            	"deliver",
            	"demand",
            	"demise",
            	"denial",
            	"dentist",
            	"deny",
            	"depart",
            	"depend",
            	"deposit",
            	"depth",
            	"deputy",
            	"derive",
            	"describe",
            	"desert",
            	"design",
            	"desk",
            	"despair",
            	"destroy",
            	"detail",
            	"detect",
            	"develop",
            	"device",
            	"devote",
            	"diagram",
            	"dial",
            	"diamond",
            	"diary",
            	"dice",
            	"diesel",
            	"diet",
            	"differ",
            	"digital",
            	"dignity",
            	"dilemma",
            	"dinner",
            	"dinosaur",
            	"direct",
            	"dirt",
            	"disagree",
            	"discover",
            	"disease",
            	"dish",
            	"dismiss",
            	"disorder",
            	"display",
            	"distance",
            	"divert",
            	"divide",
            	"divorce",
            	"dizzy",
            	"doctor",
            	"document",
            	"dog",
            	"doll",
            	"dolphin",
            	"domain",
            	"donate",
            	"donkey",
            	"donor",
            	"door",
            	"dose",
            	"double",
            	"dove",
            	"draft",
            	"dragon",
            	"drama",
            	"drastic",
            	"draw",
            	"dream",
            	"dress",
            	"drift",
            	"drill",
            	"drink",
            	"drip",
            	"drive",
            	"drop",
            	"drum",
            	"dry",
            	"duck",
            	"dumb",
            	"dune",
            	"during",
            	"dust",
            	"dutch",
            	"duty",
            	"dwarf",
            	"dynamic",
            	"eager",
            	"eagle",
            	"early",
            	"earn",
            	"earth",
            	"easily",
            	"east",
            	"easy",
            	"echo",
            	"ecology",
            	"economy",
            	"edge",
            	"edit",
            	"educate",
            	"effort",
            	"egg",
            	"eight",
            	"either",
            	"elbow",
            	"elder",
            	"electric",
            	"elegant",
            	"element",
            	"elephant",
            	"elevator",
            	"elite",
            	"else",
            	"embark",
            	"embody",
            	"embrace",
            	"emerge",
            	"emotion",
            	"employ",
            	"empower",
            	"empty",
            	"enable",
            	"enact",
            	"end",
            	"endless",
            	"endorse",
            	"enemy",
            	"energy",
            	"enforce",
            	"engage",
            	"engine",
            	"enhance",
            	"enjoy",
            	"enlist",
            	"enough",
            	"enrich",
            	"enroll",
            	"ensure",
            	"enter",
            	"entire",
            	"entry",
            	"envelope",
            	"episode",
            	"equal",
            	"equip",
            	"era",
            	"erase",
            	"erode",
            	"erosion",
            	"error",
            	"erupt",
            	"escape",
            	"essay",
            	"essence",
            	"estate",
            	"eternal",
            	"ethics",
            	"evidence",
            	"evil",
            	"evoke",
            	"evolve",
            	"exact",
            	"example",
            	"excess",
            	"exchange",
            	"excite",
            	"exclude",
            	"excuse",
            	"execute",
            	"exercise",
            	"exhaust",
            	"exhibit",
            	"exile",
            	"exist",
            	"exit",
            	"exotic",
            	"expand",
            	"expect",
            	"expire",
            	"explain",
            	"expose",
            	"express",
            	"extend",
            	"extra",
            	"eye",
            	"eyebrow",
            	"fabric",
            	"face",
            	"faculty",
            	"fade",
            	"faint",
            	"faith",
            	"fall",
            	"false",
            	"fame",
            	"family",
            	"famous",
            	"fan",
            	"fancy",
            	"fantasy",
            	"farm",
            	"fashion",
            	"fat",
            	"fatal",
            	"father",
            	"fatigue",
            	"fault",
            	"favorite",
            	"feature",
            	"february",
            	"federal",
            	"fee",
            	"feed",
            	"feel",
            	"female",
            	"fence",
            	"festival",
            	"fetch",
            	"fever",
            	"few",
            	"fiber",
            	"fiction",
            	"field",
            	"figure",
            	"file",
            	"film",
            	"filter",
            	"final",
            	"find",
            	"fine",
            	"finger",
            	"finish",
            	"fire",
            	"firm",
            	"first",
            	"fiscal",
            	"fish",
            	"fit",
            	"fitness",
            	"fix",
            	"flag",
            	"flame",
            	"flash",
            	"flat",
            	"flavor",
            	"flee",
            	"flight",
            	"flip",
            	"float",
            	"flock",
            	"floor",
            	"flower",
            	"fluid",
            	"flush",
            	"fly",
            	"foam",
            	"focus",
            	"fog",
            	"foil",
            	"fold",
            	"follow",
            	"food",
            	"foot",
            	"force",
            	"forest",
            	"forget",
            	"fork",
            	"fortune",
            	"forum",
            	"forward",
            	"fossil",
            	"foster",
            	"found",
            	"fox",
            	"fragile",
            	"frame",
            	"frequent",
            	"fresh",
            	"friend",
            	"fringe",
            	"frog",
            	"front",
            	"frost",
            	"frown",
            	"frozen",
            	"fruit",
            	"fuel",
            	"fun",
            	"funny",
            	"furnace",
            	"fury",
            	"future",
            	"gadget",
            	"gain",
            	"galaxy",
            	"gallery",
            	"game",
            	"gap",
            	"garage",
            	"garbage",
            	"garden",
            	"garlic",
            	"garment",
            	"gas",
            	"gasp",
            	"gate",
            	"gather",
            	"gauge",
            	"gaze",
            	"general",
            	"genius",
            	"genre",
            	"gentle",
            	"genuine",
            	"gesture",
            	"ghost",
            	"giant",
            	"gift",
            	"giggle",
            	"ginger",
            	"giraffe",
            	"girl",
            	"give",
            	"glad",
            	"glance",
            	"glare",
            	"glass",
            	"glide",
            	"glimpse",
            	"globe",
            	"gloom",
            	"glory",
            	"glove",
            	"glow",
            	"glue",
            	"goat",
            	"goddess",
            	"gold",
            	"good",
            	"goose",
            	"gorilla",
            	"gospel",
            	"gossip",
            	"govern",
            	"gown",
            	"grab",
            	"grace",
            	"grain",
            	"grant",
            	"grape",
            	"grass",
            	"gravity",
            	"great",
            	"green",
            	"grid",
            	"grief",
            	"grit",
            	"grocery",
            	"group",
            	"grow",
            	"grunt",
            	"guard",
            	"guess",
            	"guide",
            	"guilt",
            	"guitar",
            	"gun",
            	"gym",
            	"habit",
            	"hair",
            	"half",
            	"hammer",
            	"hamster",
            	"hand",
            	"happy",
            	"harbor",
            	"hard",
            	"harsh",
            	"harvest",
            	"hat",
            	"have",
            	"hawk",
            	"hazard",
            	"head",
            	"health",
            	"heart",
            	"heavy",
            	"hedgehog",
            	"height",
            	"hello",
            	"helmet",
            	"help",
            	"hen",
            	"hero",
            	"hidden",
            	"high",
            	"hill",
            	"hint",
            	"hip",
            	"hire",
            	"history",
            	"hobby",
            	"hockey",
            	"hold",
            	"hole",
            	"holiday",
            	"hollow",
            	"home",
            	"honey",
            	"hood",
            	"hope",
            	"horn",
            	"horror",
            	"horse",
            	"hospital",
            	"host",
            	"hotel",
            	"hour",
            	"hover",
            	"hub",
            	"huge",
            	"human",
            	"humble",
            	"humor",
            	"hundred",
            	"hungry",
            	"hunt",
            	"hurdle",
            	"hurry",
            	"hurt",
            	"husband",
            	"hybrid",
            	"ice",
            	"icon",
            	"idea",
            	"identify",
            	"idle",
            	"ignore",
            	"ill",
            	"illegal",
            	"illness",
            	"image",
            	"imitate",
            	"immense",
            	"immune",
            	"impact",
            	"impose",
            	"improve",
            	"impulse",
            	"inch",
            	"include",
            	"income",
            	"increase",
            	"index",
            	"indicate",
            	"indoor",
            	"industry",
            	"infant",
            	"inflict",
            	"inform",
            	"inhale",
            	"inherit",
            	"initial",
            	"inject",
            	"injury",
            	"inmate",
            	"inner",
            	"innocent",
            	"input",
            	"inquiry",
            	"insane",
            	"insect",
            	"inside",
            	"inspire",
            	"install",
            	"intact",
            	"interest",
            	"into",
            	"invest",
            	"invite",
            	"involve",
            	"iron",
            	"island",
            	"isolate",
            	"issue",
            	"item",
            	"ivory",
            	"jacket",
            	"jaguar",
            	"jar",
            	"jazz",
            	"jealous",
            	"jeans",
            	"jelly",
            	"jewel",
            	"job",
            	"join",
            	"joke",
            	"journey",
            	"joy",
            	"judge",
            	"juice",
            	"jump",
            	"jungle",
            	"junior",
            	"junk",
            	"just",
            	"kangaroo",
            	"keen",
            	"keep",
            	"ketchup",
            	"key",
            	"kick",
            	"kid",
            	"kidney",
            	"kind",
            	"kingdom",
            	"kiss",
            	"kit",
            	"kitchen",
            	"kite",
            	"kitten",
            	"kiwi",
            	"knee",
            	"knife",
            	"knock",
            	"know",
            	"lab",
            	"label",
            	"labor",
            	"ladder",
            	"lady",
            	"lake",
            	"lamp",
            	"language",
            	"laptop",
            	"large",
            	"later",
            	"latin",
            	"laugh",
            	"laundry",
            	"lava",
            	"law",
            	"lawn",
            	"lawsuit",
            	"layer",
            	"lazy",
            	"leader",
            	"leaf",
            	"learn",
            	"leave",
            	"lecture",
            	"left",
            	"leg",
            	"legal",
            	"legend",
            	"leisure",
            	"lemon",
            	"lend",
            	"length",
            	"lens",
            	"leopard",
            	"lesson",
            	"letter",
            	"level",
            	"liar",
            	"liberty",
            	"library",
            	"license",
            	"life",
            	"lift",
            	"light",
            	"like",
            	"limb",
            	"limit",
            	"link",
            	"lion",
            	"liquid",
            	"list",
            	"little",
            	"live",
            	"lizard",
            	"load",
            	"loan",
            	"lobster",
            	"local",
            	"lock",
            	"logic",
            	"lonely",
            	"long",
            	"loop",
            	"lottery",
            	"loud",
            	"lounge",
            	"love",
            	"loyal",
            	"lucky",
            	"luggage",
            	"lumber",
            	"lunar",
            	"lunch",
            	"luxury",
            	"lyrics",
            	"machine",
            	"mad",
            	"magic",
            	"magnet",
            	"maid",
            	"mail",
            	"main",
            	"major",
            	"make",
            	"mammal",
            	"man",
            	"manage",
            	"mandate",
            	"mango",
            	"mansion",
            	"manual",
            	"maple",
            	"marble",
            	"march",
            	"margin",
            	"marine",
            	"market",
            	"marriage",
            	"mask",
            	"mass",
            	"master",
            	"match",
            	"material",
            	"math",
            	"matrix",
            	"matter",
            	"maximum",
            	"maze",
            	"meadow",
            	"mean",
            	"measure",
            	"meat",
            	"mechanic",
            	"medal",
            	"media",
            	"melody",
            	"melt",
            	"member",
            	"memory",
            	"mention",
            	"menu",
            	"mercy",
            	"merge",
            	"merit",
            	"merry",
            	"mesh",
            	"message",
            	"metal",
            	"method",
            	"middle",
            	"midnight",
            	"milk",
            	"million",
            	"mimic",
            	"mind",
            	"minimum",
            	"minor",
            	"minute",
            	"miracle",
            	"mirror",
            	"misery",
            	"miss",
            	"mistake",
            	"mix",
            	"mixed",
            	"mixture",
            	"mobile",
            	"model",
            	"modify",
            	"mom",
            	"moment",
            	"monitor",
            	"monkey",
            	"monster",
            	"month",
            	"moon",
            	"moral",
            	"more",
            	"morning",
            	"mosquito",
            	"mother",
            	"motion",
            	"motor",
            	"mountain",
            	"mouse",
            	"move",
            	"movie",
            	"much",
            	"muffin",
            	"mule",
            	"multiply",
            	"muscle",
            	"museum",
            	"mushroom",
            	"music",
            	"must",
            	"mutual",
            	"myself",
            	"mystery",
            	"myth",
            	"naive",
            	"name",
            	"napkin",
            	"narrow",
            	"nasty",
            	"nation",
            	"nature",
            	"near",
            	"neck",
            	"need",
            	"negative",
            	"neglect",
            	"neither",
            	"nephew",
            	"nerve",
            	"nest",
            	"net",
            	"network",
            	"neutral",
            	"never",
            	"news",
            	"next",
            	"nice",
            	"night",
            	"noble",
            	"noise",
            	"nominee",
            	"noodle",
            	"normal",
            	"north",
            	"nose",
            	"notable",
            	"note",
            	"nothing",
            	"notice",
            	"novel",
            	"now",
            	"nuclear",
            	"number",
            	"nurse",
            	"nut",
            	"oak",
            	"obey",
            	"object",
            	"oblige",
            	"obscure",
            	"observe",
            	"obtain",
            	"obvious",
            	"occur",
            	"ocean",
            	"october",
            	"odor",
            	"off",
            	"offer",
            	"office",
            	"often",
            	"oil",
            	"okay",
            	"old",
            	"olive",
            	"olympic",
            	"omit",
            	"once",
            	"one",
            	"onion",
            	"online",
            	"only",
            	"open",
            	"opera",
            	"opinion",
            	"oppose",
            	"option",
            	"orange",
            	"orbit",
            	"orchard",
            	"order",
            	"ordinary",
            	"organ",
            	"orient",
            	"original",
            	"orphan",
            	"ostrich",
            	"other",
            	"outdoor",
            	"outer",
            	"output",
            	"outside",
            	"oval",
            	"oven",
            	"over",
            	"own",
            	"owner",
            	"oxygen",
            	"oyster",
            	"ozone",
            	"pact",
            	"paddle",
            	"page",
            	"pair",
            	"palace",
            	"palm",
            	"panda",
            	"panel",
            	"panic",
            	"panther",
            	"paper",
            	"parade",
            	"parent",
            	"park",
            	"parrot",
            	"party",
            	"pass",
            	"patch",
            	"path",
            	"patient",
            	"patrol",
            	"pattern",
            	"pause",
            	"pave",
            	"payment",
            	"peace",
            	"peanut",
            	"pear",
            	"peasant",
            	"pelican",
            	"pen",
            	"penalty",
            	"pencil",
            	"people",
            	"pepper",
            	"perfect",
            	"permit",
            	"person",
            	"pet",
            	"phone",
            	"photo",
            	"phrase",
            	"physical",
            	"piano",
            	"picnic",
            	"picture",
            	"piece",
            	"pig",
            	"pigeon",
            	"pill",
            	"pilot",
            	"pink",
            	"pioneer",
            	"pipe",
            	"pistol",
            	"pitch",
            	"pizza",
            	"place",
            	"planet",
            	"plastic",
            	"plate",
            	"play",
            	"please",
            	"pledge",
            	"pluck",
            	"plug",
            	"plunge",
            	"poem",
            	"poet",
            	"point",
            	"polar",
            	"pole",
            	"police",
            	"pond",
            	"pony",
            	"pool",
            	"popular",
            	"portion",
            	"position",
            	"possible",
            	"post",
            	"potato",
            	"pottery",
            	"poverty",
            	"powder",
            	"power",
            	"practice",
            	"praise",
            	"predict",
            	"prefer",
            	"prepare",
            	"present",
            	"pretty",
            	"prevent",
            	"price",
            	"pride",
            	"primary",
            	"print",
            	"priority",
            	"prison",
            	"private",
            	"prize",
            	"problem",
            	"process",
            	"produce",
            	"profit",
            	"program",
            	"project",
            	"promote",
            	"proof",
            	"property",
            	"prosper",
            	"protect",
            	"proud",
            	"provide",
            	"public",
            	"pudding",
            	"pull",
            	"pulp",
            	"pulse",
            	"pumpkin",
            	"punch",
            	"pupil",
            	"puppy",
            	"purchase",
            	"purity",
            	"purpose",
            	"purse",
            	"push",
            	"put",
            	"puzzle",
            	"pyramid",
            	"quality",
            	"quantum",
            	"quarter",
            	"question",
            	"quick",
            	"quit",
            	"quiz",
            	"quote",
            	"rabbit",
            	"raccoon",
            	"race",
            	"rack",
            	"radar",
            	"radio",
            	"rail",
            	"rain",
            	"raise",
            	"rally",
            	"ramp",
            	"ranch",
            	"random",
            	"range",
            	"rapid",
            	"rare",
            	"rate",
            	"rather",
            	"raven",
            	"raw",
            	"razor",
            	"ready",
            	"real",
            	"reason",
            	"rebel",
            	"rebuild",
            	"recall",
            	"receive",
            	"recipe",
            	"record",
            	"recycle",
            	"reduce",
            	"reflect",
            	"reform",
            	"refuse",
            	"region",
            	"regret",
            	"regular",
            	"reject",
            	"relax",
            	"release",
            	"relief",
            	"rely",
            	"remain",
            	"remember",
            	"remind",
            	"remove",
            	"render",
            	"renew",
            	"rent",
            	"reopen",
            	"repair",
            	"repeat",
            	"replace",
            	"report",
            	"require",
            	"rescue",
            	"resemble",
            	"resist",
            	"resource",
            	"response",
            	"result",
            	"retire",
            	"retreat",
            	"return",
            	"reunion",
            	"reveal",
            	"review",
            	"reward",
            	"rhythm",
            	"rib",
            	"ribbon",
            	"rice",
            	"rich",
            	"ride",
            	"ridge",
            	"rifle",
            	"right",
            	"rigid",
            	"ring",
            	"riot",
            	"ripple",
            	"risk",
            	"ritual",
            	"rival",
            	"river",
            	"road",
            	"roast",
            	"robot",
            	"robust",
            	"rocket",
            	"romance",
            	"roof",
            	"rookie",
            	"room",
            	"rose",
            	"rotate",
            	"rough",
            	"round",
            	"route",
            	"royal",
            	"rubber",
            	"rude",
            	"rug",
            	"rule",
            	"run",
            	"runway",
            	"rural",
            	"sad",
            	"saddle",
            	"sadness",
            	"safe",
            	"sail",
            	"salad",
            	"salmon",
            	"salon",
            	"salt",
            	"salute",
            	"same",
            	"sample",
            	"sand",
            	"satisfy",
            	"satoshi",
            	"sauce",
            	"sausage",
            	"save",
            	"say",
            	"scale",
            	"scan",
            	"scare",
            	"scatter",
            	"scene",
            	"scheme",
            	"school",
            	"science",
            	"scissors",
            	"scorpion",
            	"scout",
            	"scrap",
            	"screen",
            	"script",
            	"scrub",
            	"sea",
            	"search",
            	"season",
            	"seat",
            	"second",
            	"secret",
            	"section",
            	"security",
            	"seed",
            	"seek",
            	"segment",
            	"select",
            	"sell",
            	"seminar",
            	"senior",
            	"sense",
            	"sentence",
            	"series",
            	"service",
            	"session",
            	"settle",
            	"setup",
            	"seven",
            	"shadow",
            	"shaft",
            	"shallow",
            	"share",
            	"shed",
            	"shell",
            	"sheriff",
            	"shield",
            	"shift",
            	"shine",
            	"ship",
            	"shiver",
            	"shock",
            	"shoe",
            	"shoot",
            	"shop",
            	"short",
            	"shoulder",
            	"shove",
            	"shrimp",
            	"shrug",
            	"shuffle",
            	"shy",
            	"sibling",
            	"sick",
            	"side",
            	"siege",
            	"sight",
            	"sign",
            	"silent",
            	"silk",
            	"silly",
            	"silver",
            	"similar",
            	"simple",
            	"since",
            	"sing",
            	"siren",
            	"sister",
            	"situate",
            	"six",
            	"size",
            	"skate",
            	"sketch",
            	"ski",
            	"skill",
            	"skin",
            	"skirt",
            	"skull",
            	"slab",
            	"slam",
            	"sleep",
            	"slender",
            	"slice",
            	"slide",
            	"slight",
            	"slim",
            	"slogan",
            	"slot",
            	"slow",
            	"slush",
            	"small",
            	"smart",
            	"smile",
            	"smoke",
            	"smooth",
            	"snack",
            	"snake",
            	"snap",
            	"sniff",
            	"snow",
            	"soap",
            	"soccer",
            	"social",
            	"sock",
            	"soda",
            	"soft",
            	"solar",
            	"soldier",
            	"solid",
            	"solution",
            	"solve",
            	"someone",
            	"song",
            	"soon",
            	"sorry",
            	"sort",
            	"soul",
            	"sound",
            	"soup",
            	"source",
            	"south",
            	"space",
            	"spare",
            	"spatial",
            	"spawn",
            	"speak",
            	"special",
            	"speed",
            	"spell",
            	"spend",
            	"sphere",
            	"spice",
            	"spider",
            	"spike",
            	"spin",
            	"spirit",
            	"split",
            	"spoil",
            	"sponsor",
            	"spoon",
            	"sport",
            	"spot",
            	"spray",
            	"spread",
            	"spring",
            	"spy",
            	"square",
            	"squeeze",
            	"squirrel",
            	"stable",
            	"stadium",
            	"staff",
            	"stage",
            	"stairs",
            	"stamp",
            	"stand",
            	"start",
            	"state",
            	"stay",
            	"steak",
            	"steel",
            	"stem",
            	"step",
            	"stereo",
            	"stick",
            	"still",
            	"sting",
            	"stock",
            	"stomach",
            	"stone",
            	"stool",
            	"story",
            	"stove",
            	"strategy",
            	"street",
            	"strike",
            	"strong",
            	"struggle",
            	"student",
            	"stuff",
            	"stumble",
            	"style",
            	"subject",
            	"submit",
            	"subway",
            	"success",
            	"such",
            	"sudden",
            	"suffer",
            	"sugar",
            	"suggest",
            	"suit",
            	"summer",
            	"sun",
            	"sunny",
            	"sunset",
            	"super",
            	"supply",
            	"supreme",
            	"sure",
            	"surface",
            	"surge",
            	"surprise",
            	"surround",
            	"survey",
            	"suspect",
            	"sustain",
            	"swallow",
            	"swamp",
            	"swap",
            	"swarm",
            	"swear",
            	"sweet",
            	"swift",
            	"swim",
            	"swing",
            	"switch",
            	"sword",
            	"symbol",
            	"symptom",
            	"syrup",
            	"system",
            	"table",
            	"tackle",
            	"tag",
            	"tail",
            	"talent",
            	"talk",
            	"tank",
            	"tape",
            	"target",
            	"task",
            	"taste",
            	"tattoo",
            	"taxi",
            	"teach",
            	"team",
            	"tell",
            	"ten",
            	"tenant",
            	"tennis",
            	"tent",
            	"term",
            	"test",
            	"text",
            	"thank",
            	"that",
            	"theme",
            	"then",
            	"theory",
            	"there",
            	"they",
            	"thing",
            	"this",
            	"thought",
            	"three",
            	"thrive",
            	"throw",
            	"thumb",
            	"thunder",
            	"ticket",
            	"tide",
            	"tiger",
            	"tilt",
            	"timber",
            	"time",
            	"tiny",
            	"tip",
            	"tired",
            	"tissue",
            	"title",
            	"toast",
            	"tobacco",
            	"today",
            	"toddler",
            	"toe",
            	"together",
            	"toilet",
            	"token",
            	"tomato",
            	"tomorrow",
            	"tone",
            	"tongue",
            	"tonight",
            	"tool",
            	"tooth",
            	"top",
            	"topic",
            	"topple",
            	"torch",
            	"tornado",
            	"tortoise",
            	"toss",
            	"total",
            	"tourist",
            	"toward",
            	"tower",
            	"town",
            	"toy",
            	"track",
            	"trade",
            	"traffic",
            	"tragic",
            	"train",
            	"transfer",
            	"trap",
            	"trash",
            	"travel",
            	"tray",
            	"treat",
            	"tree",
            	"trend",
            	"trial",
            	"tribe",
            	"trick",
            	"trigger",
            	"trim",
            	"trip",
            	"trophy",
            	"trouble",
            	"truck",
            	"true",
            	"truly",
            	"trumpet",
            	"trust",
            	"truth",
            	"try",
            	"tube",
            	"tuition",
            	"tumble",
            	"tuna",
            	"tunnel",
            	"turkey",
            	"turn",
            	"turtle",
            	"twelve",
            	"twenty",
            	"twice",
            	"twin",
            	"twist",
            	"two",
            	"type",
            	"typical",
            	"ugly",
            	"umbrella",
            	"unable",
            	"unaware",
            	"uncle",
            	"uncover",
            	"under",
            	"undo",
            	"unfair",
            	"unfold",
            	"unhappy",
            	"uniform",
            	"unique",
            	"unit",
            	"universe",
            	"unknown",
            	"unlock",
            	"until",
            	"unusual",
            	"unveil",
            	"update",
            	"upgrade",
            	"uphold",
            	"upon",
            	"upper",
            	"upset",
            	"urban",
            	"urge",
            	"usage",
            	"use",
            	"used",
            	"useful",
            	"useless",
            	"usual",
            	"utility",
            	"vacant",
            	"vacuum",
            	"vague",
            	"valid",
            	"valley",
            	"valve",
            	"van",
            	"vanish",
            	"vapor",
            	"various",
            	"vast",
            	"vault",
            	"vehicle",
            	"velvet",
            	"vendor",
            	"venture",
            	"venue",
            	"verb",
            	"verify",
            	"version",
            	"very",
            	"vessel",
            	"veteran",
            	"viable",
            	"vibrant",
            	"vicious",
            	"victory",
            	"video",
            	"view",
            	"village",
            	"vintage",
            	"violin",
            	"virtual",
            	"virus",
            	"visa",
            	"visit",
            	"visual",
            	"vital",
            	"vivid",
            	"vocal",
            	"voice",
            	"void",
            	"volcano",
            	"volume",
            	"vote",
            	"voyage",
            	"wage",
            	"wagon",
            	"wait",
            	"walk",
            	"wall",
            	"walnut",
            	"want",
            	"warfare",
            	"warm",
            	"warrior",
            	"wash",
            	"wasp",
            	"waste",
            	"water",
            	"wave",
            	"way",
            	"wealth",
            	"weapon",
            	"wear",
            	"weasel",
            	"weather",
            	"web",
            	"wedding",
            	"weekend",
            	"weird",
            	"welcome",
            	"west",
            	"wet",
            	"whale",
            	"what",
            	"wheat",
            	"wheel",
            	"when",
            	"where",
            	"whip",
            	"whisper",
            	"wide",
            	"width",
            	"wife",
            	"wild",
            	"will",
            	"win",
            	"window",
            	"wine",
            	"wing",
            	"wink",
            	"winner",
            	"winter",
            	"wire",
            	"wisdom",
            	"wise",
            	"wish",
            	"witness",
            	"wolf",
            	"woman",
            	"wonder",
            	"wood",
            	"wool",
            	"word",
            	"work",
            	"world",
            	"worry",
            	"worth",
            	"wrap",
            	"wreck",
            	"wrestle",
            	"wrist",
            	"write",
            	"wrong",
            	"yard",
            	"year",
            	"yellow",
            	"you",
            	"young",
            	"youth",
            	"zebra",
            	"zero",
            	"zone",
            	"zoo"
            ];

            Object.defineProperty(_wordlists, "__esModule", {
              value: true
            }); // browserify by default only pulls in files that are hard coded in requires
            // In order of last to first in this file, the default wordlist will be chosen
            // based on what is present. (Bundles may remove wordlists they don't need)

            var wordlists = {};
            _wordlists.wordlists = wordlists;

            var _default;

            var _default_1 = _wordlists._default = _default;

            try {
              _default_1 = _wordlists._default = _default = require$$0$1;
              wordlists.czech = _default;
            } catch (err) {}

            try {
              _default_1 = _wordlists._default = _default = require$$1;
              wordlists.chinese_simplified = _default;
            } catch (err) {}

            try {
              _default_1 = _wordlists._default = _default = require$$2;
              wordlists.chinese_traditional = _default;
            } catch (err) {}

            try {
              _default_1 = _wordlists._default = _default = require$$3;
              wordlists.korean = _default;
            } catch (err) {}

            try {
              _default_1 = _wordlists._default = _default = require$$4;
              wordlists.french = _default;
            } catch (err) {}

            try {
              _default_1 = _wordlists._default = _default = require$$5;
              wordlists.italian = _default;
            } catch (err) {}

            try {
              _default_1 = _wordlists._default = _default = require$$6;
              wordlists.spanish = _default;
            } catch (err) {}

            try {
              _default_1 = _wordlists._default = _default = require$$7;
              wordlists.japanese = _default;
              wordlists.JA = _default;
            } catch (err) {}

            try {
              _default_1 = _wordlists._default = _default = require$$8;
              wordlists.portuguese = _default;
            } catch (err) {}

            try {
              _default_1 = _wordlists._default = _default = require$$9;
              wordlists.english = _default;
              wordlists.EN = _default;
            } catch (err) {}

            Object.defineProperty(src$2, "__esModule", {
              value: true
            });
            var createHash$1 = browser$2;
            var pbkdf2_1 = browser$1;
            var randomBytes = browser$3.exports;
            var _wordlists_1 = _wordlists;
            var DEFAULT_WORDLIST = _wordlists_1._default;
            var INVALID_MNEMONIC = 'Invalid mnemonic';
            var INVALID_ENTROPY = 'Invalid entropy';
            var INVALID_CHECKSUM = 'Invalid mnemonic checksum';
            var WORDLIST_REQUIRED = 'A wordlist is required but a default could not be found.\n' + 'Please pass a 2048 word array explicitly.';

            function pbkdf2Promise(password, saltMixin, iterations, keylen, digest) {
              return Promise.resolve().then(function () {
                return new Promise(function (resolve, reject) {
                  var callback = function callback(err, derivedKey) {
                    if (err) {
                      return reject(err);
                    } else {
                      return resolve(derivedKey);
                    }
                  };

                  pbkdf2_1.pbkdf2(password, saltMixin, iterations, keylen, digest, callback);
                });
              });
            }

            function normalize(str) {
              return (str || '').normalize('NFKD');
            }

            function lpad(str, padString, length) {
              while (str.length < length) {
                str = padString + str;
              }

              return str;
            }

            function binaryToByte(bin) {
              return parseInt(bin, 2);
            }

            function bytesToBinary(bytes) {
              return bytes.map(function (x) {
                return lpad(x.toString(2), '0', 8);
              }).join('');
            }

            function deriveChecksumBits(entropyBuffer) {
              var ENT = entropyBuffer.length * 8;
              var CS = ENT / 32;
              var hash = createHash$1('sha256').update(entropyBuffer).digest();
              return bytesToBinary(Array.from(hash)).slice(0, CS);
            }

            function salt(password) {
              return 'mnemonic' + (password || '');
            }

            function mnemonicToSeedSync(mnemonic, password) {
              var mnemonicBuffer = Buffer$i.from(normalize(mnemonic), 'utf8');
              var saltBuffer = Buffer$i.from(salt(normalize(password)), 'utf8');
              return pbkdf2_1.pbkdf2Sync(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512');
            }

            var mnemonicToSeedSync_1 = src$2.mnemonicToSeedSync = mnemonicToSeedSync;

            function mnemonicToSeed(mnemonic, password) {
              return Promise.resolve().then(function () {
                var mnemonicBuffer = Buffer$i.from(normalize(mnemonic), 'utf8');
                var saltBuffer = Buffer$i.from(salt(normalize(password)), 'utf8');
                return pbkdf2Promise(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512');
              });
            }

            var mnemonicToSeed_1 = src$2.mnemonicToSeed = mnemonicToSeed;

            function mnemonicToEntropy(mnemonic, wordlist) {
              wordlist = wordlist || DEFAULT_WORDLIST;

              if (!wordlist) {
                throw new Error(WORDLIST_REQUIRED);
              }

              var words = normalize(mnemonic).split(' ');

              if (words.length % 3 !== 0) {
                throw new Error(INVALID_MNEMONIC);
              } // convert word indices to 11 bit binary strings


              var bits = words.map(function (word) {
                var index = wordlist.indexOf(word);

                if (index === -1) {
                  throw new Error(INVALID_MNEMONIC);
                }

                return lpad(index.toString(2), '0', 11);
              }).join(''); // split the binary string into ENT/CS

              var dividerIndex = Math.floor(bits.length / 33) * 32;
              var entropyBits = bits.slice(0, dividerIndex);
              var checksumBits = bits.slice(dividerIndex); // calculate the checksum and compare

              var entropyBytes = entropyBits.match(/(.{1,8})/g).map(binaryToByte);

              if (entropyBytes.length < 16) {
                throw new Error(INVALID_ENTROPY);
              }

              if (entropyBytes.length > 32) {
                throw new Error(INVALID_ENTROPY);
              }

              if (entropyBytes.length % 4 !== 0) {
                throw new Error(INVALID_ENTROPY);
              }

              var entropy = Buffer$i.from(entropyBytes);
              var newChecksum = deriveChecksumBits(entropy);

              if (newChecksum !== checksumBits) {
                throw new Error(INVALID_CHECKSUM);
              }

              return entropy.toString('hex');
            }

            src$2.mnemonicToEntropy = mnemonicToEntropy;

            function entropyToMnemonic(entropy, wordlist) {
              if (!isBuffer$2(entropy)) {
                entropy = Buffer$i.from(entropy, 'hex');
              }

              wordlist = wordlist || DEFAULT_WORDLIST;

              if (!wordlist) {
                throw new Error(WORDLIST_REQUIRED);
              } // 128 <= ENT <= 256


              if (entropy.length < 16) {
                throw new TypeError(INVALID_ENTROPY);
              }

              if (entropy.length > 32) {
                throw new TypeError(INVALID_ENTROPY);
              }

              if (entropy.length % 4 !== 0) {
                throw new TypeError(INVALID_ENTROPY);
              }

              var entropyBits = bytesToBinary(Array.from(entropy));
              var checksumBits = deriveChecksumBits(entropy);
              var bits = entropyBits + checksumBits;
              var chunks = bits.match(/(.{1,11})/g);
              var words = chunks.map(function (binary) {
                var index = binaryToByte(binary);
                return wordlist[index];
              });
              return wordlist[0] === "\u3042\u3044\u3053\u304F\u3057\u3093" // Japanese wordlist
              ? words.join("\u3000") : words.join(' ');
            }

            src$2.entropyToMnemonic = entropyToMnemonic;

            function generateMnemonic(strength, rng, wordlist) {
              strength = strength || 128;

              if (strength % 32 !== 0) {
                throw new TypeError(INVALID_ENTROPY);
              }

              rng = rng || randomBytes;
              return entropyToMnemonic(rng(strength / 8), wordlist);
            }

            src$2.generateMnemonic = generateMnemonic;

            function validateMnemonic(mnemonic, wordlist) {
              try {
                mnemonicToEntropy(mnemonic, wordlist);
              } catch (e) {
                return false;
              }

              return true;
            }

            var validateMnemonic_1 = src$2.validateMnemonic = validateMnemonic;

            function setDefaultWordlist(language) {
              var result = _wordlists_1.wordlists[language];

              if (result) {
                DEFAULT_WORDLIST = result;
              } else {
                throw new Error('Could not find wordlist for language "' + language + '"');
              }
            }

            src$2.setDefaultWordlist = setDefaultWordlist;

            function getDefaultWordlist() {
              if (!DEFAULT_WORDLIST) {
                throw new Error('No Default Wordlist set');
              }

              return Object.keys(_wordlists_1.wordlists).filter(function (lang) {
                if (lang === 'JA' || lang === 'EN') {
                  return false;
                }

                return _wordlists_1.wordlists[lang].every(function (word, index) {
                  return word === DEFAULT_WORDLIST[index];
                });
              })[0];
            }

            src$2.getDefaultWordlist = getDefaultWordlist;
            var _wordlists_2 = _wordlists;
            src$2.wordlists = _wordlists_2.wordlists;

            var hdkey$2 = {};

            // Copyright (c) 2018 base-x contributors
            // Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
            // Distributed under the MIT software license, see the accompanying
            // file LICENSE or http://www.opensource.org/licenses/mit-license.php.
            // @ts-ignore


            var _Buffer = safeBuffer$1.exports.Buffer;

            function base$1(ALPHABET) {
              if (ALPHABET.length >= 255) {
                throw new TypeError('Alphabet too long');
              }

              var BASE_MAP = new Uint8Array(256);
              BASE_MAP.fill(255);

              for (var i = 0; i < ALPHABET.length; i++) {
                var x = ALPHABET.charAt(i);
                var xc = x.charCodeAt(0);

                if (BASE_MAP[xc] !== 255) {
                  throw new TypeError(x + ' is ambiguous');
                }

                BASE_MAP[xc] = i;
              }

              var BASE = ALPHABET.length;
              var LEADER = ALPHABET.charAt(0);
              var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up

              var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up

              function encode(source) {
                if (!_Buffer.isBuffer(source)) {
                  throw new TypeError('Expected Buffer');
                }

                if (source.length === 0) {
                  return '';
                } // Skip & count leading zeroes.


                var zeroes = 0;
                var length = 0;
                var pbegin = 0;
                var pend = source.length;

                while (pbegin !== pend && source[pbegin] === 0) {
                  pbegin++;
                  zeroes++;
                } // Allocate enough space in big-endian base58 representation.


                var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
                var b58 = new Uint8Array(size); // Process the bytes.

                while (pbegin !== pend) {
                  var carry = source[pbegin]; // Apply "b58 = b58 * 256 + ch".

                  var i = 0;

                  for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {
                    carry += 256 * b58[it1] >>> 0;
                    b58[it1] = carry % BASE >>> 0;
                    carry = carry / BASE >>> 0;
                  }

                  if (carry !== 0) {
                    throw new Error('Non-zero carry');
                  }

                  length = i;
                  pbegin++;
                } // Skip leading zeroes in base58 result.


                var it2 = size - length;

                while (it2 !== size && b58[it2] === 0) {
                  it2++;
                } // Translate the result into a string.


                var str = LEADER.repeat(zeroes);

                for (; it2 < size; ++it2) {
                  str += ALPHABET.charAt(b58[it2]);
                }

                return str;
              }

              function decodeUnsafe(source) {
                if (typeof source !== 'string') {
                  throw new TypeError('Expected String');
                }

                if (source.length === 0) {
                  return _Buffer.alloc(0);
                }

                var psz = 0; // Skip leading spaces.

                if (source[psz] === ' ') {
                  return;
                } // Skip and count leading '1's.


                var zeroes = 0;
                var length = 0;

                while (source[psz] === LEADER) {
                  zeroes++;
                  psz++;
                } // Allocate enough space in big-endian base256 representation.


                var size = (source.length - psz) * FACTOR + 1 >>> 0; // log(58) / log(256), rounded up.

                var b256 = new Uint8Array(size); // Process the characters.

                while (source[psz]) {
                  // Decode character
                  var carry = BASE_MAP[source.charCodeAt(psz)]; // Invalid character

                  if (carry === 255) {
                    return;
                  }

                  var i = 0;

                  for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {
                    carry += BASE * b256[it3] >>> 0;
                    b256[it3] = carry % 256 >>> 0;
                    carry = carry / 256 >>> 0;
                  }

                  if (carry !== 0) {
                    throw new Error('Non-zero carry');
                  }

                  length = i;
                  psz++;
                } // Skip trailing spaces.


                if (source[psz] === ' ') {
                  return;
                } // Skip leading zeroes in b256.


                var it4 = size - length;

                while (it4 !== size && b256[it4] === 0) {
                  it4++;
                }

                var vch = _Buffer.allocUnsafe(zeroes + (size - it4));

                vch.fill(0x00, 0, zeroes);
                var j = zeroes;

                while (it4 !== size) {
                  vch[j++] = b256[it4++];
                }

                return vch;
              }

              function decode(string) {
                var buffer = decodeUnsafe(string);

                if (buffer) {
                  return buffer;
                }

                throw new Error('Non-base' + BASE + ' character');
              }

              return {
                encode: encode,
                decodeUnsafe: decodeUnsafe,
                decode: decode
              };
            }

            var src$1 = base$1;

            var basex = src$1;
            var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
            var bs58 = basex(ALPHABET);

            var base58 = bs58;
            var Buffer$3 = safeBuffer$1.exports.Buffer;

            var base = function base(checksumFn) {
              // Encode a buffer as a base58-check encoded string
              function encode(payload) {
                var checksum = checksumFn(payload);
                return base58.encode(Buffer$3.concat([payload, checksum], payload.length + 4));
              }

              function decodeRaw(buffer) {
                var payload = buffer.slice(0, -4);
                var checksum = buffer.slice(-4);
                var newChecksum = checksumFn(payload);
                if (checksum[0] ^ newChecksum[0] | checksum[1] ^ newChecksum[1] | checksum[2] ^ newChecksum[2] | checksum[3] ^ newChecksum[3]) return;
                return payload;
              } // Decode a base58-check encoded string to a buffer, no result if checksum is wrong


              function decodeUnsafe(string) {
                var buffer = base58.decodeUnsafe(string);
                if (!buffer) return;
                return decodeRaw(buffer);
              }

              function decode(string) {
                var buffer = base58.decode(string);
                var payload = decodeRaw(buffer);
                if (!payload) throw new Error('Invalid checksum');
                return payload;
              }

              return {
                encode: encode,
                decode: decode,
                decodeUnsafe: decodeUnsafe
              };
            };

            var createHash = browser$2;
            var bs58checkBase = base; // SHA256(SHA256(buffer))

            function sha256x2(buffer) {
              var tmp = createHash('sha256').update(buffer).digest();
              return createHash('sha256').update(tmp).digest();
            }

            var bs58check$1 = bs58checkBase(sha256x2);

            var hdkeyCrypto = {};

            var ripemd160 = {};

            Object.defineProperty(ripemd160, "__esModule", {
              value: true
            });
            var Ripemd160 = ripemd.ripemd160;
            var hash_utils_1$1 = hashUtils;
            ripemd160.ripemd160 = hash_utils_1$1.createHashFunction(function () {
              return new Ripemd160();
            });

            var sha256 = {};

            Object.defineProperty(sha256, "__esModule", {
              value: true
            });
            var Sha256Hash = _256;
            var hash_utils_1 = hashUtils;
            sha256.sha256 = hash_utils_1.createHashFunction(function () {
              return new Sha256Hash();
            });

            var inherits$1 = inherits_browser.exports;
            var Buffer$2 = safeBuffer$1.exports.Buffer;
            var Base$1 = cipherBase;
            var ZEROS$1 = Buffer$2.alloc(128);
            var blocksize = 64;

            function Hmac$1(alg, key) {
              Base$1.call(this, 'digest');

              if (typeof key === 'string') {
                key = Buffer$2.from(key);
              }

              this._alg = alg;
              this._key = key;

              if (key.length > blocksize) {
                key = alg(key);
              } else if (key.length < blocksize) {
                key = Buffer$2.concat([key, ZEROS$1], blocksize);
              }

              var ipad = this._ipad = Buffer$2.allocUnsafe(blocksize);
              var opad = this._opad = Buffer$2.allocUnsafe(blocksize);

              for (var i = 0; i < blocksize; i++) {
                ipad[i] = key[i] ^ 0x36;
                opad[i] = key[i] ^ 0x5C;
              }

              this._hash = [ipad];
            }

            inherits$1(Hmac$1, Base$1);

            Hmac$1.prototype._update = function (data) {
              this._hash.push(data);
            };

            Hmac$1.prototype._final = function () {
              var h = this._alg(Buffer$2.concat(this._hash));

              return this._alg(Buffer$2.concat([this._opad, h]));
            };

            var legacy = Hmac$1;

            var inherits = inherits_browser.exports;
            var Legacy = legacy;
            var Base = cipherBase;
            var Buffer$1 = safeBuffer$1.exports.Buffer;
            var md5 = md5$2;
            var RIPEMD160 = ripemd160$1;
            var sha = sha_js.exports;
            var ZEROS = Buffer$1.alloc(128);

            function Hmac(alg, key) {
              Base.call(this, 'digest');

              if (typeof key === 'string') {
                key = Buffer$1.from(key);
              }

              var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;
              this._alg = alg;
              this._key = key;

              if (key.length > blocksize) {
                var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg);
                key = hash.update(key).digest();
              } else if (key.length < blocksize) {
                key = Buffer$1.concat([key, ZEROS], blocksize);
              }

              var ipad = this._ipad = Buffer$1.allocUnsafe(blocksize);
              var opad = this._opad = Buffer$1.allocUnsafe(blocksize);

              for (var i = 0; i < blocksize; i++) {
                ipad[i] = key[i] ^ 0x36;
                opad[i] = key[i] ^ 0x5C;
              }

              this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg);

              this._hash.update(ipad);
            }

            inherits(Hmac, Base);

            Hmac.prototype._update = function (data) {
              this._hash.update(data);
            };

            Hmac.prototype._final = function () {
              var h = this._hash.digest();

              var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg);
              return hash.update(this._opad).update(h).digest();
            };

            var browser = function createHmac(alg, key) {
              alg = alg.toLowerCase();

              if (alg === 'rmd160' || alg === 'ripemd160') {
                return new Hmac('rmd160', key);
              }

              if (alg === 'md5') {
                return new Legacy(md5, key);
              }

              return new Hmac(alg, key);
            };

            Object.defineProperty(hdkeyCrypto, "__esModule", {
              value: true
            });
            var ripemd160_1 = ripemd160;
            var sha256_1 = sha256;
            hdkeyCrypto.createHmac = browser;
            hdkeyCrypto.randomBytes = browser$3.exports;

            var Hash$1 =
            /** @class */
            function () {
              function Hash(hashFunction) {
                this.hashFunction = hashFunction;
                this.buffers = [];
              }

              Hash.prototype.update = function (buffer) {
                if (!isBuffer$2(buffer)) {
                  throw new Error("hdkey-crypto shim is outdated");
                }

                this.buffers.push(buffer);
                return this;
              };

              Hash.prototype.digest = function (param) {
                if (param) {
                  throw new Error("hdkey-crypto shim is outdated");
                }

                return this.hashFunction(Buffer$i.concat(this.buffers));
              };

              return Hash;
            }(); // We don't use create-hash here, as it doesn't work well with Rollup


            hdkeyCrypto.createHash = function (name) {
              if (name === "ripemd160") {
                return new Hash$1(ripemd160_1.ripemd160);
              }

              if (name === "sha256") {
                return new Hash$1(sha256_1.sha256);
              }

              throw new Error("hdkey-crypto shim is outdated");
            };

            var hdkeySecp256k1v3$1 = {};

            var hdkeySecp256k1v3 = {};

            var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
              if (mod && mod.__esModule) return mod;
              var result = {};
              if (mod != null) for (var k in mod) {
                if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
              }
              result["default"] = mod;
              return result;
            };

            Object.defineProperty(hdkeySecp256k1v3, "__esModule", {
              value: true
            });

            var secp256k1 = __importStar(elliptic);

            function privateKeyVerify(privateKey) {
              return secp256k1.privateKeyVerify(privateKey);
            }

            hdkeySecp256k1v3.privateKeyVerify = privateKeyVerify;

            function publicKeyCreate(privateKey, compressed) {
              if (compressed === void 0) {
                compressed = true;
              }

              return Buffer$i.from(secp256k1.publicKeyCreate(privateKey, compressed));
            }

            hdkeySecp256k1v3.publicKeyCreate = publicKeyCreate;

            function publicKeyVerify(publicKey) {
              return secp256k1.publicKeyVerify(publicKey);
            }

            hdkeySecp256k1v3.publicKeyVerify = publicKeyVerify;

            function publicKeyConvert(publicKey, compressed) {
              if (compressed === void 0) {
                compressed = true;
              }

              return Buffer$i.from(secp256k1.publicKeyConvert(publicKey, compressed));
            }

            hdkeySecp256k1v3.publicKeyConvert = publicKeyConvert;

            function privateKeyTweakAdd(publicKey, tweak) {
              return Buffer$i.from(secp256k1.privateKeyTweakAdd(Buffer$i.from(publicKey), tweak));
            }

            hdkeySecp256k1v3.privateKeyTweakAdd = privateKeyTweakAdd;

            function publicKeyTweakAdd(publicKey, tweak, compressed) {
              if (compressed === void 0) {
                compressed = true;
              }

              return Buffer$i.from(secp256k1.publicKeyTweakAdd(Buffer$i.from(publicKey), tweak, compressed));
            }

            hdkeySecp256k1v3.publicKeyTweakAdd = publicKeyTweakAdd;

            function sign(message, privateKey) {
              var ret = secp256k1.ecdsaSign(message, privateKey);
              return {
                signature: Buffer$i.from(ret.signature),
                recovery: ret.recid
              };
            }

            hdkeySecp256k1v3.sign = sign;

            function verify(message, signature, publicKey) {
              return secp256k1.ecdsaVerify(signature, message, publicKey);
            }

            hdkeySecp256k1v3.verify = verify;

            (function (exports) {

              function __export(m) {
                for (var p in m) {
                  if (!exports.hasOwnProperty(p)) exports[p] = m[p];
                }
              }

              Object.defineProperty(exports, "__esModule", {
                value: true
              });

              __export(hdkeySecp256k1v3);
            })(hdkeySecp256k1v3$1);

            function _interopDefault$1(ex) {
              return ex && _typeof$1(ex) === 'object' && 'default' in ex ? ex['default'] : ex;
            }

            var assert$1 = _interopDefault$1(require$$0$2);

            var safeBuffer = _interopDefault$1(safeBuffer$1.exports);

            var bs58check = _interopDefault$1(bs58check$1);

            var cryptoShim = hdkeyCrypto;
            var secp256k1Shim = hdkeySecp256k1v3$1;
            var Buffer = safeBuffer.Buffer;
            var MASTER_SECRET = Buffer.from('Bitcoin seed', 'utf8');
            var HARDENED_OFFSET = 0x80000000;
            var LEN = 78; // Bitcoin hardcoded by default, can use package `coininfo` for others

            var BITCOIN_VERSIONS = {
              "private": 0x0488ADE4,
              "public": 0x0488B21E
            };

            function HDKey$1(versions) {
              this.versions = versions || BITCOIN_VERSIONS;
              this.depth = 0;
              this.index = 0;
              this._privateKey = null;
              this._publicKey = null;
              this.chainCode = null;
              this._fingerprint = 0;
              this.parentFingerprint = 0;
            }

            Object.defineProperty(HDKey$1.prototype, 'fingerprint', {
              get: function get() {
                return this._fingerprint;
              }
            });
            Object.defineProperty(HDKey$1.prototype, 'identifier', {
              get: function get() {
                return this._identifier;
              }
            });
            Object.defineProperty(HDKey$1.prototype, 'pubKeyHash', {
              get: function get() {
                return this.identifier;
              }
            });
            Object.defineProperty(HDKey$1.prototype, 'privateKey', {
              get: function get() {
                return this._privateKey;
              },
              set: function set(value) {
                assert$1.equal(value.length, 32, 'Private key must be 32 bytes.');
                assert$1(secp256k1Shim.privateKeyVerify(value) === true, 'Invalid private key');
                this._privateKey = value;
                this._publicKey = secp256k1Shim.publicKeyCreate(value, true);
                this._identifier = hash160(this.publicKey);
                this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0);
              }
            });
            Object.defineProperty(HDKey$1.prototype, 'publicKey', {
              get: function get() {
                return this._publicKey;
              },
              set: function set(value) {
                assert$1(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.');
                assert$1(secp256k1Shim.publicKeyVerify(value) === true, 'Invalid public key');
                this._publicKey = secp256k1Shim.publicKeyConvert(value, true); // force compressed point

                this._identifier = hash160(this.publicKey);
                this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0);
                this._privateKey = null;
              }
            });
            Object.defineProperty(HDKey$1.prototype, 'privateExtendedKey', {
              get: function get() {
                if (this._privateKey) return bs58check.encode(serialize(this, this.versions["private"], Buffer.concat([Buffer.alloc(1, 0), this.privateKey])));else return null;
              }
            });
            Object.defineProperty(HDKey$1.prototype, 'publicExtendedKey', {
              get: function get() {
                return bs58check.encode(serialize(this, this.versions["public"], this.publicKey));
              }
            });

            HDKey$1.prototype.derive = function (path) {
              if (path === 'm' || path === 'M' || path === "m'" || path === "M'") {
                return this;
              }

              var entries = path.split('/');
              var hdkey = this;
              entries.forEach(function (c, i) {
                if (i === 0) {
                  assert$1(/^[mM]{1}/.test(c), 'Path must start with "m" or "M"');
                  return;
                }

                var hardened = c.length > 1 && c[c.length - 1] === "'";
                var childIndex = parseInt(c, 10); // & (HARDENED_OFFSET - 1)

                assert$1(childIndex < HARDENED_OFFSET, 'Invalid index');
                if (hardened) childIndex += HARDENED_OFFSET;
                hdkey = hdkey.deriveChild(childIndex);
              });
              return hdkey;
            };

            HDKey$1.prototype.deriveChild = function (index) {
              var isHardened = index >= HARDENED_OFFSET;
              var indexBuffer = Buffer.allocUnsafe(4);
              indexBuffer.writeUInt32BE(index, 0);
              var data;

              if (isHardened) {
                // Hardened child
                assert$1(this.privateKey, 'Could not derive hardened child key');
                var pk = this.privateKey;
                var zb = Buffer.alloc(1, 0);
                pk = Buffer.concat([zb, pk]); // data = 0x00 || ser256(kpar) || ser32(index)

                data = Buffer.concat([pk, indexBuffer]);
              } else {
                // Normal child
                // data = serP(point(kpar)) || ser32(index)
                //      = serP(Kpar) || ser32(index)
                data = Buffer.concat([this.publicKey, indexBuffer]);
              }

              var I = cryptoShim.createHmac('sha512', this.chainCode).update(data).digest();
              var IL = I.slice(0, 32);
              var IR = I.slice(32);
              var hd = new HDKey$1(this.versions); // Private parent key -> private child key

              if (this.privateKey) {
                // ki = parse256(IL) + kpar (mod n)
                try {
                  hd.privateKey = secp256k1Shim.privateKeyTweakAdd(this.privateKey, IL); // throw if IL >= n || (privateKey + IL) === 0
                } catch (err) {
                  // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i
                  return this.deriveChild(index + 1);
                } // Public parent key -> public child key

              } else {
                // Ki = point(parse256(IL)) + Kpar
                //    = G*IL + Kpar
                try {
                  hd.publicKey = secp256k1Shim.publicKeyTweakAdd(this.publicKey, IL, true); // throw if IL >= n || (g**IL + publicKey) is infinity
                } catch (err) {
                  // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i
                  return this.deriveChild(index + 1);
                }
              }

              hd.chainCode = IR;
              hd.depth = this.depth + 1;
              hd.parentFingerprint = this.fingerprint; // .readUInt32BE(0)

              hd.index = index;
              return hd;
            };

            HDKey$1.prototype.sign = function (hash) {
              return secp256k1Shim.sign(hash, this.privateKey).signature;
            };

            HDKey$1.prototype.verify = function (hash, signature) {
              return secp256k1Shim.verify(hash, signature, this.publicKey);
            };

            HDKey$1.prototype.wipePrivateData = function () {
              if (this._privateKey) cryptoShim.randomBytes(this._privateKey.length).copy(this._privateKey);
              this._privateKey = null;
              return this;
            };

            HDKey$1.prototype.toJSON = function () {
              return {
                xpriv: this.privateExtendedKey,
                xpub: this.publicExtendedKey
              };
            };

            HDKey$1.fromMasterSeed = function (seedBuffer, versions) {
              var I = cryptoShim.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest();
              var IL = I.slice(0, 32);
              var IR = I.slice(32);
              var hdkey = new HDKey$1(versions);
              hdkey.chainCode = IR;
              hdkey.privateKey = IL;
              return hdkey;
            };

            HDKey$1.fromExtendedKey = function (base58key, versions) {
              // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)
              versions = versions || BITCOIN_VERSIONS;
              var hdkey = new HDKey$1(versions);
              var keyBuffer = bs58check.decode(base58key);
              var version = keyBuffer.readUInt32BE(0);
              assert$1(version === versions["private"] || version === versions["public"], 'Version mismatch: does not match private or public');
              hdkey.depth = keyBuffer.readUInt8(4);
              hdkey.parentFingerprint = keyBuffer.readUInt32BE(5);
              hdkey.index = keyBuffer.readUInt32BE(9);
              hdkey.chainCode = keyBuffer.slice(13, 45);
              var key = keyBuffer.slice(45);

              if (key.readUInt8(0) === 0) {
                // private
                assert$1(version === versions["private"], 'Version mismatch: version does not match private');
                hdkey.privateKey = key.slice(1); // cut off first 0x0 byte
              } else {
                assert$1(version === versions["public"], 'Version mismatch: version does not match public');
                hdkey.publicKey = key;
              }

              return hdkey;
            };

            HDKey$1.fromJSON = function (obj) {
              return HDKey$1.fromExtendedKey(obj.xpriv);
            };

            function serialize(hdkey, version, key) {
              // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)
              var buffer = Buffer.allocUnsafe(LEN);
              buffer.writeUInt32BE(version, 0);
              buffer.writeUInt8(hdkey.depth, 4);
              var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000;
              buffer.writeUInt32BE(fingerprint, 5);
              buffer.writeUInt32BE(hdkey.index, 9);
              hdkey.chainCode.copy(buffer, 13);
              key.copy(buffer, 45);
              return buffer;
            }

            function hash160(buf) {
              var sha = cryptoShim.createHash('sha256').update(buf).digest();
              return cryptoShim.createHash('ripemd160').update(sha).digest();
            }

            HDKey$1.HARDENED_OFFSET = HARDENED_OFFSET;
            var hdkey$1 = HDKey$1;
            var hdkeyWithoutCrypto = hdkey$1;

            Object.defineProperty(hdkey$2, "__esModule", {
              value: true
            });
            var hdkey = hdkeyWithoutCrypto;
            var HDKey = hdkey$2.HDKey = hdkey;

            // @TODO remove some wordlists

            function assert(val, msg) {
              if (!val) {
                throw new Error(msg || 'Assertion failed');
              }
            }
            /**
             * BIP39 Master seed from mnemonic phrase
             * @param mnemonic - 12 words
             * @return {Buffer}
             */


            function seedFromMnemonic(mnemonic) {
              return mnemonicToSeedSync_1(mnemonic);
            }
            /**
             * BIP39 Master seed from mnemonic phrase (async)
             * @param mnemonic - 12 words
             * @return {Promise<Buffer>}
             */

            function seedFromMnemonicAsync(mnemonic) {
              return mnemonicToSeed_1(mnemonic);
            }
            /**
             * BIP44 HD key from master seed
             * @param {Buffer} seed - 64 bytes
             * @return {HDKey}
             */

            function hdKeyFromSeed(seed) {
              // same as "m/44'/60'/0'/0/0"
              return HDKey.fromMasterSeed(seed).derive("m/44'/60'/0'/0").deriveChild(0);
            }
            /**
             * @param {Buffer} [priv]
             * @param {string} [mnemonic]
             * @param {boolean} [doAsync]
             * @constructor
             */

            var Wallet = function WalletConstructor(priv, mnemonic, doAsync) {
              var _this = this;

              if (priv && mnemonic) {
                throw new Error('Cannot supply both a private and a mnemonic phrase to the constructor');
              }

              if (priv && !account.isValidPrivate(priv)) {
                throw new Error('Private key does not satisfy the curve requirements (ie. it is invalid)');
              }

              if (mnemonic && !validateMnemonic_1(mnemonic)) {
                throw new Error('Invalid mnemonic phrase');
              }

              if (mnemonic && doAsync) {
                return seedFromMnemonicAsync(mnemonic).then(function (seed) {
                  _this._privKey = hdKeyFromSeed(seed)._privateKey;
                  _this._mnemonic = mnemonic;
                  return _this;
                });
              }

              if (mnemonic) {
                var seed = seedFromMnemonic(mnemonic);
                priv = hdKeyFromSeed(seed)._privateKey;
              }

              this._privKey = priv;
              this._mnemonic = mnemonic;
            };

            Object.defineProperty(Wallet.prototype, 'mnemonic', {
              get: function get() {
                assert(this._mnemonic, 'This is a private key only wallet');
                return this._mnemonic;
              }
            });
            Object.defineProperty(Wallet.prototype, 'privKey', {
              get: function get() {
                return this._privKey;
              }
            }); // uncompressed public key

            Object.defineProperty(Wallet.prototype, 'pubKey', {
              get: function get() {
                if (!this._pubKey) {
                  this._pubKey = account.privateToPublic(this.privKey);
                }

                return this._pubKey;
              }
            });
            /**
             * @return {string}
             */

            Wallet.prototype.getMnemonic = function getMnemonic() {
              return this.mnemonic;
            };
            /**
             * @return {Buffer}
             */


            Wallet.prototype.getPrivateKey = function getPrivateKey() {
              return this.privKey;
            };
            /**
             * @return {string}
             */


            Wallet.prototype.getPrivateKeyString = function getPrivateKeyString() {
              return "0x".concat(this.getPrivateKey().toString('hex'));
            };
            /**
             * @return {Buffer}
             */


            Wallet.prototype.getPublicKey = function getPublicKey() {
              return this.pubKey;
            };
            /**
             * @return {string}
             */


            Wallet.prototype.getPublicKeyString = function getPublicKeyString() {
              return publicToString(this.getPublicKey());
            };
            /**
             * @return {Buffer}
             */


            Wallet.prototype.getAddress = function getAddress() {
              return account.publicToAddress(this.pubKey);
            };
            /**
             * @return {string}
             */


            Wallet.prototype.getAddressString = function getAddressString() {
              return "Mx".concat(this.getAddress().toString('hex'));
            };
            /**
             * MinterWallet from mnemonic phrase
             * @param {string} mnemonic - 12 words
             * @return {Wallet}
             */

            function walletFromMnemonic(mnemonic) {
              return new Wallet(null, mnemonic);
            }
            /**
             * MinterWallet from mnemonic phrase
             * @param {string} mnemonic - 12 words
             * @return {Promise<Wallet>}
             */

            function walletFromMnemonicAsync(mnemonic) {
              return new Wallet(null, mnemonic, true);
            }
            /**
             * MinterWallet from private key
             * @param {Buffer} priv - 64 bytes
             * @return {Wallet}
             */

            function walletFromPrivateKey(priv) {
              return new Wallet(priv);
            }

            Big.RM = 2;
            var BASE_COIN = {
              '0x01': 'BIP',
              '0x02': 'MNT'
            };
            /**
             * @param {number|string} chainId
             * @return {string}
             */

            function normalizeChainId(chainId) {
              if (typeof chainId === 'string' || typeof chainId === 'number') {
                chainId = integerToHexString(chainId);
              }

              return chainId;
            }
            /**
             * @param {number|string} chainId
             * @param {string} coinSymbol
             * @return {boolean}
             */


            function isBaseCoinSymbol(chainId, coinSymbol) {
              return BASE_COIN[normalizeChainId(chainId)] === coinSymbol;
            }
            /**
             * @param {number|string} chainId
             * @return {string|undefined}
             */

            function getBaseCoinSymbol(chainId) {
              return BASE_COIN[normalizeChainId(chainId)];
            }
            /**
             * @param {number|string} coinIdOrSymbol
             * @return {boolean}
             */

            function isCoinId(coinIdOrSymbol) {
              if (typeof coinIdOrSymbol === 'number') {
                return true;
              }

              if (typeof coinIdOrSymbol !== 'string') {
                return false;
              }

              return /^[0-9]+$/.test(coinIdOrSymbol);
            }
            /**
             * @param {string} coin
             * @return {boolean}
             */

            function isCoinSymbol(coin) {
              if (typeof coin !== 'string') {
                return false;
              }

              return !isCoinId(coin);
            }
            function isValidNumber(value) {
              var invalid = typeof value !== 'number' && typeof value !== 'string' || typeof value === 'string' && value.length === 0;
              return !invalid;
            }
            /**
             * @param {number|string|ByteArray} num
             * @return {string}
             */

            function integerToHexString(num) {
              num = toInteger(num); // handle exponential values

              num = new Big(num).toFixed(); // convert to hex

              var hexNum = new BN(num, 10).toString(16);
              return "0x".concat(lib$1.padToEven(hexNum));
            }
            /**
             * @param {number|string|ByteArray} num
             * @return {string}
             */

            function toInteger(num) {
              if (typeof num === 'number') {
                return num.toString();
              }

              if (typeof num !== 'undefined' && num !== null && num.length > 0) {
                // handle hex prefixed string
                if (typeof num === 'string' && lib$1.isHexPrefixed(num)) {
                  return bufferToInteger(num);
                } // handle arrays


                if (typeof num !== 'string') {
                  return bufferToInteger(num);
                }
              }

              num = Number.parseInt(num, 10);
              return Number.isNaN(num) ? '' : num.toString();
            }
            /**
             * @param {ByteArray} buf
             * @return {string}
             */

            function bufferToInteger(buf) {
              buf = bufferFromBytes(buf);
              return new BN(buf, 16).toString(10);
            }
            /**
             * @param {ByteArray} buf
             * @return {boolean|null}
             */

            function bufferToBoolean(buf) {
              buf = bufferFromBytes(buf);

              if (buf.toString('hex') === '01') {
                return true;
              }

              if (buf.toString('hex') === '') {
                return false;
              } // eslint-disable-next-line unicorn/no-null


              return null;
            }
            /**
             * @param {ByteArray} bytes
             * @return {Buffer}
             */

            function bufferFromBytes(bytes) {
              if (bytes.length === undefined) {
                throw new Error('Invalid value passed as ByteArray, it should be Buffer, Uint8Array or hex string');
              } // string to Buffer


              if (typeof bytes === 'string') {
                bytes = bytes.replace('0x', '');
                return Buffer$i.from(bytes, 'hex');
              } // Uint8Array to Buffer


              if (!isBuffer$2(bytes)) {
                return Buffer$i.from(bytes);
              } // it is Buffer already


              return bytes;
            }
            function proxyNestedTxData(obj) {
              addTxDataFields(obj); // proxy TxData

              obj.raw = obj.txData.raw;
              obj.serialize = obj.txData.serialize;
              obj.serializeToString = obj.txData.serializeToString;
            }
            function addTxDataFields(txData) {
              Object.defineProperty(txData, 'fields', {
                get: function get() {
                  var fields = {};

                  txData.txData._fields.forEach(function (key) {
                    if (Array.isArray(txData[key])) {
                      // cast multisend items to fields
                      fields[key] = txData[key].map(function (item) {
                        return item.fields || item;
                      });
                    } else {
                      fields[key] = txData[key];
                    }
                  });

                  return fields;
                },
                enumerable: true
              });
            }
            function validateAddress(value, fieldName) {
              validateNotEmpty(value, fieldName);

              if (typeof value === 'string' && !isValidAddress(value)) {
                throw new Error("Field `".concat(fieldName, "` is invalid address"));
              }
            }
            function validatePublicKey(value, fieldName) {
              validateNotEmpty(value, fieldName);

              if (typeof value === 'string' && !isValidPublicKeyString(value)) {
                throw new Error("Field `".concat(fieldName, "` is invalid public key"));
              }
            }
            function validateCheck(value, fieldName) {
              validateNotEmpty(value, fieldName);

              if (typeof value === 'string' && !isValidCheck(value)) {
                throw new Error("Field `".concat(fieldName, "` is invalid check string"));
              }
            }
            function validateAmount(value, fieldName) {
              validateNotEmpty(value, fieldName);

              if (typeof value === 'string' || typeof value === 'number') {
                var valueBig;

                try {
                  valueBig = numberToBig(value);
                } catch (error) {
                  throw new Error("Field `".concat(fieldName, "` is invalid number"));
                }

                if (valueBig && valueBig.lt(0)) {
                  throw new Error("Field `".concat(fieldName, "` has negative amount"));
                }
              }
            }
            /**
             * @param {number|string} maxSupply
             * @param {number|string} initialAmount
             */

            function validateMaxSupply(maxSupply, initialAmount) {
              validateAmount(maxSupply, 'maxSupply');

              if (maxSupply > COIN_MAX_MAX_SUPPLY || maxSupply < COIN_MIN_MAX_SUPPLY) {
                throw new Error("Field `maxSupply` should be between ".concat(COIN_MIN_MAX_SUPPLY, " and ").concat(COIN_MAX_MAX_SUPPLY));
              }

              if (Number(initialAmount) > Number(maxSupply)) {
                throw new Error('Field `initialAmount` should be less or equal of `maxSupply`');
              }
            }
            function validateUint(origValue, fieldName) {
              validateNotEmpty(origValue, fieldName);
              var value = Number(origValue);

              if (Number.isNaN(value)) {
                throw new TypeError("Field `".concat(fieldName, "` is not a number. Received: ").concat(origValue));
              }

              if (value < 0) {
                throw new Error("Field `".concat(fieldName, "` should be positive integer. Received: ").concat(value));
              }

              if (Math.round(value) !== value) {
                throw new Error("Field `".concat(fieldName, "` should be integer, decimal given"));
              }
            }
            function validateUintArray(origValue, fieldName) {
              if (!Array.isArray(origValue)) {
                throw new TypeError("Field `".concat(fieldName, "` is not an array"));
              }

              origValue.forEach(function (coin, index) {
                try {
                  validateUint(coin, fieldName);
                } catch (error) {
                  // update error message
                  throw new Error(error.message.replace("`".concat(fieldName, "`"), "`".concat(fieldName, "` contain invalid item at index: ").concat(index, ", it ")));
                }
              });
            }
            function validateTicker(value, fieldName) {
              validateNotEmpty(value, fieldName);

              if (typeof value === 'string' && !/^[A-Z][A-Z0-9]{2,9}$/.test(value)) {
                throw new Error("Field `".concat(fieldName, "` is invalid coin symbol string"));
              }
            }

            function validateNotEmpty(value, fieldName) {
              if (typeof value === 'undefined') {
                throw new TypeError("Field `".concat(fieldName, "` is undefined"));
              }

              if (value === null) {
                throw new Error("Field `".concat(fieldName, "` is null"));
              }

              if (value === false) {
                throw new Error("Field `".concat(fieldName, "` is false"));
              }

              if (value === '') {
                throw new Error("Field `".concat(fieldName, "` is empty string"));
              }
            }

            function validateBoolean(value, fieldName) {
              if (typeof value !== 'boolean') {
                throw new TypeError("Field `".concat(fieldName, "` should be boolean, ").concat(_typeof$1(value), " given"));
              }
            }
            /**
             * @param {string} seedPhrase
             * @return {string}
             */

            function getPrivateKeyFromSeedPhrase(seedPhrase) {
              return walletFromMnemonic(seedPhrase).getPrivateKeyString();
            }
            /**
             * @param {string} seedPhrase
             * @return {Promise<string>}
             */

            function getPrivateKeyFromSeedPhraseAsync(seedPhrase) {
              return walletFromMnemonicAsync(seedPhrase).then(function (wallet) {
                return wallet.getPrivateKeyString();
              });
            }
            /**
             * Promisify setTimeout
             * @param {number} time - milliseconds
             * @return {Promise}
             */

            function wait(time) {
              return new Promise(function (resolve) {
                setTimeout(resolve, time);
              });
            }

            /**
             * @param {MinterApiInstance} apiInstance
             * @return {function((string|number), AxiosRequestConfig=): (Promise<CoinInfo>)}
             */

            function GetCoinInfo(apiInstance) {
              return getCoinInfo;
              /**
               * Get nonce for new transaction: last transaction number + 1
               * @param {string|number} coin
               * @param {import('axios').AxiosRequestConfig} [axiosOptions]
               * @return {Promise<CoinInfo>}
               */

              function getCoinInfo(coin, axiosOptions) {
                var coinInfoPromise;

                if (isCoinId(coin)) {
                  coinInfoPromise = apiInstance.get("coin_info_by_id/".concat(coin), axiosOptions);
                } else if (isCoinSymbol(coin)) {
                  coinInfoPromise = apiInstance.get("coin_info/".concat(coin), axiosOptions);
                } else {
                  return Promise.reject(new Error('Invalid coin'));
                }

                return coinInfoPromise.then(function (response) {
                  response.data.id = Number(response.data.id);
                  return response.data;
                });
              }
            }
            /**
             * @typedef {Object} CoinInfo
             * @property {number|string} id
             * @property {string} name
             * @property {string} symbol
             * @property {number|string} volume
             * @property {number|string} crr
             * @property {number|string} reserve_balance
             * @property {number|string} max_supply
             * @property {string|null} owner_address
             */

            /**
             * @param {MinterApiInstance} apiInstance
             * @return {function(*): (Promise<number>)}
             */
            function GetMinGasPrice(apiInstance) {
              /**
               * Get current minimal gas price
               * @param {import('axios').AxiosRequestConfig} [axiosOptions]
               * @return {Promise<number>}
               */
              return function getMinGasPrice(axiosOptions) {
                return apiInstance.get('min_gas_price', axiosOptions).then(function (response) {
                  var resData = response.data;
                  var minGasPrice = resData.min_gas_price;
                  return Number(minGasPrice);
                });
              };
            }

            function _objectWithoutPropertiesLoose(source, excluded) {
              if (source == null) return {};
              var target = {};
              var sourceKeys = Object.keys(source);
              var key, i;

              for (i = 0; i < sourceKeys.length; i++) {
                key = sourceKeys[i];
                if (excluded.indexOf(key) >= 0) continue;
                target[key] = source[key];
              }

              return target;
            }

            function _objectWithoutProperties(source, excluded) {
              if (source == null) return {};
              var target = _objectWithoutPropertiesLoose(source, excluded);
              var key, i;

              if (Object.getOwnPropertySymbols) {
                var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

                for (i = 0; i < sourceSymbolKeys.length; i++) {
                  key = sourceSymbolKeys[i];
                  if (excluded.indexOf(key) >= 0) continue;
                  if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
                  target[key] = source[key];
                }
              }

              return target;
            }

            /**
             * @param {MinterApiInstance} apiInstance
             * @return {Function<Promise>}
             */

            function PostSignedTx(apiInstance) {
              /**
               * @param {string|Buffer} signedTx
               * @param {import('axios').AxiosRequestConfig} [axiosOptions]
               * @return {Promise<NodeTransaction|{hash: string}>}
               */
              return function postSignedTx(signedTx, axiosOptions) {
                if (isBuffer$2(signedTx)) {
                  signedTx = "0x".concat(signedTx.toString('hex'));
                }

                return apiInstance.post('send_transaction', {
                  tx: signedTx
                }, axiosOptions).then(function (response) {
                  var _resData$transaction;

                  var resData = response.data;

                  if (((_resData$transaction = resData.transaction) === null || _resData$transaction === void 0 ? void 0 : _resData$transaction.code) > 0) {
                    throw new Error("Transaction included in the block with error code ".concat(resData.transaction.code, ": ").concat(resData.transaction.log));
                  } // @TODO check error code


                  return resData.transaction || {
                    hash: resData.hash
                  };
                });
              };
            }
            /**
             * @typedef NodeTransaction
             * @property {string} hash
             * @property {string} raw_tx
             * @property {string} height
             * @property {string} from
             * @property {string} nonce
             * @property {string} gas
             * @property {number} gas_price
             * @property {string} gas_coin
             * @property {number} type
             * @property {TxData} data
             * @property {string} payload
             * @property {Object} tags
             */

            /**
             * Checks if `value` is classified as an `Array` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array, else `false`.
             * @example
             *
             * _.isArray([1, 2, 3]);
             * // => true
             *
             * _.isArray(document.body.children);
             * // => false
             *
             * _.isArray('abc');
             * // => false
             *
             * _.isArray(_.noop);
             * // => false
             */
            var isArray$4 = Array.isArray;
            var isArray$5 = isArray$4;

            /** Detect free variable `global` from Node.js. */

            var freeGlobal = _typeof$1(global$1) == 'object' && global$1 && global$1.Object === Object && global$1;
            var freeGlobal$1 = freeGlobal;

            /** Detect free variable `self`. */

            var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof$1(self)) == 'object' && self && self.Object === Object && self;
            /** Used as a reference to the global object. */

            var root = freeGlobal$1 || freeSelf || Function('return this')();
            var root$1 = root;

            /** Built-in value references. */

            var _Symbol = root$1.Symbol;
            var _Symbol$1 = _Symbol;

            /** Used for built-in method references. */

            var objectProto$5 = Object.prototype;
            /** Used to check objects for own properties. */

            var hasOwnProperty$4 = objectProto$5.hasOwnProperty;
            /**
             * Used to resolve the
             * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
             * of values.
             */

            var nativeObjectToString$1 = objectProto$5.toString;
            /** Built-in value references. */

            var symToStringTag$1 = _Symbol$1 ? _Symbol$1.toStringTag : undefined;
            /**
             * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the raw `toStringTag`.
             */

            function getRawTag(value) {
              var isOwn = hasOwnProperty$4.call(value, symToStringTag$1),
                  tag = value[symToStringTag$1];

              try {
                value[symToStringTag$1] = undefined;
                var unmasked = true;
              } catch (e) {}

              var result = nativeObjectToString$1.call(value);

              if (unmasked) {
                if (isOwn) {
                  value[symToStringTag$1] = tag;
                } else {
                  delete value[symToStringTag$1];
                }
              }

              return result;
            }

            /** Used for built-in method references. */
            var objectProto$4 = Object.prototype;
            /**
             * Used to resolve the
             * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
             * of values.
             */

            var nativeObjectToString = objectProto$4.toString;
            /**
             * Converts `value` to a string using `Object.prototype.toString`.
             *
             * @private
             * @param {*} value The value to convert.
             * @returns {string} Returns the converted string.
             */

            function objectToString$1(value) {
              return nativeObjectToString.call(value);
            }

            /** `Object#toString` result references. */

            var nullTag = '[object Null]',
                undefinedTag = '[object Undefined]';
            /** Built-in value references. */

            var symToStringTag = _Symbol$1 ? _Symbol$1.toStringTag : undefined;
            /**
             * The base implementation of `getTag` without fallbacks for buggy environments.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the `toStringTag`.
             */

            function baseGetTag(value) {
              if (value == null) {
                return value === undefined ? undefinedTag : nullTag;
              }

              return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString$1(value);
            }

            /**
             * Checks if `value` is object-like. A value is object-like if it's not `null`
             * and has a `typeof` result of "object".
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
             * @example
             *
             * _.isObjectLike({});
             * // => true
             *
             * _.isObjectLike([1, 2, 3]);
             * // => true
             *
             * _.isObjectLike(_.noop);
             * // => false
             *
             * _.isObjectLike(null);
             * // => false
             */
            function isObjectLike(value) {
              return value != null && _typeof$1(value) == 'object';
            }

            /** `Object#toString` result references. */

            var symbolTag = '[object Symbol]';
            /**
             * Checks if `value` is classified as a `Symbol` primitive or object.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
             * @example
             *
             * _.isSymbol(Symbol.iterator);
             * // => true
             *
             * _.isSymbol('abc');
             * // => false
             */

            function isSymbol$1(value) {
              return _typeof$1(value) == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
            }

            /** Used to match property names within property paths. */

            var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
                reIsPlainProp = /^\w*$/;
            /**
             * Checks if `value` is a property name and not a property path.
             *
             * @private
             * @param {*} value The value to check.
             * @param {Object} [object] The object to query keys on.
             * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
             */

            function isKey(value, object) {
              if (isArray$5(value)) {
                return false;
              }

              var type = _typeof$1(value);

              if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol$1(value)) {
                return true;
              }

              return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
            }

            /**
             * Checks if `value` is the
             * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
             * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an object, else `false`.
             * @example
             *
             * _.isObject({});
             * // => true
             *
             * _.isObject([1, 2, 3]);
             * // => true
             *
             * _.isObject(_.noop);
             * // => true
             *
             * _.isObject(null);
             * // => false
             */
            function isObject(value) {
              var type = _typeof$1(value);

              return value != null && (type == 'object' || type == 'function');
            }

            /** `Object#toString` result references. */

            var asyncTag = '[object AsyncFunction]',
                funcTag = '[object Function]',
                genTag = '[object GeneratorFunction]',
                proxyTag = '[object Proxy]';
            /**
             * Checks if `value` is classified as a `Function` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a function, else `false`.
             * @example
             *
             * _.isFunction(_);
             * // => true
             *
             * _.isFunction(/abc/);
             * // => false
             */

            function isFunction(value) {
              if (!isObject(value)) {
                return false;
              } // The use of `Object#toString` avoids issues with the `typeof` operator
              // in Safari 9 which returns 'object' for typed arrays and other constructors.


              var tag = baseGetTag(value);
              return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
            }

            /** Used to detect overreaching core-js shims. */

            var coreJsData = root$1['__core-js_shared__'];
            var coreJsData$1 = coreJsData;

            /** Used to detect methods masquerading as native. */

            var maskSrcKey = function () {
              var uid = /[^.]+$/.exec(coreJsData$1 && coreJsData$1.keys && coreJsData$1.keys.IE_PROTO || '');
              return uid ? 'Symbol(src)_1.' + uid : '';
            }();
            /**
             * Checks if `func` has its source masked.
             *
             * @private
             * @param {Function} func The function to check.
             * @returns {boolean} Returns `true` if `func` is masked, else `false`.
             */


            function isMasked(func) {
              return !!maskSrcKey && maskSrcKey in func;
            }

            /** Used for built-in method references. */
            var funcProto$1 = Function.prototype;
            /** Used to resolve the decompiled source of functions. */

            var funcToString$1 = funcProto$1.toString;
            /**
             * Converts `func` to its source code.
             *
             * @private
             * @param {Function} func The function to convert.
             * @returns {string} Returns the source code.
             */

            function toSource(func) {
              if (func != null) {
                try {
                  return funcToString$1.call(func);
                } catch (e) {}

                try {
                  return func + '';
                } catch (e) {}
              }

              return '';
            }

            /**
             * Used to match `RegExp`
             * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
             */

            var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
            /** Used to detect host constructors (Safari). */

            var reIsHostCtor = /^\[object .+?Constructor\]$/;
            /** Used for built-in method references. */

            var funcProto = Function.prototype,
                objectProto$3 = Object.prototype;
            /** Used to resolve the decompiled source of functions. */

            var funcToString = funcProto.toString;
            /** Used to check objects for own properties. */

            var hasOwnProperty$3 = objectProto$3.hasOwnProperty;
            /** Used to detect if a method is native. */

            var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty$3).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
            /**
             * The base implementation of `_.isNative` without bad shim checks.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a native function,
             *  else `false`.
             */

            function baseIsNative(value) {
              if (!isObject(value) || isMasked(value)) {
                return false;
              }

              var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
              return pattern.test(toSource(value));
            }

            /**
             * Gets the value at `key` of `object`.
             *
             * @private
             * @param {Object} [object] The object to query.
             * @param {string} key The key of the property to get.
             * @returns {*} Returns the property value.
             */
            function getValue(object, key) {
              return object == null ? undefined : object[key];
            }

            /**
             * Gets the native function at `key` of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {string} key The key of the method to get.
             * @returns {*} Returns the function if it's native, else `undefined`.
             */

            function getNative(object, key) {
              var value = getValue(object, key);
              return baseIsNative(value) ? value : undefined;
            }

            /* Built-in method references that are verified to be native. */

            var nativeCreate = getNative(Object, 'create');
            var nativeCreate$1 = nativeCreate;

            /**
             * Removes all key-value entries from the hash.
             *
             * @private
             * @name clear
             * @memberOf Hash
             */

            function hashClear() {
              this.__data__ = nativeCreate$1 ? nativeCreate$1(null) : {};
              this.size = 0;
            }

            /**
             * Removes `key` and its value from the hash.
             *
             * @private
             * @name delete
             * @memberOf Hash
             * @param {Object} hash The hash to modify.
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function hashDelete(key) {
              var result = this.has(key) && delete this.__data__[key];
              this.size -= result ? 1 : 0;
              return result;
            }

            /** Used to stand-in for `undefined` hash values. */

            var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';
            /** Used for built-in method references. */

            var objectProto$2 = Object.prototype;
            /** Used to check objects for own properties. */

            var hasOwnProperty$2 = objectProto$2.hasOwnProperty;
            /**
             * Gets the hash value for `key`.
             *
             * @private
             * @name get
             * @memberOf Hash
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */

            function hashGet(key) {
              var data = this.__data__;

              if (nativeCreate$1) {
                var result = data[key];
                return result === HASH_UNDEFINED$1 ? undefined : result;
              }

              return hasOwnProperty$2.call(data, key) ? data[key] : undefined;
            }

            /** Used for built-in method references. */

            var objectProto$1 = Object.prototype;
            /** Used to check objects for own properties. */

            var hasOwnProperty$1 = objectProto$1.hasOwnProperty;
            /**
             * Checks if a hash value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf Hash
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */

            function hashHas(key) {
              var data = this.__data__;
              return nativeCreate$1 ? data[key] !== undefined : hasOwnProperty$1.call(data, key);
            }

            /** Used to stand-in for `undefined` hash values. */

            var HASH_UNDEFINED = '__lodash_hash_undefined__';
            /**
             * Sets the hash `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf Hash
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the hash instance.
             */

            function hashSet(key, value) {
              var data = this.__data__;
              this.size += this.has(key) ? 0 : 1;
              data[key] = nativeCreate$1 && value === undefined ? HASH_UNDEFINED : value;
              return this;
            }

            /**
             * Creates a hash object.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */

            function Hash(entries) {
              var index = -1,
                  length = entries == null ? 0 : entries.length;
              this.clear();

              while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
              }
            } // Add methods to `Hash`.


            Hash.prototype.clear = hashClear;
            Hash.prototype['delete'] = hashDelete;
            Hash.prototype.get = hashGet;
            Hash.prototype.has = hashHas;
            Hash.prototype.set = hashSet;

            /**
             * Removes all key-value entries from the list cache.
             *
             * @private
             * @name clear
             * @memberOf ListCache
             */
            function listCacheClear() {
              this.__data__ = [];
              this.size = 0;
            }

            /**
             * Performs a
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * comparison between two values to determine if they are equivalent.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             * @example
             *
             * var object = { 'a': 1 };
             * var other = { 'a': 1 };
             *
             * _.eq(object, object);
             * // => true
             *
             * _.eq(object, other);
             * // => false
             *
             * _.eq('a', 'a');
             * // => true
             *
             * _.eq('a', Object('a'));
             * // => false
             *
             * _.eq(NaN, NaN);
             * // => true
             */
            function eq(value, other) {
              return value === other || value !== value && other !== other;
            }

            /**
             * Gets the index at which the `key` is found in `array` of key-value pairs.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {*} key The key to search for.
             * @returns {number} Returns the index of the matched value, else `-1`.
             */

            function assocIndexOf(array, key) {
              var length = array.length;

              while (length--) {
                if (eq(array[length][0], key)) {
                  return length;
                }
              }

              return -1;
            }

            /** Used for built-in method references. */

            var arrayProto = Array.prototype;
            /** Built-in value references. */

            var splice = arrayProto.splice;
            /**
             * Removes `key` and its value from the list cache.
             *
             * @private
             * @name delete
             * @memberOf ListCache
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */

            function listCacheDelete(key) {
              var data = this.__data__,
                  index = assocIndexOf(data, key);

              if (index < 0) {
                return false;
              }

              var lastIndex = data.length - 1;

              if (index == lastIndex) {
                data.pop();
              } else {
                splice.call(data, index, 1);
              }

              --this.size;
              return true;
            }

            /**
             * Gets the list cache value for `key`.
             *
             * @private
             * @name get
             * @memberOf ListCache
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */

            function listCacheGet(key) {
              var data = this.__data__,
                  index = assocIndexOf(data, key);
              return index < 0 ? undefined : data[index][1];
            }

            /**
             * Checks if a list cache value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf ListCache
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */

            function listCacheHas(key) {
              return assocIndexOf(this.__data__, key) > -1;
            }

            /**
             * Sets the list cache `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf ListCache
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the list cache instance.
             */

            function listCacheSet(key, value) {
              var data = this.__data__,
                  index = assocIndexOf(data, key);

              if (index < 0) {
                ++this.size;
                data.push([key, value]);
              } else {
                data[index][1] = value;
              }

              return this;
            }

            /**
             * Creates an list cache object.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */

            function ListCache(entries) {
              var index = -1,
                  length = entries == null ? 0 : entries.length;
              this.clear();

              while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
              }
            } // Add methods to `ListCache`.


            ListCache.prototype.clear = listCacheClear;
            ListCache.prototype['delete'] = listCacheDelete;
            ListCache.prototype.get = listCacheGet;
            ListCache.prototype.has = listCacheHas;
            ListCache.prototype.set = listCacheSet;

            /* Built-in method references that are verified to be native. */

            var Map$1 = getNative(root$1, 'Map');
            var Map$2 = Map$1;

            /**
             * Removes all key-value entries from the map.
             *
             * @private
             * @name clear
             * @memberOf MapCache
             */

            function mapCacheClear() {
              this.size = 0;
              this.__data__ = {
                'hash': new Hash(),
                'map': new (Map$2 || ListCache)(),
                'string': new Hash()
              };
            }

            /**
             * Checks if `value` is suitable for use as unique object key.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
             */
            function isKeyable(value) {
              var type = _typeof$1(value);

              return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
            }

            /**
             * Gets the data for `map`.
             *
             * @private
             * @param {Object} map The map to query.
             * @param {string} key The reference key.
             * @returns {*} Returns the map data.
             */

            function getMapData(map, key) {
              var data = map.__data__;
              return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
            }

            /**
             * Removes `key` and its value from the map.
             *
             * @private
             * @name delete
             * @memberOf MapCache
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */

            function mapCacheDelete(key) {
              var result = getMapData(this, key)['delete'](key);
              this.size -= result ? 1 : 0;
              return result;
            }

            /**
             * Gets the map value for `key`.
             *
             * @private
             * @name get
             * @memberOf MapCache
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */

            function mapCacheGet(key) {
              return getMapData(this, key).get(key);
            }

            /**
             * Checks if a map value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf MapCache
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */

            function mapCacheHas(key) {
              return getMapData(this, key).has(key);
            }

            /**
             * Sets the map `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf MapCache
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the map cache instance.
             */

            function mapCacheSet(key, value) {
              var data = getMapData(this, key),
                  size = data.size;
              data.set(key, value);
              this.size += data.size == size ? 0 : 1;
              return this;
            }

            /**
             * Creates a map cache object to store key-value pairs.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */

            function MapCache(entries) {
              var index = -1,
                  length = entries == null ? 0 : entries.length;
              this.clear();

              while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
              }
            } // Add methods to `MapCache`.


            MapCache.prototype.clear = mapCacheClear;
            MapCache.prototype['delete'] = mapCacheDelete;
            MapCache.prototype.get = mapCacheGet;
            MapCache.prototype.has = mapCacheHas;
            MapCache.prototype.set = mapCacheSet;

            /** Error message constants. */

            var FUNC_ERROR_TEXT = 'Expected a function';
            /**
             * Creates a function that memoizes the result of `func`. If `resolver` is
             * provided, it determines the cache key for storing the result based on the
             * arguments provided to the memoized function. By default, the first argument
             * provided to the memoized function is used as the map cache key. The `func`
             * is invoked with the `this` binding of the memoized function.
             *
             * **Note:** The cache is exposed as the `cache` property on the memoized
             * function. Its creation may be customized by replacing the `_.memoize.Cache`
             * constructor with one whose instances implement the
             * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
             * method interface of `clear`, `delete`, `get`, `has`, and `set`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to have its output memoized.
             * @param {Function} [resolver] The function to resolve the cache key.
             * @returns {Function} Returns the new memoized function.
             * @example
             *
             * var object = { 'a': 1, 'b': 2 };
             * var other = { 'c': 3, 'd': 4 };
             *
             * var values = _.memoize(_.values);
             * values(object);
             * // => [1, 2]
             *
             * values(other);
             * // => [3, 4]
             *
             * object.a = 2;
             * values(object);
             * // => [1, 2]
             *
             * // Modify the result cache.
             * values.cache.set(object, ['a', 'b']);
             * values(object);
             * // => ['a', 'b']
             *
             * // Replace `_.memoize.Cache`.
             * _.memoize.Cache = WeakMap;
             */

            function memoize(func, resolver) {
              if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
              }

              var memoized = function memoized() {
                var args = arguments,
                    key = resolver ? resolver.apply(this, args) : args[0],
                    cache = memoized.cache;

                if (cache.has(key)) {
                  return cache.get(key);
                }

                var result = func.apply(this, args);
                memoized.cache = cache.set(key, result) || cache;
                return result;
              };

              memoized.cache = new (memoize.Cache || MapCache)();
              return memoized;
            } // Expose `MapCache`.


            memoize.Cache = MapCache;

            /** Used as the maximum memoize cache size. */

            var MAX_MEMOIZE_SIZE = 500;
            /**
             * A specialized version of `_.memoize` which clears the memoized function's
             * cache when it exceeds `MAX_MEMOIZE_SIZE`.
             *
             * @private
             * @param {Function} func The function to have its output memoized.
             * @returns {Function} Returns the new memoized function.
             */

            function memoizeCapped(func) {
              var result = memoize(func, function (key) {
                if (cache.size === MAX_MEMOIZE_SIZE) {
                  cache.clear();
                }

                return key;
              });
              var cache = result.cache;
              return result;
            }

            /** Used to match property names within property paths. */

            var rePropName$1 = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
            /** Used to match backslashes in property paths. */

            var reEscapeChar$1 = /\\(\\)?/g;
            /**
             * Converts `string` to a property path array.
             *
             * @private
             * @param {string} string The string to convert.
             * @returns {Array} Returns the property path array.
             */

            var stringToPath$1 = memoizeCapped(function (string) {
              var result = [];

              if (string.charCodeAt(0) === 46
              /* . */
              ) {
                result.push('');
              }

              string.replace(rePropName$1, function (match, number, quote, subString) {
                result.push(quote ? subString.replace(reEscapeChar$1, '$1') : number || match);
              });
              return result;
            });
            var stringToPath$2 = stringToPath$1;

            /**
             * A specialized version of `_.map` for arrays without support for iteratee
             * shorthands.
             *
             * @private
             * @param {Array} [array] The array to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array} Returns the new mapped array.
             */
            function arrayMap(array, iteratee) {
              var index = -1,
                  length = array == null ? 0 : array.length,
                  result = Array(length);

              while (++index < length) {
                result[index] = iteratee(array[index], index, array);
              }

              return result;
            }

            /** Used as references for various `Number` constants. */

            var INFINITY$1 = 1 / 0;
            /** Used to convert symbols to primitives and strings. */

            var symbolProto = _Symbol$1 ? _Symbol$1.prototype : undefined,
                symbolToString = symbolProto ? symbolProto.toString : undefined;
            /**
             * The base implementation of `_.toString` which doesn't convert nullish
             * values to empty strings.
             *
             * @private
             * @param {*} value The value to process.
             * @returns {string} Returns the string.
             */

            function baseToString(value) {
              // Exit early for strings to avoid a performance hit in some environments.
              if (typeof value == 'string') {
                return value;
              }

              if (isArray$5(value)) {
                // Recursively convert values (susceptible to call stack limits).
                return arrayMap(value, baseToString) + '';
              }

              if (isSymbol$1(value)) {
                return symbolToString ? symbolToString.call(value) : '';
              }

              var result = value + '';
              return result == '0' && 1 / value == -INFINITY$1 ? '-0' : result;
            }

            /**
             * Converts `value` to a string. An empty string is returned for `null`
             * and `undefined` values. The sign of `-0` is preserved.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {string} Returns the converted string.
             * @example
             *
             * _.toString(null);
             * // => ''
             *
             * _.toString(-0);
             * // => '-0'
             *
             * _.toString([1, 2, 3]);
             * // => '1,2,3'
             */

            function toString(value) {
              return value == null ? '' : baseToString(value);
            }

            /**
             * Casts `value` to a path array if it's not one.
             *
             * @private
             * @param {*} value The value to inspect.
             * @param {Object} [object] The object to query keys on.
             * @returns {Array} Returns the cast property path array.
             */

            function castPath(value, object) {
              if (isArray$5(value)) {
                return value;
              }

              return isKey(value, object) ? [value] : stringToPath$2(toString(value));
            }

            /** Used as references for various `Number` constants. */

            var INFINITY = 1 / 0;
            /**
             * Converts `value` to a string key if it's not a string or symbol.
             *
             * @private
             * @param {*} value The value to inspect.
             * @returns {string|symbol} Returns the key.
             */

            function toKey(value) {
              if (typeof value == 'string' || isSymbol$1(value)) {
                return value;
              }

              var result = value + '';
              return result == '0' && 1 / value == -INFINITY ? '-0' : result;
            }

            /**
             * The base implementation of `_.get` without support for default values.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the property to get.
             * @returns {*} Returns the resolved value.
             */

            function baseGet(object, path) {
              path = castPath(path, object);
              var index = 0,
                  length = path.length;

              while (object != null && index < length) {
                object = object[toKey(path[index++])];
              }

              return index && index == length ? object : undefined;
            }

            /**
             * Gets the value at `path` of `object`. If the resolved value is
             * `undefined`, the `defaultValue` is returned in its place.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the property to get.
             * @param {*} [defaultValue] The value returned for `undefined` resolved values.
             * @returns {*} Returns the resolved value.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }] };
             *
             * _.get(object, 'a[0].b.c');
             * // => 3
             *
             * _.get(object, ['a', '0', 'b', 'c']);
             * // => 3
             *
             * _.get(object, 'a.b.c', 'default');
             * // => 'default'
             */

            function get(object, path, defaultValue) {
              var result = object == null ? undefined : baseGet(object, path);
              return result === undefined ? defaultValue : result;
            }

            var defineProperty = function () {
              try {
                var func = getNative(Object, 'defineProperty');
                func({}, '', {});
                return func;
              } catch (e) {}
            }();

            var defineProperty$1 = defineProperty;

            /**
             * The base implementation of `assignValue` and `assignMergeValue` without
             * value checks.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {string} key The key of the property to assign.
             * @param {*} value The value to assign.
             */

            function baseAssignValue(object, key, value) {
              if (key == '__proto__' && defineProperty$1) {
                defineProperty$1(object, key, {
                  'configurable': true,
                  'enumerable': true,
                  'value': value,
                  'writable': true
                });
              } else {
                object[key] = value;
              }
            }

            /** Used for built-in method references. */

            var objectProto = Object.prototype;
            /** Used to check objects for own properties. */

            var hasOwnProperty = objectProto.hasOwnProperty;
            /**
             * Assigns `value` to `key` of `object` if the existing value is not equivalent
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {string} key The key of the property to assign.
             * @param {*} value The value to assign.
             */

            function assignValue(object, key, value) {
              var objValue = object[key];

              if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
                baseAssignValue(object, key, value);
              }
            }

            /** Used as references for various `Number` constants. */
            var MAX_SAFE_INTEGER = 9007199254740991;
            /** Used to detect unsigned integer values. */

            var reIsUint = /^(?:0|[1-9]\d*)$/;
            /**
             * Checks if `value` is a valid array-like index.
             *
             * @private
             * @param {*} value The value to check.
             * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
             * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
             */

            function isIndex(value, length) {
              var type = _typeof$1(value);

              length = length == null ? MAX_SAFE_INTEGER : length;
              return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
            }

            /**
             * The base implementation of `_.set`.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {*} value The value to set.
             * @param {Function} [customizer] The function to customize path creation.
             * @returns {Object} Returns `object`.
             */

            function baseSet(object, path, value, customizer) {
              if (!isObject(object)) {
                return object;
              }

              path = castPath(path, object);
              var index = -1,
                  length = path.length,
                  lastIndex = length - 1,
                  nested = object;

              while (nested != null && ++index < length) {
                var key = toKey(path[index]),
                    newValue = value;

                if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
                  return object;
                }

                if (index != lastIndex) {
                  var objValue = nested[key];
                  newValue = customizer ? customizer(objValue, key, nested) : undefined;

                  if (newValue === undefined) {
                    newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
                  }
                }

                assignValue(nested, key, newValue);
                nested = nested[key];
              }

              return object;
            }

            /**
             * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
             * it's created. Arrays are created for missing index properties while objects
             * are created for all other missing properties. Use `_.setWith` to customize
             * `path` creation.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }] };
             *
             * _.set(object, 'a[0].b.c', 4);
             * console.log(object.a[0].b.c);
             * // => 4
             *
             * _.set(object, ['x', '0', 'y', 'z'], 5);
             * console.log(object.x[0].y.z);
             * // => 5
             */

            function set(object, path, value) {
              return object == null ? object : baseSet(object, path, value);
            }

            /**
             * @param {MinterApiInstance} apiInstance
             * @return {function(TxParams): (Promise<TxParams>)}
             */

            function ReplaceCoinSymbol(apiInstance) {
              var replaceCoinSymbolByPath = ReplaceCoinSymbolByPath(apiInstance);
              /**
               * @param {TxParams} txParams
               * @param {import('axios').AxiosRequestConfig} [axiosOptions]
               * @return {Promise<TxParams>}
               */

              return function replaceCoinSymbol(txParams, axiosOptions) {
                var pathList = getTxParamsPathList(txParams);
                return replaceCoinSymbolByPath(txParams, pathList, txParams.chainId, axiosOptions);
              };
            }
            /**
             *
             * @param {MinterApiInstance} apiInstance
             * @return {function(Object, Array<string>, number=, AxiosRequestConfig=): Promise<Object>}
             * @constructor
             */

            function ReplaceCoinSymbolByPath(apiInstance) {
              var replaceParamsByPath = ReplaceParamsByPath(apiInstance);
              return replaceCoinSymbolByPath;
              /**
               * @param {Object} txParams
               * @param {Array<string>} pathList
               * @param {number} [chainId]
               * @param {import('axios').AxiosRequestConfig} [axiosOptions]
               * @return {Promise<Object>}
               */

              function replaceCoinSymbolByPath(txParams, pathList) {
                var chainId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : apiInstance.defaults.chainId;
                var axiosOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
                return replaceParamsByPath(txParams, pathList, replacer, chainId, axiosOptions); // eslint-disable-next-line no-shadow, unicorn/consistent-function-scoping

                function replacer(symbolValue, chainId, apiInstance, axiosOptions) {
                  if (isCoinSymbol(symbolValue)) {
                    return _getCoinId(symbolValue, chainId, apiInstance, axiosOptions);
                  } else {
                    return Promise.resolve(symbolValue);
                  }
                }
              }
            }
            /**
             * @param {MinterApiInstance} apiInstance
             * @return {function(txParams: Object, pathList: Array<string>, replacer: function, chainId: number=, AxiosRequestConfig=): Promise<Object>}
             * @constructor
             */

            function ReplaceParamsByPath(apiInstance) {
              return replaceParamsByPath;
              /**
               * @param {Object} txParams
               * @param {Array<string>} pathList
               * @param {function(inputValue: any, number=, AxiosRequestConfig=): Promise} replacer
               * @param {number} [chainId]
               * @param {import('axios').AxiosRequestConfig} [axiosOptions]
               * @return {Promise<Object>}
               */

              function replaceParamsByPath(txParams, pathList, replacer) {
                var chainId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : apiInstance.defaults.chainId;
                var axiosOptions = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
                var promiseList = {};
                pathList.forEach(function (path) {
                  return fillPath(path);
                });
                var promiseArray = Object.values(promiseList);
                return Promise.all(promiseArray).then(function () {
                  return txParams;
                });
                /**
                 * Fill promiseList by path and replace txParams value by path
                 * @param {string} path
                 */

                function fillPath(path) {
                  var inputValue = get(txParams, path); // coinInfo promise may be used by multiple patchers


                  if (!promiseList[inputValue]) {
                    promiseList[inputValue] = replacer(inputValue, chainId, apiInstance, axiosOptions);
                  } // append txParams patcher


                  promiseList[inputValue] = promiseList[inputValue].then(function (outputValue) {
                    set(txParams, path, outputValue);

                    return outputValue;
                  });
                }
              }
            }
            /**
             * @param {MinterApiInstance} apiInstance
             * @return {function(symbol: string|Array<string>, chainId: number=, axiosOptions: AxiosRequestConfig=): Promise<number>}
             */

            function GetCoinId(apiInstance) {
              return getCoinId;
              /**
               * @param {string|Array<string>} symbol
               * @param {number} [chainId]
               * @param {import('axios').AxiosRequestConfig} [axiosOptions]
               * @return {Promise<number|Array<number>>}
               */

              function getCoinId(symbol) {
                var chainId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : apiInstance.defaults.chainId;
                var axiosOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
                return processArrayByPromise(_getCoinId, symbol, chainId, apiInstance, axiosOptions);
              }
            }
            /**
             * @template T
             * @param {function(value, ...otherArgs): Promise<T>} fn
             * @param {*|Array<*>} value
             * @param {...Object} otherArgs
             * @return {Promise<T|Array<T>>}
             */

            function processArrayByPromise(fn, value) {
              for (var _len = arguments.length, otherArgs = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
                otherArgs[_key - 2] = arguments[_key];
              }

              if (Array.isArray(value)) {
                var valueList = value;
                var promiseList = valueList.map(function (valueItem) {
                  return fn.apply(void 0, [valueItem].concat(otherArgs));
                });
                return Promise.all(promiseList);
              } else {
                return fn.apply(void 0, [value].concat(otherArgs));
              }
            }
            /**
             * @param {string} symbol
             * @param {number} [chainId]
             * @param {MinterApiInstance} apiInstance
             * @param {import('axios').AxiosRequestConfig} [axiosOptions]
             * @return {Promise<number>}
             * @private
             */


            function _getCoinId(symbol, chainId, apiInstance, axiosOptions) {
              if (isCoinId(symbol)) {
                return Promise.resolve(symbol);
              }

              if (isCoinSymbol(symbol)) {
                if (isBaseCoinSymbol(chainId, symbol)) {
                  return Promise.resolve(0);
                } else {
                  var getCoinInfo = GetCoinInfo(apiInstance);
                  return getCoinInfo(symbol, axiosOptions).then(function (coinInfo) {
                    return coinInfo.id;
                  });
                }
              } else {
                return Promise.reject(new Error('Invalid coin symbol'));
              }
            }
            /**
             * @param {MinterApiInstance} apiInstance
             * @return {function(TxParams): (Promise<TxParams>)}
             */


            function ReplaceCoinId(apiInstance) {
              var replaceCoinIdByPath = ReplaceCoinIdByPath(apiInstance);
              /**
               * @param {TxParams} txParams
               * @param {import('axios').AxiosRequestConfig} [axiosOptions]
               * @return {Promise<TxParams>}
               */

              return function replaceCoinId(txParams, axiosOptions) {
                var pathList = getTxParamsPathList(txParams);
                return replaceCoinIdByPath(txParams, pathList, txParams.chainId, axiosOptions);
              };
            }
            /**
             *
             * @param {MinterApiInstance} apiInstance
             * @return {function(Object, Array<string>, number=, AxiosRequestConfig=): Promise<Object>}
             * @constructor
             */

            function ReplaceCoinIdByPath(apiInstance) {
              var replaceParamsByPath = ReplaceParamsByPath(apiInstance);
              return replaceCoinIdByPath;
              /**
               * @param {Object} txParams
               * @param {Array<string>} pathList
               * @param {number} [chainId]
               * @param {import('axios').AxiosRequestConfig} [axiosOptions]
               * @return {Promise<Object>}
               */

              function replaceCoinIdByPath(txParams, pathList) {
                var chainId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : apiInstance.defaults.chainId;
                var axiosOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
                return replaceParamsByPath(txParams, pathList, replacer, chainId, axiosOptions); // eslint-disable-next-line no-shadow, unicorn/consistent-function-scoping

                function replacer(idValue, chainId, apiInstance, axiosOptions) {
                  if (isCoinId(idValue)) {
                    return _getCoinSymbol(idValue, chainId, apiInstance, axiosOptions);
                  } else {
                    return Promise.resolve(idValue);
                  }
                }
              }
            }
            /**
             * @param {MinterApiInstance} apiInstance
             * @return {function(id: number|string|Array<number|string>, chainId: number=, axiosOptions: AxiosRequestConfig=): Promise<number>}
             */

            function GetCoinSymbol(apiInstance) {
              return getCoinSymbol;
              /**
               * @param {number|string|Array<number|string>} id
               * @param {number} [chainId]
               * @param {import('axios').AxiosRequestConfig} [axiosOptions]
               * @return {Promise<string|Array<string>>}
               */

              function getCoinSymbol(id) {
                var chainId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : apiInstance.defaults.chainId;
                var axiosOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
                return processArrayByPromise(_getCoinSymbol, id, chainId, apiInstance, axiosOptions);
              }
            }
            /**
             * @param {number|string} id
             * @param {number} [chainId]
             * @param {MinterApiInstance} apiInstance
             * @param {import('axios').AxiosRequestConfig} [axiosOptions]
             * @return {Promise<string>}
             * @private
             */

            function _getCoinSymbol(id, chainId, apiInstance, axiosOptions) {
              if (isCoinSymbol(id)) {
                return Promise.resolve(id);
              }

              if (isCoinId(id)) {
                if (Number.parseInt(id, 10) === 0 && chainId) {
                  return Promise.resolve(getBaseCoinSymbol(chainId));
                } else {
                  var getCoinInfo = GetCoinInfo(apiInstance);
                  return getCoinInfo(id, axiosOptions).then(function (coinInfo) {
                    return coinInfo.symbol;
                  });
                }
              } else {
                return Promise.reject(new Error('Invalid coin id'));
              }
            }
            /**
             * @param {TxParams} txParams
             * @return {Array<string>}
             */


            function getTxParamsPathList(txParams) {
              var pathList = [];
              pathList.push('gasCoin');
              var txType = normalizeTxType(txParams.type);

              switch (txType) {
                case TX_TYPE.SEND:
                case TX_TYPE.DECLARE_CANDIDACY:
                case TX_TYPE.DELEGATE:
                case TX_TYPE.UNBOND:
                case TX_TYPE.MOVE_STAKE:
                case TX_TYPE.MINT_TOKEN:
                case TX_TYPE.BURN_TOKEN:
                case TX_TYPE.VOTE_COMMISSION:
                  {
                    pathList.push('data.coin');
                    break;
                  }

                case TX_TYPE.ADD_LIMIT_ORDER:
                case TX_TYPE.SELL:
                case TX_TYPE.SELL_ALL:
                case TX_TYPE.BUY:
                  {
                    pathList.push('data.coinToSell', 'data.coinToBuy');
                    break;
                  }

                case TX_TYPE.CREATE_SWAP_POOL:
                case TX_TYPE.ADD_LIQUIDITY:
                case TX_TYPE.REMOVE_LIQUIDITY:
                  {
                    pathList.push('data.coin0', 'data.coin1');
                    break;
                  }

                case TX_TYPE.MULTISEND:
                  {
                    txParams.data.list.forEach(function (item, index) {
                      pathList.push("data.list[".concat(index, "].coin"));
                    });
                    break;
                  }

                case TX_TYPE.BUY_SWAP_POOL:
                case TX_TYPE.SELL_SWAP_POOL:
                case TX_TYPE.SELL_ALL_SWAP_POOL:
                  {
                    txParams.data.coins.forEach(function (item, index) {
                      pathList.push("data.coins[".concat(index, "]"));
                    });
                    break;
                  }
              }

              return pathList;
            }

            var signature = {};

            var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
              return mod && mod.__esModule ? mod : {
                "default": mod
              };
            };

            Object.defineProperty(signature, "__esModule", {
              value: true
            });
            signature.hashPersonalMessage = signature.isValidSignature = signature.fromRpcSig = signature.toCompactSig = signature.toRpcSig = ecrecover_1 = signature.ecrecover = ecsign_1 = signature.ecsign = void 0;
            var secp256k1_1 = secp256k1$1;

            var bn_js_1 = __importDefault(bn.exports);

            var bytes_1 = bytes;
            var hash_1 = hash$1;
            var helpers_1 = helpers;
            var types_1 = types;

            function ecsign(msgHash, privateKey, chainId) {
              var _ref = (0, secp256k1_1.ecdsaSign)(msgHash, privateKey),
                  signature = _ref.signature,
                  recovery = _ref.recid;

              var r = Buffer$i.from(signature.slice(0, 32));
              var s = Buffer$i.from(signature.slice(32, 64));

              if (!chainId || typeof chainId === 'number') {
                // return legacy type ECDSASignature (deprecated in favor of ECDSASignatureBuffer to handle large chainIds)
                if (chainId && !Number.isSafeInteger(chainId)) {
                  throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');
                }

                var _v = chainId ? recovery + (chainId * 2 + 35) : recovery + 27;

                return {
                  r: r,
                  s: s,
                  v: _v
                };
              }

              var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);
              var v = chainIdBN.muln(2).addn(35).addn(recovery).toArrayLike(Buffer$i);
              return {
                r: r,
                s: s,
                v: v
              };
            }

            var ecsign_1 = signature.ecsign = ecsign;

            function calculateSigRecovery(v, chainId) {
              var vBN = (0, types_1.toType)(v, types_1.TypeOutput.BN);

              if (!chainId) {
                return vBN.subn(27);
              }

              var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);
              return vBN.sub(chainIdBN.muln(2).addn(35));
            }

            function isValidSigRecovery(recovery) {
              var rec = new bn_js_1["default"](recovery);
              return rec.eqn(0) || rec.eqn(1);
            }
            /**
             * ECDSA public key recovery from signature.
             * @returns Recovered public key
             */


            var ecrecover = function ecrecover(msgHash, v, r, s, chainId) {
              var signature = Buffer$i.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32)], 64);
              var recovery = calculateSigRecovery(v, chainId);

              if (!isValidSigRecovery(recovery)) {
                throw new Error('Invalid signature v value');
              }

              var senderPubKey = (0, secp256k1_1.ecdsaRecover)(signature, recovery.toNumber(), msgHash);
              return Buffer$i.from((0, secp256k1_1.publicKeyConvert)(senderPubKey, false).slice(1));
            };

            var ecrecover_1 = signature.ecrecover = ecrecover;
            /**
             * Convert signature parameters into the format of `eth_sign` RPC method.
             * @returns Signature
             */

            var toRpcSig = function toRpcSig(v, r, s, chainId) {
              var recovery = calculateSigRecovery(v, chainId);

              if (!isValidSigRecovery(recovery)) {
                throw new Error('Invalid signature v value');
              } // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin


              return (0, bytes_1.bufferToHex)(Buffer$i.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32), (0, bytes_1.toBuffer)(v)]));
            };

            signature.toRpcSig = toRpcSig;
            /**
             * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).
             * @returns Signature
             */

            var toCompactSig = function toCompactSig(v, r, s, chainId) {
              var recovery = calculateSigRecovery(v, chainId);

              if (!isValidSigRecovery(recovery)) {
                throw new Error('Invalid signature v value');
              }

              var vn = (0, types_1.toType)(v, types_1.TypeOutput.Number);
              var ss = s;

              if (vn > 28 && vn % 2 === 1 || vn === 1 || vn === 28) {
                ss = Buffer$i.from(s);
                ss[0] |= 0x80;
              }

              return (0, bytes_1.bufferToHex)(Buffer$i.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(ss, 32)]));
            };

            signature.toCompactSig = toCompactSig;
            /**
             * Convert signature format of the `eth_sign` RPC method to signature parameters
             * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053
             */

            var fromRpcSig = function fromRpcSig(sig) {
              var buf = (0, bytes_1.toBuffer)(sig);
              var r;
              var s;
              var v;

              if (buf.length >= 65) {
                r = buf.slice(0, 32);
                s = buf.slice(32, 64);
                v = (0, bytes_1.bufferToInt)(buf.slice(64));
              } else if (buf.length === 64) {
                // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)
                r = buf.slice(0, 32);
                s = buf.slice(32, 64);
                v = (0, bytes_1.bufferToInt)(buf.slice(32, 33)) >> 7;
                s[0] &= 0x7f;
              } else {
                throw new Error('Invalid signature length');
              } // support both versions of `eth_sign` responses


              if (v < 27) {
                v += 27;
              }

              return {
                v: v,
                r: r,
                s: s
              };
            };

            signature.fromRpcSig = fromRpcSig;
            /**
             * Validate a ECDSA signature.
             * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one
             */

            var isValidSignature = function isValidSignature(v, r, s) {
              var homesteadOrLater = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
              var chainId = arguments.length > 4 ? arguments[4] : undefined;
              var SECP256K1_N_DIV_2 = new bn_js_1["default"]('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
              var SECP256K1_N = new bn_js_1["default"]('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);

              if (r.length !== 32 || s.length !== 32) {
                return false;
              }

              if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {
                return false;
              }

              var rBN = new bn_js_1["default"](r);
              var sBN = new bn_js_1["default"](s);

              if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {
                return false;
              }

              if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {
                return false;
              }

              return true;
            };

            signature.isValidSignature = isValidSignature;
            /**
             * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.
             * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`
             * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key
             * used to produce the signature.
             */

            var hashPersonalMessage = function hashPersonalMessage(message) {
              (0, helpers_1.assertIsBuffer)(message);
              var prefix = Buffer$i.from("\x19Ethereum Signed Message:\n".concat(message.length), 'utf-8');
              return (0, hash_1.keccak)(Buffer$i.concat([prefix, message]));
            };

            signature.hashPersonalMessage = hashPersonalMessage;

            var _typeof = typeof Symbol === 'function' && _typeof$1(Symbol.iterator) === 'symbol' ? function (obj) {
              return _typeof$1(obj);
            } : function (obj) {
              return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : _typeof$1(obj);
            };
            /**
             * Defines properties on a `Object`. It make the assumption that underlying data is binary.
             * @param {Object} self the `Object` to define properties on
             * @param {Array} fields an array fields to define. Fields can contain:
             * * `name` - the name of the properties
             * * `length` - the number of bytes the field can have
             * * `allowLess` - if the field can be less than the length
             * * `allowEmpty`
             * * `allowNonBinaryArray` - if the field can be non binary array
             * * `nonBinaryArrayTransform` - function to transform each item of the non binary array
             * @param {*} [data] data to be validated against the definitions
             */


            function definePropertiesNonBinary(self, fields, data) {
              self.raw = [];
              self._fields = []; // attach the `toJSON`

              self.toJSON = function (label) {
                /* eslint-disable unicorn/prevent-abbreviations */
                if (label) {
                  var obj = {};

                  self._fields.forEach(function (field) {
                    obj[field] = "0x".concat(self[field].toString('hex'));
                  });

                  return obj;
                }

                return bytes.baToJSON(this.raw);
              };

              self.serialize = function serialize() {
                return encode_1(self.raw);
              };

              self.serializeToString = function serialize() {
                return "0x".concat(self.serialize().toString('hex'));
              };

              fields.forEach(function (field, i) {
                self._fields.push(field.name);

                function getter() {
                  return self.raw[i];
                }

                function setter(v) {
                  if (field.allowNonBinaryArray && Array.isArray(v)) {
                    if (field.nonBinaryArrayTransform && typeof field.nonBinaryArrayTransform === 'function') {
                      v = v.map(function (item) {
                        return field.nonBinaryArrayTransform(item);
                      });
                    } else {
                      v = v.map(function (item) {
                        return toBuffer$1(item);
                      });
                    } // cast 0x00 to 0x, to represent in RLP as 0x80 instead of 0x00


                    v = v.map(function (item) {
                      if (item.toString('hex') === '00'
                      /* && !field.allowZero */
                      ) {
                        return Buffer$i.from([]);
                      }

                      return item;
                    });
                  } else {
                    v = toBuffer$1(v);

                    if (v.toString('hex') === '00' && !field.allowZero) {
                      v = Buffer$i.from([]);
                    }

                    if (field.allowLess && field.length > 0) {
                      v = bytes.unpadBuffer(v);
                      assert$2(field.length >= v.length, "The field ".concat(field.name, " must not have more ").concat(field.length, " bytes"));
                    } else if (!(field.allowZero && v.length === 0) && field.length > 0) {
                      assert$2(field.length === v.length, "The field ".concat(field.name, " must have byte length of ").concat(field.length));
                    }
                  }

                  self.raw[i] = v;
                }

                Object.defineProperty(self, field.name, {
                  enumerable: true,
                  configurable: true,
                  get: getter,
                  set: setter
                });

                if (field["default"]) {
                  self[field.name] = field["default"];
                } // attach alias


                if (field.alias) {
                  Object.defineProperty(self, field.alias, {
                    enumerable: false,
                    configurable: true,
                    set: setter,
                    get: getter
                  });
                }
              }); // if the constuctor is passed data

              if (data) {
                if (typeof data === 'string') {
                  data = Buffer$i.from(lib$1.stripHexPrefix(data), 'hex');
                }

                if (isBuffer$2(data)) {
                  data = decode_1(data);
                }

                if (Array.isArray(data)) {
                  if (data.length > self._fields.length) {
                    throw new Error('wrong number of fields in data');
                  } // set fields from array


                  data.forEach(function (d, i) {
                    self[self._fields[i]] = d;
                  });
                } else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
                  var keys = Object.keys(data);
                  fields.forEach(function (field) {
                    if (keys.indexOf(field.name) !== -1) self[field.name] = data[field.name];
                    if (keys.indexOf(field.alias) !== -1) self[field.alias] = data[field.alias];
                  });
                } else {
                  throw new Error('invalid data');
                }
              }
            }

            var N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);

            var Tx = /*#__PURE__*/function () {
              function Tx(data) {
                _classCallCheck(this, Tx);

                data = data || {}; // Define Properties

                var fields = [{
                  name: 'nonce',
                  length: 32,
                  allowLess: true
                }, {
                  name: 'chainId',
                  length: 1
                }, {
                  name: 'gasPrice',
                  length: 32,
                  allowLess: true
                }, {
                  name: 'gasCoin',
                  length: 4,
                  allowLess: true
                }, {
                  name: 'type',
                  length: 1
                }, {
                  name: 'data',
                  alias: 'input'
                }, {
                  name: 'payload',
                  allowZero: true,
                  "default": Buffer$i.from([])
                }, {
                  name: 'serviceData',
                  allowZero: true,
                  "default": Buffer$i.from([])
                }, {
                  name: 'signatureType',
                  length: 1,
                  allowLess: true,
                  "default": Buffer$i.from([])
                }, {
                  name: 'signatureData',
                  "default": Buffer$i.from([])
                }];
                /**
                 * @TODO deprecated @see https://github.com/ethereumjs/ethereumjs-account/issues/29 @see https://github.com/ethereumjs/ethereumjs-tx/issues/151
                 * Returns the rlp encoding of the transaction
                 * @method serialize
                 * @return {Buffer}
                 * @memberof Transaction
                 * @name serialize
                 */
                // attached serialize

                definePropertiesNonBinary(this, fields, data);
                /**
                 * @property {Buffer} from (read only) sender address of this transaction, mathematically derived from other parameters.
                 * @name from
                 * @memberof Transaction
                 */

                Object.defineProperty(this, 'from', {
                  enumerable: true,
                  configurable: true,
                  get: this.getSenderAddress.bind(this)
                });
              }
              /**
               * Computes a sha3-256 hash of the serialized tx
               * @param {Boolean} [includeSignature=true] whether or not to include the signature
               * @return {Buffer}
               */


              _createClass(Tx, [{
                key: "hash",
                value: function hash(includeSignature) {
                  if (includeSignature === undefined) {
                    includeSignature = true;
                  } // EIP155 spec:
                  // when computing the hash of a transaction for purposes of signing or recovering,
                  // instead of hashing only the first six elements (ie. nonce, gasprice, startgas, to, value, data),
                  // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0


                  var items;

                  if (includeSignature) {
                    items = this.raw;
                  } else {
                    // hash everything except signatureData
                    items = this.raw.slice(0, -1);
                  } // create hash


                  return hash$1.rlphash(items);
                }
              }, {
                key: "isSignatureTypeSingle",
                value: function isSignatureTypeSingle() {
                  return bytes.bufferToInt(this.signatureType) === 1;
                }
              }, {
                key: "isSignatureTypeMulti",
                value: function isSignatureTypeMulti() {
                  return bytes.bufferToInt(this.signatureType) === 2;
                }
                /**
                 * returns the sender's address
                 * @return {Buffer}
                 */

              }, {
                key: "getSenderAddress",
                value: function getSenderAddress() {
                  if (this._from) {
                    return this._from;
                  }

                  if (this.isSignatureTypeMulti()) {
                    var multiSignature = decode_1(this.signatureData);
                    this._from = multiSignature[0];
                    return this._from;
                  }

                  var publicKey = this.getSenderPublicKey();
                  this._from = account.publicToAddress(publicKey);
                  return this._from;
                }
              }, {
                key: "getSenderAddressString",
                value: function getSenderAddressString() {
                  return "Mx".concat(this.getSenderAddress().toString('hex'));
                }
                /**
                 * returns the public key of the sender
                 * @return {Buffer}
                 */

              }, {
                key: "getSenderPublicKey",
                value: function getSenderPublicKey() {
                  // eslint-disable-next-line unicorn/explicit-length-check
                  if (!this._senderPublicKey || !this._senderPublicKey.length) {
                    // eslint-disable-next-line unicorn/no-lonely-if
                    if (!this.verifySignature()) {
                      throw new Error('Invalid Signature');
                    }
                  }

                  return this._senderPublicKey;
                }
                /**
                 * Determines if the signature is valid
                 * @return {Boolean}
                 */

              }, {
                key: "verifySignature",
                value: function verifySignature() {
                  var _this = this;

                  if (this.isSignatureTypeSingle()) {
                    // Single signature
                    var vrs = decode_1(this.signatureData);
                    var messageHash = this.hash(false);
                    return this._verifySignature(messageHash, vrs);
                  } else {
                    // Multi signature
                    var multiSignature = decode_1(this.signatureData);

                    var _messageHash = this.hash(false);

                    var hasErrors = multiSignature[1].some(function (item) {
                      return !_this._verifySignature(_messageHash, item);
                    });
                    return !hasErrors;
                  }
                }
              }, {
                key: "_verifySignature",
                value: function _verifySignature(messageHash, vrs) {
                  // All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.
                  if (new BN(vrs[2]).cmp(N_DIV_2) === 1) {
                    return false;
                  }

                  try {
                    var v = bytes.bufferToInt(vrs[0]);
                    var senderPublicKey = ecrecover_1(messageHash, v, vrs[1], vrs[2]);

                    if (this.isSignatureTypeSingle()) {
                      this._senderPublicKey = senderPublicKey;
                    }

                    return !!senderPublicKey;
                  } catch (error) {
                    return false;
                  }
                }
                /**
                 * validates the signature and checks to see if it has enough gas
                 * @param {Boolean} [stringError=false] whether to return a string with a description of why the validation failed or return a Bloolean
                 * @return {Boolean|String}
                 */

              }, {
                key: "validate",
                value: function validate(stringError) {
                  var errors = [];

                  if (!this.verifySignature()) {
                    errors.push('Invalid Signature');
                  }

                  if (stringError === undefined || stringError === false) {
                    return errors.length === 0;
                  } else {
                    return errors.join(' ');
                  }
                }
              }]);

              return Tx;
            }();

            var TxSignature = /*#__PURE__*/function () {
              function TxSignature(data) {
                _classCallCheck(this, TxSignature);

                data = data || {}; // Define Properties

                var fields = [{
                  name: 'v',
                  "default": Buffer$i.from([0x1c])
                }, {
                  name: 'r',
                  length: 32,
                  allowLess: true
                }, {
                  name: 's',
                  length: 32,
                  allowLess: true
                }];
                /**
                 * Returns the rlp encoding of the transaction
                 * @method serialize
                 * @return {Buffer}
                 * @memberof Transaction
                 * @name serialize
                 */
                // attached serialize

                definePropertiesNonBinary(this, fields, data);
              }
              /**
               * sign a transaction with a given a private key
               * @param messageHash
               * @param {Buffer} privateKey
               */


              _createClass(TxSignature, [{
                key: "sign",
                value: function sign(messageHash, privateKey) {
                  var rsvSig = ecsign_1(messageHash, privateKey);
                  Object.assign(this, rsvSig);
                  return this;
                }
              }]);

              return TxSignature;
            }();

            var TxMultisignature = /*#__PURE__*/_createClass(function TxMultisignature(data) {
              _classCallCheck(this, TxMultisignature);

              data = data || {}; // Define Properties

              var fields = [{
                name: 'multisig',
                length: 20
              }, {
                name: 'signatures',
                allowNonBinaryArray: true,
                nonBinaryArrayTransform: function nonBinaryArrayTransform(item) {
                  return new TxSignature(item).raw;
                }
              }];
              /**
               * Returns the rlp encoding of the transaction
               * @method serialize
               * @return {Buffer}
               * @memberof Transaction
               * @name serialize
               */
              // attached serialize

              definePropertiesNonBinary(this, fields, data);
            });

            var TxDataSend = /*#__PURE__*/_createClass(function TxDataSend(data) {
              _classCallCheck(this, TxDataSend);

              // Define Properties
              var fields = [{
                name: 'coin',
                length: 4,
                allowLess: true
              }, {
                name: 'to',
                length: 20
              }, {
                name: 'value',
                length: 32,
                allowLess: true
              }];
              /**
               * Returns the rlp encoding of the transaction
               * @method serialize
               * @return {Buffer}
               * @memberof Transaction
               * @name serialize
               */
              // attached serialize

              definePropertiesNonBinary(this, fields, data);
            });

            var TxDataMultisend = /*#__PURE__*/_createClass(function TxDataMultisend(data) {
              _classCallCheck(this, TxDataMultisend);

              // Define Properties
              var fields = [{
                name: 'list',
                allowNonBinaryArray: true,
                nonBinaryArrayTransform: function nonBinaryArrayTransform(item) {
                  return new TxDataSend(item).raw;
                }
              }];
              /**
               * Returns the rlp encoding of the transaction
               * @method serialize
               * @return {Buffer}
               * @memberof Transaction
               * @name serialize
               */
              // attached serialize

              definePropertiesNonBinary(this, fields, data);
            });

            var TxDataSell = /*#__PURE__*/_createClass(function TxDataSell(data) {
              _classCallCheck(this, TxDataSell);

              // Define Properties
              var fields = [{
                name: 'coinToSell',
                length: 4,
                allowLess: true
              }, {
                name: 'valueToSell',
                length: 32,
                allowLess: true
              }, {
                name: 'coinToBuy',
                length: 4,
                allowLess: true
              }, {
                name: 'minimumValueToBuy',
                length: 32,
                allowLess: true
              }];
              /**
               * Returns the rlp encoding of the transaction
               * @method serialize
               * @return {Buffer}
               * @memberof Transaction
               * @name serialize
               */
              // attached serialize

              definePropertiesNonBinary(this, fields, data);
            });

            var TxDataBuy = /*#__PURE__*/_createClass(function TxDataBuy(data) {
              _classCallCheck(this, TxDataBuy);

              // Define Properties
              var fields = [{
                name: 'coinToBuy',
                length: 4,
                allowLess: true
              }, {
                name: 'valueToBuy',
                length: 32,
                allowLess: true
              }, {
                name: 'coinToSell',
                length: 4,
                allowLess: true
              }, {
                name: 'maximumValueToSell',
                length: 32,
                allowLess: true
              }];
              /**
               * Returns the rlp encoding of the transaction
               * @method serialize
               * @return {Buffer}
               * @memberof Transaction
               * @name serialize
               */
              // attached serialize

              definePropertiesNonBinary(this, fields, data);
            });

            var TxDataSellAll = /*#__PURE__*/_createClass(function TxDataSellAll(data) {
              _classCallCheck(this, TxDataSellAll);

              // Define Properties
              var fields = [{
                name: 'coinToSell',
                length: 4,
                allowLess: true
              }, {
                name: 'coinToBuy',
                length: 4,
                allowLess: true
              }, {
                name: 'minimumValueToBuy',
                length: 32,
                allowLess: true
              }];
              /**
               * Returns the rlp encoding of the transaction
               * @method serialize
               * @return {Buffer}
               * @memberof Transaction
               * @name serialize
               */
              // attached serialize

              definePropertiesNonBinary(this, fields, data);
            });

            var TxDataCreateCoin$1 = /*#__PURE__*/_createClass(function TxDataCreateCoin(data) {
              _classCallCheck(this, TxDataCreateCoin);

              // Define Properties
              var fields = [{
                name: 'name',
                "default": Buffer$i.from([])
              }, {
                name: 'symbol',
                length: 10
              }, {
                name: 'initialAmount',
                length: 32,
                allowLess: true
              }, {
                name: 'initialReserve',
                length: 32,
                allowLess: true
              }, {
                name: 'constantReserveRatio',
                length: 1,
                allowLess: true
              }, {
                name: 'maxSupply',
                length: 32,
                allowLess: true
              }];
              /**
               * Returns the rlp encoding of the transaction
               * @method serialize
               * @return {Buffer}
               * @memberof Transaction
               * @name serialize
               */
              // attached serialize

              definePropertiesNonBinary(this, fields, data);
            });

            var TxDataEditTickerOwner = /*#__PURE__*/_createClass(function TxDataEditTickerOwner(data) {
              _classCallCheck(this, TxDataEditTickerOwner);

              // Define Properties
              var fields = [{
                name: 'symbol',
                length: 10
              }, {
                name: 'newOwner',
                length: 20
              }];
              /**
               * Returns the rlp encoding of the transaction
               * @method serialize
               * @return {Buffer}
               * @memberof Transaction
               * @name serialize
               */
              // attached serialize

              definePropertiesNonBinary(this, fields, data);
            });

            var TxDataCreateCoin = /*#__PURE__*/_createClass(function TxDataCreateCoin(data) {
              _classCallCheck(this, TxDataCreateCoin);

              // Define Properties
              var fields = [{
                name: 'name',
                "default": Buffer$i.from([])
              }, {
                name: 'symbol',
                length: 10
              }, {
                name: 'initialAmount',
                length: 32,
                allowLess: true
              }, {
                name: 'maxSupply',
                length: 32,
                allowLess: true
              }, {
                name: 'mintable',
                length: 1,
                allowLess: true
              }, {
                name: 'burnable',
                length: 1,
                allowLess: true
              }];
              /**
               * Returns the rlp encoding of the transaction
               * @method serialize
               * @return {Buffer}
               * @memberof Transaction
               * @name serialize
               */
              // attached serialize

              definePropertiesNonBinary(this, fields, data);
            });

            var TxDataMintToken = /*#__PURE__*/_createClass(function TxDataMintToken(data) {
              _classCallCheck(this, TxDataMintToken);

              // Define Properties
              var fields = [{
                name: 'coin',
                length: 4,
                allowLess: true
              }, {
                name: 'value',
                length: 32,
                allowLess: true
              }];
              /**
               * Returns the rlp encoding of the transaction
               * @method serialize
               * @return {Buffer}
               * @memberof Transaction
               * @name serialize
               */
              // attached serialize

              definePropertiesNonBinary(this, fields, data);
            });

            var TxDataDeclareCandidacy = /*#__PURE__*/_createClass(function TxDataDeclareCandidacy(data) {
              _classCallCheck(this, TxDataDeclareCandidacy);

              // Define Properties
              var fields = [{
                name: 'address',
                length: 20
              }, {
                name: 'publicKey',
                length: 32
              }, {
                name: 'commission',
                length: 1,
                allowLess: true
              }, {
                name: 'coin',
                length: 4,
                allowLess: true
              }, {
                name: 'stake',
                length: 32,
                allowLess: true,
                "default": 0
              }];
              /**
               * Returns the rlp encoding of the transaction
               * @method serialize
               * @return {Buffer}
               * @memberof Transaction
               * @name serialize
               */
              // attached serialize

              definePropertiesNonBinary(this, fields, data);
            });

            var TxDataEditCandidate = /*#__PURE__*/_createClass(function TxDataEditCandidate(data) {
              _classCallCheck(this, TxDataEditCandidate);

              // Define Properties
              var fields = [{
                name: 'publicKey',
                length: 32
              }, {
                name: 'rewardAddress',
                length: 20
              }, {
                name: 'ownerAddress',
                length: 20
              }, {
                name: 'controlAddress',
                length: 20
              }];
              /**
               * Returns the rlp encoding of the transaction
               * @method serialize
               * @return {Buffer}
               * @memberof Transaction
               * @name serialize
               */
              // attached serialize

              definePropertiesNonBinary(this, fields, data);
            });

            var TxDataEditCandidatePublicKey = /*#__PURE__*/_createClass(function TxDataEditCandidatePublicKey(data) {
              _classCallCheck(this, TxDataEditCandidatePublicKey);

              // Define Properties
              var fields = [{
                name: 'publicKey',
                length: 32
              }, {
                name: 'newPublicKey',
                length: 32
              }];
              /**
               * Returns the rlp encoding of the transaction
               * @method serialize
               * @return {Buffer}
               * @memberof Transaction
               * @name serialize
               */
              // attached serialize

              definePropertiesNonBinary(this, fields, data);
            });

            var TxDataEditCandidateCommission = /*#__PURE__*/_createClass(function TxDataEditCandidateCommission(data) {
              _classCallCheck(this, TxDataEditCandidateCommission);

              // Define Properties
              var fields = [{
                name: 'publicKey',
                length: 32
              }, {
                name: 'commission',
                length: 1,
                allowLess: true
              }];
              /**
               * Returns the rlp encoding of the transaction
               * @method serialize
               * @return {Buffer}
               * @memberof Transaction
               * @name serialize
               */
              // attached serialize

              definePropertiesNonBinary(this, fields, data);
            });

            var TxDataVoteHaltBlock = /*#__PURE__*/_createClass(function TxDataVoteHaltBlock(data) {
              _classCallCheck(this, TxDataVoteHaltBlock);

              // Define Properties
              var fields = [{
                name: 'publicKey',
                length: 32
              }, {
                name: 'height',
                length: 32,
                allowLess: true
              }];
              /**
               * Returns the rlp encoding of the transaction
               * @method serialize
               * @return {Buffer}
               * @memberof Transaction
               * @name serialize
               */
              // attached serialize

              definePropertiesNonBinary(this, fields, data);
            });

            var TxDataSetCandidateOn = /*#__PURE__*/_createClass(function TxDataSetCandidateOn(data) {
              _classCallCheck(this, TxDataSetCandidateOn);

              // Define Properties
              var fields = [{
                name: 'publicKey',
                length: 32
              }];
              /**
               * Returns the rlp encoding of the transaction
               * @method serialize
               * @return {Buffer}
               * @memberof Transaction
               * @name serialize
               */
              // attached serialize

              definePropertiesNonBinary(this, fields, data);
            });

            var TxDataDelegate = /*#__PURE__*/_createClass(function TxDataDelegate(data) {
              _classCallCheck(this, TxDataDelegate);

              // Define Properties
              var fields = [{
                name: 'publicKey',
                length: 32
              }, {
                name: 'coin',
                length: 4,
                allowLess: true
              }, {
                name: 'stake',
                length: 32,
                allowLess: true
              }];
              /**
               * Returns the rlp encoding of the transaction
               * @method serialize
               * @return {Buffer}
               * @memberof Transaction
               * @name serialize
               */
              // attached serialize

              definePropertiesNonBinary(this, fields, data);
            });

            var TxDataMoveStake = /*#__PURE__*/_createClass(function TxDataMoveStake(data) {
              _classCallCheck(this, TxDataMoveStake);

              // Define Properties
              var fields = [{
                name: 'from',
                length: 32
              }, {
                name: 'to',
                length: 32
              }, {
                name: 'coin',
                length: 4,
                allowLess: true
              }, {
                name: 'stake',
                length: 32,
                allowLess: true
              }];
              /**
               * Returns the rlp encoding of the transaction
               * @method serialize
               * @return {Buffer}
               * @memberof Transaction
               * @name serialize
               */
              // attached serialize

              definePropertiesNonBinary(this, fields, data);
            });

            var TxDataRedeemCheck = /*#__PURE__*/_createClass(function TxDataRedeemCheck(data) {
              _classCallCheck(this, TxDataRedeemCheck);

              // Define Properties
              var fields = [{
                name: 'check'
              }, {
                name: 'proof',
                // allow DataRedeemCheck without proof (it will be filled later from password)
                allowZero: true,
                length: 65
              }];
              /**
               * Returns the rlp encoding of the transaction
               * @method serialize
               * @return {Buffer}
               * @memberof Transaction
               * @name serialize
               */
              // attached serialize

              definePropertiesNonBinary(this, fields, data);
            });

            var TxDataCreateMultisig = /*#__PURE__*/_createClass(function TxDataCreateMultisig(data) {
              _classCallCheck(this, TxDataCreateMultisig);

              // Define Properties
              var fields = [{
                name: 'threshold' // length: 2,
                // allowLess: true,

              }, {
                name: 'weights',
                allowNonBinaryArray: true
              }, {
                name: 'addresses',
                allowNonBinaryArray: true
              }];
              /**
               * Returns the rlp encoding of the transaction
               * @method serialize
               * @return {Buffer}
               * @memberof Transaction
               * @name serialize
               */
              // attached serialize

              definePropertiesNonBinary(this, fields, data);
            });

            var TxDataVotePrice = /*#__PURE__*/_createClass(function TxDataVotePrice(data) {
              _classCallCheck(this, TxDataVotePrice);

              // Define Properties
              var fields = [{
                name: 'price',
                length: 32,
                allowLess: true
              }];
              /**
               * Returns the rlp encoding of the transaction
               * @method serialize
               * @return {Buffer}
               * @memberof Transaction
               * @name serialize
               */
              // attached serialize

              definePropertiesNonBinary(this, fields, data);
            });

            var TxDataVoteCommission = /*#__PURE__*/_createClass(function TxDataVoteCommission(data) {
              _classCallCheck(this, TxDataVoteCommission);

              // Define Properties
              var fields = [{
                name: 'publicKey',
                length: 32
              }, {
                name: 'height',
                length: 32,
                allowLess: true
              }, {
                name: 'coin',
                length: 4,
                allowLess: true
              }, {
                name: 'payloadByte',
                length: 32,
                allowLess: true
              }, {
                name: 'send',
                length: 32,
                allowLess: true
              }, {
                name: 'buyBancor',
                length: 32,
                allowLess: true
              }, {
                name: 'sellBancor',
                length: 32,
                allowLess: true
              }, {
                name: 'sellAllBancor',
                length: 32,
                allowLess: true
              }, {
                name: 'buyPoolBase',
                length: 32,
                allowLess: true
              }, {
                name: 'buyPoolDelta',
                length: 32,
                allowLess: true
              }, {
                name: 'sellPoolBase',
                length: 32,
                allowLess: true
              }, {
                name: 'sellPoolDelta',
                length: 32,
                allowLess: true
              }, {
                name: 'sellAllPoolBase',
                length: 32,
                allowLess: true
              }, {
                name: 'sellAllPoolDelta',
                length: 32,
                allowLess: true
              }, {
                name: 'createTicker3',
                length: 32,
                allowLess: true
              }, {
                name: 'createTicker4',
                length: 32,
                allowLess: true
              }, {
                name: 'createTicker5',
                length: 32,
                allowLess: true
              }, {
                name: 'createTicker6',
                length: 32,
                allowLess: true
              }, {
                name: 'createTicker7to10',
                length: 32,
                allowLess: true
              }, {
                name: 'createCoin',
                length: 32,
                allowLess: true
              }, {
                name: 'createToken',
                length: 32,
                allowLess: true
              }, {
                name: 'recreateCoin',
                length: 32,
                allowLess: true
              }, {
                name: 'recreateToken',
                length: 32,
                allowLess: true
              }, {
                name: 'declareCandidacy',
                length: 32,
                allowLess: true
              }, {
                name: 'delegate',
                length: 32,
                allowLess: true
              }, {
                name: 'unbond',
                length: 32,
                allowLess: true
              }, {
                name: 'redeemCheck',
                length: 32,
                allowLess: true
              }, {
                name: 'setCandidateOn',
                length: 32,
                allowLess: true
              }, {
                name: 'setCandidateOff',
                length: 32,
                allowLess: true
              }, {
                name: 'createMultisig',
                length: 32,
                allowLess: true
              }, {
                name: 'multisendBase',
                length: 32,
                allowLess: true
              }, {
                name: 'multisendDelta',
                length: 32,
                allowLess: true
              }, {
                name: 'editCandidate',
                length: 32,
                allowLess: true
              }, {
                name: 'setHaltBlock',
                length: 32,
                allowLess: true
              }, {
                name: 'editTickerOwner',
                length: 32,
                allowLess: true
              }, {
                name: 'editMultisig',
                length: 32,
                allowLess: true
              },
              /*
              {
                  name: 'priceVote',
                  length: 32,
                  allowLess: true,
              },
              */
              {
                name: 'editCandidatePublicKey',
                length: 32,
                allowLess: true
              }, {
                name: 'createSwapPool',
                length: 32,
                allowLess: true
              }, {
                name: 'addLiquidity',
                length: 32,
                allowLess: true
              }, {
                name: 'removeLiquidity',
                length: 32,
                allowLess: true
              }, {
                name: 'editCandidateCommission',
                length: 32,
                allowLess: true
              },
              /*
              {
                  name: 'moveStake',
                  length: 32,
                  allowLess: true,
              },
              */
              {
                name: 'mintToken',
                length: 32,
                allowLess: true
              }, {
                name: 'burnToken',
                length: 32,
                allowLess: true
              }, {
                name: 'voteCommission',
                length: 32,
                allowLess: true
              }, {
                name: 'voteUpdate',
                length: 32,
                allowLess: true
              }, {
                name: 'failedTx',
                length: 32,
                allowLess: true
              }, {
                name: 'addLimitOrder',
                length: 32,
                allowLess: true
              }, {
                name: 'removeLimitOrder',
                length: 32,
                allowLess: true
              }];
              /**
               * Returns the rlp encoding of the transaction
               * @method serialize
               * @return {Buffer}
               * @memberof Transaction
               * @name serialize
               */
              // attached serialize

              definePropertiesNonBinary(this, fields, data);
            });

            var TxDataVoteUpdate = /*#__PURE__*/_createClass(function TxDataVoteUpdate(data) {
              _classCallCheck(this, TxDataVoteUpdate);

              // Define Properties
              var fields = [{
                name: 'version'
              }, {
                name: 'publicKey',
                length: 32
              }, {
                name: 'height',
                length: 32,
                allowLess: true
              }];
              /**
               * Returns the rlp encoding of the transaction
               * @method serialize
               * @return {Buffer}
               * @memberof Transaction
               * @name serialize
               */
              // attached serialize

              definePropertiesNonBinary(this, fields, data);
            });

            var TxDataCreateSwapPool = /*#__PURE__*/_createClass(function TxDataCreateSwapPool(data) {
              _classCallCheck(this, TxDataCreateSwapPool);

              // Define Properties
              var fields = [{
                name: 'coin0',
                length: 4,
                allowLess: true
              }, {
                name: 'coin1',
                length: 4,
                allowLess: true
              }, {
                name: 'volume0',
                length: 32,
                allowLess: true
              }, {
                name: 'volume1',
                length: 32,
                allowLess: true
              }];
              /**
               * Returns the rlp encoding of the transaction
               * @method serialize
               * @return {Buffer}
               * @memberof Transaction
               * @name serialize
               */
              // attached serialize

              definePropertiesNonBinary(this, fields, data);
            });

            var TxDataAddSwapPool = /*#__PURE__*/_createClass(function TxDataAddSwapPool(data) {
              _classCallCheck(this, TxDataAddSwapPool);

              // Define Properties
              var fields = [{
                name: 'coin0',
                length: 4,
                allowLess: true
              }, {
                name: 'coin1',
                length: 4,
                allowLess: true
              }, {
                name: 'volume0',
                length: 32,
                allowLess: true
              }, {
                name: 'maximumVolume1',
                length: 32,
                allowLess: true
              }];
              /**
               * Returns the rlp encoding of the transaction
               * @method serialize
               * @return {Buffer}
               * @memberof Transaction
               * @name serialize
               */
              // attached serialize

              definePropertiesNonBinary(this, fields, data);
            });

            var TxDataRemoveSwapPool = /*#__PURE__*/_createClass(function TxDataRemoveSwapPool(data) {
              _classCallCheck(this, TxDataRemoveSwapPool);

              // Define Properties
              var fields = [{
                name: 'coin0',
                length: 4,
                allowLess: true
              }, {
                name: 'coin1',
                length: 4,
                allowLess: true
              }, {
                name: 'liquidity',
                length: 32,
                allowLess: true
              }, {
                name: 'minimumVolume0',
                length: 32,
                allowLess: true
              }, {
                name: 'minimumVolume1',
                length: 32,
                allowLess: true
              }];
              /**
               * Returns the rlp encoding of the transaction
               * @method serialize
               * @return {Buffer}
               * @memberof Transaction
               * @name serialize
               */
              // attached serialize

              definePropertiesNonBinary(this, fields, data);
            });

            var TxDataBuySwapPool = /*#__PURE__*/_createClass(function TxDataBuySwapPool(data) {
              _classCallCheck(this, TxDataBuySwapPool);

              // Define Properties
              var fields = [{
                name: 'coins',
                allowNonBinaryArray: true
              }, {
                name: 'valueToBuy',
                length: 32,
                allowLess: true
              }, {
                name: 'maximumValueToSell',
                length: 32,
                allowLess: true
              }];
              /**
               * Returns the rlp encoding of the transaction
               * @method serialize
               * @return {Buffer}
               * @memberof Transaction
               * @name serialize
               */
              // attached serialize

              definePropertiesNonBinary(this, fields, data);
            });

            var TxDataSellSwapPool = /*#__PURE__*/_createClass(function TxDataSellSwapPool(data) {
              _classCallCheck(this, TxDataSellSwapPool);

              // Define Properties
              var fields = [{
                name: 'coins',
                allowNonBinaryArray: true
              }, {
                name: 'valueToSell',
                length: 32,
                allowLess: true
              }, {
                name: 'minimumValueToBuy',
                length: 32,
                allowLess: true
              }];
              /**
               * Returns the rlp encoding of the transaction
               * @method serialize
               * @return {Buffer}
               * @memberof Transaction
               * @name serialize
               */
              // attached serialize

              definePropertiesNonBinary(this, fields, data);
            });

            var TxDataSellAllSwapPool = /*#__PURE__*/_createClass(function TxDataSellAllSwapPool(data) {
              _classCallCheck(this, TxDataSellAllSwapPool);

              // Define Properties
              var fields = [{
                name: 'coins',
                allowNonBinaryArray: true
              }, {
                name: 'minimumValueToBuy',
                length: 32,
                allowLess: true
              }];
              /**
               * Returns the rlp encoding of the transaction
               * @method serialize
               * @return {Buffer}
               * @memberof Transaction
               * @name serialize
               */
              // attached serialize

              definePropertiesNonBinary(this, fields, data);
            });

            var TxDataAddLimitOrder = /*#__PURE__*/_createClass(function TxDataAddLimitOrder(data) {
              _classCallCheck(this, TxDataAddLimitOrder);

              // Define Properties
              var fields = [{
                name: 'coinToSell',
                length: 4,
                allowLess: true
              }, {
                name: 'valueToSell',
                length: 32,
                allowLess: true
              }, {
                name: 'coinToBuy',
                length: 4,
                allowLess: true
              }, {
                name: 'valueToBuy',
                length: 32,
                allowLess: true
              }];
              /**
               * Returns the rlp encoding of the transaction
               * @method serialize
               * @return {Buffer}
               * @memberof Transaction
               * @name serialize
               */
              // attached serialize

              definePropertiesNonBinary(this, fields, data);
            });

            var TxDataRemoveLimitOrder = /*#__PURE__*/_createClass(function TxDataRemoveLimitOrder(data) {
              _classCallCheck(this, TxDataRemoveLimitOrder);

              // Define Properties
              var fields = [{
                name: 'id',
                length: 32,
                allowLess: true
              }];
              /**
               * Returns the rlp encoding of the transaction
               * @method serialize
               * @return {Buffer}
               * @memberof Transaction
               * @name serialize
               */
              // attached serialize

              definePropertiesNonBinary(this, fields, data);
            });

            var _TX_DATA_CONSTRUCTOR$1;
            (_TX_DATA_CONSTRUCTOR$1 = {}, _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.SEND, TxDataSend), _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.MULTISEND, TxDataMultisend), _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.SELL, TxDataSell), _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.BUY, TxDataBuy), _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.SELL_ALL, TxDataSellAll), _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.CREATE_COIN, TxDataCreateCoin$1), _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.DECLARE_CANDIDACY, TxDataDeclareCandidacy), _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.EDIT_CANDIDATE, TxDataEditCandidate), _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.SET_CANDIDATE_ON, TxDataSetCandidateOn), _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.SET_CANDIDATE_OFF, TxDataSetCandidateOn), _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.DELEGATE, TxDataDelegate), _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.UNBOND, TxDataDelegate), _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.REDEEM_CHECK, TxDataRedeemCheck), _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.CREATE_MULTISIG, TxDataCreateMultisig), _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.SET_HALT_BLOCK, TxDataVoteHaltBlock), _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.RECREATE_COIN, TxDataCreateCoin$1), _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.EDIT_TICKER_OWNER, TxDataEditTickerOwner), _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.EDIT_MULTISIG, TxDataCreateMultisig), _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.PRICE_VOTE, TxDataVotePrice), _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.EDIT_CANDIDATE_PUBLIC_KEY, TxDataEditCandidatePublicKey), _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.ADD_LIQUIDITY, TxDataAddSwapPool), _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.REMOVE_LIQUIDITY, TxDataRemoveSwapPool), _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.BUY_SWAP_POOL, TxDataBuySwapPool), _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.SELL_SWAP_POOL, TxDataSellSwapPool), _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.SELL_ALL_SWAP_POOL, TxDataSellAllSwapPool), _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.EDIT_CANDIDATE_COMMISSION, TxDataEditCandidateCommission), _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.MOVE_STAKE, TxDataMoveStake), _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.MINT_TOKEN, TxDataMintToken), _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.BURN_TOKEN, TxDataMintToken), _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.CREATE_TOKEN, TxDataCreateCoin), _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.RECREATE_TOKEN, TxDataCreateCoin), _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.VOTE_COMMISSION, TxDataVoteCommission), _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.VOTE_UPDATE, TxDataVoteUpdate), _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.CREATE_SWAP_POOL, TxDataCreateSwapPool), _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.ADD_LIMIT_ORDER, TxDataAddLimitOrder), _defineProperty(_TX_DATA_CONSTRUCTOR$1, TX_TYPE.REMOVE_LIMIT_ORDER, TxDataRemoveLimitOrder), _TX_DATA_CONSTRUCTOR$1);

            /**
             * @param {TxParams} params
             * @return {TxParams}
             */
            function decorateSendTxParams(params) {
              if (typeof params.gasCoin === 'undefined') {
                params.gasCoin = params.data.coin;
              }

              return params;
            }

            /**
             * @param {TxParams} params
             * @return {TxParams}
             */
            function decorateSellTxParams$1(params) {
              if (typeof params.gasCoin === 'undefined') {
                params.gasCoin = params.data.coinToSell;
              }

              return params;
            }

            /**
             * @param {TxParams} params
             * @return {TxParams}
             */
            function decorateSellTxParams(params) {
              // force gasCoin to be same as coinToSell
              params.gasCoin = params.data.coinToSell;
              return params;
            }

            /**
             * @param {TxParams} params
             * @return {TxParams}
             */
            function decorateSellSwapPoolTxParams(params) {
              if (typeof params.gasCoin === 'undefined') {
                params.gasCoin = params.data.coins[0];
              }

              return params;
            }

            /**
             * @param {TxParams} params
             * @return {TxParams}
             */
            function decorateSellAllSwapPoolTxParams(params) {
              // force gasCoin to be same as coin to sell
              params.gasCoin = params.data.coins[0];
              return params;
            }

            /**
             * @param {TxParams} params
             * @return {TxParams}
             */
            function decorateCreateSwapPoolTxParams(params) {
              if (typeof params.gasCoin === 'undefined') {
                params.gasCoin = params.data.coin0;
              }

              return params;
            }

            /**
             * @param {TxParams} params
             * @return {TxParams}
             */
            function decorateAddLiquidityTxParams(params) {
              if (typeof params.gasCoin === 'undefined') {
                params.gasCoin = params.data.coin0;
              }

              return params;
            }

            /**
             * @param {TxParams} params
             * @return {TxParams}
             */
            function decorateDeclareCandidacyTxParams(params) {
              if (typeof params.gasCoin === 'undefined') {
                params.gasCoin = params.data.coin;
              }

              return params;
            }

            var Check = /*#__PURE__*/function () {
              function Check(data) {
                _classCallCheck(this, Check);

                data = data || {};

                if (typeof data === 'string') {
                  data = mPrefixStrip(data);
                } // Define Properties


                var fields = [{
                  name: 'nonce',
                  length: 16,
                  allowLess: true
                }, {
                  name: 'chainId',
                  length: 1
                }, {
                  name: 'dueBlock',
                  length: 8,
                  allowLess: true
                }, {
                  name: 'coin',
                  length: 4,
                  allowLess: true
                }, {
                  name: 'value',
                  length: 32,
                  allowLess: true
                }, {
                  name: 'gasCoin',
                  length: 4,
                  allowLess: true
                }, {
                  name: 'lock',
                  allowZero: true,
                  allowLess: true,
                  length: 65,
                  "default": Buffer$i.from([])
                }, {
                  name: 'v',
                  allowZero: true,
                  "default": Buffer$i.from([0x1c])
                }, {
                  name: 'r',
                  length: 32,
                  allowZero: true,
                  allowLess: true,
                  "default": Buffer$i.from([])
                }, {
                  name: 's',
                  length: 32,
                  allowZero: true,
                  allowLess: true,
                  "default": Buffer$i.from([])
                }];
                /**
                 * Returns the rlp encoding of the transaction
                 * @method serialize
                 * @return {Buffer}
                 * @memberof Transaction
                 * @name serialize
                 */
                // attached serialize

                definePropertiesNonBinary(this, fields, data);
              }

              _createClass(Check, [{
                key: "hash",
                value: function hash() {
                  // don't hash last 4 fields (lock and signature)
                  return hash$1.rlphash(this.raw.slice(0, -4));
                }
              }, {
                key: "sign",
                value: function sign(privateKey, password) {
                  var messageHash = this.hash(false);

                  if (typeof password === 'string') {
                    password = Buffer$i.from(password, 'utf-8');
                  }

                  var passwordBuffer = hash$1.sha256(password);
                  var lock = elliptic.ecdsaSign(messageHash, passwordBuffer);
                  /** @type Buffer */

                  var lockWithRecovery = Buffer$i.alloc(65);
                  lockWithRecovery.set(lock.signature, 0);
                  lockWithRecovery[64] = lock.recid;
                  this.lock = "0x".concat(lockWithRecovery.toString('hex')); // don't hash last 3 signature fields

                  var messageHashWithLock = hash$1.rlphash(this.raw.slice(0, -3));
                  var sig = ecsign_1(messageHashWithLock, privateKey);
                  Object.assign(this, sig);
                }
              }]);

              return Check;
            }();
            /**
             * @param {string} [seedPhrase]
             * @param {string|Buffer} [privateKey] - hex or Buffer
             * @param {string} password - utf8
             * @param {string} nonce
             * @param {number} [chainId=1]
             * @param {number|string} coin
             * @param {number|string} value
             * @param {number|string} gasCoin
             * @param {number} [dueBlock=999999999]
             * @param {boolean} [isReturnObject]
             * @return {string|Check}
             */


            function issueCheck() {
              var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                  seedPhrase = _ref.seedPhrase,
                  privateKey = _ref.privateKey,
                  password = _ref.password,
                  nonce = _ref.nonce,
                  _ref$chainId = _ref.chainId,
                  chainId = _ref$chainId === void 0 ? 1 : _ref$chainId,
                  coin = _ref.coin,
                  value = _ref.value,
                  _ref$gasCoin = _ref.gasCoin,
                  gasCoin = _ref$gasCoin === void 0 ? 0 : _ref$gasCoin,
                  _ref$dueBlock = _ref.dueBlock,
                  dueBlock = _ref$dueBlock === void 0 ? 999999999 : _ref$dueBlock;

              var isReturnObject = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
              validateUint(dueBlock, 'dueBlock');
              validateUint(coin, 'coin');
              validateUint(gasCoin, 'gasCoin');
              validateAmount(value, 'value');

              if (!seedPhrase && !privateKey) {
                throw new Error('seedPhrase or privateKey are required');
              }

              if (!privateKey && seedPhrase) {
                privateKey = getPrivateKeyFromSeedPhrase(seedPhrase);
              }

              privateKey = bytes.toBuffer(privateKey);
              var check = new Check({
                nonce: Buffer$i.from(nonce.toString(), 'utf-8'),
                chainId: integerToHexString(chainId),
                coin: integerToHexString(coin),
                value: "0x".concat(convertToPip(value, 'hex')),
                gasCoin: integerToHexString(gasCoin),
                dueBlock: integerToHexString(dueBlock)
              });
              check.sign(privateKey, password);
              return isReturnObject ? check : "Mc".concat(check.serialize().toString('hex'));
            }
            function decodeCheck(rawCheck) {
              var check = new Check(rawCheck);
              return {
                nonce: check.nonce.toString('utf-8'),
                chainId: bufferToInteger(check.chainId),
                coin: bufferToInteger(check.coin),
                value: convertFromPip(bufferToInteger(check.value)),
                gasCoin: bufferToInteger(check.gasCoin),
                dueBlock: bufferToInteger(check.dueBlock)
              };
            }
            /**
             * @param {string|Buffer} rawCheck
             * @return {string}
             */

            function getGasCoinFromCheck(rawCheck) {
              try {
                var check = new Check(toBuffer$1(rawCheck));
                return bufferToInteger(check.gasCoin);
              } catch (error) {
                error.message = "Can't decode check: ".concat(error.message);
                throw error;
              }
            }

            /**
             * @param {ByteArray} check
             * @param {ByteArray} [proof]
             * @param {TxOptions} [options]
             * @constructor
             */

            function RedeemCheckTxData(_ref) {
              var check = _ref.check,
                  proof = _ref.proof;
              var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
              validateCheck(check, 'check'); // eslint-disable-next-line prefer-rest-params

              if (!options.password && arguments[0].password) {
                // eslint-disable-next-line prefer-rest-params
                options.password = arguments[0].password; // eslint-disable-next-line no-console

                console.warn('Check password in tx data is deprecated. Pass it as field in the second argument.');
              } // eslint-disable-next-line prefer-rest-params


              if (!options.privateKey && arguments[0].privateKey) {
                // eslint-disable-next-line prefer-rest-params
                options.privateKey = arguments[0].privateKey; // eslint-disable-next-line no-console

                console.warn('Private key in tx data is deprecated. Pass it as field in the second argument.');
              }

              this.check = checkToString(check);

              if (proof) {
                proof = toBuffer$1(proof);
              } else if (options.address || options.privateKey || options.seedPhrase) {
                proof = getProofWithRecovery(options);
              }

              this.txData = new TxDataRedeemCheck({
                check: toBuffer$1(check),
                proof: proof
              });
              this.proof = proof ? "0x".concat(proof.toString('hex')) : undefined;
              proxyNestedTxData(this);
            }
            /**
             *
             * @param {Buffer|string} check
             * @param {Buffer|string} proof
             * @return {RedeemCheckTxData}
             */

            RedeemCheckTxData.fromBufferFields = function fromBufferFields(_ref2) {
              var check = _ref2.check,
                  proof = _ref2.proof;
              return new RedeemCheckTxData({
                check: check,
                proof: proof
              });
            };
            /**
             * @param {Buffer|string} data
             * @return {RedeemCheckTxData}
             */


            RedeemCheckTxData.fromRlp = function fromRlp(data) {
              return RedeemCheckTxData.fromBufferFields(new TxDataRedeemCheck(data));
            };
            /**
             * @param {ByteArray} password
             * @param {ByteArray} [address]
             * @param {ByteArray} [privateKey]
             * @param {string} [seedPhrase]
             * @return {ArrayBuffer|Buffer}
             */


            function getProofWithRecovery(_ref3) {
              var password = _ref3.password,
                  address = _ref3.address,
                  privateKey = _ref3.privateKey,
                  seedPhrase = _ref3.seedPhrase;
              var addressBuffer;

              if (address) {
                addressBuffer = toBuffer$1(address);
              } else if (privateKey) {
                privateKey = toBuffer$1(privateKey);
                addressBuffer = walletFromPrivateKey(privateKey).getAddress();
              } else if (seedPhrase) {
                addressBuffer = walletFromMnemonic(seedPhrase).getAddress();
              } else {
                throw new Error('No address nor seed phrase nor private key given to generate proof');
              }

              var addressHash = hash$1.rlphash([addressBuffer]); // ensure Buffer

              password = typeof password === 'string' ? Buffer$i.from(password, 'utf-8') : toBuffer$1(password);
              var passwordBuffer = hash$1.sha256(password);
              var proof = elliptic.ecdsaSign(addressHash, passwordBuffer);
              var proofWithRecovery = Buffer$i.alloc(65);
              proofWithRecovery.set(proof.signature, 0);
              proofWithRecovery[64] = proof.recid;
              return proofWithRecovery;
            }

            /**
             * @param {TxParams} params
             * @return {TxParams}
             */

            function decorateRedeemCheckTxParams(params) {
              var check = params.data.check || RedeemCheckTxData.fromRlp(params.data).check;
              params.gasCoin = getGasCoinFromCheck(check); // only gasPrice: 1 is allowed by blockchain

              params.gasPrice = 1;
              return params;
            }

            var noop = function noop(x) {
              return x;
            };
            /**
             * @param {TxParams} txParams
             * @param {Object} [options]
             * @param {boolean} [options.setGasCoinAsCoinToSpend]
             * @return {TxParams}
             */


            function decorateTxParams(txParams) {
              var _TX_PARAMS_DECORATOR;

              var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                  setGasCoinAsCoinToSpend = _ref.setGasCoinAsCoinToSpend;

              var txType = normalizeTxType(txParams.type || txParams.txType);
              var TX_PARAMS_DECORATOR = (_TX_PARAMS_DECORATOR = {}, _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.SEND, setGasCoinAsCoinToSpend ? decorateSendTxParams : noop), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.MULTISEND, noop), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.SELL, setGasCoinAsCoinToSpend ? decorateSellTxParams$1 : noop), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.BUY, setGasCoinAsCoinToSpend ? decorateSellTxParams$1 : noop), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.SELL_ALL, decorateSellTxParams), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.CREATE_COIN, noop), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.DECLARE_CANDIDACY, setGasCoinAsCoinToSpend ? decorateDeclareCandidacyTxParams : noop), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.EDIT_CANDIDATE, noop), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.EDIT_CANDIDATE_PUBLIC_KEY, noop), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.SET_CANDIDATE_ON, noop), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.SET_CANDIDATE_OFF, noop), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.DELEGATE, setGasCoinAsCoinToSpend ? decorateDeclareCandidacyTxParams : noop), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.UNBOND, noop), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.REDEEM_CHECK, decorateRedeemCheckTxParams), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.CREATE_MULTISIG, noop), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.SET_HALT_BLOCK, noop), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.RECREATE_COIN, noop), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.EDIT_TICKER_OWNER, noop), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.EDIT_MULTISIG, noop), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.PRICE_VOTE, noop), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.EDIT_CANDIDATE_PUBLIC_KEY, noop), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.ADD_LIQUIDITY, setGasCoinAsCoinToSpend ? decorateAddLiquidityTxParams : noop), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.REMOVE_LIQUIDITY, noop), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.BUY_SWAP_POOL, setGasCoinAsCoinToSpend ? decorateSellSwapPoolTxParams : noop), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.SELL_SWAP_POOL, setGasCoinAsCoinToSpend ? decorateSellSwapPoolTxParams : noop), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.SELL_ALL_SWAP_POOL, decorateSellAllSwapPoolTxParams), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.EDIT_CANDIDATE_COMMISSION, noop), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.MOVE_STAKE, noop), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.MINT_TOKEN, noop), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.BURN_TOKEN, setGasCoinAsCoinToSpend ? decorateSendTxParams : noop), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.CREATE_TOKEN, noop), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.RECREATE_TOKEN, noop), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.VOTE_COMMISSION, noop), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.VOTE_UPDATE, noop), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.CREATE_SWAP_POOL, setGasCoinAsCoinToSpend ? decorateCreateSwapPoolTxParams : noop), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.ADD_LIMIT_ORDER, setGasCoinAsCoinToSpend ? decorateSellTxParams$1 : noop), _defineProperty(_TX_PARAMS_DECORATOR, TX_TYPE.REMOVE_LIMIT_ORDER, noop), _TX_PARAMS_DECORATOR);
              return TX_PARAMS_DECORATOR[txType](txParams);
            }

            /**
             *
             * @param {string} to
             * @param {number|string} value
             * @param {number|string} coin - coin id
             * @constructor
             */

            function SendTxData(_ref) {
              var to = _ref.to,
                  _ref$value = _ref.value,
                  value = _ref$value === void 0 ? 0 : _ref$value,
                  coin = _ref.coin;
              validateAddress(to, 'to');
              validateUint(coin, 'coin');
              validateAmount(value, 'value');
              this.to = to;
              this.value = value;
              this.coin = coin;
              this.txData = new TxDataSend({
                to: toBuffer$1(to),
                coin: integerToHexString(coin),
                value: "0x".concat(convertToPip(value, 'hex'))
              });
              proxyNestedTxData(this);
            }
            /**
             * @param {Buffer|string} to
             * @param {Buffer|string|number} value
             * @param {Buffer|string|number} coin
             * @return {SendTxData}
             */

            SendTxData.fromBufferFields = function fromBufferFields(_ref2) {
              var to = _ref2.to,
                  value = _ref2.value,
                  coin = _ref2.coin;
              return new SendTxData({
                to: addressToString(to),
                coin: bufferToInteger(toBuffer$1(coin)),
                value: convertFromPip(bufferToInteger(toBuffer$1(value)))
              });
            };
            /**
             * @param {Buffer|string} data
             * @return {SendTxData}
             */


            SendTxData.fromRlp = function fromRlp(data) {
              return SendTxData.fromBufferFields(new TxDataSend(data));
            };

            /**
             * @param {Array} list
             * @constructor
             */

            function MultisendTxData(_ref) {
              var list = _ref.list;

              if (!Array.isArray(list)) {
                throw new TypeError('Field `list` is not an array');
              }

              list.forEach(function (item, index) {
                try {
                  validateAddress(item.to, "list[".concat(index, "].to"));
                  validateUint(item.coin, "list[".concat(index, "].coin"));
                  validateAmount(item.value, "list[".concat(index, "].value"));
                } catch (error) {
                  throw new Error("Field `list` contains invalid item at index ".concat(index, ". ").concat(error.message));
                }
              });
              this.list = list;
              this.txData = new TxDataMultisend({
                list: list.map(function (item) {
                  return {
                    to: toBuffer$1(item.to),
                    coin: integerToHexString(item.coin),
                    value: "0x".concat(convertToPip(item.value, 'hex'))
                  };
                })
              });
              proxyNestedTxData(this);
            }
            /**
             * @param {Array<Buffer>} list
             * @return {MultisendTxData}
             */

            MultisendTxData.fromBufferFields = function fromBufferFields(_ref2) {
              var list = _ref2.list;
              return new MultisendTxData({
                list: list.map(function (item) {
                  return SendTxData.fromRlp(item);
                })
              });
            };
            /**
             * @param {Buffer|string} data
             * @return {MultisendTxData}
             */


            MultisendTxData.fromRlp = function fromRlp(data) {
              return MultisendTxData.fromBufferFields(new TxDataMultisend(data));
            };

            /**
             * @param {number|string} coinToSell - coin id
             * @param {number|string} coinToBuy - coin id
             * @param {number|string} valueToSell
             * @param {number|string} [minimumValueToBuy=0]
             * @constructor
             */

            function SellTxData(_ref) {
              var coinToSell = _ref.coinToSell,
                  coinToBuy = _ref.coinToBuy,
                  valueToSell = _ref.valueToSell,
                  _ref$minimumValueToBu = _ref.minimumValueToBuy,
                  minimumValueToBuy = _ref$minimumValueToBu === void 0 ? 0 : _ref$minimumValueToBu;
              validateUint(coinToSell, 'coinToSell');
              validateUint(coinToBuy, 'coinToBuy');
              validateAmount(valueToSell, 'valueToSell');
              validateAmount(minimumValueToBuy, 'minimumValueToBuy');
              this.coinToSell = coinToSell;
              this.coinToBuy = coinToBuy;
              this.valueToSell = valueToSell;
              this.minimumValueToBuy = minimumValueToBuy;
              this.txData = new TxDataSell({
                coinToSell: integerToHexString(coinToSell),
                coinToBuy: integerToHexString(coinToBuy),
                valueToSell: "0x".concat(convertToPip(valueToSell, 'hex')),
                minimumValueToBuy: "0x".concat(convertToPip(minimumValueToBuy, 'hex'))
              });
              proxyNestedTxData(this);
            }
            /**
             * @param {Buffer|string} coinToSell
             * @param {Buffer|string} valueToSell
             * @param {Buffer|string} coinToBuy
             * @param {Buffer|string} minimumValueToBuy
             * @return {SellTxData}
             */

            SellTxData.fromBufferFields = function fromBufferFields(_ref2) {
              var coinToSell = _ref2.coinToSell,
                  valueToSell = _ref2.valueToSell,
                  coinToBuy = _ref2.coinToBuy,
                  minimumValueToBuy = _ref2.minimumValueToBuy;

              if (!valueToSell && valueToSell !== 0) {
                throw new Error('Invalid valueToSell');
              }

              return new SellTxData({
                coinToSell: bufferToInteger(toBuffer$1(coinToSell)),
                coinToBuy: bufferToInteger(toBuffer$1(coinToBuy)),
                valueToSell: convertFromPip(bufferToInteger(toBuffer$1(valueToSell))),
                minimumValueToBuy: convertFromPip(bufferToInteger(toBuffer$1(minimumValueToBuy)))
              });
            };
            /**
             * @param {Buffer|string} data
             * @return {SellTxData}
             */


            SellTxData.fromRlp = function fromRlp(data) {
              return SellTxData.fromBufferFields(new TxDataSell(data));
            };

            /**
             * @param {number|string} coinToSell - coin id
             * @param {number|string} coinToBuy - coin id
             * @param {number|string} valueToBuy
             * @param {number|string} [maximumValueToSell]
             * @constructor
             */

            function BuyTxData(_ref) {
              var coinToSell = _ref.coinToSell,
                  coinToBuy = _ref.coinToBuy,
                  valueToBuy = _ref.valueToBuy,
                  _ref$maximumValueToSe = _ref.maximumValueToSell,
                  maximumValueToSell = _ref$maximumValueToSe === void 0 ? COIN_MAX_AMOUNT : _ref$maximumValueToSe;
              validateUint(coinToSell, 'coinToSell');
              validateUint(coinToBuy, 'coinToBuy');
              validateAmount(valueToBuy, 'valueToBuy');
              validateAmount(maximumValueToSell, 'maximumValueToSell');
              this.coinToSell = coinToSell;
              this.coinToBuy = coinToBuy;
              this.valueToBuy = valueToBuy;
              this.maximumValueToSell = maximumValueToSell;
              this.txData = new TxDataBuy({
                coinToSell: integerToHexString(coinToSell),
                coinToBuy: integerToHexString(coinToBuy),
                valueToBuy: "0x".concat(convertToPip(valueToBuy, 'hex')),
                maximumValueToSell: "0x".concat(convertToPip(maximumValueToSell, 'hex'))
              });
              proxyNestedTxData(this);
            }
            /**
             * @param {Buffer|string} coinToSell
             * @param {Buffer|string} valueToBuy
             * @param {Buffer|string} coinToBuy
             * @param {Buffer|string} maximumValueToSell
             * @return {BuyTxData}
             */

            BuyTxData.fromBufferFields = function fromBufferFields(_ref2) {
              var coinToSell = _ref2.coinToSell,
                  valueToBuy = _ref2.valueToBuy,
                  coinToBuy = _ref2.coinToBuy,
                  maximumValueToSell = _ref2.maximumValueToSell;
              return new BuyTxData({
                coinToSell: bufferToInteger(toBuffer$1(coinToSell)),
                coinToBuy: bufferToInteger(toBuffer$1(coinToBuy)),
                valueToBuy: convertFromPip(bufferToInteger(toBuffer$1(valueToBuy))),
                maximumValueToSell: convertFromPip(bufferToInteger(toBuffer$1(maximumValueToSell)))
              });
            };
            /**
             * @param {Buffer|string} data
             * @return {BuyTxData}
             */


            BuyTxData.fromRlp = function fromRlp(data) {
              return BuyTxData.fromBufferFields(new TxDataBuy(data));
            };

            /**
             * @param {number|string} coinToSell - coin id
             * @param {number|string} coinToBuy - coin id
             * @param {number|string} [minimumValueToBuy=0]
             * @constructor
             */

            function SellAllTxData(_ref) {
              var coinToSell = _ref.coinToSell,
                  coinToBuy = _ref.coinToBuy,
                  _ref$minimumValueToBu = _ref.minimumValueToBuy,
                  minimumValueToBuy = _ref$minimumValueToBu === void 0 ? 0 : _ref$minimumValueToBu;
              validateUint(coinToSell, 'coinToSell');
              validateUint(coinToBuy, 'coinToBuy');
              validateAmount(minimumValueToBuy, 'minimumValueToBuy');
              this.coinToSell = coinToSell;
              this.coinToBuy = coinToBuy;
              this.minimumValueToBuy = minimumValueToBuy;
              this.txData = new TxDataSellAll({
                coinToSell: integerToHexString(coinToSell),
                coinToBuy: integerToHexString(coinToBuy),
                minimumValueToBuy: "0x".concat(convertToPip(minimumValueToBuy, 'hex'))
              });
              proxyNestedTxData(this);
            }
            /**
             * @param {Buffer|string} coinToSell
             * @param {Buffer|string} coinToBuy
             * @param {Buffer|string} minimumValueToBuy
             * @return {SellAllTxData}
             */

            SellAllTxData.fromBufferFields = function fromBufferFields(_ref2) {
              var coinToSell = _ref2.coinToSell,
                  coinToBuy = _ref2.coinToBuy,
                  minimumValueToBuy = _ref2.minimumValueToBuy;
              return new SellAllTxData({
                coinToSell: bufferToInteger(toBuffer$1(coinToSell)),
                coinToBuy: bufferToInteger(toBuffer$1(coinToBuy)),
                minimumValueToBuy: convertFromPip(bufferToInteger(toBuffer$1(minimumValueToBuy)))
              });
            };
            /**
             * @param {Buffer|string} data
             * @return {SellAllTxData}
             */


            SellAllTxData.fromRlp = function fromRlp(data) {
              return SellAllTxData.fromBufferFields(new TxDataSellAll(data));
            };

            /**
             * @param {string} [name]
             * @param {string} symbol
             * @param {number|string} initialAmount
             * @param {number|string} initialReserve
             * @param {number|string} constantReserveRatio
             * @param {number|string} [maxSupply]
             * @constructor
             */

            function CreateCoinTxData(_ref) {
              var _ref$name = _ref.name,
                  name = _ref$name === void 0 ? '' : _ref$name,
                  symbol = _ref.symbol,
                  initialAmount = _ref.initialAmount,
                  initialReserve = _ref.initialReserve,
                  constantReserveRatio = _ref.constantReserveRatio,
                  _ref$maxSupply = _ref.maxSupply,
                  maxSupply = _ref$maxSupply === void 0 ? COIN_MAX_MAX_SUPPLY : _ref$maxSupply;
              validateTicker(symbol, 'symbol');
              validateAmount(initialAmount, 'initialAmount');
              validateAmount(initialReserve, 'initialReserve');
              validateMaxSupply(maxSupply, initialAmount);
              this.name = name;
              this.symbol = symbol;
              this.initialAmount = initialAmount;
              this.initialReserve = initialReserve;
              this.constantReserveRatio = constantReserveRatio;
              this.maxSupply = maxSupply;
              this.txData = new TxDataCreateCoin$1({
                name: Buffer$i.from(name.toString(), 'utf-8'),
                symbol: coinToBuffer(symbol),
                initialAmount: "0x".concat(convertToPip(initialAmount, 'hex')),
                initialReserve: "0x".concat(convertToPip(initialReserve, 'hex')),
                constantReserveRatio: integerToHexString(constantReserveRatio),
                maxSupply: "0x".concat(convertToPip(maxSupply, 'hex'))
              });
              proxyNestedTxData(this);
            }
            /**
             *
             * @param {Buffer|string} name
             * @param {Buffer|string} symbol
             * @param {Buffer|string|number} initialAmount
             * @param {Buffer|string|number} initialReserve
             * @param {Buffer|string|number} constantReserveRatio
             * @param {number|string|number} maxSupply
             * @return {CreateCoinTxData}
             */

            CreateCoinTxData.fromBufferFields = function fromBufferFields(_ref2) {
              var name = _ref2.name,
                  symbol = _ref2.symbol,
                  initialAmount = _ref2.initialAmount,
                  initialReserve = _ref2.initialReserve,
                  constantReserveRatio = _ref2.constantReserveRatio,
                  maxSupply = _ref2.maxSupply;
              return new CreateCoinTxData({
                name: toBuffer$1(name).toString('utf-8'),
                symbol: bufferToCoin(toBuffer$1(symbol)),
                initialAmount: convertFromPip(bufferToInteger(toBuffer$1(initialAmount))),
                initialReserve: convertFromPip(bufferToInteger(toBuffer$1(initialReserve))),
                constantReserveRatio: bufferToInteger(toBuffer$1(constantReserveRatio)),
                maxSupply: convertFromPip(bufferToInteger(toBuffer$1(maxSupply)))
              });
            };
            /**
             * @param {Buffer|string} data
             * @return {CreateCoinTxData}
             */


            CreateCoinTxData.fromRlp = function fromRlp(data) {
              return CreateCoinTxData.fromBufferFields(new TxDataCreateCoin$1(data));
            };

            /**
             * @param {string} address
             * @param {string} publicKey
             * @param {number|string} commission
             * @param {number|string} coin - coin id
             * @param {number|string} stake
             * @constructor
             */

            function DeclareCandidacyTxData(_ref) {
              var address = _ref.address,
                  publicKey = _ref.publicKey,
                  commission = _ref.commission,
                  coin = _ref.coin,
                  stake = _ref.stake;
              validateAddress(address, 'address');
              validatePublicKey(publicKey, 'publicKey');
              validateUint(commission, 'commission');
              validateUint(coin, 'coin');
              validateAmount(stake, 'stake');
              this.address = address;
              this.publicKey = publicKey;
              this.commission = commission;
              this.coin = coin;
              this.stake = stake;
              this.txData = new TxDataDeclareCandidacy({
                address: toBuffer$1(address),
                publicKey: toBuffer$1(publicKey),
                commission: integerToHexString(commission),
                coin: integerToHexString(coin),
                stake: "0x".concat(convertToPip(stake, 'hex'))
              });
              proxyNestedTxData(this);
            }
            /**
             * @param {Buffer|string} address
             * @param {Buffer|string} publicKey
             * @param {Buffer|string} commission
             * @param {Buffer|string} coin
             * @param {Buffer|string} stake
             * @return {DeclareCandidacyTxData}
             */

            DeclareCandidacyTxData.fromBufferFields = function fromBufferFields(_ref2) {
              var address = _ref2.address,
                  publicKey = _ref2.publicKey,
                  commission = _ref2.commission,
                  coin = _ref2.coin,
                  stake = _ref2.stake;
              return new DeclareCandidacyTxData({
                address: addressToString(address),
                publicKey: publicToString(publicKey),
                commission: bufferToInteger(toBuffer$1(commission)),
                coin: bufferToInteger(toBuffer$1(coin)),
                stake: convertFromPip(bufferToInteger(toBuffer$1(stake)))
              });
            };
            /**
             * @param {Buffer|string} data
             * @return {DeclareCandidacyTxData}
             */


            DeclareCandidacyTxData.fromRlp = function fromRlp(data) {
              return DeclareCandidacyTxData.fromBufferFields(new TxDataDeclareCandidacy(data));
            };

            /**
             * @param {string} publicKey
             * @param {string} rewardAddress
             * @param {string} ownerAddress
             * @param {string} controlAddress
             * @constructor
             */

            function EditCandidateTxData(_ref) {
              var publicKey = _ref.publicKey,
                  rewardAddress = _ref.rewardAddress,
                  ownerAddress = _ref.ownerAddress,
                  controlAddress = _ref.controlAddress;
              validatePublicKey(publicKey, 'publicKey');
              validateAddress(rewardAddress, 'rewardAddress');
              validateAddress(ownerAddress, 'ownerAddress');
              validateAddress(controlAddress, 'controlAddress');
              this.publicKey = publicKey;
              this.rewardAddress = rewardAddress;
              this.ownerAddress = ownerAddress;
              this.controlAddress = controlAddress;
              this.txData = new TxDataEditCandidate({
                publicKey: toBuffer$1(publicKey),
                rewardAddress: toBuffer$1(rewardAddress),
                ownerAddress: toBuffer$1(ownerAddress),
                controlAddress: toBuffer$1(controlAddress)
              });
              proxyNestedTxData(this);
            }
            /**
             * @param {Buffer|string} publicKey
             * @param {Buffer|string} rewardAddress
             * @param {Buffer|string} ownerAddress
             * @param {Buffer|string} controlAddress
             * @return {EditCandidateTxData}
             */

            EditCandidateTxData.fromBufferFields = function fromBufferFields(_ref2) {
              var publicKey = _ref2.publicKey,
                  rewardAddress = _ref2.rewardAddress,
                  ownerAddress = _ref2.ownerAddress,
                  controlAddress = _ref2.controlAddress;
              return new EditCandidateTxData({
                publicKey: publicToString(publicKey),
                rewardAddress: addressToString(rewardAddress),
                ownerAddress: addressToString(ownerAddress),
                controlAddress: addressToString(controlAddress)
              });
            };
            /**
             * @param {Buffer|string} data
             * @return {EditCandidateTxData}
             */


            EditCandidateTxData.fromRlp = function fromRlp(data) {
              return EditCandidateTxData.fromBufferFields(new TxDataEditCandidate(data));
            };

            /**
             * @param {string} publicKey
             * @constructor
             */

            function SetCandidateOnTxData(_ref) {
              var publicKey = _ref.publicKey;
              validatePublicKey(publicKey, 'publicKey');
              this.publicKey = publicKey;
              this.txData = new TxDataSetCandidateOn({
                publicKey: toBuffer$1(publicKey)
              });
              proxyNestedTxData(this);
            }
            /**
             * @param {Buffer|string} publicKey
             * @return {SetCandidateOnTxData}
             */

            SetCandidateOnTxData.fromBufferFields = function fromBufferFields(_ref2) {
              var publicKey = _ref2.publicKey;
              return new SetCandidateOnTxData({
                publicKey: publicToString(publicKey)
              });
            };
            /**
             * @param {Buffer|string} data
             * @return {SetCandidateOnTxData}
             */


            SetCandidateOnTxData.fromRlp = function fromRlp(data) {
              return SetCandidateOnTxData.fromBufferFields(new TxDataSetCandidateOn(data));
            };

            /**
             * @param {string} publicKey
             * @param {number|string} coin - coin id
             * @param {number|string} stake
             * @constructor
             */

            function DelegateTxData(_ref) {
              var publicKey = _ref.publicKey,
                  coin = _ref.coin,
                  stake = _ref.stake;
              validatePublicKey(publicKey, 'publicKey');
              validateUint(coin, 'coin');
              validateAmount(stake, 'stake');
              this.publicKey = publicKey;
              this.coin = coin;
              this.stake = stake;
              this.txData = new TxDataDelegate({
                publicKey: toBuffer$1(publicKey),
                coin: integerToHexString(coin),
                stake: "0x".concat(convertToPip(stake, 'hex'))
              });
              proxyNestedTxData(this);
            }
            /**
             *
             * @param {Buffer|string} publicKey
             * @param {Buffer|string} stake
             * @param {Buffer|string} coin
             * @return {DelegateTxData}
             */

            DelegateTxData.fromBufferFields = function fromBufferFields(_ref2) {
              var publicKey = _ref2.publicKey,
                  coin = _ref2.coin,
                  stake = _ref2.stake;
              return new DelegateTxData({
                publicKey: publicToString(publicKey),
                coin: bufferToInteger(toBuffer$1(coin)),
                stake: convertFromPip(bufferToInteger(toBuffer$1(stake)))
              });
            };
            /**
             * @param {Buffer|string} data
             * @return {DelegateTxData}
             */


            DelegateTxData.fromRlp = function fromRlp(data) {
              return DelegateTxData.fromBufferFields(new TxDataDelegate(data));
            };

            /**
             * @param {string} publicKey
             * @param {number|string} coin - coin id
             * @param {number|string} stake
             * @constructor
             */

            function UnbondTxData(_ref) {
              var publicKey = _ref.publicKey,
                  coin = _ref.coin,
                  stake = _ref.stake;
              validatePublicKey(publicKey, 'publicKey');
              validateUint(coin, 'coin');
              validateAmount(stake, 'stake');
              this.publicKey = publicKey;
              this.coin = coin;
              this.stake = stake;
              this.txData = new TxDataDelegate({
                publicKey: toBuffer$1(publicKey),
                coin: integerToHexString(coin),
                stake: "0x".concat(convertToPip(stake, 'hex'))
              });
              proxyNestedTxData(this);
            }
            /**
             *
             * @param {Buffer|string} publicKey
             * @param {Buffer|string} stake
             * @param {Buffer|string} coin
             * @return {UnbondTxData}
             */

            UnbondTxData.fromBufferFields = function fromBufferFields(_ref2) {
              var publicKey = _ref2.publicKey,
                  coin = _ref2.coin,
                  stake = _ref2.stake;
              return new UnbondTxData({
                publicKey: publicToString(publicKey),
                coin: bufferToInteger(toBuffer$1(coin)),
                stake: convertFromPip(bufferToInteger(toBuffer$1(stake)))
              });
            };
            /**
             * @param {Buffer|string} data
             * @return {UnbondTxData}
             */


            UnbondTxData.fromRlp = function fromRlp(data) {
              return UnbondTxData.fromBufferFields(new TxDataDelegate(data));
            };

            /**
             * @param {Array} addresses
             * @param {Array} weights
             * @param {number|string} threshold
             * @constructor
             */

            function CreateMultisigTxData(_ref) {
              var addresses = _ref.addresses,
                  weights = _ref.weights,
                  threshold = _ref.threshold;
              validateUintArray(weights, 'weights');
              validateUint(threshold);
              this.addresses = addresses;
              this.weights = weights;
              this.threshold = threshold;

              if (!Array.isArray(addresses)) {
                throw new TypeError('Field `addresses` is not an array');
              }

              if (addresses.length > 32) {
                throw new Error('Invalid `addresses` count, it must not be greater than 32');
              }

              if (weights.length !== addresses.length) {
                throw new Error('Invalid `weights` count, it must be equal to addresses count');
              }

              addresses.forEach(function (address, index) {
                try {
                  validateAddress(address, "addresses[".concat(index, "]"));
                } catch (error) {
                  throw new Error("Field `addresses` contains invalid address at index: ".concat(index, ". ").concat(error.message));
                }
              });
              weights.forEach(function (weight, index) {
                if (weight > 1023 || weight < 0) {
                  throw new Error("`weights` field contains invalid weight at index: ".concat(index, ", it should be between 0 and 1023"));
                }
              });
              this.txData = new TxDataCreateMultisig({
                addresses: addresses.map(function (address) {
                  return toBuffer$1(address);
                }),
                weights: weights.map(function (weight) {
                  return integerToHexString(weight);
                }),
                threshold: integerToHexString(threshold)
              });
              proxyNestedTxData(this);
            }
            /**
             *
             * @param {Array<Buffer>} addresses
             * @param {Array<Buffer>} weights
             * @param {Buffer|string} threshold
             * @return {CreateMultisigTxData}
             */

            CreateMultisigTxData.fromBufferFields = function fromBufferFields(_ref2) {
              var addresses = _ref2.addresses,
                  weights = _ref2.weights,
                  threshold = _ref2.threshold;
              return new CreateMultisigTxData({
                addresses: addresses.map(function (item) {
                  return addressToString(item);
                }),
                weights: weights.map(function (item) {
                  return bufferToInteger(item);
                }),
                threshold: bufferToInteger(threshold)
              });
            };
            /**
             * @param {Buffer|string} data
             * @return {CreateMultisigTxData}
             */


            CreateMultisigTxData.fromRlp = function fromRlp(data) {
              return CreateMultisigTxData.fromBufferFields(new TxDataCreateMultisig(data));
            };

            /**
             *
             * @param {string} publicKey
             * @param {number|string} height
             * @constructor
             */

            function VoteHaltBlockTxData(_ref) {
              var publicKey = _ref.publicKey,
                  height = _ref.height;
              validatePublicKey(publicKey, 'publicKey');
              validateUint(height, 'height');
              this.publicKey = publicKey;
              this.height = height;
              this.txData = new TxDataVoteHaltBlock({
                publicKey: toBuffer$1(publicKey),
                height: integerToHexString(height)
              });
              proxyNestedTxData(this);
            }
            /**
             * @param {Buffer|string} publicKey
             * @param {Buffer|string|number} height
             * @return {VoteHaltBlockTxData}
             */

            VoteHaltBlockTxData.fromBufferFields = function fromBufferFields(_ref2) {
              var publicKey = _ref2.publicKey,
                  height = _ref2.height;
              return new VoteHaltBlockTxData({
                publicKey: publicToString(publicKey),
                height: bufferToInteger(toBuffer$1(height))
              });
            };
            /**
             * @param {Buffer|string} data
             * @return {VoteHaltBlockTxData}
             */


            VoteHaltBlockTxData.fromRlp = function fromRlp(data) {
              return VoteHaltBlockTxData.fromBufferFields(new TxDataVoteHaltBlock(data));
            };

            /**
             * @param {string} [name]
             * @param {string} symbol
             * @param {number|string} initialAmount
             * @param {number|string} initialReserve
             * @param {number|string} constantReserveRatio
             * @param {number|string} [maxSupply]
             * @constructor
             */

            function RecreateCoinTxData(_ref) {
              var _ref$name = _ref.name,
                  name = _ref$name === void 0 ? '' : _ref$name,
                  symbol = _ref.symbol,
                  initialAmount = _ref.initialAmount,
                  initialReserve = _ref.initialReserve,
                  constantReserveRatio = _ref.constantReserveRatio,
                  _ref$maxSupply = _ref.maxSupply,
                  maxSupply = _ref$maxSupply === void 0 ? COIN_MAX_MAX_SUPPLY : _ref$maxSupply;
              validateTicker(symbol, 'symbol');
              validateAmount(initialAmount, 'initialAmount');
              validateAmount(initialReserve, 'initialReserve');
              validateMaxSupply(maxSupply, initialAmount);
              this.name = name;
              this.symbol = symbol;
              this.initialAmount = initialAmount;
              this.initialReserve = initialReserve;
              this.constantReserveRatio = constantReserveRatio;
              this.maxSupply = maxSupply;
              this.txData = new TxDataCreateCoin$1({
                name: Buffer$i.from(name.toString(), 'utf-8'),
                symbol: coinToBuffer(symbol),
                initialAmount: "0x".concat(convertToPip(initialAmount, 'hex')),
                initialReserve: "0x".concat(convertToPip(initialReserve, 'hex')),
                constantReserveRatio: integerToHexString(constantReserveRatio),
                maxSupply: "0x".concat(convertToPip(maxSupply, 'hex'))
              });
              proxyNestedTxData(this);
            }
            /**
             *
             * @param {Buffer|string} name
             * @param {Buffer|string} symbol
             * @param {Buffer|string|number} initialAmount
             * @param {Buffer|string|number} initialReserve
             * @param {Buffer|string|number} constantReserveRatio
             * @param {number|string|number} maxSupply
             * @return {RecreateCoinTxData}
             */

            RecreateCoinTxData.fromBufferFields = function fromBufferFields(_ref2) {
              var name = _ref2.name,
                  symbol = _ref2.symbol,
                  initialAmount = _ref2.initialAmount,
                  initialReserve = _ref2.initialReserve,
                  constantReserveRatio = _ref2.constantReserveRatio,
                  maxSupply = _ref2.maxSupply;
              return new RecreateCoinTxData({
                name: toBuffer$1(name).toString('utf-8'),
                symbol: bufferToCoin(toBuffer$1(symbol)),
                initialAmount: convertFromPip(bufferToInteger(toBuffer$1(initialAmount))),
                initialReserve: convertFromPip(bufferToInteger(toBuffer$1(initialReserve))),
                constantReserveRatio: bufferToInteger(toBuffer$1(constantReserveRatio)),
                maxSupply: convertFromPip(bufferToInteger(toBuffer$1(maxSupply)))
              });
            };
            /**
             * @param {Buffer|string} data
             * @return {RecreateCoinTxData}
             */


            RecreateCoinTxData.fromRlp = function fromRlp(data) {
              return RecreateCoinTxData.fromBufferFields(new TxDataCreateCoin$1(data));
            };

            /**
             * @param {string} symbol
             * @param {string} newOwner
             * @constructor
             */

            function EditTickerOwnerTxData(_ref) {
              var symbol = _ref.symbol,
                  newOwner = _ref.newOwner;
              validateTicker(symbol, 'symbol');
              validateAddress(newOwner, 'newOwner');
              this.symbol = symbol;
              this.newOwner = newOwner;
              this.txData = new TxDataEditTickerOwner({
                symbol: coinToBuffer(symbol),
                newOwner: toBuffer$1(newOwner)
              });
              proxyNestedTxData(this);
            }
            /**
             *
             * @param {Buffer|string} symbol
             * @param {Buffer|string} newOwner
             * @return {EditTickerOwnerTxData}
             */

            EditTickerOwnerTxData.fromBufferFields = function fromBufferFields(_ref2) {
              var symbol = _ref2.symbol,
                  newOwner = _ref2.newOwner;
              return new EditTickerOwnerTxData({
                symbol: bufferToCoin(toBuffer$1(symbol)),
                newOwner: addressToString(newOwner)
              });
            };
            /**
             * @param {Buffer|string} data
             * @return {EditTickerOwnerTxData}
             */


            EditTickerOwnerTxData.fromRlp = function fromRlp(data) {
              return EditTickerOwnerTxData.fromBufferFields(new TxDataEditTickerOwner(data));
            };

            /**
             * @param {Array} addresses
             * @param {Array} weights
             * @param {number|string} threshold
             * @constructor
             */

            function EditMultisigTxData(_ref) {
              var addresses = _ref.addresses,
                  weights = _ref.weights,
                  threshold = _ref.threshold;
              validateUintArray(weights, 'weights');
              validateUint(threshold);
              this.addresses = addresses;
              this.weights = weights;
              this.threshold = threshold;

              if (!Array.isArray(addresses)) {
                throw new TypeError('Field `addresses` is not an array');
              }

              if (addresses.length > 32) {
                throw new Error('Invalid `addresses` count, it must not be greater than 32');
              }

              if (weights.length !== addresses.length) {
                throw new Error('Invalid `weights` count, it must be equal to addresses count');
              }

              addresses.forEach(function (address, index) {
                try {
                  validateAddress(address, "addresses[".concat(index, "]"));
                } catch (error) {
                  throw new Error("Field `addresses` contains invalid address at index: ".concat(index, ". ").concat(error.message));
                }
              });
              weights.forEach(function (weight, index) {
                if (weight > 1023 || weight < 0) {
                  throw new Error("`weights` field contains invalid weight at index: ".concat(index, ", it should be between 0 and 1023"));
                }
              }); // sort arrays so different ordered lists will produce same transaction hash

              var list = addresses.map(function (item, index) {
                return {
                  address: item,
                  weight: weights[index]
                };
              });
              list.sort(function sortListItem(a, b) {
                if (a.address > b.address) {
                  return 1;
                }

                if (a.address < b.address) {
                  return -1;
                }

                return 0;
              });
              addresses = list.map(function (item) {
                return item.address;
              });
              weights = list.map(function (item) {
                return item.weight;
              });
              this.txData = new TxDataCreateMultisig({
                addresses: addresses.map(function (address) {
                  return toBuffer$1(address);
                }),
                weights: weights.map(function (weight) {
                  return integerToHexString(weight);
                }),
                threshold: integerToHexString(threshold)
              });
              proxyNestedTxData(this);
            }
            /**
             *
             * @param {Array<Buffer>} addresses
             * @param {Array<Buffer>} weights
             * @param {Buffer|string} threshold
             * @return {EditMultisigTxData}
             */

            EditMultisigTxData.fromBufferFields = function fromBufferFields(_ref2) {
              var addresses = _ref2.addresses,
                  weights = _ref2.weights,
                  threshold = _ref2.threshold;
              return new EditMultisigTxData({
                addresses: addresses.map(function (item) {
                  return addressToString(item);
                }),
                weights: weights.map(function (item) {
                  return bufferToInteger(item);
                }),
                threshold: bufferToInteger(threshold)
              });
            };
            /**
             * @param {Buffer|string} data
             * @return {EditMultisigTxData}
             */


            EditMultisigTxData.fromRlp = function fromRlp(data) {
              return EditMultisigTxData.fromBufferFields(new TxDataCreateMultisig(data));
            };

            /**
             *
             * @param {number|string} price
             * @constructor
             */

            function PriceVoteTxData(_ref) {
              var price = _ref.price;
              validateUint(price, 'price');
              this.price = price;
              this.txData = new TxDataVotePrice({
                price: integerToHexString(price)
              });
              proxyNestedTxData(this);
            }
            /**
             * @param {Buffer|string|number} price
             * @return {PriceVoteTxData}
             */

            PriceVoteTxData.fromBufferFields = function fromBufferFields(_ref2) {
              var price = _ref2.price;
              return new PriceVoteTxData({
                price: bufferToInteger(toBuffer$1(price))
              });
            };
            /**
             * @param {Buffer|string} data
             * @return {PriceVoteTxData}
             */


            PriceVoteTxData.fromRlp = function fromRlp(data) {
              return PriceVoteTxData.fromBufferFields(new TxDataVotePrice(data));
            };

            /**
             * @param {string} publicKey
             * @param {string} newPublicKey
             * @constructor
             */

            function EditCandidatePublicKeyTxData(_ref) {
              var publicKey = _ref.publicKey,
                  newPublicKey = _ref.newPublicKey;
              validatePublicKey(publicKey, 'publicKey');
              validatePublicKey(newPublicKey, 'newPublicKey');
              this.publicKey = publicKey;
              this.newPublicKey = newPublicKey;
              this.txData = new TxDataEditCandidatePublicKey({
                publicKey: toBuffer$1(publicKey),
                newPublicKey: toBuffer$1(newPublicKey)
              });
              proxyNestedTxData(this);
            }
            /**
             * @param {Buffer|string} publicKey
             * @param {Buffer|string} newPublicKey
             * @return {EditCandidatePublicKeyTxData}
             */

            EditCandidatePublicKeyTxData.fromBufferFields = function fromBufferFields(_ref2) {
              var publicKey = _ref2.publicKey,
                  newPublicKey = _ref2.newPublicKey;
              return new EditCandidatePublicKeyTxData({
                publicKey: publicToString(publicKey),
                newPublicKey: publicToString(newPublicKey)
              });
            };
            /**
             * @param {Buffer|string} data
             * @return {EditCandidatePublicKeyTxData}
             */


            EditCandidatePublicKeyTxData.fromRlp = function fromRlp(data) {
              return EditCandidatePublicKeyTxData.fromBufferFields(new TxDataEditCandidatePublicKey(data));
            };

            /**
             * @param {number|string} coin0 - coin id
             * @param {number|string} coin1 - coin id
             * @param {number|string} volume0
             * @param {number|string} [maximumVolume1]
             * @constructor
             */

            function AddLiquidityTxData(_ref) {
              var coin0 = _ref.coin0,
                  coin1 = _ref.coin1,
                  volume0 = _ref.volume0,
                  _ref$maximumVolume = _ref.maximumVolume1,
                  maximumVolume1 = _ref$maximumVolume === void 0 ? COIN_MAX_AMOUNT : _ref$maximumVolume;
              validateUint(coin0, 'coin0');
              validateUint(coin1, 'coin1');
              validateAmount(volume0, 'volume0');
              validateAmount(maximumVolume1, 'maximumVolume1');
              this.coin0 = coin0;
              this.coin1 = coin1;
              this.volume0 = volume0;
              this.maximumVolume1 = maximumVolume1;
              this.txData = new TxDataAddSwapPool({
                coin0: integerToHexString(coin0),
                coin1: integerToHexString(coin1),
                volume0: "0x".concat(convertToPip(volume0, 'hex')),
                maximumVolume1: "0x".concat(convertToPip(maximumVolume1, 'hex'))
              });
              proxyNestedTxData(this);
            }
            /**
             * @param {Buffer|string} coin0
             * @param {Buffer|string} volume0
             * @param {Buffer|string} coin1
             * @param {Buffer|string} maximumVolume1
             * @return {AddLiquidityTxData}
             */

            AddLiquidityTxData.fromBufferFields = function fromBufferFields(_ref2) {
              var coin0 = _ref2.coin0,
                  volume0 = _ref2.volume0,
                  coin1 = _ref2.coin1,
                  maximumVolume1 = _ref2.maximumVolume1;
              return new AddLiquidityTxData({
                coin0: bufferToInteger(toBuffer$1(coin0)),
                coin1: bufferToInteger(toBuffer$1(coin1)),
                volume0: convertFromPip(bufferToInteger(toBuffer$1(volume0))),
                maximumVolume1: convertFromPip(bufferToInteger(toBuffer$1(maximumVolume1)))
              });
            };
            /**
             * @param {Buffer|string} data
             * @return {AddLiquidityTxData}
             */


            AddLiquidityTxData.fromRlp = function fromRlp(data) {
              return AddLiquidityTxData.fromBufferFields(new TxDataAddSwapPool(data));
            };

            /**
             * @param {number|string} coin0 - coin id
             * @param {number|string} coin1 - coin id
             * @param {number|string} liquidity - volume of shares to be withdrawn from the pool
             * @param {number|string} [minimumVolume0]
             * @param {number|string} [minimumVolume1]
             * @constructor
             */

            function RemoveLiquidityTxData(_ref) {
              var coin0 = _ref.coin0,
                  coin1 = _ref.coin1,
                  liquidity = _ref.liquidity,
                  _ref$minimumVolume = _ref.minimumVolume0,
                  minimumVolume0 = _ref$minimumVolume === void 0 ? 0 : _ref$minimumVolume,
                  _ref$minimumVolume2 = _ref.minimumVolume1,
                  minimumVolume1 = _ref$minimumVolume2 === void 0 ? 0 : _ref$minimumVolume2;
              validateUint(coin0, 'coin0');
              validateUint(coin1, 'coin1');
              validateAmount(liquidity, 'liquidity');
              validateAmount(minimumVolume0, 'minimumVolume0');
              validateAmount(minimumVolume1, 'minimumVolume1');
              this.coin0 = coin0;
              this.coin1 = coin1;
              this.liquidity = liquidity;
              this.minimumVolume0 = minimumVolume0;
              this.minimumVolume1 = minimumVolume1;
              this.txData = new TxDataRemoveSwapPool({
                coin0: integerToHexString(coin0),
                coin1: integerToHexString(coin1),
                liquidity: "0x".concat(convertToPip(liquidity, 'hex')),
                minimumVolume0: "0x".concat(convertToPip(minimumVolume0, 'hex')),
                minimumVolume1: "0x".concat(convertToPip(minimumVolume1, 'hex'))
              });
              proxyNestedTxData(this);
            }
            /**
             * @param {Buffer|string} coin0
             * @param {Buffer|string} coin1
             * @param {Buffer|string} liquidity
             * @param {Buffer|string} minimumVolume0
             * @param {Buffer|string} minimumVolume1
             * @return {RemoveLiquidityTxData}
             */

            RemoveLiquidityTxData.fromBufferFields = function fromBufferFields(_ref2) {
              var coin0 = _ref2.coin0,
                  minimumVolume0 = _ref2.minimumVolume0,
                  coin1 = _ref2.coin1,
                  liquidity = _ref2.liquidity,
                  minimumVolume1 = _ref2.minimumVolume1;
              return new RemoveLiquidityTxData({
                coin0: bufferToInteger(toBuffer$1(coin0)),
                coin1: bufferToInteger(toBuffer$1(coin1)),
                liquidity: convertFromPip(bufferToInteger(toBuffer$1(liquidity))),
                minimumVolume0: convertFromPip(bufferToInteger(toBuffer$1(minimumVolume0))),
                minimumVolume1: convertFromPip(bufferToInteger(toBuffer$1(minimumVolume1)))
              });
            };
            /**
             * @param {Buffer|string} data
             * @return {RemoveLiquidityTxData}
             */


            RemoveLiquidityTxData.fromRlp = function fromRlp(data) {
              return RemoveLiquidityTxData.fromBufferFields(new TxDataRemoveSwapPool(data));
            };

            /**
             * @param {Array<number|string>} coins - list of coin id
             * @param {number|string} valueToBuy
             * @param {number|string} [maximumValueToSell]
             * @constructor
             */

            function BuyPoolTxData(_ref) {
              var coins = _ref.coins,
                  valueToBuy = _ref.valueToBuy,
                  _ref$maximumValueToSe = _ref.maximumValueToSell,
                  maximumValueToSell = _ref$maximumValueToSe === void 0 ? COIN_MAX_AMOUNT : _ref$maximumValueToSe;
              validateUintArray(coins, 'coins');
              validateAmount(valueToBuy, 'valueToBuy');
              validateAmount(maximumValueToSell, 'maximumValueToSell');
              this.coins = coins;
              this.valueToBuy = valueToBuy;
              this.maximumValueToSell = maximumValueToSell;
              this.txData = new TxDataBuySwapPool({
                coins: coins.map(function (coin) {
                  return integerToHexString(coin);
                }),
                valueToBuy: "0x".concat(convertToPip(valueToBuy, 'hex')),
                maximumValueToSell: "0x".concat(convertToPip(maximumValueToSell, 'hex'))
              });
              proxyNestedTxData(this);
            }
            /**
             * @param {Array<Buffer>} coins
             * @param {Buffer|string} valueToBuy
             * @param {Buffer|string} maximumValueToSell
             * @return {BuyPoolTxData}
             */

            BuyPoolTxData.fromBufferFields = function fromBufferFields(_ref2) {
              var coins = _ref2.coins,
                  valueToBuy = _ref2.valueToBuy,
                  maximumValueToSell = _ref2.maximumValueToSell;
              return new BuyPoolTxData({
                coins: coins.map(function (item) {
                  return bufferToInteger(item);
                }),
                valueToBuy: convertFromPip(bufferToInteger(toBuffer$1(valueToBuy))),
                maximumValueToSell: convertFromPip(bufferToInteger(toBuffer$1(maximumValueToSell)))
              });
            };
            /**
             * @param {Buffer|string} data
             * @return {BuyPoolTxData}
             */


            BuyPoolTxData.fromRlp = function fromRlp(data) {
              return BuyPoolTxData.fromBufferFields(new TxDataBuySwapPool(data));
            };

            /**
             * @param {Array<number|string>} coins - list of coin id
             * @param {number|string} valueToSell
             * @param {number|string} [minimumValueToBuy=0]
             * @constructor
             */

            function SellPoolTxData(_ref) {
              var coins = _ref.coins,
                  valueToSell = _ref.valueToSell,
                  _ref$minimumValueToBu = _ref.minimumValueToBuy,
                  minimumValueToBuy = _ref$minimumValueToBu === void 0 ? 0 : _ref$minimumValueToBu;
              validateUintArray(coins, 'coins');
              validateAmount(valueToSell, 'valueToSell');
              validateAmount(minimumValueToBuy, 'minimumValueToBuy');
              this.coins = coins;
              this.valueToSell = valueToSell;
              this.minimumValueToBuy = minimumValueToBuy;
              this.txData = new TxDataSellSwapPool({
                coins: coins.map(function (coin) {
                  return integerToHexString(coin);
                }),
                valueToSell: "0x".concat(convertToPip(valueToSell, 'hex')),
                minimumValueToBuy: "0x".concat(convertToPip(minimumValueToBuy, 'hex'))
              });
              proxyNestedTxData(this);
            }
            /**
             * @param {Array<Buffer>} coins
             * @param {Buffer|string} valueToSell
             * @param {Buffer|string} minimumValueToBuy
             * @return {SellPoolTxData}
             */

            SellPoolTxData.fromBufferFields = function fromBufferFields(_ref2) {
              var coins = _ref2.coins,
                  valueToSell = _ref2.valueToSell,
                  minimumValueToBuy = _ref2.minimumValueToBuy;

              if (!valueToSell && valueToSell !== 0) {
                throw new Error('Invalid valueToSell');
              }

              return new SellPoolTxData({
                coins: coins.map(function (item) {
                  return bufferToInteger(item);
                }),
                valueToSell: convertFromPip(bufferToInteger(toBuffer$1(valueToSell))),
                minimumValueToBuy: convertFromPip(bufferToInteger(toBuffer$1(minimumValueToBuy)))
              });
            };
            /**
             * @param {Buffer|string} data
             * @return {SellPoolTxData}
             */


            SellPoolTxData.fromRlp = function fromRlp(data) {
              return SellPoolTxData.fromBufferFields(new TxDataSellSwapPool(data));
            };

            /**
             * @param {Array<number|string>} coins - list of coin id
             * @param {number|string} [minimumValueToBuy=0]
             * @constructor
             */

            function SellAllPoolTxData(_ref) {
              var coins = _ref.coins,
                  _ref$minimumValueToBu = _ref.minimumValueToBuy,
                  minimumValueToBuy = _ref$minimumValueToBu === void 0 ? 0 : _ref$minimumValueToBu;
              validateUintArray(coins, 'coins');
              validateAmount(minimumValueToBuy, 'minimumValueToBuy');
              this.coins = coins;
              this.minimumValueToBuy = minimumValueToBuy;
              this.txData = new TxDataSellAllSwapPool({
                coins: coins.map(function (coin) {
                  return integerToHexString(coin);
                }),
                minimumValueToBuy: "0x".concat(convertToPip(minimumValueToBuy, 'hex'))
              });
              proxyNestedTxData(this);
            }
            /**
             * @param {Array<Buffer>} coins
             * @param {Buffer|string} minimumValueToBuy
             * @return {SellAllPoolTxData}
             */

            SellAllPoolTxData.fromBufferFields = function fromBufferFields(_ref2) {
              var coins = _ref2.coins,
                  minimumValueToBuy = _ref2.minimumValueToBuy;
              return new SellAllPoolTxData({
                coins: coins.map(function (item) {
                  return bufferToInteger(item);
                }),
                minimumValueToBuy: convertFromPip(bufferToInteger(toBuffer$1(minimumValueToBuy)))
              });
            };
            /**
             * @param {Buffer|string} data
             * @return {SellAllPoolTxData}
             */


            SellAllPoolTxData.fromRlp = function fromRlp(data) {
              return SellAllPoolTxData.fromBufferFields(new TxDataSellAllSwapPool(data));
            };

            /**
             * @param {string} publicKey
             * @param {number|string} commission
             * @constructor
             */

            function EditCandidateCommissionTxData(_ref) {
              var publicKey = _ref.publicKey,
                  commission = _ref.commission;
              validatePublicKey(publicKey, 'publicKey');
              validateUint(commission, 'commission');
              this.publicKey = publicKey;
              this.commission = commission;
              this.txData = new TxDataEditCandidateCommission({
                publicKey: toBuffer$1(publicKey),
                commission: integerToHexString(commission)
              });
              proxyNestedTxData(this);
            }
            /**
             * @param {Buffer|string} publicKey
             * @param {Buffer|string} commission
             * @return {EditCandidateCommissionTxData}
             */

            EditCandidateCommissionTxData.fromBufferFields = function fromBufferFields(_ref2) {
              var publicKey = _ref2.publicKey,
                  commission = _ref2.commission;
              return new EditCandidateCommissionTxData({
                publicKey: publicToString(publicKey),
                commission: bufferToInteger(toBuffer$1(commission))
              });
            };
            /**
             * @param {Buffer|string} data
             * @return {EditCandidateCommissionTxData}
             */


            EditCandidateCommissionTxData.fromRlp = function fromRlp(data) {
              return EditCandidateCommissionTxData.fromBufferFields(new TxDataEditCandidateCommission(data));
            };

            /**
             * @param {string} from
             * @param {string} to
             * @param {number|string} coin - coin id
             * @param {number|string} stake
             * @constructor
             */

            function MoveStakeTxData(_ref) {
              var from = _ref.from,
                  to = _ref.to,
                  coin = _ref.coin,
                  stake = _ref.stake;
              validatePublicKey(from, 'from');
              validatePublicKey(to, 'to');
              validateUint(coin, 'coin');
              validateAmount(stake, 'stake');
              this.from = from;
              this.to = to;
              this.coin = coin;
              this.stake = stake;
              this.txData = new TxDataMoveStake({
                from: toBuffer$1(from),
                to: toBuffer$1(to),
                coin: integerToHexString(coin),
                stake: "0x".concat(convertToPip(stake, 'hex'))
              });
              proxyNestedTxData(this);
            }
            /**
             *
             * @param {Buffer|string} from
             * @param {Buffer|string} to
             * @param {Buffer|string} stake
             * @param {Buffer|string} coin
             * @return {MoveStakeTxData}
             */

            MoveStakeTxData.fromBufferFields = function fromBufferFields(_ref2) {
              var from = _ref2.from,
                  to = _ref2.to,
                  coin = _ref2.coin,
                  stake = _ref2.stake;
              return new MoveStakeTxData({
                from: publicToString(from),
                to: publicToString(to),
                coin: bufferToInteger(toBuffer$1(coin)),
                stake: convertFromPip(bufferToInteger(toBuffer$1(stake)))
              });
            };
            /**
             * @param {Buffer|string} data
             * @return {MoveStakeTxData}
             */


            MoveStakeTxData.fromRlp = function fromRlp(data) {
              return MoveStakeTxData.fromBufferFields(new TxDataMoveStake(data));
            };

            /**
             *
             * @param {number|string} value
             * @param {number|string} coin - coin id
             * @constructor
             */

            function MintTokenTxData(_ref) {
              var _ref$value = _ref.value,
                  value = _ref$value === void 0 ? 0 : _ref$value,
                  coin = _ref.coin;
              validateUint(coin, 'coin');
              validateAmount(value, 'value');
              this.value = value;
              this.coin = coin;
              this.txData = new TxDataMintToken({
                coin: integerToHexString(coin),
                value: "0x".concat(convertToPip(value, 'hex'))
              });
              proxyNestedTxData(this);
            }
            /**
             * @param {Buffer|string|number} value
             * @param {Buffer|string|number} coin
             * @return {MintTokenTxData}
             */

            MintTokenTxData.fromBufferFields = function fromBufferFields(_ref2) {
              var value = _ref2.value,
                  coin = _ref2.coin;
              return new MintTokenTxData({
                coin: bufferToInteger(toBuffer$1(coin)),
                value: convertFromPip(bufferToInteger(toBuffer$1(value)))
              });
            };
            /**
             * @param {Buffer|string} data
             * @return {MintTokenTxData}
             */


            MintTokenTxData.fromRlp = function fromRlp(data) {
              return MintTokenTxData.fromBufferFields(new TxDataMintToken(data));
            };

            /**
             *
             * @param {number|string} value
             * @param {number|string} coin - coin id
             * @constructor
             */

            function BurnTokenTxData(_ref) {
              var _ref$value = _ref.value,
                  value = _ref$value === void 0 ? 0 : _ref$value,
                  coin = _ref.coin;
              validateUint(coin, 'coin');
              validateAmount(value, 'value');
              this.value = value;
              this.coin = coin;
              this.txData = new TxDataMintToken({
                coin: integerToHexString(coin),
                value: "0x".concat(convertToPip(value, 'hex'))
              });
              proxyNestedTxData(this);
            }
            /**
             * @param {Buffer|string|number} value
             * @param {Buffer|string|number} coin
             * @return {BurnTokenTxData}
             */

            BurnTokenTxData.fromBufferFields = function fromBufferFields(_ref2) {
              var value = _ref2.value,
                  coin = _ref2.coin;
              return new BurnTokenTxData({
                coin: bufferToInteger(toBuffer$1(coin)),
                value: convertFromPip(bufferToInteger(toBuffer$1(value)))
              });
            };
            /**
             * @param {Buffer|string} data
             * @return {BurnTokenTxData}
             */


            BurnTokenTxData.fromRlp = function fromRlp(data) {
              return BurnTokenTxData.fromBufferFields(new TxDataMintToken(data));
            };

            /**
             * @param {string} [name]
             * @param {string} symbol
             * @param {number|string} initialAmount
             * @param {number|string} [maxSupply]
             * @param {boolean} mintable
             * @param {boolean} burnable
             * @constructor
             */

            function CreateTokenTxData(_ref) {
              var _ref$name = _ref.name,
                  name = _ref$name === void 0 ? '' : _ref$name,
                  symbol = _ref.symbol,
                  initialAmount = _ref.initialAmount,
                  _ref$maxSupply = _ref.maxSupply,
                  maxSupply = _ref$maxSupply === void 0 ? COIN_MAX_MAX_SUPPLY : _ref$maxSupply,
                  mintable = _ref.mintable,
                  burnable = _ref.burnable;
              validateTicker(symbol, 'symbol');
              validateAmount(initialAmount, 'initialAmount');
              validateMaxSupply(maxSupply, initialAmount);
              validateBoolean(mintable, 'mintable');
              validateBoolean(burnable, 'burnable');
              this.name = name;
              this.symbol = symbol;
              this.initialAmount = initialAmount;
              this.maxSupply = maxSupply;
              this.mintable = mintable;
              this.burnable = burnable;
              this.txData = new TxDataCreateCoin({
                name: Buffer$i.from(name.toString(), 'utf-8'),
                symbol: coinToBuffer(symbol),
                initialAmount: "0x".concat(convertToPip(initialAmount, 'hex')),
                maxSupply: "0x".concat(convertToPip(maxSupply, 'hex')),
                mintable: mintable ? '0x01' : '0x00',
                burnable: burnable ? '0x01' : '0x00'
              });
              proxyNestedTxData(this);
            }
            /**
             *
             * @param {Buffer|string} name
             * @param {Buffer|string} symbol
             * @param {Buffer|string|number} initialAmount
             * @param {Buffer|string|number} maxSupply
             * @param {Buffer|string} mintable
             * @param {Buffer|string} burnable
             * @return {CreateTokenTxData}
             */

            CreateTokenTxData.fromBufferFields = function fromBufferFields(_ref2) {
              var name = _ref2.name,
                  symbol = _ref2.symbol,
                  initialAmount = _ref2.initialAmount,
                  maxSupply = _ref2.maxSupply,
                  mintable = _ref2.mintable,
                  burnable = _ref2.burnable;
              return new CreateTokenTxData({
                name: toBuffer$1(name).toString('utf-8'),
                symbol: bufferToCoin(toBuffer$1(symbol)),
                initialAmount: convertFromPip(bufferToInteger(toBuffer$1(initialAmount))),
                maxSupply: convertFromPip(bufferToInteger(toBuffer$1(maxSupply))),
                mintable: bufferToBoolean(toBuffer$1(mintable)),
                burnable: bufferToBoolean(toBuffer$1(burnable))
              });
            };
            /**
             * @param {Buffer|string} data
             * @return {CreateTokenTxData}
             */


            CreateTokenTxData.fromRlp = function fromRlp(data) {
              return CreateTokenTxData.fromBufferFields(new TxDataCreateCoin(data));
            };

            /**
             * @param {string} [name]
             * @param {string} symbol
             * @param {number|string} initialAmount
             * @param {number|string} [maxSupply]
             * @param {boolean} mintable
             * @param {boolean} burnable
             * @constructor
             */

            function RecreateTokenTxData(_ref) {
              var _ref$name = _ref.name,
                  name = _ref$name === void 0 ? '' : _ref$name,
                  symbol = _ref.symbol,
                  initialAmount = _ref.initialAmount,
                  _ref$maxSupply = _ref.maxSupply,
                  maxSupply = _ref$maxSupply === void 0 ? COIN_MAX_MAX_SUPPLY : _ref$maxSupply,
                  mintable = _ref.mintable,
                  burnable = _ref.burnable;
              validateTicker(symbol, 'symbol');
              validateAmount(initialAmount, 'initialAmount');
              validateMaxSupply(maxSupply, initialAmount);
              validateBoolean(mintable, 'mintable');
              validateBoolean(burnable, 'burnable');
              this.name = name;
              this.symbol = symbol;
              this.initialAmount = initialAmount;
              this.maxSupply = maxSupply;
              this.mintable = mintable;
              this.burnable = burnable;
              this.txData = new TxDataCreateCoin({
                name: Buffer$i.from(name.toString(), 'utf-8'),
                symbol: coinToBuffer(symbol),
                initialAmount: "0x".concat(convertToPip(initialAmount, 'hex')),
                maxSupply: "0x".concat(convertToPip(maxSupply, 'hex')),
                mintable: mintable ? '0x01' : '0x00',
                burnable: burnable ? '0x01' : '0x00'
              });
              proxyNestedTxData(this);
            }
            /**
             *
             * @param {Buffer|string} name
             * @param {Buffer|string} symbol
             * @param {Buffer|string|number} initialAmount
             * @param {Buffer|string|number} maxSupply
             * @param {Buffer|string} mintable
             * @param {Buffer|string} burnable
             * @return {RecreateTokenTxData}
             */

            RecreateTokenTxData.fromBufferFields = function fromBufferFields(_ref2) {
              var name = _ref2.name,
                  symbol = _ref2.symbol,
                  initialAmount = _ref2.initialAmount,
                  maxSupply = _ref2.maxSupply,
                  mintable = _ref2.mintable,
                  burnable = _ref2.burnable;
              return new RecreateTokenTxData({
                name: toBuffer$1(name).toString('utf-8'),
                symbol: bufferToCoin(toBuffer$1(symbol)),
                initialAmount: convertFromPip(bufferToInteger(toBuffer$1(initialAmount))),
                maxSupply: convertFromPip(bufferToInteger(toBuffer$1(maxSupply))),
                mintable: bufferToBoolean(toBuffer$1(mintable)),
                burnable: bufferToBoolean(toBuffer$1(burnable))
              });
            };
            /**
             * @param {Buffer|string} data
             * @return {RecreateTokenTxData}
             */


            RecreateTokenTxData.fromRlp = function fromRlp(data) {
              return RecreateTokenTxData.fromBufferFields(new TxDataCreateCoin(data));
            };

            /**
             * @param {string} publicKey
             * @param {number|string} height
             * @param {number|string} coin
             * @param {number|string} payloadByte
             * @param {number|string} send
             * @param {number|string} buyBancor
             * @param {number|string} sellBancor
             * @param {number|string} sellAllBancor
             * @param {number|string} buyPoolBase
             * @param {number|string} buyPoolDelta
             * @param {number|string} sellPoolBase
             * @param {number|string} sellPoolDelta
             * @param {number|string} sellAllPoolBase
             * @param {number|string} sellAllPoolDelta
             * @param {number|string} createTicker3
             * @param {number|string} createTicker4
             * @param {number|string} createTicker5
             * @param {number|string} createTicker6
             * @param {number|string} createTicker7to10
             * @param {number|string} createCoin
             * @param {number|string} createToken
             * @param {number|string} recreateCoin
             * @param {number|string} recreateToken
             * @param {number|string} declareCandidacy
             * @param {number|string} delegate
             * @param {number|string} unbond
             * @param {number|string} redeemCheck
             * @param {number|string} setCandidateOn
             * @param {number|string} setCandidateOff
             * @param {number|string} createMultisig
             * @param {number|string} multisendBase
             * @param {number|string} multisendDelta
             * @param {number|string} editCandidate
             * @param {number|string} setHaltBlock
             * @param {number|string} editTickerOwner
             * @param {number|string} editMultisig
             * @param {number|string} [priceVote]
             * @param {number|string} editCandidatePublicKey
             * @param {number|string} addLiquidity
             * @param {number|string} removeLiquidity
             * @param {number|string} editCandidateCommission
             * @param {number|string} [moveStake]
             * @param {number|string} burnToken
             * @param {number|string} mintToken
             * @param {number|string} voteCommission
             * @param {number|string} voteUpdate
             * @param {number|string} createSwapPool
             * @param {number|string} failedTx
             * @param {number|string} addLimitOrder
             * @param {number|string} removeLimitOrder
             * @constructor
             */

            function VoteCommissionTxData(_ref) {
              var publicKey = _ref.publicKey,
                  height = _ref.height,
                  coin = _ref.coin,
                  payloadByte = _ref.payloadByte,
                  send = _ref.send,
                  buyBancor = _ref.buyBancor,
                  sellBancor = _ref.sellBancor,
                  sellAllBancor = _ref.sellAllBancor,
                  buyPoolBase = _ref.buyPoolBase,
                  buyPoolDelta = _ref.buyPoolDelta,
                  sellPoolBase = _ref.sellPoolBase,
                  sellPoolDelta = _ref.sellPoolDelta,
                  sellAllPoolBase = _ref.sellAllPoolBase,
                  sellAllPoolDelta = _ref.sellAllPoolDelta,
                  createTicker3 = _ref.createTicker3,
                  createTicker4 = _ref.createTicker4,
                  createTicker5 = _ref.createTicker5,
                  createTicker6 = _ref.createTicker6,
                  createTicker7to10 = _ref.createTicker7to10,
                  createCoin = _ref.createCoin,
                  createToken = _ref.createToken,
                  recreateCoin = _ref.recreateCoin,
                  recreateToken = _ref.recreateToken,
                  declareCandidacy = _ref.declareCandidacy,
                  delegate = _ref.delegate,
                  unbond = _ref.unbond,
                  redeemCheck = _ref.redeemCheck,
                  setCandidateOn = _ref.setCandidateOn,
                  setCandidateOff = _ref.setCandidateOff,
                  createMultisig = _ref.createMultisig,
                  multisendBase = _ref.multisendBase,
                  multisendDelta = _ref.multisendDelta,
                  editCandidate = _ref.editCandidate,
                  setHaltBlock = _ref.setHaltBlock,
                  editTickerOwner = _ref.editTickerOwner,
                  editMultisig = _ref.editMultisig,
                  editCandidatePublicKey = _ref.editCandidatePublicKey,
                  addLiquidity = _ref.addLiquidity,
                  removeLiquidity = _ref.removeLiquidity,
                  editCandidateCommission = _ref.editCandidateCommission,
                  burnToken = _ref.burnToken,
                  mintToken = _ref.mintToken,
                  voteCommission = _ref.voteCommission,
                  voteUpdate = _ref.voteUpdate,
                  createSwapPool = _ref.createSwapPool,
                  failedTx = _ref.failedTx,
                  addLimitOrder = _ref.addLimitOrder,
                  removeLimitOrder = _ref.removeLimitOrder;
              validatePublicKey(publicKey, 'publicKey');
              validateUint(height, 'height');
              validateUint(coin, 'coin');
              validateAmount(payloadByte, 'payloadByte');
              validateAmount(send, 'send');
              validateAmount(buyBancor, 'buyBancor');
              validateAmount(sellBancor, 'sellBancor');
              validateAmount(sellAllBancor, 'sellAllBancor');
              validateAmount(buyPoolBase, 'buyPoolBase');
              validateAmount(buyPoolDelta, 'buyPoolDelta');
              validateAmount(sellPoolBase, 'sellPoolBase');
              validateAmount(sellPoolDelta, 'sellPoolDelta');
              validateAmount(sellAllPoolBase, 'sellAllPoolBase');
              validateAmount(sellAllPoolDelta, 'sellAllPoolDelta');
              validateAmount(createTicker3, 'createTicker3');
              validateAmount(createTicker4, 'createTicker4');
              validateAmount(createTicker5, 'createTicker5');
              validateAmount(createTicker6, 'createTicker6');
              validateAmount(createTicker7to10, 'createTicker7to10');
              validateAmount(createCoin, 'createCoin');
              validateAmount(createToken, 'createToken');
              validateAmount(recreateCoin, 'recreateCoin');
              validateAmount(recreateToken, 'recreateToken');
              validateAmount(declareCandidacy, 'declareCandidacy');
              validateAmount(delegate, 'delegate');
              validateAmount(unbond, 'unbond');
              validateAmount(redeemCheck, 'redeemCheck');
              validateAmount(setCandidateOn, 'setCandidateOn');
              validateAmount(setCandidateOff, 'setCandidateOff');
              validateAmount(createMultisig, 'createMultisig');
              validateAmount(multisendBase, 'multisendBase');
              validateAmount(multisendDelta, 'multisendDelta');
              validateAmount(editCandidate, 'editCandidate');
              validateAmount(setHaltBlock, 'setHaltBlock');
              validateAmount(editTickerOwner, 'editTickerOwner');
              validateAmount(editMultisig, 'editMultisig'); // validateAmount(priceVote, 'priceVote');

              validateAmount(editCandidatePublicKey, 'editCandidatePublicKey');
              validateAmount(addLiquidity, 'addLiquidity');
              validateAmount(removeLiquidity, 'removeLiquidity');
              validateAmount(editCandidateCommission, 'editCandidateCommission'); // validateAmount(moveStake, 'moveStake');

              validateAmount(burnToken, 'burnToken');
              validateAmount(mintToken, 'mintToken');
              validateAmount(voteCommission, 'voteCommission');
              validateAmount(voteUpdate, 'voteUpdate');
              validateAmount(createSwapPool, 'createSwapPool');
              validateAmount(createSwapPool, 'failedTx');
              validateAmount(createSwapPool, 'addLimitOrder');
              validateAmount(createSwapPool, 'removeLimitOrder');
              this.publicKey = publicKey;
              this.height = height;
              this.coin = coin;
              this.payloadByte = payloadByte;
              this.send = send;
              this.buyBancor = buyBancor;
              this.sellBancor = sellBancor;
              this.sellAllBancor = sellAllBancor;
              this.buyPoolBase = buyPoolBase;
              this.buyPoolDelta = buyPoolDelta;
              this.sellPoolBase = sellPoolBase;
              this.sellPoolDelta = sellPoolDelta;
              this.sellAllPoolBase = sellAllPoolBase;
              this.sellAllPoolDelta = sellAllPoolDelta;
              this.createTicker3 = createTicker3;
              this.createTicker4 = createTicker4;
              this.createTicker5 = createTicker5;
              this.createTicker6 = createTicker6;
              this.createTicker7to10 = createTicker7to10;
              this.createCoin = createCoin;
              this.createToken = createToken;
              this.recreateCoin = recreateCoin;
              this.recreateToken = recreateToken;
              this.declareCandidacy = declareCandidacy;
              this.delegate = delegate;
              this.unbond = unbond;
              this.redeemCheck = redeemCheck;
              this.setCandidateOn = setCandidateOn;
              this.setCandidateOff = setCandidateOff;
              this.createMultisig = createMultisig;
              this.multisendBase = multisendBase;
              this.multisendDelta = multisendDelta;
              this.editCandidate = editCandidate;
              this.setHaltBlock = setHaltBlock;
              this.editTickerOwner = editTickerOwner;
              this.editMultisig = editMultisig; // this.priceVote = priceVote;

              this.editCandidatePublicKey = editCandidatePublicKey;
              this.addLiquidity = addLiquidity;
              this.removeLiquidity = removeLiquidity;
              this.editCandidateCommission = editCandidateCommission; // this.moveStake = moveStake;

              this.burnToken = burnToken;
              this.mintToken = mintToken;
              this.voteCommission = voteCommission;
              this.voteUpdate = voteUpdate;
              this.createSwapPool = createSwapPool;
              this.failedTx = failedTx;
              this.addLimitOrder = addLimitOrder;
              this.removeLimitOrder = removeLimitOrder;
              this.txData = new TxDataVoteCommission({
                publicKey: toBuffer$1(publicKey),
                height: integerToHexString(height),
                coin: integerToHexString(coin),
                payloadByte: "0x".concat(convertToPip(payloadByte, 'hex')),
                send: "0x".concat(convertToPip(send, 'hex')),
                buyBancor: "0x".concat(convertToPip(buyBancor, 'hex')),
                sellBancor: "0x".concat(convertToPip(sellBancor, 'hex')),
                sellAllBancor: "0x".concat(convertToPip(sellAllBancor, 'hex')),
                buyPoolBase: "0x".concat(convertToPip(buyPoolBase, 'hex')),
                buyPoolDelta: "0x".concat(convertToPip(buyPoolDelta, 'hex')),
                sellPoolBase: "0x".concat(convertToPip(sellPoolBase, 'hex')),
                sellPoolDelta: "0x".concat(convertToPip(sellPoolDelta, 'hex')),
                sellAllPoolBase: "0x".concat(convertToPip(sellAllPoolBase, 'hex')),
                sellAllPoolDelta: "0x".concat(convertToPip(sellAllPoolDelta, 'hex')),
                createTicker3: "0x".concat(convertToPip(createTicker3, 'hex')),
                createTicker4: "0x".concat(convertToPip(createTicker4, 'hex')),
                createTicker5: "0x".concat(convertToPip(createTicker5, 'hex')),
                createTicker6: "0x".concat(convertToPip(createTicker6, 'hex')),
                createTicker7to10: "0x".concat(convertToPip(createTicker7to10, 'hex')),
                createCoin: "0x".concat(convertToPip(createCoin, 'hex')),
                createToken: "0x".concat(convertToPip(createToken, 'hex')),
                recreateCoin: "0x".concat(convertToPip(recreateCoin, 'hex')),
                recreateToken: "0x".concat(convertToPip(recreateToken, 'hex')),
                declareCandidacy: "0x".concat(convertToPip(declareCandidacy, 'hex')),
                delegate: "0x".concat(convertToPip(delegate, 'hex')),
                unbond: "0x".concat(convertToPip(unbond, 'hex')),
                redeemCheck: "0x".concat(convertToPip(redeemCheck, 'hex')),
                setCandidateOn: "0x".concat(convertToPip(setCandidateOn, 'hex')),
                setCandidateOff: "0x".concat(convertToPip(setCandidateOff, 'hex')),
                createMultisig: "0x".concat(convertToPip(createMultisig, 'hex')),
                multisendBase: "0x".concat(convertToPip(multisendBase, 'hex')),
                multisendDelta: "0x".concat(convertToPip(multisendDelta, 'hex')),
                editCandidate: "0x".concat(convertToPip(editCandidate, 'hex')),
                setHaltBlock: "0x".concat(convertToPip(setHaltBlock, 'hex')),
                editTickerOwner: "0x".concat(convertToPip(editTickerOwner, 'hex')),
                editMultisig: "0x".concat(convertToPip(editMultisig, 'hex')),
                // priceVote: `0x${convertToPip(priceVote, 'hex')}`,
                editCandidatePublicKey: "0x".concat(convertToPip(editCandidatePublicKey, 'hex')),
                addLiquidity: "0x".concat(convertToPip(addLiquidity, 'hex')),
                removeLiquidity: "0x".concat(convertToPip(removeLiquidity, 'hex')),
                editCandidateCommission: "0x".concat(convertToPip(editCandidateCommission, 'hex')),
                // moveStake: `0x${convertToPip(moveStake, 'hex')}`,
                burnToken: "0x".concat(convertToPip(burnToken, 'hex')),
                mintToken: "0x".concat(convertToPip(mintToken, 'hex')),
                voteCommission: "0x".concat(convertToPip(voteCommission, 'hex')),
                voteUpdate: "0x".concat(convertToPip(voteUpdate, 'hex')),
                createSwapPool: "0x".concat(convertToPip(createSwapPool, 'hex')),
                failedTx: "0x".concat(convertToPip(failedTx, 'hex')),
                addLimitOrder: "0x".concat(convertToPip(addLimitOrder, 'hex')),
                removeLimitOrder: "0x".concat(convertToPip(removeLimitOrder, 'hex'))
              });
              proxyNestedTxData(this);
            }
            /**
             * @param {Buffer|string} publicKey
             * @param {Buffer|string|number} height
             * @param {Buffer|string|number} coin
             * @param {Buffer|string|number} payloadByte
             * @param {Buffer|string|number} send
             * @param {Buffer|string|number} buyBancor
             * @param {Buffer|string|number} sellBancor
             * @param {Buffer|string|number} sellAllBancor
             * @param {Buffer|string|number} buyPoolBase
             * @param {Buffer|string|number} buyPoolDelta
             * @param {Buffer|string|number} sellPoolBase
             * @param {Buffer|string|number} sellPoolDelta
             * @param {Buffer|string|number} sellAllPoolBase
             * @param {Buffer|string|number} sellAllPoolDelta
             * @param {Buffer|string|number} createTicker3
             * @param {Buffer|string|number} createTicker4
             * @param {Buffer|string|number} createTicker5
             * @param {Buffer|string|number} createTicker6
             * @param {Buffer|string|number} createTicker7to10
             * @param {Buffer|string|number} createCoin
             * @param {Buffer|string|number} createToken
             * @param {Buffer|string|number} recreateCoin
             * @param {Buffer|string|number} recreateToken
             * @param {Buffer|string|number} declareCandidacy
             * @param {Buffer|string|number} delegate
             * @param {Buffer|string|number} unbond
             * @param {Buffer|string|number} redeemCheck
             * @param {Buffer|string|number} setCandidateOn
             * @param {Buffer|string|number} setCandidateOff
             * @param {Buffer|string|number} createMultisig
             * @param {Buffer|string|number} multisendBase
             * @param {Buffer|string|number} multisendDelta
             * @param {Buffer|string|number} editCandidate
             * @param {Buffer|string|number} setHaltBlock
             * @param {Buffer|string|number} editTickerOwner
             * @param {Buffer|string|number} editMultisig
             * @param {Buffer|string|number} [priceVote]
             * @param {Buffer|string|number} editCandidatePublicKey
             * @param {Buffer|string|number} addLiquidity
             * @param {Buffer|string|number} removeLiquidity
             * @param {Buffer|string|number} editCandidateCommission
             * @param {Buffer|string|number} [moveStake]
             * @param {Buffer|string|number} burnToken
             * @param {Buffer|string|number} mintToken
             * @param {Buffer|string|number} voteCommission
             * @param {Buffer|string|number} voteUpdate
             * @param {Buffer|string|number} createSwapPool
             * @param {Buffer|string|number} failedTx
             * @param {Buffer|string|number} addLimitOrder
             * @param {Buffer|string|number} removeLimitOrder
             * @return {VoteCommissionTxData}
             */

            VoteCommissionTxData.fromBufferFields = function fromBufferFields(_ref2) {
              var publicKey = _ref2.publicKey,
                  height = _ref2.height,
                  coin = _ref2.coin,
                  payloadByte = _ref2.payloadByte,
                  send = _ref2.send,
                  buyBancor = _ref2.buyBancor,
                  sellBancor = _ref2.sellBancor,
                  sellAllBancor = _ref2.sellAllBancor,
                  buyPoolBase = _ref2.buyPoolBase,
                  buyPoolDelta = _ref2.buyPoolDelta,
                  sellPoolBase = _ref2.sellPoolBase,
                  sellPoolDelta = _ref2.sellPoolDelta,
                  sellAllPoolBase = _ref2.sellAllPoolBase,
                  sellAllPoolDelta = _ref2.sellAllPoolDelta,
                  createTicker3 = _ref2.createTicker3,
                  createTicker4 = _ref2.createTicker4,
                  createTicker5 = _ref2.createTicker5,
                  createTicker6 = _ref2.createTicker6,
                  createTicker7to10 = _ref2.createTicker7to10,
                  createCoin = _ref2.createCoin,
                  createToken = _ref2.createToken,
                  recreateCoin = _ref2.recreateCoin,
                  recreateToken = _ref2.recreateToken,
                  declareCandidacy = _ref2.declareCandidacy,
                  delegate = _ref2.delegate,
                  unbond = _ref2.unbond,
                  redeemCheck = _ref2.redeemCheck,
                  setCandidateOn = _ref2.setCandidateOn,
                  setCandidateOff = _ref2.setCandidateOff,
                  createMultisig = _ref2.createMultisig,
                  multisendBase = _ref2.multisendBase,
                  multisendDelta = _ref2.multisendDelta,
                  editCandidate = _ref2.editCandidate,
                  setHaltBlock = _ref2.setHaltBlock,
                  editTickerOwner = _ref2.editTickerOwner,
                  editMultisig = _ref2.editMultisig;
                  _ref2.priceVote;
                  var editCandidatePublicKey = _ref2.editCandidatePublicKey,
                  addLiquidity = _ref2.addLiquidity,
                  removeLiquidity = _ref2.removeLiquidity,
                  editCandidateCommission = _ref2.editCandidateCommission;
                  _ref2.moveStake;
                  var burnToken = _ref2.burnToken,
                  mintToken = _ref2.mintToken,
                  voteCommission = _ref2.voteCommission,
                  voteUpdate = _ref2.voteUpdate,
                  createSwapPool = _ref2.createSwapPool,
                  failedTx = _ref2.failedTx,
                  addLimitOrder = _ref2.addLimitOrder,
                  removeLimitOrder = _ref2.removeLimitOrder;
              return new VoteCommissionTxData({
                publicKey: publicToString(publicKey),
                height: bufferToInteger(toBuffer$1(height)),
                coin: bufferToInteger(toBuffer$1(coin)),
                payloadByte: convertFromPip(bufferToInteger(toBuffer$1(payloadByte))),
                send: convertFromPip(bufferToInteger(toBuffer$1(send))),
                buyBancor: convertFromPip(bufferToInteger(toBuffer$1(buyBancor))),
                sellBancor: convertFromPip(bufferToInteger(toBuffer$1(sellBancor))),
                sellAllBancor: convertFromPip(bufferToInteger(toBuffer$1(sellAllBancor))),
                buyPoolBase: convertFromPip(bufferToInteger(toBuffer$1(buyPoolBase))),
                buyPoolDelta: convertFromPip(bufferToInteger(toBuffer$1(buyPoolDelta))),
                sellPoolBase: convertFromPip(bufferToInteger(toBuffer$1(sellPoolBase))),
                sellPoolDelta: convertFromPip(bufferToInteger(toBuffer$1(sellPoolDelta))),
                sellAllPoolBase: convertFromPip(bufferToInteger(toBuffer$1(sellAllPoolBase))),
                sellAllPoolDelta: convertFromPip(bufferToInteger(toBuffer$1(sellAllPoolDelta))),
                createTicker3: convertFromPip(bufferToInteger(toBuffer$1(createTicker3))),
                createTicker4: convertFromPip(bufferToInteger(toBuffer$1(createTicker4))),
                createTicker5: convertFromPip(bufferToInteger(toBuffer$1(createTicker5))),
                createTicker6: convertFromPip(bufferToInteger(toBuffer$1(createTicker6))),
                createTicker7to10: convertFromPip(bufferToInteger(toBuffer$1(createTicker7to10))),
                createCoin: convertFromPip(bufferToInteger(toBuffer$1(createCoin))),
                createToken: convertFromPip(bufferToInteger(toBuffer$1(createToken))),
                recreateCoin: convertFromPip(bufferToInteger(toBuffer$1(recreateCoin))),
                recreateToken: convertFromPip(bufferToInteger(toBuffer$1(recreateToken))),
                declareCandidacy: convertFromPip(bufferToInteger(toBuffer$1(declareCandidacy))),
                delegate: convertFromPip(bufferToInteger(toBuffer$1(delegate))),
                unbond: convertFromPip(bufferToInteger(toBuffer$1(unbond))),
                redeemCheck: convertFromPip(bufferToInteger(toBuffer$1(redeemCheck))),
                setCandidateOn: convertFromPip(bufferToInteger(toBuffer$1(setCandidateOn))),
                setCandidateOff: convertFromPip(bufferToInteger(toBuffer$1(setCandidateOff))),
                createMultisig: convertFromPip(bufferToInteger(toBuffer$1(createMultisig))),
                multisendBase: convertFromPip(bufferToInteger(toBuffer$1(multisendBase))),
                multisendDelta: convertFromPip(bufferToInteger(toBuffer$1(multisendDelta))),
                editCandidate: convertFromPip(bufferToInteger(toBuffer$1(editCandidate))),
                setHaltBlock: convertFromPip(bufferToInteger(toBuffer$1(setHaltBlock))),
                editTickerOwner: convertFromPip(bufferToInteger(toBuffer$1(editTickerOwner))),
                editMultisig: convertFromPip(bufferToInteger(toBuffer$1(editMultisig))),
                // priceVote: convertFromPip(bufferToInteger(toBuffer(priceVote))),
                editCandidatePublicKey: convertFromPip(bufferToInteger(toBuffer$1(editCandidatePublicKey))),
                addLiquidity: convertFromPip(bufferToInteger(toBuffer$1(addLiquidity))),
                removeLiquidity: convertFromPip(bufferToInteger(toBuffer$1(removeLiquidity))),
                editCandidateCommission: convertFromPip(bufferToInteger(toBuffer$1(editCandidateCommission))),
                // moveStake: convertFromPip(bufferToInteger(toBuffer(moveStake))),
                burnToken: convertFromPip(bufferToInteger(toBuffer$1(burnToken))),
                mintToken: convertFromPip(bufferToInteger(toBuffer$1(mintToken))),
                voteCommission: convertFromPip(bufferToInteger(toBuffer$1(voteCommission))),
                voteUpdate: convertFromPip(bufferToInteger(toBuffer$1(voteUpdate))),
                createSwapPool: convertFromPip(bufferToInteger(toBuffer$1(createSwapPool))),
                failedTx: convertFromPip(bufferToInteger(toBuffer$1(failedTx))),
                addLimitOrder: convertFromPip(bufferToInteger(toBuffer$1(addLimitOrder))),
                removeLimitOrder: convertFromPip(bufferToInteger(toBuffer$1(removeLimitOrder)))
              });
            };
            /**
             * @param {Buffer|string} data
             * @return {VoteCommissionTxData}
             */


            VoteCommissionTxData.fromRlp = function fromRlp(data) {
              return VoteCommissionTxData.fromBufferFields(new TxDataVoteCommission(data));
            };

            /**
             * @param {string} version
             * @param {string} publicKey
             * @param {number|string} height
             * @constructor
             */

            function VoteUpdateTxData(_ref) {
              var version = _ref.version,
                  publicKey = _ref.publicKey,
                  height = _ref.height;
              validatePublicKey(publicKey, 'publicKey');
              validateUint(height, 'height');
              this.version = version;
              this.publicKey = publicKey;
              this.height = height;
              this.txData = new TxDataVoteUpdate({
                version: Buffer$i.from(version.toString(), 'utf-8'),
                publicKey: toBuffer$1(publicKey),
                height: integerToHexString(height)
              });
              proxyNestedTxData(this);
            }
            /**
             * @param {Buffer|string} version
             * @param {Buffer|string} publicKey
             * @param {Buffer|string|number} height
             * @return {VoteUpdateTxData}
             */

            VoteUpdateTxData.fromBufferFields = function fromBufferFields(_ref2) {
              var version = _ref2.version,
                  publicKey = _ref2.publicKey,
                  height = _ref2.height;
              return new VoteUpdateTxData({
                version: toBuffer$1(version).toString('utf-8'),
                publicKey: publicToString(publicKey),
                height: bufferToInteger(toBuffer$1(height))
              });
            };
            /**
             * @param {Buffer|string} data
             * @return {VoteUpdateTxData}
             */


            VoteUpdateTxData.fromRlp = function fromRlp(data) {
              return VoteUpdateTxData.fromBufferFields(new TxDataVoteUpdate(data));
            };

            /**
             * @param {number|string} coin0 - coin id
             * @param {number|string} coin1 - coin id
             * @param {number|string} volume0
             * @param {number|string} volume1
             * @constructor
             */

            function CreatePoolTxData(_ref) {
              var coin0 = _ref.coin0,
                  coin1 = _ref.coin1,
                  volume0 = _ref.volume0,
                  volume1 = _ref.volume1;
              validateUint(coin0, 'coin0');
              validateUint(coin1, 'coin1');
              validateAmount(volume0, 'volume0');
              validateAmount(volume1, 'volume1'); // swap values to sort by id ascending (make tx hash independent of coin order)

              if (Number(coin0) > Number(coin1)) {
                var _ref2 = [coin1, coin0];
                coin0 = _ref2[0];
                coin1 = _ref2[1];
                var _ref3 = [volume1, volume0];
                volume0 = _ref3[0];
                volume1 = _ref3[1];
              }

              this.coin0 = coin0;
              this.coin1 = coin1;
              this.volume0 = volume0;
              this.volume1 = volume1;
              this.txData = new TxDataCreateSwapPool({
                coin0: integerToHexString(coin0),
                coin1: integerToHexString(coin1),
                volume0: "0x".concat(convertToPip(volume0, 'hex')),
                volume1: "0x".concat(convertToPip(volume1, 'hex'))
              });
              proxyNestedTxData(this);
            }
            /**
             * @param {Buffer|string} coin0
             * @param {Buffer|string} volume0
             * @param {Buffer|string} coin1
             * @param {Buffer|string} volume1
             * @return {CreatePoolTxData}
             */

            CreatePoolTxData.fromBufferFields = function fromBufferFields(_ref4) {
              var coin0 = _ref4.coin0,
                  volume0 = _ref4.volume0,
                  coin1 = _ref4.coin1,
                  volume1 = _ref4.volume1;
              return new CreatePoolTxData({
                coin0: bufferToInteger(toBuffer$1(coin0)),
                coin1: bufferToInteger(toBuffer$1(coin1)),
                volume0: convertFromPip(bufferToInteger(toBuffer$1(volume0))),
                volume1: convertFromPip(bufferToInteger(toBuffer$1(volume1)))
              });
            };
            /**
             * @param {Buffer|string} data
             * @return {CreatePoolTxData}
             */


            CreatePoolTxData.fromRlp = function fromRlp(data) {
              return CreatePoolTxData.fromBufferFields(new TxDataCreateSwapPool(data));
            };

            /**
             * @param {number|string} coinToSell - coin id
             * @param {number|string} coinToBuy - coin id
             * @param {number|string} valueToSell
             * @param {number|string} valueToBuy
             * @constructor
             */

            function AddLimitOrderTxData(_ref) {
              var coinToSell = _ref.coinToSell,
                  coinToBuy = _ref.coinToBuy,
                  valueToSell = _ref.valueToSell,
                  _ref$valueToBuy = _ref.valueToBuy,
                  valueToBuy = _ref$valueToBuy === void 0 ? 0 : _ref$valueToBuy;
              validateUint(coinToSell, 'coinToSell');
              validateUint(coinToBuy, 'coinToBuy');
              validateAmount(valueToSell, 'valueToSell');
              validateAmount(valueToBuy, 'valueToBuy');
              this.coinToSell = coinToSell;
              this.coinToBuy = coinToBuy;
              this.valueToSell = valueToSell;
              this.valueToBuy = valueToBuy;
              this.txData = new TxDataAddLimitOrder({
                coinToSell: integerToHexString(coinToSell),
                coinToBuy: integerToHexString(coinToBuy),
                valueToSell: "0x".concat(convertToPip(valueToSell, 'hex')),
                valueToBuy: "0x".concat(convertToPip(valueToBuy, 'hex'))
              });
              proxyNestedTxData(this);
            }
            /**
             * @param {Buffer|string} coinToSell
             * @param {Buffer|string} valueToSell
             * @param {Buffer|string} coinToBuy
             * @param {Buffer|string} valueToBuy
             * @return {AddLimitOrderTxData}
             */

            AddLimitOrderTxData.fromBufferFields = function fromBufferFields(_ref2) {
              var coinToSell = _ref2.coinToSell,
                  valueToSell = _ref2.valueToSell,
                  coinToBuy = _ref2.coinToBuy,
                  valueToBuy = _ref2.valueToBuy;

              if (!valueToSell && valueToSell !== 0) {
                throw new Error('Invalid valueToSell');
              }

              if (!valueToBuy && valueToBuy !== 0) {
                throw new Error('Invalid valueToBuy');
              }

              return new AddLimitOrderTxData({
                coinToSell: bufferToInteger(toBuffer$1(coinToSell)),
                coinToBuy: bufferToInteger(toBuffer$1(coinToBuy)),
                valueToSell: convertFromPip(bufferToInteger(toBuffer$1(valueToSell))),
                valueToBuy: convertFromPip(bufferToInteger(toBuffer$1(valueToBuy)))
              });
            };
            /**
             * @param {Buffer|string} data
             * @return {AddLimitOrderTxData}
             */


            AddLimitOrderTxData.fromRlp = function fromRlp(data) {
              return AddLimitOrderTxData.fromBufferFields(new TxDataAddLimitOrder(data));
            };

            /**
             *
             * @param {number|string} id
             * @constructor
             */

            function RemoveLimitOrderTxData(_ref) {
              var id = _ref.id;
              validateUint(id, 'height');
              this.id = id;
              this.txData = new TxDataRemoveLimitOrder({
                id: integerToHexString(id)
              });
              proxyNestedTxData(this);
            }
            /**
             * @param {Buffer|string|number} id
             * @return {RemoveLimitOrderTxData}
             */

            RemoveLimitOrderTxData.fromBufferFields = function fromBufferFields(_ref2) {
              var id = _ref2.id;
              return new RemoveLimitOrderTxData({
                id: bufferToInteger(toBuffer$1(id))
              });
            };
            /**
             * @param {Buffer|string} data
             * @return {RemoveLimitOrderTxData}
             */


            RemoveLimitOrderTxData.fromRlp = function fromRlp(data) {
              return RemoveLimitOrderTxData.fromBufferFields(new TxDataRemoveLimitOrder(data));
            };

            var _TX_DATA_CONSTRUCTOR;
            var TX_DATA_CONSTRUCTOR = (_TX_DATA_CONSTRUCTOR = {}, _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.SEND, SendTxData), _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.MULTISEND, MultisendTxData), _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.SELL, SellTxData), _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.BUY, BuyTxData), _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.SELL_ALL, SellAllTxData), _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.CREATE_COIN, CreateCoinTxData), _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.DECLARE_CANDIDACY, DeclareCandidacyTxData), _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.EDIT_CANDIDATE, EditCandidateTxData), _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.SET_CANDIDATE_ON, SetCandidateOnTxData), _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.SET_CANDIDATE_OFF, SetCandidateOnTxData), _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.DELEGATE, DelegateTxData), _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.UNBOND, UnbondTxData), _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.REDEEM_CHECK, RedeemCheckTxData), _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.CREATE_MULTISIG, CreateMultisigTxData), _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.SET_HALT_BLOCK, VoteHaltBlockTxData), _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.RECREATE_COIN, RecreateCoinTxData), _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.EDIT_TICKER_OWNER, EditTickerOwnerTxData), _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.EDIT_MULTISIG, EditMultisigTxData), _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.PRICE_VOTE, PriceVoteTxData), _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.EDIT_CANDIDATE_PUBLIC_KEY, EditCandidatePublicKeyTxData), _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.ADD_LIQUIDITY, AddLiquidityTxData), _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.REMOVE_LIQUIDITY, RemoveLiquidityTxData), _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.BUY_SWAP_POOL, BuyPoolTxData), _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.SELL_SWAP_POOL, SellPoolTxData), _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.SELL_ALL_SWAP_POOL, SellAllPoolTxData), _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.EDIT_CANDIDATE_COMMISSION, EditCandidateCommissionTxData), _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.MOVE_STAKE, MoveStakeTxData), _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.MINT_TOKEN, MintTokenTxData), _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.BURN_TOKEN, BurnTokenTxData), _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.CREATE_TOKEN, CreateTokenTxData), _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.RECREATE_TOKEN, RecreateTokenTxData), _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.VOTE_COMMISSION, VoteCommissionTxData), _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.VOTE_UPDATE, VoteUpdateTxData), _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.CREATE_SWAP_POOL, CreatePoolTxData), _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.ADD_LIMIT_ORDER, AddLimitOrderTxData), _defineProperty(_TX_DATA_CONSTRUCTOR, TX_TYPE.REMOVE_LIMIT_ORDER, RemoveLimitOrderTxData), _TX_DATA_CONSTRUCTOR);
            /**
             * @param {TX_TYPE|number|string|Buffer|Uint8Array} txType
             * @return {SendTxData|MultisendTxData|SellTxData|SellAllTxData|BuyTxData|CreateCoinTxData|DeclareCandidacyTxData|EditCandidateTxData|SetCandidateOnTxData|SetCandidateOffTxData|DelegateTxData|UnbondTxData|RedeemCheckTxData|CreateMultisigTxData|SetHaltBlockTxData|RecreateCoinTxData|EditTickerOwnerTxData|EditMultisigTxData|PriceVoteTxData|EditCandidatePublicKeyTxData|AddLiquidityTxData|RemoveLiquidityTxData|BuyPoolTxData|SellPoolTxData|SellAllPoolTxData|EditCandidateCommissionTxData|MintTokenTxData|BurnTokenTxData|CreateTokenTxData|RecreateTokenTxData|VoteCommissionTxData|VoteUpdateTxData|CreatePoolTxData|AddLimitOrderTxData|RemoveLimitOrderTxData}
             */

            function getTxData(txType) {
              txType = normalizeTxType(txType);
              return TX_DATA_CONSTRUCTOR[txType];
            }
            /**
             * @param {Buffer|TxData|Object} txData
             * @param {TX_TYPE} txType
             * @param {TxOptions} [options] - options for RedeemCheckTxData
             * @return {Buffer}
             */

            function ensureBufferData(txData, txType, options) {
              // serialize, if it TxData
              if (typeof txData.serialize === 'function') {
                txData = txData.serialize();
              } // make buffer from object


              if (typeof txData.length === 'undefined') {
                var TxData = getTxData(txType);
                txData = new TxData(txData, options);
                txData = txData.serialize();
              }

              return txData;
            }
            /**
             * Decode rlp txData into fields
             * @param {TX_TYPE} txType
             * @param {string|Buffer|Uint8Array} txData
             * @param {boolean} [decodeCheck]
             */

            function decodeTxData(txType, txData) {
              var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
                  isDecodeCheck = _ref.decodeCheck;

              txType = normalizeTxType(txType);
              var txDataDecoded = getTxData(txType).fromRlp(txData);
              var fields = txDataDecoded.fields;

              if (isDecodeCheck && txType === TX_TYPE.REDEEM_CHECK) {
                fields.checkData = decodeCheck(fields.check);
              }

              return fields;
            }

            function ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

            function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$5(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
            /**
             * @typedef {Object} TxParams
             * @property {number} [nonce]
             * @property {number} [chainId=1]
             * @property {number} [gasPrice=1]
             * @property {number|string} [gasCoin='0']
             * @property {string|Buffer|TX_TYPE} type
             * @property {string|Buffer|TX_TYPE} [txType] - deprecated
             * @property {Buffer|TxData|Object} data
             * @property {Buffer|TxData|Object} [txData] - deprecated
             * @property {string} [payload]
             * @property {string} [message] - deprecated
             * @property {number} [signatureType]
             * @property {ByteArray|{multisig: ByteArray, signatures: Array<ByteArray>}} [signatureData]
             */

            /**
             * @typedef {Object} TxOptions
             * @property {string} [seedPhrase] - to sign tx or get nonce or to make proof for redeemCheck tx
             * @property {ByteArray} [privateKey] - alternative to seedPhrase
             * @property {ByteArray} [address] - to get nonce (useful for multisignatures) or to make proof for redeemCheck tx
             * @property {ByteArray} [password] - to make proof for RedeemCheckTxData
             */

            /**
             * @typedef {Buffer, Uint8Array, string} ByteArray
             */

            /**
             * @param {TxParams} txParams
             * @param {TxOptions} [options]
             * @return {Tx}
             */

            function prepareSignedTx() {
              var txParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
              var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

              if (!options.privateKey && txParams.privateKey) {
                options.privateKey = txParams.privateKey; // eslint-disable-next-line no-console

                console.warn('privateKey field in tx params is deprecated, pass it to the second argument');
              }

              if (toInteger(txParams.signatureType) === '2') {
                throw new Error('prepareSignedTx doesn\'t support multi signatures');
              }

              var tx = prepareTx(_objectSpread$5(_objectSpread$5({}, txParams), {}, {
                signatureType: 1
              }), options);
              return tx;
            }
            /**
             * @param {TxParams} txParams
             * @param {TxOptions} [options]
             * @return {Tx}
             */

            function prepareTx() {
              var txParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
              var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
              txParams = _objectSpread$5(_objectSpread$5({}, txParams), {}, {
                data: txParams.data || txParams.txData,
                type: normalizeTxType(txParams.type || txParams.txType),
                payload: txParams.payload || txParams.message
              });
              txParams = decorateTxParams(txParams);
              var _txParams = txParams,
                  nonce = _txParams.nonce,
                  _txParams$chainId = _txParams.chainId,
                  chainId = _txParams$chainId === void 0 ? 1 : _txParams$chainId,
                  _txParams$gasPrice = _txParams.gasPrice,
                  gasPrice = _txParams$gasPrice === void 0 ? 1 : _txParams$gasPrice,
                  _txParams$gasCoin = _txParams.gasCoin,
                  gasCoin = _txParams$gasCoin === void 0 ? 0 : _txParams$gasCoin,
                  txType = _txParams.type,
                  signatureType = _txParams.signatureType,
                  signatureData = _txParams.signatureData;
              var _txParams2 = txParams,
                  payload = _txParams2.payload,
                  txData = _txParams2.data;
              validateUint(nonce, 'nonce');
              validateUint(chainId, 'chainId');
              validateUint(gasPrice, 'gasPrice');
              validateUint(gasCoin, 'gasCoin');

              if (!txType && typeof txType !== 'number') {
                throw new Error('Falsy tx type specified, tx can\'t be prepared');
              }

              if (!signatureType && typeof signatureType !== 'number') {
                throw new Error('Falsy signatureType specified, tx can\'t be prepared');
              }

              txData = ensureBufferData(txData, txType, options);
              var txProps = {
                nonce: integerToHexString(nonce),
                chainId: integerToHexString(chainId),
                gasPrice: integerToHexString(gasPrice),
                gasCoin: integerToHexString(gasCoin),
                type: txType,
                data: txData,
                signatureType: integerToHexString(signatureType),
                signatureData: ensureBufferSignature(signatureData, signatureType)
              };

              if (payload) {
                if (typeof payload === 'string') {
                  payload = Buffer$i.from(payload, 'utf-8');
                }

                txProps.payload = payload;
              }

              var tx = new Tx(txProps);
              var privateKey = options.seedPhrase && !options.privateKey ? getPrivateKeyFromSeedPhrase(options.seedPhrase) : options.privateKey;

              if (toInteger(signatureType) === '1' && privateKey) {
                tx.signatureData = makeSignature(tx, privateKey);
              }

              return tx;
            }
            /**
             * @param {Tx} tx
             * @param {ByteArray} privateKey
             */

            function makeSignature(tx, privateKey) {
              // @TODO asserts
              var privateKeyBuffer = bytes.toBuffer(privateKey);
              return new TxSignature().sign(tx.hash(false), privateKeyBuffer).serialize();
            }
            /**
             * @param {string|ByteArray} txRlp
             * @param {boolean} [decodeCheck]
             * @return {TxParams}
             */

            function decodeTx(txRlp) {
              var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                  decodeCheck = _ref.decodeCheck;

              var tx = new Tx(txRlp);
              var txType = normalizeTxType(tx.type);
              var txData = decodeTxData(tx.type, tx.data, {
                decodeCheck: decodeCheck
              });
              return {
                nonce: tx.nonce.length > 0 ? bufferToInteger(tx.nonce) : undefined,
                chainId: tx.chainId.length > 0 ? bufferToInteger(tx.chainId) : undefined,
                gasPrice: tx.gasPrice.length > 0 ? bufferToInteger(tx.gasPrice) : undefined,
                gasCoin: bufferToInteger(tx.gasCoin),
                type: txType,
                data: txData,
                payload: tx.payload.toString('utf-8'),
                signatureType: tx.signatureType.length > 0 ? bufferToInteger(tx.signatureType) : undefined,
                signatureData: tx.signatureData.length > 0 ? "0x".concat(tx.signatureData.toString('hex')) : ''
              };
            }
            /**
             * @param {Buffer|TxMultisignature|Object} signatureData
             * @param {number} signatureType
             * @return {Buffer}
             */

            function ensureBufferSignature(signatureData, signatureType) {
              if (!signatureData) {
                return signatureData;
              } // serialize, if it TxMultisignature


              if (signatureData && toInteger(signatureType) === '2' && typeof signatureData.serialize === 'function') {
                signatureData = signatureData.serialize();
              } // make buffer from object


              if (typeof signatureData.length === 'undefined') {
                signatureData = new TxMultisignature(signatureData);
                signatureData = signatureData.serialize();
              }

              return signatureData;
            }

            var _excluded = ["gasRetryLimit", "nonceRetryLimit", "mempoolRetryLimit"],
                _excluded2 = ["gasRetryLimit", "nonceRetryLimit", "mempoolRetryLimit"];

            function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

            function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$4(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
            /**
             * @typedef {TxOptions & PostTxOptionsExtra} PostTxOptions
             *
             * @typedef {Object} PostTxOptionsExtra
             * @property {number} [gasRetryLimit=2] - max number of autofix retries after gas error
             * @property {number} [nonceRetryLimit=0] - max number of autofix retries after nonce error
             * @preserve {number} [mempoolRetryLimit=0] - max number of retries after "already exists in mempool" error
             */

            /**
             * @param {MinterApiInstance} apiInstance
             * @return {Function<Promise>}
             */

            function PostTx(apiInstance) {
              var replaceCoinSymbol = new ReplaceCoinSymbol(apiInstance);
              /**
               * @param {TxParams} txParams
               * @param {PostTxOptions} options
               * @param {import('axios').AxiosRequestConfig} [axiosOptions]
               * @return {Promise<string>}
               */

              return function postTx(txParams) {
                var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                    _ref$gasRetryLimit = _ref.gasRetryLimit,
                    gasRetryLimit = _ref$gasRetryLimit === void 0 ? 2 : _ref$gasRetryLimit,
                    _ref$nonceRetryLimit = _ref.nonceRetryLimit,
                    nonceRetryLimit = _ref$nonceRetryLimit === void 0 ? 0 : _ref$nonceRetryLimit,
                    _ref$mempoolRetryLimi = _ref.mempoolRetryLimit,
                    mempoolRetryLimit = _ref$mempoolRetryLimi === void 0 ? 0 : _ref$mempoolRetryLimi,
                    txOptions = _objectWithoutProperties(_ref, _excluded);

                var axiosOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

                if (!txOptions.privateKey && txParams.privateKey) {
                  txOptions.privateKey = txParams.privateKey; // eslint-disable-next-line no-console

                  console.warn('privateKey field in tx params is deprecated, pass it to the second parameter');
                } // @TODO asserts


                var privateKeyPromise;

                if (txOptions.privateKey) {
                  privateKeyPromise = Promise.resolve(txOptions.privateKey);
                } else if (txOptions.seedPhrase) {
                  privateKeyPromise = getPrivateKeyFromSeedPhraseAsync(txOptions.seedPhrase);
                } else {
                  privateKeyPromise = Promise.resolve(undefined);
                }

                return privateKeyPromise.then(function (privateKey) {
                  // @TODO should axiosOptions be passed here?
                  return Promise.all([ensureNonce(apiInstance, txParams, _objectSpread$4(_objectSpread$4({}, txOptions), {}, {
                    privateKey: privateKey
                  })), replaceCoinSymbol(txParams), Promise.resolve(privateKey)]);
                }).then(function (_ref2) {
                  var _ref3 = _slicedToArray(_ref2, 3),
                      newNonce = _ref3[0],
                      newTxParams = _ref3[1],
                      privateKey = _ref3[2];

                  return _postTxHandleErrors(apiInstance, _objectSpread$4(_objectSpread$4({}, newTxParams), {}, {
                    nonce: newNonce
                  }), _objectSpread$4(_objectSpread$4({
                    gasRetryLimit: gasRetryLimit,
                    nonceRetryLimit: nonceRetryLimit,
                    mempoolRetryLimit: mempoolRetryLimit
                  }, txOptions), {}, {
                    privateKey: privateKey,
                    axiosOptions: axiosOptions
                  }));
                });
              };
            }
            /**
             * @param {MinterApiInstance} apiInstance
             * @param {TxParams} txParams
             * @param {TxOptions} [options]
             * @param {import('axios').AxiosRequestConfig} [axiosOptions]
             * @return {Promise<NodeTransaction|{hash: string}>}
             */

            function _postTx(apiInstance, txParams, options, axiosOptions) {
              if (!txParams.chainId && apiInstance.defaults.chainId) {
                txParams.chainId = apiInstance.defaults.chainId;
              }

              var tx;
              tx = !txParams.signatureData && toInteger(txParams.signatureType) !== '2' ? prepareSignedTx(txParams, options) : prepareTx(txParams, options);
              return new PostSignedTx(apiInstance)(tx.serializeToString(), axiosOptions);
            }
            /**
             * Send `_postTx()` request and if it fails because of too low gas or already exists in mempool - make retries
             * On gas retry `txParams.gasPrice` will be updated with required min gas value from error response.
             * On mempool retry request will be sent after 5 seconds (average time of a block) to try put transaction into next block
             * @param {MinterApiInstance} apiInstance
             * @param {TxParams} txParams
             * @param {PostTxOptions} options
             * @param {import('axios').AxiosRequestConfig} [axiosOptions]
             * @return {Promise<string>}
             */


            function _postTxHandleErrors(apiInstance, txParams, options, axiosOptions) {
              var gasRetryLimit = options.gasRetryLimit,
                  nonceRetryLimit = options.nonceRetryLimit,
                  mempoolRetryLimit = options.mempoolRetryLimit,
                  txOptions = _objectWithoutProperties(options, _excluded2);

              return _postTx(apiInstance, txParams, txOptions, axiosOptions)["catch"](function (error) {
                // @TODO limit max gas_price to prevent sending tx with to high fees
                if (toInteger(txParams.signatureType) !== '2' && gasRetryLimit > 0 && isGasError(error)) {
                  var minGas = getMinGasFromError(error); // eslint-disable-next-line no-console

                  console.log("make postTx retry, old gasPrice ".concat(txParams.gasPrice, ", new gasPrice ").concat(minGas));
                  return _postTxHandleErrors(apiInstance, _objectSpread$4(_objectSpread$4({}, txParams), {}, {
                    gasPrice: minGas
                  }), _objectSpread$4(_objectSpread$4({}, options), {}, {
                    gasRetryLimit: gasRetryLimit - 1
                  }), axiosOptions);
                } else if (toInteger(txParams.signatureType) !== '2' && nonceRetryLimit > 0 && isNonceError(error)) {
                  var newNonce = getNonceFromError(error); // eslint-disable-next-line no-console

                  console.log("make postTx retry, old nonce ".concat(txParams.nonce, ", new nonce ").concat(newNonce));
                  return _postTxHandleErrors(apiInstance, _objectSpread$4(_objectSpread$4({}, txParams), {}, {
                    nonce: newNonce
                  }), _objectSpread$4(_objectSpread$4({}, options), {}, {
                    nonceRetryLimit: nonceRetryLimit - 1
                  }), axiosOptions);
                } else if (mempoolRetryLimit > 0 && isMempoolError(error)) {
                  // eslint-disable-next-line no-console
                  console.log('make postTx retry: tx exists in mempool');
                  return wait(5000).then(function () {
                    return _postTxHandleErrors(apiInstance, txParams, _objectSpread$4(_objectSpread$4({}, options), {}, {
                      mempoolRetryLimit: mempoolRetryLimit - 1
                    }), axiosOptions);
                  });
                } else {
                  throw error;
                }
              });
            }
            /**
             * @param {MinterApiInstance} apiInstance
             * @param {TxParams} txParams
             * @param {Object} txOptions
             * @param {ByteArray} [txOptions.privateKey]
             * @param {string} [txOptions.address]
             * @param {import('axios').AxiosRequestConfig} [axiosOptions]
             * @return {Promise<number>}
             */


            function ensureNonce(apiInstance, txParams) {
              var _ref4 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
                  privateKey = _ref4.privateKey,
                  address = _ref4.address;
                  _ref4.seedPhrase;

              var axiosOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
              var nonce = txParams.nonce;

              if (!nonce && !address && !privateKey) {
                throw new Error('No nonce is given and no address or privateKey to retrieve it from API');
              }

              if (nonce) {
                return Promise.resolve(nonce);
              } // @TODO seedPhrase not used


              if (privateKey) {
                var privateKeyBuffer = bufferFromBytes(privateKey);
                address = privateToAddressString(privateKeyBuffer);
              }

              return new GetNonce(apiInstance)(address, axiosOptions);
            }
            /**
             * @param {MinterApiInstance} apiInstance
             */


            function EnsureNonce(apiInstance) {
              /**
               * @param {TxParams} txParams
               * @param {Object} txOptions
               * @param {ByteArray} [txOptions.privateKey]
               * @param {string} [txOptions.address]
               * @param {import('axios').AxiosRequestConfig} [axiosOptions]
               * @return {Promise<number>}
               */
              return function apiEnsureNonce() {
                // eslint-disable-next-line prefer-rest-params
                return ensureNonce.apply(void 0, [apiInstance].concat(Array.prototype.slice.call(arguments)));
              };
            }
            /**
             * Get tx_result data from error
             * @param error
             * @return {Object|undefined}
             */
            // function getTxResult(error) {
            //     error = error.response?.data?.error;
            //     // gate moves tx_result into root error, so check it too
            //     return error && (error.tx_result || error);
            // }

            /**
             * Check if error caused by too low gas
             * @param error
             * @return {boolean}
             */

            function isGasError(error) {
              var _error$response;

              return ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data.error.code) === '114';
            }
            /**
             * Check if error caused by: "Tx from address already exists in mempool"
             * @param error
             * @return {boolean}
             */


            function isMempoolError(error) {
              var _error$response2;

              return ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data.error.code) === '113';
            }
            /**
             * Check if error caused by nonce
             * @param error
             * @return {boolean}
             */


            function isNonceError(error) {
              var _error$response3;

              return ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data.error.code) === '101';
            }
            /**
             * Retrieve required min gas value from error message
             * @param error
             * @return {number}
             */


            function getMinGasFromError(error) {
              var _error$response4;

              return Number((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data.error.data.min_gas_price);
            }
            /**
             * Retrieve required min gas value from error message
             * @param error
             * @return {number}
             */


            function getNonceFromError(error) {
              var _error$response5;

              return Number((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data.error.data.expected_nonce);
            }

            /* eslint complexity: [2, 18], max-statements: [2, 33] */


            var shams = function hasSymbols() {
              if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') {
                return false;
              }

              if (_typeof$1(Symbol.iterator) === 'symbol') {
                return true;
              }

              var obj = {};
              var sym = Symbol('test');
              var symObj = Object(sym);

              if (typeof sym === 'string') {
                return false;
              }

              if (Object.prototype.toString.call(sym) !== '[object Symbol]') {
                return false;
              }

              if (Object.prototype.toString.call(symObj) !== '[object Symbol]') {
                return false;
              } // temp disabled per https://github.com/ljharb/object.assign/issues/17
              // if (sym instanceof Symbol) { return false; }
              // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
              // if (!(symObj instanceof Symbol)) { return false; }
              // if (typeof Symbol.prototype.toString !== 'function') { return false; }
              // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }


              var symVal = 42;
              obj[sym] = symVal;

              for (sym in obj) {
                return false;
              } // eslint-disable-line no-restricted-syntax


              if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) {
                return false;
              }

              if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) {
                return false;
              }

              var syms = Object.getOwnPropertySymbols(obj);

              if (syms.length !== 1 || syms[0] !== sym) {
                return false;
              }

              if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
                return false;
              }

              if (typeof Object.getOwnPropertyDescriptor === 'function') {
                var descriptor = Object.getOwnPropertyDescriptor(obj, sym);

                if (descriptor.value !== symVal || descriptor.enumerable !== true) {
                  return false;
                }
              }

              return true;
            };

            var origSymbol = commonjsGlobal.Symbol;
            var hasSymbolSham = shams;

            var hasSymbols$1 = function hasNativeSymbols() {
              if (typeof origSymbol !== 'function') {
                return false;
              }

              if (typeof Symbol !== 'function') {
                return false;
              }

              if (_typeof$1(origSymbol('foo')) !== 'symbol') {
                return false;
              }

              if (_typeof$1(Symbol('bar')) !== 'symbol') {
                return false;
              }

              return hasSymbolSham();
            };

            /* eslint no-invalid-this: 1 */


            var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
            var slice = Array.prototype.slice;
            var toStr$1 = Object.prototype.toString;
            var funcType = '[object Function]';

            var implementation$1 = function bind(that) {
              var target = this;

              if (typeof target !== 'function' || toStr$1.call(target) !== funcType) {
                throw new TypeError(ERROR_MESSAGE + target);
              }

              var args = slice.call(arguments, 1);
              var bound;

              var binder = function binder() {
                if (this instanceof bound) {
                  var result = target.apply(this, args.concat(slice.call(arguments)));

                  if (Object(result) === result) {
                    return result;
                  }

                  return this;
                } else {
                  return target.apply(that, args.concat(slice.call(arguments)));
                }
              };

              var boundLength = Math.max(0, target.length - args.length);
              var boundArgs = [];

              for (var i = 0; i < boundLength; i++) {
                boundArgs.push('$' + i);
              }

              bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

              if (target.prototype) {
                var Empty = function Empty() {};

                Empty.prototype = target.prototype;
                bound.prototype = new Empty();
                Empty.prototype = null;
              }

              return bound;
            };

            var implementation = implementation$1;
            var functionBind = Function.prototype.bind || implementation;

            var bind$1 = functionBind;
            var src = bind$1.call(Function.call, Object.prototype.hasOwnProperty);

            /* globals
            	AggregateError,
            	Atomics,
            	FinalizationRegistry,
            	SharedArrayBuffer,
            	WeakRef,
            */


            var undefined$1;
            var $SyntaxError = SyntaxError;
            var $Function = Function;
            var $TypeError$1 = TypeError; // eslint-disable-next-line consistent-return

            var getEvalledConstructor = function getEvalledConstructor(expressionSyntax) {
              try {
                // eslint-disable-next-line no-new-func
                return Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
              } catch (e) {}
            };

            var $gOPD = Object.getOwnPropertyDescriptor;

            if ($gOPD) {
              try {
                $gOPD({}, '');
              } catch (e) {
                $gOPD = null; // this is IE 8, which has a broken gOPD
              }
            }

            var throwTypeError = function throwTypeError() {
              throw new $TypeError$1();
            };

            var ThrowTypeError = $gOPD ? function () {
              try {
                // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
                arguments.callee; // IE 8 does not throw here

                return throwTypeError;
              } catch (calleeThrows) {
                try {
                  // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
                  return $gOPD(arguments, 'callee').get;
                } catch (gOPDthrows) {
                  return throwTypeError;
                }
              }
            }() : throwTypeError;
            var hasSymbols = hasSymbols$1();

            var getProto = Object.getPrototypeOf || function (x) {
              return x.__proto__;
            }; // eslint-disable-line no-proto


            var asyncGenFunction = getEvalledConstructor('async function* () {}');
            var asyncGenFunctionPrototype = asyncGenFunction ? asyncGenFunction.prototype : undefined$1;
            var asyncGenPrototype = asyncGenFunctionPrototype ? asyncGenFunctionPrototype.prototype : undefined$1;
            var TypedArray = typeof Uint8Array === 'undefined' ? undefined$1 : getProto(Uint8Array);
            var INTRINSICS = {
              '%AggregateError%': typeof AggregateError === 'undefined' ? undefined$1 : AggregateError,
              '%Array%': Array,
              '%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer,
              '%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined$1,
              '%AsyncFromSyncIteratorPrototype%': undefined$1,
              '%AsyncFunction%': getEvalledConstructor('async function () {}'),
              '%AsyncGenerator%': asyncGenFunctionPrototype,
              '%AsyncGeneratorFunction%': asyncGenFunction,
              '%AsyncIteratorPrototype%': asyncGenPrototype ? getProto(asyncGenPrototype) : undefined$1,
              '%Atomics%': typeof Atomics === 'undefined' ? undefined$1 : Atomics,
              '%BigInt%': typeof BigInt === 'undefined' ? undefined$1 : BigInt,
              '%Boolean%': Boolean,
              '%DataView%': typeof DataView === 'undefined' ? undefined$1 : DataView,
              '%Date%': Date,
              '%decodeURI%': decodeURI,
              '%decodeURIComponent%': decodeURIComponent,
              '%encodeURI%': encodeURI,
              '%encodeURIComponent%': encodeURIComponent,
              '%Error%': Error,
              '%eval%': eval,
              // eslint-disable-line no-eval
              '%EvalError%': EvalError,
              '%Float32Array%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array,
              '%Float64Array%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array,
              '%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined$1 : FinalizationRegistry,
              '%Function%': $Function,
              '%GeneratorFunction%': getEvalledConstructor('function* () {}'),
              '%Int8Array%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array,
              '%Int16Array%': typeof Int16Array === 'undefined' ? undefined$1 : Int16Array,
              '%Int32Array%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array,
              '%isFinite%': isFinite,
              '%isNaN%': isNaN,
              '%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined$1,
              '%JSON%': (typeof JSON === "undefined" ? "undefined" : _typeof$1(JSON)) === 'object' ? JSON : undefined$1,
              '%Map%': typeof Map === 'undefined' ? undefined$1 : Map,
              '%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined$1 : getProto(new Map()[Symbol.iterator]()),
              '%Math%': Math,
              '%Number%': Number,
              '%Object%': Object,
              '%parseFloat%': parseFloat,
              '%parseInt%': parseInt,
              '%Promise%': typeof Promise === 'undefined' ? undefined$1 : Promise,
              '%Proxy%': typeof Proxy === 'undefined' ? undefined$1 : Proxy,
              '%RangeError%': RangeError,
              '%ReferenceError%': ReferenceError,
              '%Reflect%': typeof Reflect === 'undefined' ? undefined$1 : Reflect,
              '%RegExp%': RegExp,
              '%Set%': typeof Set === 'undefined' ? undefined$1 : Set,
              '%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined$1 : getProto(new Set()[Symbol.iterator]()),
              '%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer,
              '%String%': String,
              '%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined$1,
              '%Symbol%': hasSymbols ? Symbol : undefined$1,
              '%SyntaxError%': $SyntaxError,
              '%ThrowTypeError%': ThrowTypeError,
              '%TypedArray%': TypedArray,
              '%TypeError%': $TypeError$1,
              '%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array,
              '%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray,
              '%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array,
              '%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array,
              '%URIError%': URIError,
              '%WeakMap%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap,
              '%WeakRef%': typeof WeakRef === 'undefined' ? undefined$1 : WeakRef,
              '%WeakSet%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet
            };
            var LEGACY_ALIASES = {
              '%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
              '%ArrayPrototype%': ['Array', 'prototype'],
              '%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
              '%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
              '%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
              '%ArrayProto_values%': ['Array', 'prototype', 'values'],
              '%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
              '%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
              '%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
              '%BooleanPrototype%': ['Boolean', 'prototype'],
              '%DataViewPrototype%': ['DataView', 'prototype'],
              '%DatePrototype%': ['Date', 'prototype'],
              '%ErrorPrototype%': ['Error', 'prototype'],
              '%EvalErrorPrototype%': ['EvalError', 'prototype'],
              '%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
              '%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
              '%FunctionPrototype%': ['Function', 'prototype'],
              '%Generator%': ['GeneratorFunction', 'prototype'],
              '%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
              '%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
              '%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
              '%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
              '%JSONParse%': ['JSON', 'parse'],
              '%JSONStringify%': ['JSON', 'stringify'],
              '%MapPrototype%': ['Map', 'prototype'],
              '%NumberPrototype%': ['Number', 'prototype'],
              '%ObjectPrototype%': ['Object', 'prototype'],
              '%ObjProto_toString%': ['Object', 'prototype', 'toString'],
              '%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
              '%PromisePrototype%': ['Promise', 'prototype'],
              '%PromiseProto_then%': ['Promise', 'prototype', 'then'],
              '%Promise_all%': ['Promise', 'all'],
              '%Promise_reject%': ['Promise', 'reject'],
              '%Promise_resolve%': ['Promise', 'resolve'],
              '%RangeErrorPrototype%': ['RangeError', 'prototype'],
              '%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
              '%RegExpPrototype%': ['RegExp', 'prototype'],
              '%SetPrototype%': ['Set', 'prototype'],
              '%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
              '%StringPrototype%': ['String', 'prototype'],
              '%SymbolPrototype%': ['Symbol', 'prototype'],
              '%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
              '%TypedArrayPrototype%': ['TypedArray', 'prototype'],
              '%TypeErrorPrototype%': ['TypeError', 'prototype'],
              '%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
              '%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
              '%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
              '%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
              '%URIErrorPrototype%': ['URIError', 'prototype'],
              '%WeakMapPrototype%': ['WeakMap', 'prototype'],
              '%WeakSetPrototype%': ['WeakSet', 'prototype']
            };
            var bind = functionBind;
            var hasOwn$1 = src;
            var $concat = bind.call(Function.call, Array.prototype.concat);
            var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
            var $replace = bind.call(Function.call, String.prototype.replace);
            var $strSlice = bind.call(Function.call, String.prototype.slice);
            /* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */

            var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
            var reEscapeChar = /\\(\\)?/g;
            /** Used to match backslashes in property paths. */

            var stringToPath = function stringToPath(string) {
              var first = $strSlice(string, 0, 1);
              var last = $strSlice(string, -1);

              if (first === '%' && last !== '%') {
                throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
              } else if (last === '%' && first !== '%') {
                throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
              }

              var result = [];
              $replace(string, rePropName, function (match, number, quote, subString) {
                result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
              });
              return result;
            };
            /* end adaptation */


            var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
              var intrinsicName = name;
              var alias;

              if (hasOwn$1(LEGACY_ALIASES, intrinsicName)) {
                alias = LEGACY_ALIASES[intrinsicName];
                intrinsicName = '%' + alias[0] + '%';
              }

              if (hasOwn$1(INTRINSICS, intrinsicName)) {
                var value = INTRINSICS[intrinsicName];

                if (typeof value === 'undefined' && !allowMissing) {
                  throw new $TypeError$1('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
                }

                return {
                  alias: alias,
                  name: intrinsicName,
                  value: value
                };
              }

              throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
            };

            var getIntrinsic = function GetIntrinsic(name, allowMissing) {
              if (typeof name !== 'string' || name.length === 0) {
                throw new $TypeError$1('intrinsic name must be a non-empty string');
              }

              if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
                throw new $TypeError$1('"allowMissing" argument must be a boolean');
              }

              var parts = stringToPath(name);
              var intrinsicBaseName = parts.length > 0 ? parts[0] : '';
              var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
              var intrinsicRealName = intrinsic.name;
              var value = intrinsic.value;
              var skipFurtherCaching = false;
              var alias = intrinsic.alias;

              if (alias) {
                intrinsicBaseName = alias[0];
                $spliceApply(parts, $concat([0, 1], alias));
              }

              for (var i = 1, isOwn = true; i < parts.length; i += 1) {
                var part = parts[i];
                var first = $strSlice(part, 0, 1);
                var last = $strSlice(part, -1);

                if ((first === '"' || first === "'" || first === '`' || last === '"' || last === "'" || last === '`') && first !== last) {
                  throw new $SyntaxError('property names with quotes must have matching quotes');
                }

                if (part === 'constructor' || !isOwn) {
                  skipFurtherCaching = true;
                }

                intrinsicBaseName += '.' + part;
                intrinsicRealName = '%' + intrinsicBaseName + '%';

                if (hasOwn$1(INTRINSICS, intrinsicRealName)) {
                  value = INTRINSICS[intrinsicRealName];
                } else if (value != null) {
                  if (!(part in value)) {
                    if (!allowMissing) {
                      throw new $TypeError$1('base intrinsic for ' + name + ' exists, but the property is not available.');
                    }

                    return void undefined$1;
                  }

                  if ($gOPD && i + 1 >= parts.length) {
                    var desc = $gOPD(value, part);
                    isOwn = !!desc; // By convention, when a data property is converted to an accessor
                    // property to emulate a data property that does not suffer from
                    // the override mistake, that accessor's getter is marked with
                    // an `originalValue` property. Here, when we detect this, we
                    // uphold the illusion by pretending to see that original data
                    // property, i.e., returning the value rather than the getter
                    // itself.

                    if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
                      value = desc.get;
                    } else {
                      value = value[part];
                    }
                  } else {
                    isOwn = hasOwn$1(value, part);
                    value = value[part];
                  }

                  if (isOwn && !skipFurtherCaching) {
                    INTRINSICS[intrinsicRealName] = value;
                  }
                }
              }

              return value;
            };

            var callBind$1 = {exports: {}};

            (function (module) {

              var bind = functionBind;
              var GetIntrinsic = getIntrinsic;
              var $apply = GetIntrinsic('%Function.prototype.apply%');
              var $call = GetIntrinsic('%Function.prototype.call%');
              var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);
              var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);

              if ($defineProperty) {
                try {
                  $defineProperty({}, 'a', {
                    value: 1
                  });
                } catch (e) {
                  // IE 8 has a broken defineProperty
                  $defineProperty = null;
                }
              }

              module.exports = function callBind() {
                return $reflectApply(bind, $call, arguments);
              };

              var applyBind = function applyBind() {
                return $reflectApply(bind, $apply, arguments);
              };

              if ($defineProperty) {
                $defineProperty(module.exports, 'apply', {
                  value: applyBind
                });
              } else {
                module.exports.apply = applyBind;
              }
            })(callBind$1);

            var GetIntrinsic$1 = getIntrinsic;
            var callBind = callBind$1.exports;
            var $indexOf = callBind(GetIntrinsic$1('String.prototype.indexOf'));

            var callBound$1 = function callBoundIntrinsic(name, allowMissing) {
              var intrinsic = GetIntrinsic$1(name, !!allowMissing);

              if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
                return callBind(intrinsic);
              }

              return intrinsic;
            };

            var _nodeResolve_empty = {};

            var _nodeResolve_empty$1 = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        'default': _nodeResolve_empty
            });

            var require$$0 = /*@__PURE__*/getAugmentedNamespace(_nodeResolve_empty$1);

            var hasMap = typeof Map === 'function' && Map.prototype;
            var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
            var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
            var mapForEach = hasMap && Map.prototype.forEach;
            var hasSet = typeof Set === 'function' && Set.prototype;
            var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
            var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
            var setForEach = hasSet && Set.prototype.forEach;
            var hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;
            var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
            var hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;
            var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
            var booleanValueOf = Boolean.prototype.valueOf;
            var objectToString = Object.prototype.toString;
            var functionToString = Function.prototype.toString;
            var match = String.prototype.match;
            var bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;
            var gOPS = Object.getOwnPropertySymbols;
            var symToString = typeof Symbol === 'function' ? Symbol.prototype.toString : null;
            var isEnumerable = Object.prototype.propertyIsEnumerable;
            var inspectCustom = require$$0.custom;
            var inspectSymbol = inspectCustom && isSymbol(inspectCustom) ? inspectCustom : null;

            var objectInspect = function inspect_(obj, options, depth, seen) {
              var opts = options || {};

              if (has$3(opts, 'quoteStyle') && opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double') {
                throw new TypeError('option "quoteStyle" must be "single" or "double"');
              }

              if (has$3(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number' ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
                throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
              }

              var customInspect = has$3(opts, 'customInspect') ? opts.customInspect : true;

              if (typeof customInspect !== 'boolean') {
                throw new TypeError('option "customInspect", if provided, must be `true` or `false`');
              }

              if (has$3(opts, 'indent') && opts.indent !== null && opts.indent !== '\t' && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
                throw new TypeError('options "indent" must be "\\t", an integer > 0, or `null`');
              }

              if (typeof obj === 'undefined') {
                return 'undefined';
              }

              if (obj === null) {
                return 'null';
              }

              if (typeof obj === 'boolean') {
                return obj ? 'true' : 'false';
              }

              if (typeof obj === 'string') {
                return inspectString(obj, opts);
              }

              if (typeof obj === 'number') {
                if (obj === 0) {
                  return Infinity / obj > 0 ? '0' : '-0';
                }

                return String(obj);
              }

              if (typeof obj === 'bigint') {
                return String(obj) + 'n';
              }

              var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;

              if (typeof depth === 'undefined') {
                depth = 0;
              }

              if (depth >= maxDepth && maxDepth > 0 && _typeof$1(obj) === 'object') {
                return isArray$3(obj) ? '[Array]' : '[Object]';
              }

              var indent = getIndent(opts, depth);

              if (typeof seen === 'undefined') {
                seen = [];
              } else if (indexOf(seen, obj) >= 0) {
                return '[Circular]';
              }

              function inspect(value, from, noIndent) {
                if (from) {
                  seen = seen.slice();
                  seen.push(from);
                }

                if (noIndent) {
                  var newOpts = {
                    depth: opts.depth
                  };

                  if (has$3(opts, 'quoteStyle')) {
                    newOpts.quoteStyle = opts.quoteStyle;
                  }

                  return inspect_(value, newOpts, depth + 1, seen);
                }

                return inspect_(value, opts, depth + 1, seen);
              }

              if (typeof obj === 'function') {
                var name = nameOf(obj);
                var keys = arrObjKeys(obj, inspect);
                return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + keys.join(', ') + ' }' : '');
              }

              if (isSymbol(obj)) {
                var symString = symToString.call(obj);
                return _typeof$1(obj) === 'object' ? markBoxed(symString) : symString;
              }

              if (isElement(obj)) {
                var s = '<' + String(obj.nodeName).toLowerCase();
                var attrs = obj.attributes || [];

                for (var i = 0; i < attrs.length; i++) {
                  s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);
                }

                s += '>';

                if (obj.childNodes && obj.childNodes.length) {
                  s += '...';
                }

                s += '</' + String(obj.nodeName).toLowerCase() + '>';
                return s;
              }

              if (isArray$3(obj)) {
                if (obj.length === 0) {
                  return '[]';
                }

                var xs = arrObjKeys(obj, inspect);

                if (indent && !singleLineValues(xs)) {
                  return '[' + indentedJoin(xs, indent) + ']';
                }

                return '[ ' + xs.join(', ') + ' ]';
              }

              if (isError(obj)) {
                var parts = arrObjKeys(obj, inspect);

                if (parts.length === 0) {
                  return '[' + String(obj) + ']';
                }

                return '{ [' + String(obj) + '] ' + parts.join(', ') + ' }';
              }

              if (_typeof$1(obj) === 'object' && customInspect) {
                if (inspectSymbol && typeof obj[inspectSymbol] === 'function') {
                  return obj[inspectSymbol]();
                } else if (typeof obj.inspect === 'function') {
                  return obj.inspect();
                }
              }

              if (isMap(obj)) {
                var mapParts = [];
                mapForEach.call(obj, function (value, key) {
                  mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));
                });
                return collectionOf('Map', mapSize.call(obj), mapParts, indent);
              }

              if (isSet(obj)) {
                var setParts = [];
                setForEach.call(obj, function (value) {
                  setParts.push(inspect(value, obj));
                });
                return collectionOf('Set', setSize.call(obj), setParts, indent);
              }

              if (isWeakMap(obj)) {
                return weakCollectionOf('WeakMap');
              }

              if (isWeakSet(obj)) {
                return weakCollectionOf('WeakSet');
              }

              if (isNumber(obj)) {
                return markBoxed(inspect(Number(obj)));
              }

              if (isBigInt(obj)) {
                return markBoxed(inspect(bigIntValueOf.call(obj)));
              }

              if (isBoolean(obj)) {
                return markBoxed(booleanValueOf.call(obj));
              }

              if (isString(obj)) {
                return markBoxed(inspect(String(obj)));
              }

              if (!isDate(obj) && !isRegExp$1(obj)) {
                var ys = arrObjKeys(obj, inspect);

                if (ys.length === 0) {
                  return '{}';
                }

                if (indent) {
                  return '{' + indentedJoin(ys, indent) + '}';
                }

                return '{ ' + ys.join(', ') + ' }';
              }

              return String(obj);
            };

            function wrapQuotes(s, defaultStyle, opts) {
              var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '"' : "'";
              return quoteChar + s + quoteChar;
            }

            function quote(s) {
              return String(s).replace(/"/g, '&quot;');
            }

            function isArray$3(obj) {
              return toStr(obj) === '[object Array]';
            }

            function isDate(obj) {
              return toStr(obj) === '[object Date]';
            }

            function isRegExp$1(obj) {
              return toStr(obj) === '[object RegExp]';
            }

            function isError(obj) {
              return toStr(obj) === '[object Error]';
            }

            function isSymbol(obj) {
              return toStr(obj) === '[object Symbol]';
            }

            function isString(obj) {
              return toStr(obj) === '[object String]';
            }

            function isNumber(obj) {
              return toStr(obj) === '[object Number]';
            }

            function isBigInt(obj) {
              return toStr(obj) === '[object BigInt]';
            }

            function isBoolean(obj) {
              return toStr(obj) === '[object Boolean]';
            }

            var hasOwn = Object.prototype.hasOwnProperty || function (key) {
              return key in this;
            };

            function has$3(obj, key) {
              return hasOwn.call(obj, key);
            }

            function toStr(obj) {
              return objectToString.call(obj);
            }

            function nameOf(f) {
              if (f.name) {
                return f.name;
              }

              var m = match.call(functionToString.call(f), /^function\s*([\w$]+)/);

              if (m) {
                return m[1];
              }

              return null;
            }

            function indexOf(xs, x) {
              if (xs.indexOf) {
                return xs.indexOf(x);
              }

              for (var i = 0, l = xs.length; i < l; i++) {
                if (xs[i] === x) {
                  return i;
                }
              }

              return -1;
            }

            function isMap(x) {
              if (!mapSize || !x || _typeof$1(x) !== 'object') {
                return false;
              }

              try {
                mapSize.call(x);

                try {
                  setSize.call(x);
                } catch (s) {
                  return true;
                }

                return x instanceof Map; // core-js workaround, pre-v2.5.0
              } catch (e) {}

              return false;
            }

            function isWeakMap(x) {
              if (!weakMapHas || !x || _typeof$1(x) !== 'object') {
                return false;
              }

              try {
                weakMapHas.call(x, weakMapHas);

                try {
                  weakSetHas.call(x, weakSetHas);
                } catch (s) {
                  return true;
                }

                return x instanceof WeakMap; // core-js workaround, pre-v2.5.0
              } catch (e) {}

              return false;
            }

            function isSet(x) {
              if (!setSize || !x || _typeof$1(x) !== 'object') {
                return false;
              }

              try {
                setSize.call(x);

                try {
                  mapSize.call(x);
                } catch (m) {
                  return true;
                }

                return x instanceof Set; // core-js workaround, pre-v2.5.0
              } catch (e) {}

              return false;
            }

            function isWeakSet(x) {
              if (!weakSetHas || !x || _typeof$1(x) !== 'object') {
                return false;
              }

              try {
                weakSetHas.call(x, weakSetHas);

                try {
                  weakMapHas.call(x, weakMapHas);
                } catch (s) {
                  return true;
                }

                return x instanceof WeakSet; // core-js workaround, pre-v2.5.0
              } catch (e) {}

              return false;
            }

            function isElement(x) {
              if (!x || _typeof$1(x) !== 'object') {
                return false;
              }

              if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
                return true;
              }

              return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';
            }

            function inspectString(str, opts) {
              if (str.length > opts.maxStringLength) {
                var remaining = str.length - opts.maxStringLength;
                var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');
                return inspectString(str.slice(0, opts.maxStringLength), opts) + trailer;
              } // eslint-disable-next-line no-control-regex


              var s = str.replace(/(['\\])/g, '\\$1').replace(/[\x00-\x1f]/g, lowbyte);
              return wrapQuotes(s, 'single', opts);
            }

            function lowbyte(c) {
              var n = c.charCodeAt(0);
              var x = {
                8: 'b',
                9: 't',
                10: 'n',
                12: 'f',
                13: 'r'
              }[n];

              if (x) {
                return '\\' + x;
              }

              return '\\x' + (n < 0x10 ? '0' : '') + n.toString(16).toUpperCase();
            }

            function markBoxed(str) {
              return 'Object(' + str + ')';
            }

            function weakCollectionOf(type) {
              return type + ' { ? }';
            }

            function collectionOf(type, size, entries, indent) {
              var joinedEntries = indent ? indentedJoin(entries, indent) : entries.join(', ');
              return type + ' (' + size + ') {' + joinedEntries + '}';
            }

            function singleLineValues(xs) {
              for (var i = 0; i < xs.length; i++) {
                if (indexOf(xs[i], '\n') >= 0) {
                  return false;
                }
              }

              return true;
            }

            function getIndent(opts, depth) {
              var baseIndent;

              if (opts.indent === '\t') {
                baseIndent = '\t';
              } else if (typeof opts.indent === 'number' && opts.indent > 0) {
                baseIndent = Array(opts.indent + 1).join(' ');
              } else {
                return null;
              }

              return {
                base: baseIndent,
                prev: Array(depth + 1).join(baseIndent)
              };
            }

            function indentedJoin(xs, indent) {
              if (xs.length === 0) {
                return '';
              }

              var lineJoiner = '\n' + indent.prev + indent.base;
              return lineJoiner + xs.join(',' + lineJoiner) + '\n' + indent.prev;
            }

            function arrObjKeys(obj, inspect) {
              var isArr = isArray$3(obj);
              var xs = [];

              if (isArr) {
                xs.length = obj.length;

                for (var i = 0; i < obj.length; i++) {
                  xs[i] = has$3(obj, i) ? inspect(obj[i], obj) : '';
                }
              }

              for (var key in obj) {
                // eslint-disable-line no-restricted-syntax
                if (!has$3(obj, key)) {
                  continue;
                } // eslint-disable-line no-restricted-syntax, no-continue


                if (isArr && String(Number(key)) === key && key < obj.length) {
                  continue;
                } // eslint-disable-line no-restricted-syntax, no-continue


                if (/[^\w$]/.test(key)) {
                  xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));
                } else {
                  xs.push(key + ': ' + inspect(obj[key], obj));
                }
              }

              if (typeof gOPS === 'function') {
                var syms = gOPS(obj);

                for (var j = 0; j < syms.length; j++) {
                  if (isEnumerable.call(obj, syms[j])) {
                    xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));
                  }
                }
              }

              return xs;
            }

            var GetIntrinsic = getIntrinsic;
            var callBound = callBound$1;
            var inspect = objectInspect;
            var $TypeError = GetIntrinsic('%TypeError%');
            var $WeakMap = GetIntrinsic('%WeakMap%', true);
            var $Map = GetIntrinsic('%Map%', true);
            var $weakMapGet = callBound('WeakMap.prototype.get', true);
            var $weakMapSet = callBound('WeakMap.prototype.set', true);
            var $weakMapHas = callBound('WeakMap.prototype.has', true);
            var $mapGet = callBound('Map.prototype.get', true);
            var $mapSet = callBound('Map.prototype.set', true);
            var $mapHas = callBound('Map.prototype.has', true);
            /*
             * This function traverses the list returning the node corresponding to the
             * given key.
             *
             * That node is also moved to the head of the list, so that if it's accessed
             * again we don't need to traverse the whole list. By doing so, all the recently
             * used nodes can be accessed relatively quickly.
             */

            var listGetNode = function listGetNode(list, key) {
              // eslint-disable-line consistent-return
              for (var prev = list, curr; (curr = prev.next) !== null; prev = curr) {
                if (curr.key === key) {
                  prev.next = curr.next;
                  curr.next = list.next;
                  list.next = curr; // eslint-disable-line no-param-reassign

                  return curr;
                }
              }
            };

            var listGet = function listGet(objects, key) {
              var node = listGetNode(objects, key);
              return node && node.value;
            };

            var listSet = function listSet(objects, key, value) {
              var node = listGetNode(objects, key);

              if (node) {
                node.value = value;
              } else {
                // Prepend the new node to the beginning of the list
                objects.next = {
                  // eslint-disable-line no-param-reassign
                  key: key,
                  next: objects.next,
                  value: value
                };
              }
            };

            var listHas = function listHas(objects, key) {
              return !!listGetNode(objects, key);
            };

            var sideChannel = function getSideChannel() {
              var $wm;
              var $m;
              var $o;
              var channel = {
                assert: function assert(key) {
                  if (!channel.has(key)) {
                    throw new $TypeError('Side channel does not contain ' + inspect(key));
                  }
                },
                get: function get(key) {
                  // eslint-disable-line consistent-return
                  if ($WeakMap && key && (_typeof$1(key) === 'object' || typeof key === 'function')) {
                    if ($wm) {
                      return $weakMapGet($wm, key);
                    }
                  } else if ($Map) {
                    if ($m) {
                      return $mapGet($m, key);
                    }
                  } else {
                    if ($o) {
                      // eslint-disable-line no-lonely-if
                      return listGet($o, key);
                    }
                  }
                },
                has: function has(key) {
                  if ($WeakMap && key && (_typeof$1(key) === 'object' || typeof key === 'function')) {
                    if ($wm) {
                      return $weakMapHas($wm, key);
                    }
                  } else if ($Map) {
                    if ($m) {
                      return $mapHas($m, key);
                    }
                  } else {
                    if ($o) {
                      // eslint-disable-line no-lonely-if
                      return listHas($o, key);
                    }
                  }

                  return false;
                },
                set: function set(key, value) {
                  if ($WeakMap && key && (_typeof$1(key) === 'object' || typeof key === 'function')) {
                    if (!$wm) {
                      $wm = new $WeakMap();
                    }

                    $weakMapSet($wm, key, value);
                  } else if ($Map) {
                    if (!$m) {
                      $m = new $Map();
                    }

                    $mapSet($m, key, value);
                  } else {
                    if (!$o) {
                      /*
                       * Initialize the linked list as an empty node, so that we don't have
                       * to special-case handling of the first node: we can always refer to
                       * it as (previous node).next, instead of something like (list).head
                       */
                      $o = {
                        key: {},
                        next: null
                      };
                    }

                    listSet($o, key, value);
                  }
                }
              };
              return channel;
            };

            var replace = String.prototype.replace;
            var percentTwenties = /%20/g;
            var Format = {
              RFC1738: 'RFC1738',
              RFC3986: 'RFC3986'
            };
            var formats$3 = {
              'default': Format.RFC3986,
              formatters: {
                RFC1738: function RFC1738(value) {
                  return replace.call(value, percentTwenties, '+');
                },
                RFC3986: function RFC3986(value) {
                  return String(value);
                }
              },
              RFC1738: Format.RFC1738,
              RFC3986: Format.RFC3986
            };

            var formats$2 = formats$3;
            var has$2 = Object.prototype.hasOwnProperty;
            var isArray$2 = Array.isArray;

            var hexTable = function () {
              var array = [];

              for (var i = 0; i < 256; ++i) {
                array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
              }

              return array;
            }();

            var compactQueue = function compactQueue(queue) {
              while (queue.length > 1) {
                var item = queue.pop();
                var obj = item.obj[item.prop];

                if (isArray$2(obj)) {
                  var compacted = [];

                  for (var j = 0; j < obj.length; ++j) {
                    if (typeof obj[j] !== 'undefined') {
                      compacted.push(obj[j]);
                    }
                  }

                  item.obj[item.prop] = compacted;
                }
              }
            };

            var arrayToObject = function arrayToObject(source, options) {
              var obj = options && options.plainObjects ? Object.create(null) : {};

              for (var i = 0; i < source.length; ++i) {
                if (typeof source[i] !== 'undefined') {
                  obj[i] = source[i];
                }
              }

              return obj;
            };

            var merge = function merge(target, source, options) {
              /* eslint no-param-reassign: 0 */
              if (!source) {
                return target;
              }

              if (_typeof$1(source) !== 'object') {
                if (isArray$2(target)) {
                  target.push(source);
                } else if (target && _typeof$1(target) === 'object') {
                  if (options && (options.plainObjects || options.allowPrototypes) || !has$2.call(Object.prototype, source)) {
                    target[source] = true;
                  }
                } else {
                  return [target, source];
                }

                return target;
              }

              if (!target || _typeof$1(target) !== 'object') {
                return [target].concat(source);
              }

              var mergeTarget = target;

              if (isArray$2(target) && !isArray$2(source)) {
                mergeTarget = arrayToObject(target, options);
              }

              if (isArray$2(target) && isArray$2(source)) {
                source.forEach(function (item, i) {
                  if (has$2.call(target, i)) {
                    var targetItem = target[i];

                    if (targetItem && _typeof$1(targetItem) === 'object' && item && _typeof$1(item) === 'object') {
                      target[i] = merge(targetItem, item, options);
                    } else {
                      target.push(item);
                    }
                  } else {
                    target[i] = item;
                  }
                });
                return target;
              }

              return Object.keys(source).reduce(function (acc, key) {
                var value = source[key];

                if (has$2.call(acc, key)) {
                  acc[key] = merge(acc[key], value, options);
                } else {
                  acc[key] = value;
                }

                return acc;
              }, mergeTarget);
            };

            var assign = function assignSingleSource(target, source) {
              return Object.keys(source).reduce(function (acc, key) {
                acc[key] = source[key];
                return acc;
              }, target);
            };

            var decode = function decode(str, decoder, charset) {
              var strWithoutPlus = str.replace(/\+/g, ' ');

              if (charset === 'iso-8859-1') {
                // unescape never throws, no try...catch needed:
                return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
              } // utf-8


              try {
                return decodeURIComponent(strWithoutPlus);
              } catch (e) {
                return strWithoutPlus;
              }
            };

            var encode = function encode(str, defaultEncoder, charset, kind, format) {
              // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
              // It has been adapted here for stricter adherence to RFC 3986
              if (str.length === 0) {
                return str;
              }

              var string = str;

              if (_typeof$1(str) === 'symbol') {
                string = Symbol.prototype.toString.call(str);
              } else if (typeof str !== 'string') {
                string = String(str);
              }

              if (charset === 'iso-8859-1') {
                return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {
                  return '%26%23' + parseInt($0.slice(2), 16) + '%3B';
                });
              }

              var out = '';

              for (var i = 0; i < string.length; ++i) {
                var c = string.charCodeAt(i);

                if (c === 0x2D // -
                || c === 0x2E // .
                || c === 0x5F // _
                || c === 0x7E // ~
                || c >= 0x30 && c <= 0x39 // 0-9
                || c >= 0x41 && c <= 0x5A // a-z
                || c >= 0x61 && c <= 0x7A // A-Z
                || format === formats$2.RFC1738 && (c === 0x28 || c === 0x29) // ( )
                ) {
                  out += string.charAt(i);
                  continue;
                }

                if (c < 0x80) {
                  out = out + hexTable[c];
                  continue;
                }

                if (c < 0x800) {
                  out = out + (hexTable[0xC0 | c >> 6] + hexTable[0x80 | c & 0x3F]);
                  continue;
                }

                if (c < 0xD800 || c >= 0xE000) {
                  out = out + (hexTable[0xE0 | c >> 12] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F]);
                  continue;
                }

                i += 1;
                c = 0x10000 + ((c & 0x3FF) << 10 | string.charCodeAt(i) & 0x3FF);
                /* eslint operator-linebreak: [2, "before"] */

                out += hexTable[0xF0 | c >> 18] + hexTable[0x80 | c >> 12 & 0x3F] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F];
              }

              return out;
            };

            var compact = function compact(value) {
              var queue = [{
                obj: {
                  o: value
                },
                prop: 'o'
              }];
              var refs = [];

              for (var i = 0; i < queue.length; ++i) {
                var item = queue[i];
                var obj = item.obj[item.prop];
                var keys = Object.keys(obj);

                for (var j = 0; j < keys.length; ++j) {
                  var key = keys[j];
                  var val = obj[key];

                  if (_typeof$1(val) === 'object' && val !== null && refs.indexOf(val) === -1) {
                    queue.push({
                      obj: obj,
                      prop: key
                    });
                    refs.push(val);
                  }
                }
              }

              compactQueue(queue);
              return value;
            };

            var isRegExp = function isRegExp(obj) {
              return Object.prototype.toString.call(obj) === '[object RegExp]';
            };

            var isBuffer = function isBuffer(obj) {
              if (!obj || _typeof$1(obj) !== 'object') {
                return false;
              }

              return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
            };

            var combine = function combine(a, b) {
              return [].concat(a, b);
            };

            var maybeMap = function maybeMap(val, fn) {
              if (isArray$2(val)) {
                var mapped = [];

                for (var i = 0; i < val.length; i += 1) {
                  mapped.push(fn(val[i]));
                }

                return mapped;
              }

              return fn(val);
            };

            var utils$2 = {
              arrayToObject: arrayToObject,
              assign: assign,
              combine: combine,
              compact: compact,
              decode: decode,
              encode: encode,
              isBuffer: isBuffer,
              isRegExp: isRegExp,
              maybeMap: maybeMap,
              merge: merge
            };

            var getSideChannel = sideChannel;
            var utils$1 = utils$2;
            var formats$1 = formats$3;
            var has$1 = Object.prototype.hasOwnProperty;
            var arrayPrefixGenerators = {
              brackets: function brackets(prefix) {
                return prefix + '[]';
              },
              comma: 'comma',
              indices: function indices(prefix, key) {
                return prefix + '[' + key + ']';
              },
              repeat: function repeat(prefix) {
                return prefix;
              }
            };
            var isArray$1 = Array.isArray;
            var split = String.prototype.split;
            var push = Array.prototype.push;

            var pushToArray = function pushToArray(arr, valueOrArray) {
              push.apply(arr, isArray$1(valueOrArray) ? valueOrArray : [valueOrArray]);
            };

            var toISO = Date.prototype.toISOString;
            var defaultFormat = formats$1['default'];
            var defaults$1 = {
              addQueryPrefix: false,
              allowDots: false,
              charset: 'utf-8',
              charsetSentinel: false,
              delimiter: '&',
              encode: true,
              encoder: utils$1.encode,
              encodeValuesOnly: false,
              format: defaultFormat,
              formatter: formats$1.formatters[defaultFormat],
              // deprecated
              indices: false,
              serializeDate: function serializeDate(date) {
                return toISO.call(date);
              },
              skipNulls: false,
              strictNullHandling: false
            };

            var isNonNullishPrimitive = function isNonNullishPrimitive(v) {
              return typeof v === 'string' || typeof v === 'number' || typeof v === 'boolean' || _typeof$1(v) === 'symbol' || typeof v === 'bigint';
            };

            var sentinel = {};

            var stringify$1 = function stringify(object, prefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {
              var obj = object;
              var tmpSc = sideChannel;
              var step = 0;
              var findFlag = false;

              while ((tmpSc = tmpSc.get(sentinel)) !== undefined && !findFlag) {
                // Where object last appeared in the ref tree
                var pos = tmpSc.get(object);
                step += 1;

                if (typeof pos !== 'undefined') {
                  if (pos === step) {
                    throw new RangeError('Cyclic object value');
                  } else {
                    findFlag = true; // Break while
                  }
                }

                if (typeof tmpSc.get(sentinel) === 'undefined') {
                  step = 0;
                }
              }

              if (typeof filter === 'function') {
                obj = filter(prefix, obj);
              } else if (obj instanceof Date) {
                obj = serializeDate(obj);
              } else if (generateArrayPrefix === 'comma' && isArray$1(obj)) {
                obj = utils$1.maybeMap(obj, function (value) {
                  if (value instanceof Date) {
                    return serializeDate(value);
                  }

                  return value;
                });
              }

              if (obj === null) {
                if (strictNullHandling) {
                  return encoder && !encodeValuesOnly ? encoder(prefix, defaults$1.encoder, charset, 'key', format) : prefix;
                }

                obj = '';
              }

              if (isNonNullishPrimitive(obj) || utils$1.isBuffer(obj)) {
                if (encoder) {
                  var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults$1.encoder, charset, 'key', format);

                  if (generateArrayPrefix === 'comma' && encodeValuesOnly) {
                    var valuesArray = split.call(String(obj), ',');
                    var valuesJoined = '';

                    for (var i = 0; i < valuesArray.length; ++i) {
                      valuesJoined += (i === 0 ? '' : ',') + formatter(encoder(valuesArray[i], defaults$1.encoder, charset, 'value', format));
                    }

                    return [formatter(keyValue) + '=' + valuesJoined];
                  }

                  return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults$1.encoder, charset, 'value', format))];
                }

                return [formatter(prefix) + '=' + formatter(String(obj))];
              }

              var values = [];

              if (typeof obj === 'undefined') {
                return values;
              }

              var objKeys;

              if (generateArrayPrefix === 'comma' && isArray$1(obj)) {
                // we need to join elements in
                objKeys = [{
                  value: obj.length > 0 ? obj.join(',') || null : undefined
                }];
              } else if (isArray$1(filter)) {
                objKeys = filter;
              } else {
                var keys = Object.keys(obj);
                objKeys = sort ? keys.sort(sort) : keys;
              }

              for (var j = 0; j < objKeys.length; ++j) {
                var key = objKeys[j];
                var value = _typeof$1(key) === 'object' && key.value !== undefined ? key.value : obj[key];

                if (skipNulls && value === null) {
                  continue;
                }

                var keyPrefix = isArray$1(obj) ? typeof generateArrayPrefix === 'function' ? generateArrayPrefix(prefix, key) : prefix : prefix + (allowDots ? '.' + key : '[' + key + ']');
                sideChannel.set(object, step);
                var valueSideChannel = getSideChannel();
                valueSideChannel.set(sentinel, sideChannel);
                pushToArray(values, stringify(value, keyPrefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, valueSideChannel));
              }

              return values;
            };

            var normalizeStringifyOptions = function normalizeStringifyOptions(opts) {
              if (!opts) {
                return defaults$1;
              }

              if (opts.encoder !== null && opts.encoder !== undefined && typeof opts.encoder !== 'function') {
                throw new TypeError('Encoder has to be a function.');
              }

              var charset = opts.charset || defaults$1.charset;

              if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
                throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
              }

              var format = formats$1['default'];

              if (typeof opts.format !== 'undefined') {
                if (!has$1.call(formats$1.formatters, opts.format)) {
                  throw new TypeError('Unknown format option provided.');
                }

                format = opts.format;
              }

              var formatter = formats$1.formatters[format];
              var filter = defaults$1.filter;

              if (typeof opts.filter === 'function' || isArray$1(opts.filter)) {
                filter = opts.filter;
              }

              return {
                addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults$1.addQueryPrefix,
                allowDots: typeof opts.allowDots === 'undefined' ? defaults$1.allowDots : !!opts.allowDots,
                charset: charset,
                charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults$1.charsetSentinel,
                delimiter: typeof opts.delimiter === 'undefined' ? defaults$1.delimiter : opts.delimiter,
                encode: typeof opts.encode === 'boolean' ? opts.encode : defaults$1.encode,
                encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults$1.encoder,
                encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults$1.encodeValuesOnly,
                filter: filter,
                format: format,
                formatter: formatter,
                serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults$1.serializeDate,
                skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults$1.skipNulls,
                sort: typeof opts.sort === 'function' ? opts.sort : null,
                strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults$1.strictNullHandling
              };
            };

            var stringify_1 = function stringify_1(object, opts) {
              var obj = object;
              var options = normalizeStringifyOptions(opts);
              var objKeys;
              var filter;

              if (typeof options.filter === 'function') {
                filter = options.filter;
                obj = filter('', obj);
              } else if (isArray$1(options.filter)) {
                filter = options.filter;
                objKeys = filter;
              }

              var keys = [];

              if (_typeof$1(obj) !== 'object' || obj === null) {
                return '';
              }

              var arrayFormat;

              if (opts && opts.arrayFormat in arrayPrefixGenerators) {
                arrayFormat = opts.arrayFormat;
              } else if (opts && 'indices' in opts) {
                arrayFormat = opts.indices ? 'indices' : 'repeat';
              } else {
                arrayFormat = 'indices';
              }

              var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];

              if (!objKeys) {
                objKeys = Object.keys(obj);
              }

              if (options.sort) {
                objKeys.sort(options.sort);
              }

              var sideChannel = getSideChannel();

              for (var i = 0; i < objKeys.length; ++i) {
                var key = objKeys[i];

                if (options.skipNulls && obj[key] === null) {
                  continue;
                }

                pushToArray(keys, stringify$1(obj[key], key, generateArrayPrefix, options.strictNullHandling, options.skipNulls, options.encode ? options.encoder : null, options.filter, options.sort, options.allowDots, options.serializeDate, options.format, options.formatter, options.encodeValuesOnly, options.charset, sideChannel));
              }

              var joined = keys.join(options.delimiter);
              var prefix = options.addQueryPrefix === true ? '?' : '';

              if (options.charsetSentinel) {
                if (options.charset === 'iso-8859-1') {
                  // encodeURIComponent('&#10003;'), the "numeric entity" representation of a checkmark
                  prefix += 'utf8=%26%2310003%3B&';
                } else {
                  // encodeURIComponent('✓')
                  prefix += 'utf8=%E2%9C%93&';
                }
              }

              return joined.length > 0 ? prefix + joined : '';
            };

            var utils = utils$2;
            var has = Object.prototype.hasOwnProperty;
            var isArray = Array.isArray;
            var defaults = {
              allowDots: false,
              allowPrototypes: false,
              allowSparse: false,
              arrayLimit: 20,
              charset: 'utf-8',
              charsetSentinel: false,
              comma: false,
              decoder: utils.decode,
              delimiter: '&',
              depth: 5,
              ignoreQueryPrefix: false,
              interpretNumericEntities: false,
              parameterLimit: 1000,
              parseArrays: true,
              plainObjects: false,
              strictNullHandling: false
            };

            var interpretNumericEntities = function interpretNumericEntities(str) {
              return str.replace(/&#(\d+);/g, function ($0, numberStr) {
                return String.fromCharCode(parseInt(numberStr, 10));
              });
            };

            var parseArrayValue = function parseArrayValue(val, options) {
              if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {
                return val.split(',');
              }

              return val;
            }; // This is what browsers will submit when the ✓ character occurs in an
            // application/x-www-form-urlencoded body and the encoding of the page containing
            // the form is iso-8859-1, or when the submitted form has an accept-charset
            // attribute of iso-8859-1. Presumably also with other charsets that do not contain
            // the ✓ character, such as us-ascii.


            var isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')
            // These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.

            var charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')

            var parseValues = function parseQueryStringValues(str, options) {
              var obj = {};
              var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
              var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
              var parts = cleanStr.split(options.delimiter, limit);
              var skipIndex = -1; // Keep track of where the utf8 sentinel was found

              var i;
              var charset = options.charset;

              if (options.charsetSentinel) {
                for (i = 0; i < parts.length; ++i) {
                  if (parts[i].indexOf('utf8=') === 0) {
                    if (parts[i] === charsetSentinel) {
                      charset = 'utf-8';
                    } else if (parts[i] === isoSentinel) {
                      charset = 'iso-8859-1';
                    }

                    skipIndex = i;
                    i = parts.length; // The eslint settings do not allow break;
                  }
                }
              }

              for (i = 0; i < parts.length; ++i) {
                if (i === skipIndex) {
                  continue;
                }

                var part = parts[i];
                var bracketEqualsPos = part.indexOf(']=');
                var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;
                var key, val;

                if (pos === -1) {
                  key = options.decoder(part, defaults.decoder, charset, 'key');
                  val = options.strictNullHandling ? null : '';
                } else {
                  key = options.decoder(part.slice(0, pos), defaults.decoder, charset, 'key');
                  val = utils.maybeMap(parseArrayValue(part.slice(pos + 1), options), function (encodedVal) {
                    return options.decoder(encodedVal, defaults.decoder, charset, 'value');
                  });
                }

                if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {
                  val = interpretNumericEntities(val);
                }

                if (part.indexOf('[]=') > -1) {
                  val = isArray(val) ? [val] : val;
                }

                if (has.call(obj, key)) {
                  obj[key] = utils.combine(obj[key], val);
                } else {
                  obj[key] = val;
                }
              }

              return obj;
            };

            var parseObject = function parseObject(chain, val, options, valuesParsed) {
              var leaf = valuesParsed ? val : parseArrayValue(val, options);

              for (var i = chain.length - 1; i >= 0; --i) {
                var obj;
                var root = chain[i];

                if (root === '[]' && options.parseArrays) {
                  obj = [].concat(leaf);
                } else {
                  obj = options.plainObjects ? Object.create(null) : {};
                  var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
                  var index = parseInt(cleanRoot, 10);

                  if (!options.parseArrays && cleanRoot === '') {
                    obj = {
                      0: leaf
                    };
                  } else if (!isNaN(index) && root !== cleanRoot && String(index) === cleanRoot && index >= 0 && options.parseArrays && index <= options.arrayLimit) {
                    obj = [];
                    obj[index] = leaf;
                  } else {
                    obj[cleanRoot] = leaf;
                  }
                }

                leaf = obj;
              }

              return leaf;
            };

            var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
              if (!givenKey) {
                return;
              } // Transform dot notation to bracket notation


              var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, '[$1]') : givenKey; // The regex chunks

              var brackets = /(\[[^[\]]*])/;
              var child = /(\[[^[\]]*])/g; // Get the parent

              var segment = options.depth > 0 && brackets.exec(key);
              var parent = segment ? key.slice(0, segment.index) : key; // Stash the parent if it exists

              var keys = [];

              if (parent) {
                // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties
                if (!options.plainObjects && has.call(Object.prototype, parent)) {
                  if (!options.allowPrototypes) {
                    return;
                  }
                }

                keys.push(parent);
              } // Loop through children appending to the array until we hit depth


              var i = 0;

              while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {
                i += 1;

                if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
                  if (!options.allowPrototypes) {
                    return;
                  }
                }

                keys.push(segment[1]);
              } // If there's a remainder, just add whatever is left


              if (segment) {
                keys.push('[' + key.slice(segment.index) + ']');
              }

              return parseObject(keys, val, options, valuesParsed);
            };

            var normalizeParseOptions = function normalizeParseOptions(opts) {
              if (!opts) {
                return defaults;
              }

              if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== 'function') {
                throw new TypeError('Decoder has to be a function.');
              }

              if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
                throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
              }

              var charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;
              return {
                allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,
                allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,
                allowSparse: typeof opts.allowSparse === 'boolean' ? opts.allowSparse : defaults.allowSparse,
                arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,
                charset: charset,
                charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
                comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,
                decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,
                delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
                // eslint-disable-next-line no-implicit-coercion, no-extra-parens
                depth: typeof opts.depth === 'number' || opts.depth === false ? +opts.depth : defaults.depth,
                ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
                interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
                parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,
                parseArrays: opts.parseArrays !== false,
                plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,
                strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
              };
            };

            var parse$1 = function parse(str, opts) {
              var options = normalizeParseOptions(opts);

              if (str === '' || str === null || typeof str === 'undefined') {
                return options.plainObjects ? Object.create(null) : {};
              }

              var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
              var obj = options.plainObjects ? Object.create(null) : {}; // Iterate over the keys and setup the new object

              var keys = Object.keys(tempObj);

              for (var i = 0; i < keys.length; ++i) {
                var key = keys[i];
                var newObj = parseKeys(key, tempObj[key], options, typeof str === 'string');
                obj = utils.merge(obj, newObj, options);
              }

              if (options.allowSparse === true) {
                return obj;
              }

              return utils.compact(obj);
            };

            var stringify = stringify_1;
            var parse = parse$1;
            var formats = formats$3;
            var lib = {
              formats: formats,
              parse: parse,
              stringify: stringify
            };

            function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

            function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
            /**
             * @typedef {Object} EstimateSellResult
             * @property {number|string} will_get - amount of coinToBuy
             * @property {number|string} commission - amount of coinToSell to pay fee
             * @property {"pool"|"bancor"} [swap_from]
             */

            /**
             * @param {MinterApiInstance} apiInstance
             * @return {function({coinToSell: string, valueToSell: (string|number), coinToBuy: string, swapFrom?: ESTIMATE_SWAP_TYPE, route?: Array<string|number>, gasCoin?: (string|number), coinCommission?: (string|number)}, axiosOptions: AxiosRequestConfig=): Promise<EstimateSellResult>}
             */

            function EstimateCoinSell(apiInstance) {
              return estimateCoinSell;
              /**
               * @param {Object} params
               * @param {string|number} params.coinToSell - ID or symbol of the coin to sell
               * @param {string|number} params.valueToSell
               * @param {string|number} params.coinToBuy - ID or symbol of the coin to buy
               * @param {ESTIMATE_SWAP_TYPE} [params.swapFrom] - estimate pool swap
               * @param {Array<string|number>} [params.route] - IDs of intermediate coins for pool swaps
               * @param {string|number} [params.gasCoin]
               * @param {string|number} [params.coinCommission] - gasCoin alias
               * @param {import('axios').AxiosRequestConfig} [axiosOptions]
               * @return {Promise<EstimateSellResult>}
               */

              function estimateCoinSell(params, axiosOptions) {
                if (params.coinIdToSell || params.coinIdToSell === 0) {
                  params.coinToSell = params.coinIdToSell; // eslint-disable-next-line no-console

                  console.warn('coinIdToSell is deprecated, use coinToSell instead');
                }

                if (params.coinIdToBuy || params.coinIdToBuy === 0) {
                  params.coinToBuy = params.coinIdToBuy; // eslint-disable-next-line no-console

                  console.warn('coinIdToSell is deprecated, use coinToSell instead');
                }

                if (!params.coinToBuy && params.coinToBuy !== 0) {
                  return Promise.reject(new Error('Coin to buy not specified'));
                }

                if (!params.valueToSell) {
                  return Promise.reject(new Error('Value to sell not specified'));
                }

                if (!params.coinToSell && params.coinToSell !== 0) {
                  return Promise.reject(new Error('Coin to sell not specified'));
                }

                var gasCoin = params.gasCoin || params.gasCoin === 0 ? params.gasCoin : params.coinCommission;
                params = {
                  coin_id_to_sell: isCoinId(params.coinToSell) ? params.coinToSell : undefined,
                  coin_to_sell: !isCoinId(params.coinToSell) ? params.coinToSell : undefined,
                  value_to_sell: convertToPip(params.valueToSell),
                  coin_id_to_buy: isCoinId(params.coinToBuy) ? params.coinToBuy : undefined,
                  coin_to_buy: !isCoinId(params.coinToBuy) ? params.coinToBuy : undefined,
                  swap_from: params.swapFrom,
                  route: params.route,
                  coin_id_commission: isCoinId(gasCoin) ? gasCoin : undefined,
                  coin_commission: !isCoinId(gasCoin) ? gasCoin : undefined
                };
                return apiInstance.get('estimate_coin_sell', _objectSpread$3(_objectSpread$3({}, axiosOptions), {}, {
                  params: params,
                  paramsSerializer: function paramsSerializer(query) {
                    return lib.stringify(query, {
                      arrayFormat: 'repeat'
                    });
                  }
                })).then(function (response) {
                  var resData = response.data;

                  if (!isValidNumber(resData.will_get)) {
                    throw new Error('Invalid estimation data, `will_get` not specified');
                  }

                  if (!isValidNumber(resData.commission)) {
                    throw new Error('Invalid estimation data, `commission` not specified');
                  }

                  return _objectSpread$3(_objectSpread$3({}, resData), {}, {
                    // receive pips from node and convert them
                    will_get: convertFromPip(resData.will_get),
                    commission: convertFromPip(resData.commission)
                  });
                });
              }
            }

            function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

            function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
            /**
             * @typedef {Object} EstimateSellAllResult
             * @property {number|string} will_get - amount of coinToBuy
             * @property {"pool"|"bancor"} [swap_from]
             */

            /**
             * @param {MinterApiInstance} apiInstance
             * @return {function({coinToSell: string, valueToSell: (string|number), coinToBuy: string, swapFrom?: ESTIMATE_SWAP_TYPE, route?: Array<string|number>, gasPrice: (string|number)}, axiosOptions: AxiosRequestConfig=): Promise<EstimateSellAllResult>}
             */

            function EstimateCoinSellAll(apiInstance) {
              return estimateCoinSellAll;
              /**
               * @param {Object} params
               * @param {string|number} params.coinToSell - ID or symbol of the coin to sell
               * @param {string|number} params.valueToSell
               * @param {string|number} params.coinToBuy - ID or symbol of the coin to buy
               * @param {ESTIMATE_SWAP_TYPE} [params.swapFrom] - estimate pool swap
               * @param {Array<string|number>} [params.route] - IDs of intermediate coins for pool swaps
               * @param {string|number} [params.gasPrice]
               * @param {import('axios').AxiosRequestConfig} [axiosOptions]
               * @return {Promise<EstimateSellAllResult>}
               */

              function estimateCoinSellAll(params, axiosOptions) {
                if (params.coinIdToSell || params.coinIdToSell === 0) {
                  params.coinToSell = params.coinIdToSell; // eslint-disable-next-line no-console

                  console.warn('coinIdToSell is deprecated, use coinToSell instead');
                }

                if (params.coinIdToBuy || params.coinIdToBuy === 0) {
                  params.coinToBuy = params.coinIdToBuy; // eslint-disable-next-line no-console

                  console.warn('coinIdToSell is deprecated, use coinToSell instead');
                }

                if (!params.coinToBuy && params.coinToBuy !== 0) {
                  return Promise.reject(new Error('Coin to buy not specified'));
                }

                if (!params.valueToSell) {
                  return Promise.reject(new Error('Value to sell not specified'));
                }

                if (!params.coinToSell && params.coinToSell !== 0) {
                  return Promise.reject(new Error('Coin to sell not specified'));
                }

                params = {
                  coin_id_to_sell: isCoinId(params.coinToSell) ? params.coinToSell : undefined,
                  coin_to_sell: !isCoinId(params.coinToSell) ? params.coinToSell : undefined,
                  value_to_sell: convertToPip(params.valueToSell),
                  coin_id_to_buy: isCoinId(params.coinToBuy) ? params.coinToBuy : undefined,
                  coin_to_buy: !isCoinId(params.coinToBuy) ? params.coinToBuy : undefined,
                  swap_from: params.swapFrom,
                  route: params.route,
                  gas_price: params.gasPrice
                };
                return apiInstance.get('estimate_coin_sell_all', _objectSpread$2(_objectSpread$2({}, axiosOptions), {}, {
                  params: params,
                  paramsSerializer: function paramsSerializer(query) {
                    return lib.stringify(query, {
                      arrayFormat: 'repeat'
                    });
                  }
                })).then(function (response) {
                  var resData = response.data;

                  if (!isValidNumber(resData.will_get)) {
                    throw new Error('Invalid estimation data, `will_get` not specified');
                  }

                  return _objectSpread$2(_objectSpread$2({}, resData), {}, {
                    // receive pips from node and convert them
                    will_get: convertFromPip(resData.will_get)
                  });
                });
              }
            }

            function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

            function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
            /**
             * @typedef {Object} EstimateBuyResult
             * @property {number|string} will_pay - amount of coinToSell
             * @property {number|string} commission - amount of coinToSell to pay fee
             * @property {"pool"|"bancor"} swap_from
             */

            /**
             * @param {MinterApiInstance} apiInstance
             * @return {function({coinToBuy: (string|number), valueToBuy: (string|number), coinToSell: (string|number), swapFrom?: ESTIMATE_SWAP_TYPE, route?: Array<number>, gasCoin?: (string|number), coinCommission?: (string|number)}, axiosOptions: AxiosRequestConfig=): Promise<EstimateBuyResult>}
             */

            function EstimateCoinBuy(apiInstance) {
              return estimateCoinBuy;
              /**
               * @param {Object} params
               * @param {string|number} params.coinToBuy - ID or symbol of the coin to buy
               * @param {string|number} params.valueToBuy
               * @param {string|number} params.coinToSell - ID or symbol of the coin to sell
               * @param {ESTIMATE_SWAP_TYPE} [params.swapFrom] - estimate from pool, bancor or optimal
               * @param {Array<string|number>} [params.route] - IDs of intermediate coins for pool swaps
               * @param {string|number} [params.gasCoin]
               * @param {string|number} [params.coinCommission] - gasCoin alias
               * @param {import('axios').AxiosRequestConfig} [axiosOptions]
               * @return {Promise<EstimateBuyResult>}
               */

              function estimateCoinBuy(params, axiosOptions) {
                if (params.coinIdToSell || params.coinIdToSell === 0) {
                  params.coinToSell = params.coinIdToSell; // eslint-disable-next-line no-console

                  console.warn('coinIdToSell is deprecated, use coinToSell instead');
                }

                if (params.coinIdToBuy || params.coinIdToBuy === 0) {
                  params.coinToBuy = params.coinIdToBuy; // eslint-disable-next-line no-console

                  console.warn('coinIdToSell is deprecated, use coinToSell instead');
                }

                if (!params.coinToBuy && params.coinToBuy !== 0) {
                  return Promise.reject(new Error('Coin to buy not specified'));
                }

                if (!params.valueToBuy) {
                  return Promise.reject(new Error('Value to buy not specified'));
                }

                if (!params.coinToSell && params.coinToSell !== 0) {
                  return Promise.reject(new Error('Coin to sell not specified'));
                }

                var gasCoin = params.gasCoin || params.gasCoin === 0 ? params.gasCoin : params.coinCommission;
                params = {
                  coin_id_to_buy: isCoinId(params.coinToBuy) ? params.coinToBuy : undefined,
                  coin_to_buy: !isCoinId(params.coinToBuy) ? params.coinToBuy : undefined,
                  value_to_buy: convertToPip(params.valueToBuy),
                  coin_id_to_sell: isCoinId(params.coinToSell) ? params.coinToSell : undefined,
                  coin_to_sell: !isCoinId(params.coinToSell) ? params.coinToSell : undefined,
                  swap_from: params.swapFrom,
                  route: params.route,
                  coin_id_commission: isCoinId(gasCoin) ? gasCoin : undefined,
                  coin_commission: !isCoinId(gasCoin) ? gasCoin : undefined
                };
                return apiInstance.get('estimate_coin_buy', _objectSpread$1(_objectSpread$1({}, axiosOptions), {}, {
                  params: params,
                  paramsSerializer: function paramsSerializer(query) {
                    return lib.stringify(query, {
                      arrayFormat: 'repeat'
                    });
                  }
                })).then(function (response) {
                  var resData = response.data;

                  if (!isValidNumber(resData.will_pay)) {
                    throw new Error('Invalid estimation data, `will_pay` not specified');
                  }

                  if (!isValidNumber(resData.commission)) {
                    throw new Error('Invalid estimation data, `commission` not specified');
                  }

                  return _objectSpread$1(_objectSpread$1({}, resData), {}, {
                    // convert pips
                    will_pay: convertFromPip(resData.will_pay),
                    commission: convertFromPip(resData.commission)
                  });
                });
              }
            }

            function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
              try {
                var info = gen[key](arg);
                var value = info.value;
              } catch (error) {
                reject(error);
                return;
              }

              if (info.done) {
                resolve(value);
              } else {
                Promise.resolve(value).then(_next, _throw);
              }
            }

            function _asyncToGenerator(fn) {
              return function () {
                var self = this,
                    args = arguments;
                return new Promise(function (resolve, reject) {
                  var gen = fn.apply(self, args);

                  function _next(value) {
                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                  }

                  function _throw(err) {
                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                  }

                  _next(undefined);
                });
              };
            }

            var runtime = {exports: {}};

            (function (module) {
              var runtime = function (exports) {

                var Op = Object.prototype;
                var hasOwn = Op.hasOwnProperty;
                var undefined$1; // More compressible than void 0.

                var $Symbol = typeof Symbol === "function" ? Symbol : {};
                var iteratorSymbol = $Symbol.iterator || "@@iterator";
                var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
                var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

                function define(obj, key, value) {
                  Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: true,
                    configurable: true,
                    writable: true
                  });
                  return obj[key];
                }

                try {
                  // IE 8 has a broken Object.defineProperty that only works on DOM objects.
                  define({}, "");
                } catch (err) {
                  define = function define(obj, key, value) {
                    return obj[key] = value;
                  };
                }

                function wrap(innerFn, outerFn, self, tryLocsList) {
                  // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
                  var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
                  var generator = Object.create(protoGenerator.prototype);
                  var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
                  // .throw, and .return methods.

                  generator._invoke = makeInvokeMethod(innerFn, self, context);
                  return generator;
                }

                exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
                // record like context.tryEntries[i].completion. This interface could
                // have been (and was previously) designed to take a closure to be
                // invoked without arguments, but in all the cases we care about we
                // already have an existing method we want to call, so there's no need
                // to create a new function object. We can even get away with assuming
                // the method takes exactly one argument, since that happens to be true
                // in every case, so we don't have to touch the arguments object. The
                // only additional allocation required is the completion record, which
                // has a stable shape and so hopefully should be cheap to allocate.

                function tryCatch(fn, obj, arg) {
                  try {
                    return {
                      type: "normal",
                      arg: fn.call(obj, arg)
                    };
                  } catch (err) {
                    return {
                      type: "throw",
                      arg: err
                    };
                  }
                }

                var GenStateSuspendedStart = "suspendedStart";
                var GenStateSuspendedYield = "suspendedYield";
                var GenStateExecuting = "executing";
                var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
                // breaking out of the dispatch switch statement.

                var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
                // .constructor.prototype properties for functions that return Generator
                // objects. For full spec compliance, you may wish to configure your
                // minifier not to mangle the names of these two functions.

                function Generator() {}

                function GeneratorFunction() {}

                function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
                // don't natively support it.


                var IteratorPrototype = {};
                define(IteratorPrototype, iteratorSymbol, function () {
                  return this;
                });
                var getProto = Object.getPrototypeOf;
                var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

                if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
                  // This environment has a native %IteratorPrototype%; use it instead
                  // of the polyfill.
                  IteratorPrototype = NativeIteratorPrototype;
                }

                var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
                GeneratorFunction.prototype = GeneratorFunctionPrototype;
                define(Gp, "constructor", GeneratorFunctionPrototype);
                define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
                GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
                // Iterator interface in terms of a single ._invoke method.

                function defineIteratorMethods(prototype) {
                  ["next", "throw", "return"].forEach(function (method) {
                    define(prototype, method, function (arg) {
                      return this._invoke(method, arg);
                    });
                  });
                }

                exports.isGeneratorFunction = function (genFun) {
                  var ctor = typeof genFun === "function" && genFun.constructor;
                  return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
                  // do is to check its .name property.
                  (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
                };

                exports.mark = function (genFun) {
                  if (Object.setPrototypeOf) {
                    Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
                  } else {
                    genFun.__proto__ = GeneratorFunctionPrototype;
                    define(genFun, toStringTagSymbol, "GeneratorFunction");
                  }

                  genFun.prototype = Object.create(Gp);
                  return genFun;
                }; // Within the body of any async function, `await x` is transformed to
                // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
                // `hasOwn.call(value, "__await")` to determine if the yielded value is
                // meant to be awaited.


                exports.awrap = function (arg) {
                  return {
                    __await: arg
                  };
                };

                function AsyncIterator(generator, PromiseImpl) {
                  function invoke(method, arg, resolve, reject) {
                    var record = tryCatch(generator[method], generator, arg);

                    if (record.type === "throw") {
                      reject(record.arg);
                    } else {
                      var result = record.arg;
                      var value = result.value;

                      if (value && _typeof$1(value) === "object" && hasOwn.call(value, "__await")) {
                        return PromiseImpl.resolve(value.__await).then(function (value) {
                          invoke("next", value, resolve, reject);
                        }, function (err) {
                          invoke("throw", err, resolve, reject);
                        });
                      }

                      return PromiseImpl.resolve(value).then(function (unwrapped) {
                        // When a yielded Promise is resolved, its final value becomes
                        // the .value of the Promise<{value,done}> result for the
                        // current iteration.
                        result.value = unwrapped;
                        resolve(result);
                      }, function (error) {
                        // If a rejected Promise was yielded, throw the rejection back
                        // into the async generator function so it can be handled there.
                        return invoke("throw", error, resolve, reject);
                      });
                    }
                  }

                  var previousPromise;

                  function enqueue(method, arg) {
                    function callInvokeWithMethodAndArg() {
                      return new PromiseImpl(function (resolve, reject) {
                        invoke(method, arg, resolve, reject);
                      });
                    }

                    return previousPromise = // If enqueue has been called before, then we want to wait until
                    // all previous Promises have been resolved before calling invoke,
                    // so that results are always delivered in the correct order. If
                    // enqueue has not been called before, then it is important to
                    // call invoke immediately, without waiting on a callback to fire,
                    // so that the async generator function has the opportunity to do
                    // any necessary setup in a predictable way. This predictability
                    // is why the Promise constructor synchronously invokes its
                    // executor callback, and why async functions synchronously
                    // execute code before the first await. Since we implement simple
                    // async functions in terms of async generators, it is especially
                    // important to get this right, even though it requires care.
                    previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
                    // invocations of the iterator.
                    callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
                  } // Define the unified helper method that is used to implement .next,
                  // .throw, and .return (see defineIteratorMethods).


                  this._invoke = enqueue;
                }

                defineIteratorMethods(AsyncIterator.prototype);
                define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
                  return this;
                });
                exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
                // AsyncIterator objects; they just return a Promise for the value of
                // the final result produced by the iterator.

                exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
                  if (PromiseImpl === void 0) PromiseImpl = Promise;
                  var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
                  return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
                  : iter.next().then(function (result) {
                    return result.done ? result.value : iter.next();
                  });
                };

                function makeInvokeMethod(innerFn, self, context) {
                  var state = GenStateSuspendedStart;
                  return function invoke(method, arg) {
                    if (state === GenStateExecuting) {
                      throw new Error("Generator is already running");
                    }

                    if (state === GenStateCompleted) {
                      if (method === "throw") {
                        throw arg;
                      } // Be forgiving, per 25.3.3.3.3 of the spec:
                      // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


                      return doneResult();
                    }

                    context.method = method;
                    context.arg = arg;

                    while (true) {
                      var delegate = context.delegate;

                      if (delegate) {
                        var delegateResult = maybeInvokeDelegate(delegate, context);

                        if (delegateResult) {
                          if (delegateResult === ContinueSentinel) continue;
                          return delegateResult;
                        }
                      }

                      if (context.method === "next") {
                        // Setting context._sent for legacy support of Babel's
                        // function.sent implementation.
                        context.sent = context._sent = context.arg;
                      } else if (context.method === "throw") {
                        if (state === GenStateSuspendedStart) {
                          state = GenStateCompleted;
                          throw context.arg;
                        }

                        context.dispatchException(context.arg);
                      } else if (context.method === "return") {
                        context.abrupt("return", context.arg);
                      }

                      state = GenStateExecuting;
                      var record = tryCatch(innerFn, self, context);

                      if (record.type === "normal") {
                        // If an exception is thrown from innerFn, we leave state ===
                        // GenStateExecuting and loop back for another invocation.
                        state = context.done ? GenStateCompleted : GenStateSuspendedYield;

                        if (record.arg === ContinueSentinel) {
                          continue;
                        }

                        return {
                          value: record.arg,
                          done: context.done
                        };
                      } else if (record.type === "throw") {
                        state = GenStateCompleted; // Dispatch the exception by looping back around to the
                        // context.dispatchException(context.arg) call above.

                        context.method = "throw";
                        context.arg = record.arg;
                      }
                    }
                  };
                } // Call delegate.iterator[context.method](context.arg) and handle the
                // result, either by returning a { value, done } result from the
                // delegate iterator, or by modifying context.method and context.arg,
                // setting context.delegate to null, and returning the ContinueSentinel.


                function maybeInvokeDelegate(delegate, context) {
                  var method = delegate.iterator[context.method];

                  if (method === undefined$1) {
                    // A .throw or .return when the delegate iterator has no .throw
                    // method always terminates the yield* loop.
                    context.delegate = null;

                    if (context.method === "throw") {
                      // Note: ["return"] must be used for ES3 parsing compatibility.
                      if (delegate.iterator["return"]) {
                        // If the delegate iterator has a return method, give it a
                        // chance to clean up.
                        context.method = "return";
                        context.arg = undefined$1;
                        maybeInvokeDelegate(delegate, context);

                        if (context.method === "throw") {
                          // If maybeInvokeDelegate(context) changed context.method from
                          // "return" to "throw", let that override the TypeError below.
                          return ContinueSentinel;
                        }
                      }

                      context.method = "throw";
                      context.arg = new TypeError("The iterator does not provide a 'throw' method");
                    }

                    return ContinueSentinel;
                  }

                  var record = tryCatch(method, delegate.iterator, context.arg);

                  if (record.type === "throw") {
                    context.method = "throw";
                    context.arg = record.arg;
                    context.delegate = null;
                    return ContinueSentinel;
                  }

                  var info = record.arg;

                  if (!info) {
                    context.method = "throw";
                    context.arg = new TypeError("iterator result is not an object");
                    context.delegate = null;
                    return ContinueSentinel;
                  }

                  if (info.done) {
                    // Assign the result of the finished delegate to the temporary
                    // variable specified by delegate.resultName (see delegateYield).
                    context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

                    context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
                    // exception, let the outer generator proceed normally. If
                    // context.method was "next", forget context.arg since it has been
                    // "consumed" by the delegate iterator. If context.method was
                    // "return", allow the original .return call to continue in the
                    // outer generator.

                    if (context.method !== "return") {
                      context.method = "next";
                      context.arg = undefined$1;
                    }
                  } else {
                    // Re-yield the result returned by the delegate method.
                    return info;
                  } // The delegate iterator is finished, so forget it and continue with
                  // the outer generator.


                  context.delegate = null;
                  return ContinueSentinel;
                } // Define Generator.prototype.{next,throw,return} in terms of the
                // unified ._invoke helper method.


                defineIteratorMethods(Gp);
                define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
                // @@iterator function is called on it. Some browsers' implementations of the
                // iterator prototype chain incorrectly implement this, causing the Generator
                // object to not be returned from this call. This ensures that doesn't happen.
                // See https://github.com/facebook/regenerator/issues/274 for more details.

                define(Gp, iteratorSymbol, function () {
                  return this;
                });
                define(Gp, "toString", function () {
                  return "[object Generator]";
                });

                function pushTryEntry(locs) {
                  var entry = {
                    tryLoc: locs[0]
                  };

                  if (1 in locs) {
                    entry.catchLoc = locs[1];
                  }

                  if (2 in locs) {
                    entry.finallyLoc = locs[2];
                    entry.afterLoc = locs[3];
                  }

                  this.tryEntries.push(entry);
                }

                function resetTryEntry(entry) {
                  var record = entry.completion || {};
                  record.type = "normal";
                  delete record.arg;
                  entry.completion = record;
                }

                function Context(tryLocsList) {
                  // The root entry object (effectively a try statement without a catch
                  // or a finally block) gives us a place to store values thrown from
                  // locations where there is no enclosing try statement.
                  this.tryEntries = [{
                    tryLoc: "root"
                  }];
                  tryLocsList.forEach(pushTryEntry, this);
                  this.reset(true);
                }

                exports.keys = function (object) {
                  var keys = [];

                  for (var key in object) {
                    keys.push(key);
                  }

                  keys.reverse(); // Rather than returning an object with a next method, we keep
                  // things simple and return the next function itself.

                  return function next() {
                    while (keys.length) {
                      var key = keys.pop();

                      if (key in object) {
                        next.value = key;
                        next.done = false;
                        return next;
                      }
                    } // To avoid creating an additional object, we just hang the .value
                    // and .done properties off the next function object itself. This
                    // also ensures that the minifier will not anonymize the function.


                    next.done = true;
                    return next;
                  };
                };

                function values(iterable) {
                  if (iterable) {
                    var iteratorMethod = iterable[iteratorSymbol];

                    if (iteratorMethod) {
                      return iteratorMethod.call(iterable);
                    }

                    if (typeof iterable.next === "function") {
                      return iterable;
                    }

                    if (!isNaN(iterable.length)) {
                      var i = -1,
                          next = function next() {
                        while (++i < iterable.length) {
                          if (hasOwn.call(iterable, i)) {
                            next.value = iterable[i];
                            next.done = false;
                            return next;
                          }
                        }

                        next.value = undefined$1;
                        next.done = true;
                        return next;
                      };

                      return next.next = next;
                    }
                  } // Return an iterator with no values.


                  return {
                    next: doneResult
                  };
                }

                exports.values = values;

                function doneResult() {
                  return {
                    value: undefined$1,
                    done: true
                  };
                }

                Context.prototype = {
                  constructor: Context,
                  reset: function reset(skipTempReset) {
                    this.prev = 0;
                    this.next = 0; // Resetting context._sent for legacy support of Babel's
                    // function.sent implementation.

                    this.sent = this._sent = undefined$1;
                    this.done = false;
                    this.delegate = null;
                    this.method = "next";
                    this.arg = undefined$1;
                    this.tryEntries.forEach(resetTryEntry);

                    if (!skipTempReset) {
                      for (var name in this) {
                        // Not sure about the optimal order of these conditions:
                        if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                          this[name] = undefined$1;
                        }
                      }
                    }
                  },
                  stop: function stop() {
                    this.done = true;
                    var rootEntry = this.tryEntries[0];
                    var rootRecord = rootEntry.completion;

                    if (rootRecord.type === "throw") {
                      throw rootRecord.arg;
                    }

                    return this.rval;
                  },
                  dispatchException: function dispatchException(exception) {
                    if (this.done) {
                      throw exception;
                    }

                    var context = this;

                    function handle(loc, caught) {
                      record.type = "throw";
                      record.arg = exception;
                      context.next = loc;

                      if (caught) {
                        // If the dispatched exception was caught by a catch block,
                        // then let that catch block handle the exception normally.
                        context.method = "next";
                        context.arg = undefined$1;
                      }

                      return !!caught;
                    }

                    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                      var entry = this.tryEntries[i];
                      var record = entry.completion;

                      if (entry.tryLoc === "root") {
                        // Exception thrown outside of any try block that could handle
                        // it, so set the completion value of the entire function to
                        // throw the exception.
                        return handle("end");
                      }

                      if (entry.tryLoc <= this.prev) {
                        var hasCatch = hasOwn.call(entry, "catchLoc");
                        var hasFinally = hasOwn.call(entry, "finallyLoc");

                        if (hasCatch && hasFinally) {
                          if (this.prev < entry.catchLoc) {
                            return handle(entry.catchLoc, true);
                          } else if (this.prev < entry.finallyLoc) {
                            return handle(entry.finallyLoc);
                          }
                        } else if (hasCatch) {
                          if (this.prev < entry.catchLoc) {
                            return handle(entry.catchLoc, true);
                          }
                        } else if (hasFinally) {
                          if (this.prev < entry.finallyLoc) {
                            return handle(entry.finallyLoc);
                          }
                        } else {
                          throw new Error("try statement without catch or finally");
                        }
                      }
                    }
                  },
                  abrupt: function abrupt(type, arg) {
                    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                      var entry = this.tryEntries[i];

                      if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                        var finallyEntry = entry;
                        break;
                      }
                    }

                    if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
                      // Ignore the finally entry if control is not jumping to a
                      // location outside the try/catch block.
                      finallyEntry = null;
                    }

                    var record = finallyEntry ? finallyEntry.completion : {};
                    record.type = type;
                    record.arg = arg;

                    if (finallyEntry) {
                      this.method = "next";
                      this.next = finallyEntry.finallyLoc;
                      return ContinueSentinel;
                    }

                    return this.complete(record);
                  },
                  complete: function complete(record, afterLoc) {
                    if (record.type === "throw") {
                      throw record.arg;
                    }

                    if (record.type === "break" || record.type === "continue") {
                      this.next = record.arg;
                    } else if (record.type === "return") {
                      this.rval = this.arg = record.arg;
                      this.method = "return";
                      this.next = "end";
                    } else if (record.type === "normal" && afterLoc) {
                      this.next = afterLoc;
                    }

                    return ContinueSentinel;
                  },
                  finish: function finish(finallyLoc) {
                    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                      var entry = this.tryEntries[i];

                      if (entry.finallyLoc === finallyLoc) {
                        this.complete(entry.completion, entry.afterLoc);
                        resetTryEntry(entry);
                        return ContinueSentinel;
                      }
                    }
                  },
                  "catch": function _catch(tryLoc) {
                    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                      var entry = this.tryEntries[i];

                      if (entry.tryLoc === tryLoc) {
                        var record = entry.completion;

                        if (record.type === "throw") {
                          var thrown = record.arg;
                          resetTryEntry(entry);
                        }

                        return thrown;
                      }
                    } // The context.catch method must only be called with a location
                    // argument that corresponds to a known catch block.


                    throw new Error("illegal catch attempt");
                  },
                  delegateYield: function delegateYield(iterable, resultName, nextLoc) {
                    this.delegate = {
                      iterator: values(iterable),
                      resultName: resultName,
                      nextLoc: nextLoc
                    };

                    if (this.method === "next") {
                      // Deliberately forget the last sent value so that we don't
                      // accidentally pass it on to the delegate.
                      this.arg = undefined$1;
                    }

                    return ContinueSentinel;
                  }
                }; // Regardless of whether this script is executing as a CommonJS module
                // or not, return the runtime object so that we can declare the variable
                // regeneratorRuntime in the outer scope, which allows this module to be
                // injected easily by `bin/regenerator --include-runtime script.js`.

                return exports;
              }( // If this script is executing as a CommonJS module, use module.exports
              // as the regeneratorRuntime namespace. Otherwise create a new empty
              // object. Either way, the resulting object will be used to initialize
              // the regeneratorRuntime variable at the top of this file.
              module.exports );

              try {
                regeneratorRuntime = runtime;
              } catch (accidentalStrictMode) {
                // This module should not be running in strict mode, so the above
                // assignment should always work unless something is misconfigured. Just
                // in case runtime.js accidentally runs in strict mode, in modern engines
                // we can explicitly access globalThis. In older engines we can escape
                // strict mode using a global Function call. This could conceivably fail
                // if a Content Security Policy forbids using Function, but in that case
                // the proper solution is to fix the accidental strict mode problem. If
                // you've misconfigured your bundler to force strict mode and applied a
                // CSP to forbid Function, and you're not willing to fix either of those
                // problems, please detail your unique predicament in a GitHub issue.
                if ((typeof globalThis === "undefined" ? "undefined" : _typeof$1(globalThis)) === "object") {
                  globalThis.regeneratorRuntime = runtime;
                } else {
                  Function("r", "regeneratorRuntime = r")(runtime);
                }
              }
            })(runtime);

            var regenerator = runtime.exports;

            /**
             * @param {MinterApiInstance} apiInstance
             * @return {function(*): (Promise<CommissionPriceData>)}
             */
            function GetCommissionPrice(apiInstance) {
              /**
               * Get nonce for new transaction: last transaction number + 1
               * @param {boolean} mapData
               * @param {import('axios').AxiosRequestConfig} [axiosOptions]
               * @return {Promise<CommissionPriceData>}
               */
              return function getCommissionPrice(axiosOptions) {
                return apiInstance.get('price_commissions', axiosOptions).then(function (response) {
                  return response.data;
                });
              };
            }

            /**
             * @param {MinterApiInstance} apiInstance
             * @return {function(coin0: number|string, coin1: number|string, axiosOptions: AxiosRequestConfig=): (Promise<PoolInfo>)}
             */
            function GetPoolInfo(apiInstance) {
              return getPoolInfo;
              /**
               * Get nonce for new transaction: last transaction number + 1
               * @param {number|string} coin0 - first coin id
               * @param {number|string} coin1 - second coin id
               * @param {import('axios').AxiosRequestConfig} [axiosOptions]
               * @return {Promise<PoolInfo>}
               */

              function getPoolInfo(coin0, coin1, axiosOptions) {
                return apiInstance.get("swap_pool/".concat(coin0, "/").concat(coin1), axiosOptions).then(function (response) {
                  return response.data;
                });
              }
            }
            /**
             * @typedef {Object} PoolInfo
             * @property {string|number} amount0
             * @property {string|number} amount1
             * @property {string|number} liquidity
             */

            function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

            function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
            Big.RM = 2;
            /**
             *
             * @param {MinterApiInstance} apiInstance
             * @return {function((TxParams|string), {direct?: boolean}=, AxiosRequestConfig=): (Promise<{commission: (number|string), baseCoinCommission: (number|string), priceCoinCommission: (number|string), commissionPriceData: CommissionPriceData}>|Promise<{commission: (number|string)}>)}
             */

            function EstimateTxCommission(apiInstance) {
              var getCommissionPrice = GetCommissionPrice(apiInstance);
              var getPoolInfo = GetPoolInfo(apiInstance);
              var getCoinId = GetCoinId(apiInstance);
              var estimateCoinBuy = EstimateCoinBuy(apiInstance);
              return estimateTxCommission;
              /**
               * @param {TxParams|string} txParams
               * @param {Object} [options]
               * @param {boolean} [options.direct = true]
               * @param {import('axios').AxiosRequestConfig} [axiosOptions]
               * @return {Promise<{commission: (number|string), baseCoinCommission: (number|string), priceCoinCommission: (number|string), commissionPriceData: CommissionPriceData}>|Promise<{commission: (number|string)}>}
               */

              function estimateTxCommission(txParams) {
                var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                    _ref$direct = _ref.direct,
                    direct = _ref$direct === void 0 ? true : _ref$direct;

                var axiosOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
                var paramsPromise;

                if (_typeof$1(txParams) === 'object') {
                  paramsPromise = getCoinId(txParams.gasCoin || 0, txParams.chainId, axiosOptions).then(function (coinId) {
                    validateUint(coinId, 'gasCoin');
                    return _objectSpread(_objectSpread({}, txParams), {}, {
                      gasCoin: coinId
                    });
                  });
                } else {
                  paramsPromise = Promise.resolve(txParams);
                }

                return paramsPromise.then(function (updatedTxParams) {
                  if (direct) {
                    return estimateFeeDirect(updatedTxParams, axiosOptions);
                  } else {
                    return estimateFeeCalculate(updatedTxParams, axiosOptions);
                  }
                });
              }
              /**
               * @param {string|TxParams} txParams
               * @param {import('axios').AxiosRequestConfig} [axiosOptions]
               * @return {Promise<{commission: number|string}>}
               */


              function estimateFeeDirect(txParams, axiosOptions) {
                if (!txParams) {
                  return Promise.reject(new Error('Transaction not specified'));
                }

                var tx;

                if (typeof txParams === 'string') {
                  tx = txParams;
                } else {
                  txParams = _objectSpread({
                    chainId: 0,
                    nonce: 0,
                    gasPrice: 1,
                    signatureType: 1
                  }, txParams);
                  tx = prepareTx(txParams).serializeToString();
                }

                return apiInstance.get("estimate_tx_commission/".concat(tx), axiosOptions).then(function (response) {
                  response.data.commission = convertFromPip(response.data.commission);
                  return response.data;
                });
              }
              /**
               * @param {TxParams} txParams
               * @param {import('axios').AxiosRequestConfig} [axiosOptions]
               * @return {Promise<{commission: number|string, baseCoinCommission: number|string, priceCoinCommission: number|string, commissionPriceData: CommissionPriceData}>}
               */


              function estimateFeeCalculate(_x, _x2) {
                return _estimateFeeCalculate.apply(this, arguments);
              }
              /**
               * @param {number|string} coinIdOrSymbol
               * @param {number|string} baseCoinAmount
               * @param {import('axios').AxiosRequestConfig} axiosOptions
               * @return {Promise<{amount: string, baseCoinAmount: string}>}
               */


              function _estimateFeeCalculate() {
                _estimateFeeCalculate = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(txParams, axiosOptions) {
                  var commissionPriceData, feePrice, priceCoinFee, baseCoinFee, priceCoinPool, fee, _yield$getEstimation, amount;

                  return regenerator.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          if (!(!txParams || _typeof$1(txParams) !== 'object')) {
                            _context.next = 2;
                            break;
                          }

                          return _context.abrupt("return", Promise.reject(new TypeError('Invalid txParams')));

                        case 2:
                          _context.next = 4;
                          return getCommissionPrice(axiosOptions);

                        case 4:
                          commissionPriceData = _context.sent;
                          // priceCoin
                          feePrice = new FeePrice(commissionPriceData);
                          priceCoinFee = feePrice.getFeeValue(txParams.type, getFeePriceOptionsFromTxParams(txParams)); // baseCoin

                          if (!isPriceCoinSameAsBaseCoin(commissionPriceData)) {
                            _context.next = 11;
                            break;
                          }

                          baseCoinFee = priceCoinFee;
                          _context.next = 15;
                          break;

                        case 11:
                          _context.next = 13;
                          return getPoolInfo(0, commissionPriceData.coin.id, axiosOptions);

                        case 13:
                          priceCoinPool = _context.sent;
                          baseCoinFee = getBaseCoinAmountFromPool(priceCoinFee, priceCoinPool);

                        case 15:
                          if (!isGasCoinSameAsBaseCoin(txParams.gasCoin)) {
                            _context.next = 19;
                            break;
                          }

                          fee = baseCoinFee;
                          _context.next = 24;
                          break;

                        case 19:
                          _context.next = 21;
                          return getEstimation(txParams.gasCoin, baseCoinFee, axiosOptions);

                        case 21:
                          _yield$getEstimation = _context.sent;
                          amount = _yield$getEstimation.amount;
                          fee = amount;

                        case 24:
                          return _context.abrupt("return", {
                            commission: fee,
                            baseCoinCommission: baseCoinFee,
                            priceCoinCommission: priceCoinFee,
                            commissionPriceData: commissionPriceData
                          });

                        case 25:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }));
                return _estimateFeeCalculate.apply(this, arguments);
              }

              function getEstimation(coinIdOrSymbol, baseCoinAmount, axiosOptions) {
                return estimateCoinBuy({
                  coinToSell: !isCoinId(coinIdOrSymbol) ? coinIdOrSymbol : undefined,
                  coinIdToSell: isCoinId(coinIdOrSymbol) ? coinIdOrSymbol : undefined,
                  valueToBuy: baseCoinAmount,
                  coinIdToBuy: 0,
                  swapFrom: 'optimal'
                }, axiosOptions).then(function (result) {
                  return {
                    amount: result.will_pay,
                    baseCoinAmount: baseCoinAmount
                  };
                });
              }
            }
            /**
             * @param {CommissionPriceData} commissionPriceData
             * @return {boolean}
             */

            function isPriceCoinSameAsBaseCoin(commissionPriceData) {
              return Number.parseInt(commissionPriceData === null || commissionPriceData === void 0 ? void 0 : commissionPriceData.coin.id, 10) === 0;
            }
            /**
             * @param {number|string} gasCoinId
             * @return {boolean}
             */


            function isGasCoinSameAsBaseCoin(gasCoinId) {
              return Number.parseInt(gasCoinId, 10) === 0;
            }
            /**
             *
             * @param {number|string} priceCoinAmount
             * @param {PoolInfo} pool
             * @return {string|number}
             */


            function getBaseCoinAmountFromPool(priceCoinAmount, pool) {
              // amount of base coin in pool
              var reserveBase = new Big(pool.amount0); // amount of price coin in pool

              var reservePrice = new Big(pool.amount1); // amount of price coin in pool

              var priceCoinAmountPip = new Big(convertToPip(priceCoinAmount)); // @see https://github.com/MinterTeam/minter-go-node/blob/6e44d5691c9df1a9c725d0f52c5921e8523c7f18/coreV2/state/swap/swap.go#L642
              // reserveBase - (reservePrice * reserveBase) / (priceCoinAmount * 0.998 + reservePrice)

              var result = reserveBase.minus(reservePrice.times(reserveBase).div(priceCoinAmountPip.times(0.998).plus(reservePrice))); // received amount from pool rounds down, spent amount to pool rounds up
              // round down

              result = result.round(undefined, 0);
              return convertFromPip(result);
            }
            /**
             * @param {TxParams} txParams
             * @return FeePriceOptions
             */


            function getFeePriceOptionsFromTxParams(txParams) {
              var _txParams$data;

              var txType = txParams.type;

              if (!txType) {
                throw new Error('Tx `type` not specified');
              }

              var isTickerType = txType === TX_TYPE.CREATE_COIN || txType === TX_TYPE.CREATE_TOKEN;
              var coinSymbol = isTickerType ? (_txParams$data = txParams.data) === null || _txParams$data === void 0 ? void 0 : _txParams$data.symbol : undefined;

              if (isTickerType && !coinSymbol) {
                throw new Error('`symbol` not specified for ticker creation tx');
              }

              var deltaItemCount;

              if (txType === TX_TYPE.BUY_SWAP_POOL || txType === TX_TYPE.SELL_SWAP_POOL || txType === TX_TYPE.SELL_ALL_SWAP_POOL) {
                var _txParams$data2;

                var coinCount = (_txParams$data2 = txParams.data) === null || _txParams$data2 === void 0 ? void 0 : _txParams$data2.coins.length;

                if (!coinCount) {
                  throw new Error('Invalid `coins` field in swap pool tx');
                } // count of pools


                deltaItemCount = coinCount - 1;
              }

              if (txType === TX_TYPE.MULTISEND) {
                var _txParams$data3; // count of recipients


                deltaItemCount = (_txParams$data3 = txParams.data) === null || _txParams$data3 === void 0 ? void 0 : _txParams$data3.list.length;

                if (!deltaItemCount) {
                  throw new Error('Invalid `list` field in multisend tx');
                }
              }

              return {
                payload: txParams.payload,
                coinSymbol: coinSymbol,
                deltaItemCount: deltaItemCount
              };
            }

            /**
             * @param {Object} [options]
             * @param {string} [options.apiType]
             * @param {string} [options.chainId]
             * @param {string} [options.baseURL]
             * @constructor
             */

            function Minter(options) {
              var apiInstance = new MinterApi(options);
              this.apiInstance = apiInstance;
              this.postTx = PostTx(apiInstance);
              this.postSignedTx = PostSignedTx(apiInstance);
              this.getNonce = GetNonce(apiInstance);
              this.ensureNonce = EnsureNonce(apiInstance);
              this.getCoinInfo = GetCoinInfo(apiInstance);
              this.getMinGasPrice = GetMinGasPrice(apiInstance);
              this.estimateCoinSell = EstimateCoinSell(apiInstance);
              this.estimateCoinSellAll = EstimateCoinSellAll(apiInstance);
              this.estimateCoinBuy = EstimateCoinBuy(apiInstance);
              this.estimateTxCommission = EstimateTxCommission(apiInstance);
              this.replaceCoinSymbol = ReplaceCoinSymbol(apiInstance);
              this.replaceCoinId = ReplaceCoinId(apiInstance);
              this.replaceCoinSymbolByPath = ReplaceCoinSymbolByPath(apiInstance);
              this.replaceCoinIdByPath = ReplaceCoinIdByPath(apiInstance);
              this.getCoinId = GetCoinId(apiInstance);
              this.getCoinSymbol = GetCoinSymbol(apiInstance);
              this.getPoolInfo = GetPoolInfo(apiInstance);
              this.getCommissionPrice = GetCommissionPrice(apiInstance);
            }

            var DEFAULT_LINK_HOST = 'https://bip.to';

            var Link = /*#__PURE__*/_createClass(function Link(data) {
              _classCallCheck(this, Link);

              data = data || {}; // Define Properties

              var fields = [{
                name: 'type',
                length: 1
              }, {
                name: 'data',
                alias: 'input'
              }, {
                name: 'payload',
                allowZero: true,
                "default": Buffer$i.from([])
              }, {
                name: 'nonce',
                length: 32,
                allowLess: true
              }, {
                name: 'gasPrice',
                length: 32,
                allowLess: true
              }, {
                name: 'gasCoin',
                length: 4,
                allowLess: true,
                allowNonBinaryArray: true,
                "default": []
              }];
              /**
               * Returns the rlp encoding of the transaction
               * @method serialize
               * @return {Buffer}
               * @memberof Transaction
               * @name serialize
               */
              // attached serialize

              definePropertiesNonBinary(this, fields, data);
            });
            /**
             * @typedef {Object} LinkParams
             * @property {number|string} [nonce]
             * @property {number|string} [gasPrice]
             * @property {number|string} [gasCoin]
             * @property {string|Buffer|TX_TYPE} type
             * @property {string|Buffer|TX_TYPE} [txType] - deprecated
             * @property {Buffer|Object|TxData} data
             * @property {Buffer} [txData] - deprecated
             * @property {string} [payload]
             * @property {string} [message] - deprecated
             * @property {string} [password]
             */

            /**
             * @param {LinkParams} txParams
             * @param {string} [linkHost]
             * @return {string}
             */


            function prepareLink() {
              var txParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
              var linkHost = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_LINK_HOST;
              var nonce = txParams.nonce,
                  gasPrice = txParams.gasPrice,
                  gasCoin = txParams.gasCoin,
                  type = txParams.type,
                  txType = txParams.txType,
                  data = txParams.data,
                  txData = txParams.txData,
                  password = txParams.password;
              var txProps = {
                nonce: nonce || nonce === 0 ? integerToHexString(nonce) : [],
                gasPrice: gasPrice || gasPrice === 0 ? integerToHexString(gasPrice) : [],
                gasCoin: gasCoin || gasCoin === 0 ? integerToHexString(gasCoin) : [],
                type: type || txType,
                data: ensureBufferData(data || txData, type || txType)
              }; // eslint-disable-next-line unicorn/consistent-destructuring

              var payload = txParams.message || txParams.payload;

              if (payload) {
                if (typeof payload === 'string') {
                  payload = Buffer$i.from(payload, 'utf-8');
                }

                txProps.payload = payload;
              } // ensure no ending slash


              linkHost = linkHost.replace(/\/$/, ''); // ensure scheme

              if (linkHost.indexOf('://') === -1) {
                linkHost = "https://".concat(linkHost);
              }

              var tx = new Link(txProps);
              var result = "".concat(linkHost, "/tx/").concat(base64urlEncode(tx.serialize()));

              if (password) {
                result += "?p=".concat(base64urlEncode(toBuffer(password)));
              }

              return result;
            }
            /**
             * @param {string} url
             * @param {string} [address]
             * @param {string} [seedPhrase]
             * @param {string} [privateKey]
             * @param {boolean} [decodeCheck]
             * @return {TxParams}
             */

            function decodeLink(url) {
              var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                  address = _ref.address,
                  seedPhrase = _ref.seedPhrase,
                  privateKey = _ref.privateKey,
                  decodeCheck = _ref.decodeCheck;

              var txBase64 = url.replace(/^.*\/tx\//, '').replace(/\?.*$/, '');
              var txBytes = decode_1(base64urlDecode(txBase64));
              var passwordBase64 = url.search(/[?&]p=/) >= 0 ? url.replace(/^.*[?&]p=/, '') : '';
              var password = passwordBase64 ? Buffer$i.from(base64urlDecode(passwordBase64)) : '';
              var tx = new Link(txBytes);
              var txType = normalizeTxType(tx.type);

              if (txType === TX_TYPE.REDEEM_CHECK && password) {
                if (!seedPhrase && !privateKey && !address) {
                  throw new Error('address or seedPhrase or privateKey are required if link has password');
                } // get check from data


                var _TxDataRedeemCheck = new TxDataRedeemCheck(tx.data),
                    check = _TxDataRedeemCheck.check; // proof from password


                var _txData = new RedeemCheckTxData({
                  check: check
                }, {
                  password: password,
                  address: address,
                  seedPhrase: seedPhrase,
                  privateKey: privateKey
                }).serialize();

                tx.data = _txData;
              }

              var txData = decodeTxData(tx.type, tx.data, {
                decodeCheck: decodeCheck
              });
              return {
                nonce: tx.nonce.length > 0 ? bufferToInteger(tx.nonce) : undefined,
                gasPrice: tx.gasPrice.length > 0 ? bufferToInteger(tx.gasPrice) : undefined,
                // [] === undefined, <Buffer > === 0
                gasCoin: Array.isArray(tx.gasCoin) ? undefined : bufferToInteger(tx.gasCoin),
                type: txType,
                data: txData,
                payload: tx.payload.toString('utf-8')
              };
            }

            function base64urlEncode(byteArray) {
              return Buffer$i.from(byteArray).toString('base64').replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
            }

            function base64urlDecode(base64urlString) {
              var padModulus = base64urlString.length % 4;
              var padLength = padModulus ? 4 - padModulus : 0;
              var pad = Array.from({
                length: padLength
              }, function () {
                return '=';
              }).join('');
              return Buffer$i.from(base64urlString + pad, 'base64');
            }
            /**
             * toBuffer which supports UTF8 strings
             * @param value
             * @return {Buffer}
             */


            function toBuffer(value) {
              return typeof value === 'string' && !lib$1.isHexPrefixed(value) ? Buffer$i.from(value, 'utf8') : bytes.toBuffer(value);
            }

            exports.API_TYPE_GATE = API_TYPE_GATE;
            exports.API_TYPE_NODE = API_TYPE_NODE;
            exports.AddLimitOrderTxData = AddLimitOrderTxData;
            exports.AddLiquidityTxData = AddLiquidityTxData;
            exports.BurnTokenTxData = BurnTokenTxData;
            exports.BuyPoolTxData = BuyPoolTxData;
            exports.BuyTxData = BuyTxData;
            exports.CreateCoinTxData = CreateCoinTxData;
            exports.CreateMultisigTxData = CreateMultisigTxData;
            exports.CreatePoolTxData = CreatePoolTxData;
            exports.CreateTokenTxData = CreateTokenTxData;
            exports.DeclareCandidacyTxData = DeclareCandidacyTxData;
            exports.DelegateTxData = DelegateTxData;
            exports.ESTIMATE_SWAP_TYPE = ESTIMATE_SWAP_TYPE;
            exports.EditCandidateCommissionTxData = EditCandidateCommissionTxData;
            exports.EditCandidatePublicKeyTxData = EditCandidatePublicKeyTxData;
            exports.EditCandidateTxData = EditCandidateTxData;
            exports.EditMultisigTxData = EditMultisigTxData;
            exports.EditTickerOwnerTxData = EditTickerOwnerTxData;
            exports.EnsureNonce = EnsureNonce;
            exports.EstimateCoinBuy = EstimateCoinBuy;
            exports.EstimateCoinSell = EstimateCoinSell;
            exports.EstimateCoinSellAll = EstimateCoinSellAll;
            exports.EstimateTxCommission = EstimateTxCommission;
            exports.GetCoinId = GetCoinId;
            exports.GetCoinInfo = GetCoinInfo;
            exports.GetCoinSymbol = GetCoinSymbol;
            exports.GetMinGasPrice = GetMinGasPrice;
            exports.GetNonce = GetNonce;
            exports.MintTokenTxData = MintTokenTxData;
            exports.Minter = Minter;
            exports.MinterApi = MinterApi;
            exports.MoveStakeTxData = MoveStakeTxData;
            exports.MultisendTxData = MultisendTxData;
            exports.PostSignedTx = PostSignedTx;
            exports.PostTx = PostTx;
            exports.PriceVoteTxData = PriceVoteTxData;
            exports.RecreateCoinTxData = RecreateCoinTxData;
            exports.RecreateTokenTxData = RecreateTokenTxData;
            exports.RedeemCheckTxData = RedeemCheckTxData;
            exports.RemoveLimitOrderTxData = RemoveLimitOrderTxData;
            exports.RemoveLiquidityTxData = RemoveLiquidityTxData;
            exports.ReplaceCoinId = ReplaceCoinId;
            exports.ReplaceCoinIdByPath = ReplaceCoinIdByPath;
            exports.ReplaceCoinSymbol = ReplaceCoinSymbol;
            exports.ReplaceCoinSymbolByPath = ReplaceCoinSymbolByPath;
            exports.SellAllPoolTxData = SellAllPoolTxData;
            exports.SellAllTxData = SellAllTxData;
            exports.SellPoolTxData = SellPoolTxData;
            exports.SellTxData = SellTxData;
            exports.SendTxData = SendTxData;
            exports.SetCandidateOffTxData = SetCandidateOnTxData;
            exports.SetCandidateOnTxData = SetCandidateOnTxData;
            exports.SetHaltBlockTxData = VoteHaltBlockTxData;
            exports.TX_TYPE = TX_TYPE;
            exports.UnbondTxData = UnbondTxData;
            exports.VoteCommissionTxData = VoteCommissionTxData;
            exports.VoteUpdateTxData = VoteUpdateTxData;
            exports.decodeCheck = decodeCheck;
            exports.decodeLink = decodeLink;
            exports.decodeTx = decodeTx;
            exports["default"] = Minter;
            exports.getGasCoinFromCheck = getGasCoinFromCheck;
            exports.getTxData = getTxData;
            exports.issueCheck = issueCheck;
            exports.makeSignature = makeSignature;
            exports.prepareLink = prepareLink;
            exports.prepareSignedTx = prepareSignedTx;
            exports.prepareTx = prepareTx;

            Object.defineProperty(exports, '__esModule', { value: true });

}));
